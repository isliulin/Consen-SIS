/*
*********************************************************************************************************************** 
*                  Copyright(c) 北京康吉森技术有限公司 2015
*           Beijing Consen Technologies Co.,Ltd. All rights reserved.
*
*
*  项目名称    : 安全控制系统
*
*  模块名称    : 系统资源管理模块
*
*  文件名称    : SysCommon.h
*
*  功能简介    :
*
*  作者       : 李琦
*
*  创建日期    : 2016-02-24
*
*  版本信息    : V1.0
*
*  修订信息    : 无
*
***********************************************************************************************************************
*/

#ifndef SYS_COMMON_H_
#define SYS_COMMON_H_

/*
***********************************************************************************************************************
*                                包含头文件
***********************************************************************************************************************
*/
#include "inc/DataType.h"
#include "Srv/Sys/inc/CommSys.h"
#include "SysCfgFile.h"

/*
***********************************************************************************************************************
*                                宏定义
***********************************************************************************************************************
*/
#define CMBUS_COMM_INVALID          0xFFFF      /* CMBUS通讯无效状态 */
#define CMBUS_COMM_NORMAL           0x0000      /* CMBUS通讯正常 */
#define CMBUS_COMM_DETECT_MSG       0x0001      /* CMBUS通讯异常，向CM发送探测消息 */

#define RET_OK                      0           /* 公共返回值 ---OK             */
#define RET_FAIL                    -1          /* 公共返回值 ---fail           */

//#define MAX_CM_NUM                  (4U)

//#define MAX_FILE_NUM                (10)

#define MAX_FILE_NAME_LEN           (256U)   /* 文件名称最大字节数     */

#define HARDCODE_ONE                (1U)

#define BITMASK(n)                  (1U<<(n))

#ifndef MIN                                     /* Define MIN */
#define MIN(m,n)                    (((m) < (n)) ? (m) : (n))
#endif/* #ifndef MIN */

#ifndef MAX                                    /* Define MAX */
#define MAX(m,n)                    (((m) > (n)) ? (m) : (n))
#endif/* #ifndef MAX */

/* 文件校验错误 */
#define SYS_FILE_CHECK_ERR          (0x00000000U)
/* 文件校验无误 */
#define SYS_FILE_CHECK_OK           (0x00000001U)

#define CMP_EQUAL                   (0x00000000U)   /* compare equal 0 */
#define CMP_GREAT                   (0x00000001U)   /* compare great 1 */
#define CMP_LESS                    (0xFFFFFFFFU)   /* compare less -1 */

/* 系统第一次进行状态管理 */
#define SYS_FIRST_IN                (0x00000001U)
/* 系统非第一次进行状态管理 */
#define SYS_NOFIRST_IN              (0x00000000U)

#define BLANK_CHAR                   '\0'           /* BLANK_CHAR = '\0' = 0 */


/**********************************IEC工程涉及的宏定义*********************************/
/* 工程有效 */
#define SYS_PRJ_VALID               (0x01U)
/* 工程无效 */
#define SYS_PRJ_INVALID             (0x00U)
/* 工程已确认 */
#define SYS_PRJ_CONFIRM             (0x01U)
/* 工程未确认 */
#define SYS_PRJ_NOCONFIRM           (0x00U)
/* 工程已配置 */
#define SYS_PRJ_CONFIGURED          (0x01U)
/* 工程未配置 */
#define SYS_PRJ_NOCONFIGURED        (0x00U)
/* 配置过程中初始化工程数据区 */
#define SYS_PRJ_INITDATA            (0x01U)
/* 配置过程中不初始化工程数据区 */
#define SYS_PRJ_NOINITDATA          (0x00U)
/* 工程数据区需要同步 */
#define SYS_PRJ_SYNCDATA            (0x01U)
/* 工程数据区不需同步 */
#define SYS_PRJ_NOSYNCDATA          (0x00U)

#define FILE_HAS_CONFIG             (0x00000000)                /*文件已经被解析配置过*/
#define FILE_NOT_CONFIG             (0x000000aa)                /*文件没有被解析配置过*/
#define FILE_CONFIG_FLG_OFF         (0x00000000)                /*文件是否被配置过的标志在文件存储区的偏移*/
/*
***********************************************************************************************************************
*                                数据结构定义
***********************************************************************************************************************
*/
#pragma pack(1)
/* CM的槽号 */
typedef enum SysCMSlotTag
{
    SLOT3 = 0x03,
    SLOT4,
    SLOT5,
    SLOT6,
    SLOT7,
    SLOT8,
    SLOT9,
    SLOT10,
    SLOT11,
    SLOT12,
    SLOT13,
    SLOT14,
    SLOT15,
    NUM_OF_SLOT,
    INVALID_CM_SLOT
} CMSlot_t;

/* 网络通讯端口类型 */
typedef enum emNetworkPortTypeTag
{
    NET1 = 0x00,
    NET2,
    NUM_OF_NETWORK_PORT,
    INVALID_NETWORK_PORT
} NetworkPortType_t;

/* 网络通讯端口类型 */
typedef enum emSerialPortTypeTag
{
    COM1 = 0x00,
    COM2,
    COM3,
    COM4,
    NUM_OF_SERIAL_PORT,
    INVALID_SERIAL_PORT
} SerialPortType_t;

/* 系统校时 */
typedef enum
{
    AJUST_NO = 0x00000000U,                                /* 系统校时:未校时 */
    AJUST_HAS                                              /* 系统校时:已校时 */
}sys_ajust;



/* PM状态 */
typedef struct SysPMStateTag
{
    /* PM状态 */
    uint16_t usPMState[NUM_OF_PM];
} SysPMState_t;

/* CM状态 */
typedef struct SysCMStateTag
{
    /* CM状态 */
    uint16_t usCMState[NUM_OF_CM];
    /* 内部通讯状态 */
    uint16_t usInterCommState[NUM_OF_CM][NUM_OF_PM];
    /* 各通讯口的外部通讯状态 */
    uint16_t usExterCommState[NUM_OF_CM][NUM_OF_NETWORK_PORT];
} SysCMState_t;

/* CM配置表 */
typedef struct SysCMConfigTableTag
{
    /* 是否配置了该CM*/
    bool_t bValid[NUM_OF_CM];
    /* 逻辑号 */
    uint8_t ucLogicID[NUM_OF_CM];
    /* 槽号 */
    uint8_t ucSlotID[NUM_OF_CM];
} SysCMConfigTable_t;

/* CM状态数据块 */
typedef struct SysCMStateBlockTag
{
    /* 起始标识 */
    uint16_t usStartFlag;
    /* 数据长度  sizeof(SysState_t)*/
    uint16_t usLen;
    /* 系统状态 */
    SysCMState_t stCMState;
    /* 校验码 */
    uint32_t uiCrc32;
} SysCMStateBlock_t;

/* 系统状态 */
typedef struct SysStateTag
{
    /* PMA~C状态 */
    SysPMState_t stPMState;
    /* CM1~4状态 */
    SysCMState_t stCMState;
    /* CM配置表 */
    SysCMConfigTable_t stCMConfigTable;
} SysState_t;

/* 系统状态数据块 */
typedef struct SysStateBlockTag
{
    /* 起始标识 */
    uint16_t usStartFlag;
    /* 数据长度  sizeof(SysState_t)*/
    uint16_t usLen;
    /* 系统状态 */
    SysState_t stSysState;
    /* 校验码 */
    uint32_t uiCrc32;
} SysStateBlock_t;


/* 系统时间*/
typedef struct SysSystemTimeTag
{
    uint32_t uiSecond;      /*时间 s*/
    uint16_t usMiliSecond;  /*时间 ms*/
} SysSystemTime_t;

typedef struct SysCtrlTag
{

}SysCtrl_t;
#if 0
//typedef struct PrjInfoTag
//{
//    /* 工程文件是否有效 */
//    uint8_t ucIsValid;
//    /* 工程是否用户已确认 */
//    uint8_t ucIsConfirmed;
//    /* 工程是否已配置 */
//    uint8_t ucIsConfigured;
//    /* 工程数据区初始化标识 */
//    uint8_t ucDataInitFlag;
//    /* 工程数据区是否同步完成标志标识 */
//    uint8_t ucDataSyncFlag;
//    uint8_t ucReserved[3];
//    /* 工程ID */
//    uint32_t uiPrjID;
//    /* 工程主版本号 */
//    uint32_t uiMainVern;
//    /* 工程副版本号 */
//    uint32_t uiMinorVern;
//    /* 工程CRC （控制站配置信息文件的CRC） */
//    uint32_t uiPrjCRC;
//}PrjInfo_t;
#endif

#pragma pack()
/*
***********************************************************************************************************************
*                                全局函数声明
***********************************************************************************************************************
*/

/*
***********************************************************************************************************************
* 函数名称: SysInit
*
* 功能描述: 系统资源管理模块初始化
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
void SysInit(void);

/*
***********************************************************************************************************************
* 函数名称: SysGetPMState
*
* 功能描述: 获取指定PM的状态
*
* 输入参数: emPMID:指定PM的ID
*
* 输出参数: 无
*
* 返 回 值  : 指定PM的状态
*
* 注意事项: 无
***********************************************************************************************************************
*/
uint16_t SysGetPMState(PMController_t emPMID);

/*
***********************************************************************************************************************
* 函数名称: SysSetPMState
*
* 功能描述: 设置指定PM的状态
*
* 输入参数: emPMID:   指定PM的ID
*        usPMState:PM的状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetPMState(PMController_t emPMID, uint16_t usPMState);

/*
***********************************************************************************************************************
* 函数名称: SysGetSysCMState
*
* 功能描述: 获取所有CM的系统状态
*
* 输入参数: 无
*
* 输出参数: pstSysCMState: 指向所有CM的系统状态
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
void SysGetSysCMState(SysCMState_t *pstSysCMState);

/*
***********************************************************************************************************************
* 函数名称: SysGetSysState
*
* 功能描述: 获取系统状态
*
* 输入参数: 无
*
* 输出参数: pstSysState: 指向系统状态
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
void SysGetSysState(SysState_t *pstSysState);

/*
***********************************************************************************************************************
* 函数名称: SysGetCMState
*
* 功能描述: 获取指定CM的状态
*
* 输入参数: emCMID:指定CM的ID
*
* 输出参数: 无
*
* 返 回 值  : 指定CM的状态
*
* 注意事项: 无
***********************************************************************************************************************
*/
uint16_t SysGetCMState(CMController_t emCMID);

/*
***********************************************************************************************************************
* 函数名称: SysSetCMState
*
* 功能描述: 设置指定CM的状态
*
* 输入参数: emCMID:   指定CM的ID
*        usCMState:CM的状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetCMState(CMController_t emCMID, uint16_t usCMState);

/*
***********************************************************************************************************************
* 函数名称: SysSetCMSysState
*
* 功能描述: 设置CM的状态
*
* 输入参数: emCMID:   指定CM的ID
*        usCMState:CM的状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetCMSysState(SysCMState_t *pstCMSysState);

/*
***********************************************************************************************************************
* 函数名称: SysSetSysState
*
* 功能描述: 设置系统的状态
*
* 输入参数: pstSysState: 系统状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetSysState(SysState_t *pstSysState);

/*
***********************************************************************************************************************
* 函数名称: SysGetCMBusCommState
*
* 功能描述: 获取指定CM与指定PM的内部通讯状态
*
* 输入参数: emCMID:指定CM的ID
*        emPMID:指定PM的ID
*
* 输出参数: 无
*
* 返 回 值  : 指定CM与指定PM的内部通讯状态
*
* 注意事项: 无
***********************************************************************************************************************
*/
uint16_t SysGetCMBusCommState(CMController_t emCMID, PMController_t emPMID);

/*
***********************************************************************************************************************
* 函数名称: SysSetCMBusCommState
*
* 功能描述: 设置指定CM与指定PM的内部通讯状态
*
* 输入参数: emCMID:指定CM的ID
*        emPMID:指定PM的ID
*        usInterState:内部通讯状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetCMBusCommState(CMController_t emCMID, PMController_t emPMID, uint16_t usInterState);

/*
***********************************************************************************************************************
* 函数名称: SysGetLocalPMID
*
* 功能描述: 获取本地PM的ID
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 本地PM的ID
*
* 注意事项: 无
***********************************************************************************************************************
*/
//PMController_t SysGetLocalPMID(void);

/*
***********************************************************************************************************************
* 函数名称: SysGetLocalCMBusCommState
*
* 功能描述: 获取本PM与指定CM的内部通讯状态
*
* 输入参数: emCMID:指定CM的ID
*
* 输出参数: 无
*
* 返 回 值  : 本CM与指定PM的内部通讯状态
*
* 注意事项: 无
***********************************************************************************************************************
*/
uint16_t SysGetLocalCMBusCommState(CMController_t emCMID);

/*
***********************************************************************************************************************
* 函数名称: SysSetLocalCMBusCommState
*
* 功能描述: 设置本PM与指定CM的内部通讯状态
*
* 输入参数: emCMID:指定CM的ID
*        usInterState:内部通讯状态
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetLocalCMBusCommState(CMController_t emCMID, uint16_t usInterState);

/*
***********************************************************************************************************************
* 函数名称: SysGetSystemTime
*
* 功能描述: 获取系统时间
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 系统时间
*
* 注意事项: 无
***********************************************************************************************************************
*/
SysSystemTime_t SysGetSystemTime(void);

/*
***********************************************************************************************************************
* 函数名称: SysSetSystemTime
*
* 功能描述: 设置系统时间
*
* 输入参数: stSysTime: 系统时间
*
* 输出参数: 无
*
* 返 回 值  : 设置成功或失败
*
* 注意事项: 无
***********************************************************************************************************************
*/
bool_t SysSetSystemTime(SysSystemTime_t *pstSysTime);

/*
***********************************************************************************************************************
* 函数名称: SysCMConfigTableInit
*
* 功能描述: 设置CM逻辑号与槽号的对应关系
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
void SysCMConfigTableInit(void);

/*
***********************************************************************************************************************
* 函数名称: SysUpdateCMConfigTable
*
* 功能描述: 增量下装后，更新CM逻辑号与槽号的对应关系
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
void SysUpdateCMConfigTable(void);

/*
***********************************************************************************************************************
* 函数名称: SysCMLogicIDToSLotID
*
* 功能描述: 逻辑号转槽号
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
CMSlot_t SysCMLogicIDToSLotID(CMController_t emCMID);




/*
***********************************************************************************************************************
* 函数名称: SysCheckAllFile
*
* 功能描述: 校验所有文件的完整性。
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
uint32_t SysCheckAllFile(void);

/*
***********************************************************************************************************************
* 函数名称: SysGetWorkStatus
*
* 功能描述: 获取PM工作状态（RUN、OFFLINE、STANDBY、STOP）。
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
//work_status_t SysGetWorkStatus(PMController_t emPMId );
/*
***********************************************************************************************************************
* 函数名称: SysGetCfgFileAllTable
*
* 功能描述: 获取上传CM的完整配置文件表。
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
SysCfgFileTable_t* SysGetCfgFileAllTable(void);
/*
***********************************************************************************************************************
* 函数名称: SysGetCfgFileIncreTable
*
* 功能描述: 获取上传CM的增量配置文件表。
*
* 输入参数: 无
*
* 输出参数: 无
*
* 返 回 值  : 无
*
* 注意事项: 无
***********************************************************************************************************************
*/
SysCfgFileTable_t* SysGetCfgFileIncreTable(void);

#endif /* SYS_COMMON_H_ */

/*
***********************************************************************************************************************
                                 文件结束
***********************************************************************************************************************
*/

