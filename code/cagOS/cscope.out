cscope 15 /os_dev/workspace/test/ezio/temp/os2/Release_DVD/Source/PM/cagOS -q 0000006533 0000735092
	@arch/bALib.S

40 
	#_ASMLANGUAGE


	)

41 
	~<libc/ˇgboŸ.h
>

42 
	~<c⁄fig.h
>

43 
	~<µc/toﬁPpc.h
>

44 
	~<µc/¨chPpc.h
>

45 
	~<µc/asmPpc.h
>

47 #i‚def 
_CAG_PORTABLE_bLib


51 
	$FUNC_EXPORT
(
bc›y
)

52 
	$FUNC_EXPORT
(
bc›yByãs
)

53 
	$FUNC_EXPORT
(
bc›yW‹ds
)

54 
	$FUNC_EXPORT
(
bc›yL⁄gs
)

55 
	$FUNC_EXPORT
(
bfûl
)

56 
	$FUNC_EXPORT
(
bfûlByãs
)

59 #i‚def 
_CAG_PORTABLE_swab


60 
	$FUNC_EXPORT
(
swab
)

63 
_CAG_TEXT_SEG_START


65 #i‚de‡
_CAG_PORTABLE_bLib


94 
	$FUNC_LABEL
(
bc›y
)

96 
cmpwi
 
p2
,0

97 
bÀÃ


98 
cm∂w
 
p0
,
p1


99 
beqÃ


100 
cmpwi
 
¸6
,
p2
,8

101 
bgt
 
bcfwd


105 
add
 
p0
,p0,
p2


106 
add
 
p1
,p1,
p2


107 
b…
 
¸6
,
b¸BC›y


109 
™di
. 
r11
,
p0
,3

110 
™di
. 
r12
,
p1
,3

111 
x‹
. 
p5
,
r11
,
r12


115 
beq
 
b¸L1


116 
cmpwi
 
p5
,2

117 
beq
 
b¸H1


118 
b
 
b¸BC›y


122 
b¸L1
: 
cmpwi
 
r11
,0

123 
beq
 
b¸L3


127 
mt˘r
 
r11


129 
b¸L2
: 
lbzu
 
p4
,-1(
p0
)

130 
addi
 
p2
,p2,-1

131 
°bu
 
p4
,-1(
p1
)

132 
bdnz
 
b¸L2


134 
b¸L3
: 
™di
. 
p3
,
p2
,3

135 
§wi
 
p2
,p2,2

137 
b¸LC›y
:

148 
mt˘r
 
p2


150 
b¸LGO
: 
lwzu
 
p4
,-4(
p0
)

151 
°wu
 
p4
,-4(
p1
)

152 
bdnz
 
b¸LGO


154 
‹
. 
p2
,
p3
,p3

155 
beqÃ


157 
b¸BC›y
:

167 
mt˘r
 
p2


169 
b¸BGO
: 
lbzu
 
p4
,-1(
p0
)

170 
°bu
 
p4
,-1(
p1
)

171 
bdnz
 
b¸BGO


173 
bÃ


177 
b¸H1
: 
™di
. 
r11
,r11,1

178 
beq
 
b¸H2


182 
lbzu
 
p4
,-1(
p0
)

183 
addi
 
p2
,p2,-1

184 
°bu
 
p4
,-1(
p1
)

186 
b¸H2
: 
™di
. 
p3
,
p2
,1

187 
§wi
 
p2
,p2,1

189 
b¸HC›y
:

200 
mt˘r
 
p2


202 
b¸HGO
: 
lhzu
 
p4
,-2(
p0
)

203 
°hu
 
p4
,-2(
p1
)

204 
bdnz
 
b¸HGO


206 
cm∂wi
 
p3
,0

207 
beqÃ


211 
lbz
 
p4
,-1(
p0
)

212 
°b
 
p4
,-1(
p1
)

213 
bÃ


217 
bcfwd
: 
b…
 
¸6
,
bcfBC›y


219 
™di
. 
r11
,
p0
,3

220 
™di
. 
r12
,
p1
,3

221 
x‹
. 
p5
,
r11
,
r12


225 
beq
 
bcfL1


226 
cmpwi
 
p5
,2

227 
beq
 
bcfH1


228 
b
 
bcfBC›y


232 
bcfL1
: 
cmpwi
 
r11
,0

233 
beq
 
bcfL3


237 
bcfL2
: 
lbzu
 
p4
,0(
p0
)

238 
addi
 
p2
,p2,-1

239 
addi
 
r11
,r11,1

240 
°bu
 
p4
,0(
p1
)

241 
addi
 
p0
,p0,1

242 
addi
 
p1
,p1,1

243 
cmpwi
 
r11
,4

244 
b√
 
bcfL2


246 
bcfL3
: 
™di
. 
p3
,
p2
,3

247 
§wi
 
p2
,p2,2

249 
bcfLC›y
:

260 
addi
 
p0
,p0,-4

261 
addi
 
p1
,p1,-4

262 
mt˘r
 
p2


264 
bcfLGO
: 
lwzu
 
p4
,4(
p0
)

265 
°wu
 
p4
,4(
p1
)

266 
bdnz
 
bcfLGO


268 
‹
. 
p2
,
p3
,p3

269 
beqÃ


270 
addi
 
p0
,p0,4

271 
addi
 
p1
,p1,4

273 
bcfBC›y
:

283 
addi
 
p0
,p0,-1

284 
addi
 
p1
,p1,-1

285 
mt˘r
 
p2


287 
bcfBGO
: 
lbzu
 
p4
,1(
p0
)

288 
°bu
 
p4
,1(
p1
)

289 
bdnz
 
bcfBGO


291 
bÃ


295 
bcfH1
: 
™di
. 
r11
,r11,1

296 
beq
 
bcfH2


300 
lbzu
 
p4
,0(
p0
)

301 
addi
 
p2
,p2,-1

302 
°bu
 
p4
,0(
p1
)

303 
addi
 
p0
,p0,1

304 
addi
 
p1
,p1,1

306 
bcfH2
: 
™di
. 
p3
,
p2
,1

307 
§wi
 
p2
,p2,1

309 
bcfHC›y
:

320 
addi
 
p0
,p0,-2

321 
addi
 
p1
,p1,-2

322 
mt˘r
 
p2


324 
bcfHGO
: 
lhzu
 
p4
,2(
p0
)

325 
°hu
 
p4
,2(
p1
)

326 
bdnz
 
bcfHGO


328 
cm∂wi
 
p3
,0

329 
beqÃ


333 
lbz
 
p4
,2(
p0
)

334 
°b
 
p4
,2(
p1
)

335 
bÃ


361 
	$FUNC_LABEL
(
bc›yByãs
)

363 
cmpwi
 
p2
,0

364 
beqÃ


365 
cmpw
 
p0
,
p1


366 
beqÃ


367 
bgt
 
bcfBC›y


368 
add
 
p0
,p0,
p2


369 
add
 
p1
,p1,
p2


370 
b
 
b¸BC›y


396 
	$FUNC_LABEL
(
bc›yW‹ds
)

398 
cmpwi
 
p2
,0

399 
beqÃ


400 
cmpw
 
p0
,
p1


401 
beqÃ


402 
li
 
p3
,0

403 
bgt
 
bcfHC›y


404 
¶wi
 
r11
,
p2
,1

405 
add
 
p0
,p0,
r11


406 
add
 
p1
,p1,
r11


407 
b
 
b¸HC›y


434 
	$FUNC_LABEL
(
bc›yL⁄gs
)

436 
cmpwi
 
p2
,0

437 
beqÃ


438 
cmpw
 
p0
,
p1


439 
beqÃ


440 
li
 
p3
,0

441 
bgt
 
bcfLC›y


442 
¶wi
 
r11
,
p2
,2

443 
add
 
p0
,p0,
r11


444 
add
 
p1
,p1,
r11


445 
b
 
b¸LC›y


473 
	$FUNC_LABEL
(
bfûl
)

475 
cmpwi
 
p1
,12

476 
b…
 
bffBFûl


477 
™di
. 
r11
,
p0
,3

478 
beq
 
bffLFûl


482 
bffL1
: 
addi
 
p1
,p1,-1

483 
addi
 
r11
,r11,1

484 
°bu
 
p2
,0(
p0
)

485 
addi
 
p0
,p0,1

486 
cmpwi
 
r11
,4

487 
b√
 
bffL1


491 
bffLFûl
:

492 
™di
. 
p2
,p2,0xff

493 
¶wi
 
p5
,
p2
,8

494 
‹
 
p2
,p2,
p5


495 
¶wi
 
p5
,
p2
,16

496 
‹
 
p2
,p2,
p5


498 
§wi
 
p3
,
p1
,2

499 
™di
. 
p1
,p1,3

501 
mt˘r
 
p3


502 
addi
 
p0
,p0,-4

504 
bffLGO
: 
°wu
 
p2
,4(
p0
)

505 
bdnz
 
bffLGO


507 
addi
 
p0
,p0,4

535 
	$FUNC_LABEL
(
bfûlByãs
)

537 
bffBFûl
:

539 
cmpwi
 
p1
,0

540 
beqÃ


541 
mt˘r
 
p1


542 
addi
 
p0
,p0,-1

544 
bffBGO
: 
°bu
 
p2
,1(
p0
)

545 
bdnz
 
bffBGO


547 
bÃ


550 #i‚de‡
_CAG_PORTABLE_swab


574 
	$FUNC_LABEL
(
swab
)

575 
cmpwi
 
p2
,0

576 
beqÃ


577 
§wi
 
p2
,p2,1

578 
li
 
r11
,0

579 
mt˘r
 
p2


580 
swlo›
: 
lhbrx
 
r12
,
p0
,
r11


581 
°hx
 
r12
,
p1
,
r11


582 
addi
 
r11
,r11,2

583 
bdnz
 
swlo›


584 
bÃ


	@arch/sysAmpDemo.c

42 
	~<libc/°dio.h
>

43 
	~<libc/ˇgboŸ.h
>

44 
	~<c⁄fig.h
>

45 
	~<µc/toﬁPpc.h
>

46 
	~<µc/¨chPpc.h
>

48 
UINT32
 
	gampC‹e0
[1024] 
	g_CAG_SHARED_BSS
;

49 
UINT32
 
	gampC‹e1
[1024] 
	g_CAG_SHARED_BSS
;

51 
UINT32
 
	gampC‹e01
[1024];

52 
UINT32
 
	gampC‹e11
[1024];

54 
	$sysAmpSh¨e1
 ()

56 
ampC‹e01
[1023] = 0;

57 
ampC‹e11
[1023] = 0;

58 
	}
}

60 
	$sysAmpSh¨e
 ()

62 
	`sysAmpSh¨e1
();

63 
ampC‹e01
[1023] = 0;

64 
ampC‹e11
[1023] = 0;

65 
ampC‹e0
[1023] = 0;

66 
ampC‹e1
[1023] = 0;

67 
	}
}

	@arch/sysAtomicALib.S

32 
	#_ASMLANGUAGE


	)

33 
	~<c⁄fig.h
>

34 
	~<libc/ˇgboŸ.h
>

35 
	~<µc/toﬁPpc.h
>

36 
	~<µc/¨chPpc.h
>

37 
	~<µc/asmPpc.h
>

38 
	~<µc/µc85xx.h
>

47 
	#_ASMLANGUAGE


	)

49 
	$FUNC_EXPORT
(
©omic32Së
)

50 
	$FUNC_EXPORT
(
©omic32Gë
)

51 
	$FUNC_EXPORT
(
©omic32Add
)

52 
	$FUNC_EXPORT
(
©omic32And
)

53 
	$FUNC_EXPORT
(
©omic32Cas
)

54 
	$FUNC_EXPORT
(
©omic32Or
)

55 
	$FUNC_EXPORT
(
©omic32X‹
)

56 
	$FUNC_EXPORT
(
©omic32CÀ¨
)

57 
	$FUNC_EXPORT
(
©omic32Sub
)

104 
	$FUNC_BEGIN
(
©omic32CÀ¨
)

105 
li
 
p1
, 0

135 
	$FUNC_BEGIN
(
©omic32Së
)

136 
lw¨x
 
p2
, 0, 
p0


137 
°wcx
. 
p1
, 0, 
p0


138 
b√
- 
©omic32Së


139 
mr
 
p0
, 
p2


140 
bÃ


141 
	$FUNC_END
(
©omic32Së
)

142 
	$FUNC_END
(
©omic32CÀ¨
)

159 
	$FUNC_BEGIN
(
©omic32Gë
)

160 
lwz
 
p0
, 0(p0)

161 
bÃ


162 
	$FUNC_END
(
©omic32Gë
)

186 
	$FUNC_BEGIN
(
©omic32Add
)

187 
lw¨x
 
p2
, 0, 
p0


188 
add
 
p3
, 
p1
, 
p2


189 
°wcx
. 
p3
, 0, 
p0


190 
b√
- 
©omic32Add


191 
mr
 
p0
, 
p2


192 
bÃ


193 
	$FUNC_END
(
©omic32Add
)

218 
	$FUNC_BEGIN
(
©omic32Sub
)

219 
lw¨x
 
p2
, 0, 
p0


220 
subf
 
p3
, 
p1
, 
p2


221 
°wcx
. 
p3
, 0, 
p0


222 
b√
- 
©omic32Sub


223 
mr
 
p0
, 
p2


224 
bÃ


225 
	$FUNC_END
(
©omic32Sub
)

250 
	$FUNC_BEGIN
(
©omic32And
)

251 
lw¨x
 
p2
, 0, 
p0


252 
™d
 
p3
, 
p1
, 
p2


253 
°wcx
. 
p3
, 0, 
p0


254 
b√
- 
©omic32And


255 
mr
 
p0
, 
p2


256 
bÃ


257 
	$FUNC_END
 (
©omic32And
)

282 
	$FUNC_BEGIN
(
©omic32Or
)

283 
lw¨x
 
p2
, 0, 
p0


284 
‹
 
p3
, 
p1
, 
p2


285 
°wcx
. 
p3
, 0, 
p0


286 
b√
- 
©omic32Or


287 
mr
 
p0
, 
p2


288 
bÃ


289 
	$FUNC_END
 (
©omic32Or
)

314 
	$FUNC_BEGIN
(
©omic32X‹
)

315 
lw¨x
 
p2
, 0, 
p0


316 
x‹
 
p3
, 
p1
, 
p2


317 
°wcx
. 
p3
, 0, 
p0


318 
b√
- 
©omic32X‹


319 
mr
 
p0
, 
p2


320 
bÃ


321 
	$FUNC_END
 (
©omic32X‹
)

347 
	$FUNC_BEGIN
(
©omic32Cas
)

348 
lw¨x
 
p3
, 0, 
p0


349 
cmpw
 
p3
, 
p1


350 
b√
- 
©omicCasEº


351 
°wcx
. 
p2
, 0, 
p0


352 
b√
- 
©omic32Cas


353 
li
 
p0
, 1

354 
bÃ


355 
©omicCasEº
:

356 
li
 
p0
, 0

357 
bÃ


358 
	`FUNC_END
(
©omic32Cas
)

	@arch/sysCacheE500ALib.S

39 
	#_ASMLANGUAGE


	)

40 
	~<libc/ˇgboŸ.h
>

41 
	~<c⁄fig.h
>

42 
	~<µc/toﬁPpc.h
>

43 
	~<µc/¨chPpc.h
>

44 
	~<µc/mmuE500Lib.h
>

45 
	~<µc/asmPpc.h
>

46 
	~<µc/excPpcLib.h
>

48 
	$FUNC_EXPORT
(
ˇcheE500E«bÀI_Im∂
)

49 
	$FUNC_EXPORT
(
ˇcheE500E«bÀD_Im∂
)

50 
	$FUNC_EXPORT
(
ˇcheE500DißbÀI_Im∂
)

51 
	$FUNC_EXPORT
(
ˇcheE500DißbÀD_Im∂
)

53 
	$FUNC_EXPORT
(
ˇcheE500InvÆid©eI
)

54 
	$FUNC_EXPORT
(
ˇcheE500InvÆid©eD
)

55 
	$FUNC_EXPORT
(
ˇcheE500FlushD
)

56 
	$FUNC_EXPORT
(
ˇcheE500CÀ¨D
)

58 
	$FUNC_EXPORT
(
ˇcheE500FlushAŒD
)

59 
	$FUNC_EXPORT
(
ˇcheE500PùeFlush
)

60 
	$FUNC_EXPORT
(
ˇcheE500TextUpd©e
)

62 
	$DATA_IMPORT
(
ˇchePpcRódOrigö
)

63 
	$DATA_IMPORT
(
µcE500DCACHE_FLUSH_NUM
)

64 
	$DATA_IMPORT
(
µcE500CACHE_ALIGN_SIZE
)

66 
_CAG_TEXT_SEG_START


75 
	$FUNC_BEGIN
(
ˇcheE500E«bÀI_Im∂
)

76 
mf•r
 
p1
,
L1CSR1


77 
™di
. 
p2
,
p1
,
_PPC_L1CSR_E


78 
b√
 
ˇcheArchOK


79 
‹i
 
p2
,
p1
,
_PPC_L1CSR_FI


80 
mt•r
 
L1CSR1
,
p2


81 
isync


82 
‹is
 
p2
, 
p1
, 
	`HI
(
_PPC_L1CSR_CPE
 | 
_PPC_L1CSR_E
)

83 
‹i
 
p2
,Ö2, 
	`LO
(
_PPC_L1CSR_CPE
 | 
_PPC_L1CSR_E
)

84 
mt•r
 
L1CSR1
,
p2


85 
isync


86 
b
 
ˇcheArchOK


87 
	$FUNC_END
(
ˇcheE500E«bÀI_Im∂
)

96 
	$FUNC_BEGIN
(
ˇcheE500E«bÀD_Im∂
)

97 
mf•r
 
p1
, 
L1CSR0


98 
™di
. 
p2
,
p1
,
_PPC_L1CSR_E


99 
b√
 
ˇcheArchOK


100 
‹i
 
p2
, 
p1
,
_PPC_L1CSR_FI


101 
msync


102 
isync


103 
mt•r
 
L1CSR0
,
p2


104 
‹is
 
p2
, 
p1
, 
	`HI
(
_PPC_L1CSR_CPE
 | 
_PPC_L1CSR_E
)

105 
‹i
 
p2
,Ö2, 
	`LO
(
_PPC_L1CSR_CPE
 | 
_PPC_L1CSR_E
)

106 
msync


107 
isync


108 
mt•r
 
L1CSR0
,
p2


109 
isync


110 
b
 
ˇcheArchOK


111 
	$FUNC_END
(
ˇcheE500E«bÀD_Im∂
)

120 
	$FUNC_BEGIN
(
ˇcheE500InvÆid©eI
)

121 
icbi
 
r0
, 
p0


122 
add
 
p0
,Ö0, 
p2


123 
cm∂w
 
p0
, 
p1


124 
b…
 
ˇcheE500InvÆid©eI


125 
isync


126 
li
 
p0
,
OK


127 
bÃ


128 
	$FUNC_END
(
ˇcheE500InvÆid©eI
)

138 
	$FUNC_BEGIN
(
ˇcheE500InvÆid©eD
)

139 
dcbi
 
r0
, 
p0


140 
add
 
p0
,Ö0, 
p2


141 
cm∂w
 
p0
, 
p1


142 
b…
 
ˇcheE500InvÆid©eD


143 
isync


144 
b
 
ˇcheArchOK


145 
	$FUNC_END
(
ˇcheE500InvÆid©eD
)

155 
	$FUNC_BEGIN
(
ˇcheE500CÀ¨D
)

156 
dcbf
 
r0
, 
p0


157 
add
 
p0
,Ö0, 
p2


158 
cm∂w
 
p0
, 
p1


159 
b…
 
ˇcheE500CÀ¨D


160 
sync


161 
b
 
ˇcheArchOK


162 
	$FUNC_END
(
ˇcheE500CÀ¨D
)

172 
	$FUNC_BEGIN
(
ˇcheE500FlushD
)

173 
dcb°
 
r0
,
p0


174 
add
 
p0
,p0,
p2


175 
cm∂w
 
p0
,
p1


176 
b…
 
ˇcheE500FlushD


177 
b
 
ˇcheArchOK


178 
	$FUNC_END
(
ˇcheE500FlushD
)

187 
	$FUNC_BEGIN
(
ˇcheE500PùeFlush
)

188 
eõio


189 
sync


190 
li
 
p0
,
OK


191 
bÃ


192 
	$FUNC_END
(
ˇcheE500PùeFlush
)

204 
	$FUNC_BEGIN
(
ˇcheE500TextUpd©e
)

205 
add
 
p1
,p1,
p0


206 
˛ºwi
 
p0
,p0,
_CPU_CACHE_ALIGN_SHIFT


207 
˘uLo›
:

208 
dcb°
 
r0
,
p0


209 
sync


210 
icbi
 
r0
,
p0


211 
add
 
p0
,p0,
p3


212 
cm∂w
 
p0
,
p1


213 
b…
 
˘uLo›


214 
isync


215 
sync


216 
li
 
p0
,
OK


217 
bÃ


219 
	$FUNC_END
(
ˇcheE500TextUpd©e
)

238 
	$FUNC_BEGIN
(
ˇcheE500DißbÀI_Im∂
)

239 
mf•r
 
p1
,
L1CSR1


240 
™di
. 
p2
,
p1
,
_PPC_L1CSR_E


241 
beq
 
ˇcheArchOK


242 
lis
 
p2
,
	`HIADJ
(~
_PPC_L1CSR_E
)

243 
addi
 
p2
,p2,
	`LO
(~
_PPC_L1CSR_E
)

244 
™d
 
p2
,p2,
p1


245 
mt•r
 
L1CSR1
, 
p2


246 
isync


247 
b
 
ˇcheArchOK


248 
	$FUNC_END
(
ˇcheE500DißbÀI_Im∂
)

267 
	$FUNC_BEGIN
(
ˇcheE500DißbÀD_Im∂
)

269 
mf•r
 
p1
,
L1CSR0


270 
™di
. 
p2
,
p1
,
_PPC_L1CSR_E


271 
beq
 
ˇcheArchOK


272 
lis
 
p3
, 
	$HIADJ
(
µcE500DCACHE_FLUSH_NUM
)

273 
lwz
 
p3
, 
	$LO
(
µcE500DCACHE_FLUSH_NUM
)(
p3
)

274 
§wi
 
p2
, 
p3
, 
MMU_RPN_SHIFT
 - 
_CPU_CACHE_ALIGN_SHIFT


275 
mt•r
 
CTR
, 
p2


276 
lis
 
p2
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

277 
lwz
 
p2
, 
	$LO
(
ˇchePpcRódOrigö
)(
p2
)

278 
li
 
p6
,
MMU_PAGE_SIZE


279 
mfm§
 
p5


280 
	$INT_MASK
(
p5
, 
p0
)

281 
	$_PPC_KERNEL_MTMSR
(
p0
,Ö0, 
ˇcheE500DißbÀD_Im∂
)

282 
b
 
ˇchePpcDißbÀLﬂdIéb


284 
ˇchePpcDißbÀLﬂdDéb
:

285 
lbzu
 
p4
,0(
p2
)

286 
add
 
p2
,p2,
p6


287 
bdnz
 
ˇchePpcDißbÀLﬂdDéb


288 
mt•r
 
CTR
, 
p3


289 
lis
 
p4
, 
	$HIADJ
(
µcE500CACHE_ALIGN_SIZE
)

290 
lwz
 
p4
, 
	$LO
(
µcE500CACHE_ALIGN_SIZE
)(
p4
)

291 
lis
 
p7
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

292 
lwz
 
p7
, 
	$LO
(
ˇchePpcRódOrigö
)(
p7
)

293 
subf
 
p2
, 
p4
, 
p7


295 
ˇcheE500DißbÀLﬂd
:

296 
add
 
p2
, 
p4
,Ö2

297 
lbzu
 
p7
, 0(
p2
)

298 
bdnz
 
ˇcheE500DißbÀLﬂd


299 
isync


300 
mt•r
 
CTR
, 
p3


301 
lis
 
p7
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

302 
lwz
 
p7
, 
	$LO
(
ˇchePpcRódOrigö
)(
p7
)

303 
subf
 
p2
, 
p4
, 
p7


305 
ˇcheE500DißbÀFlush
:

306 
add
 
p2
, 
p4
,Ö2

307 
dcbf
 0,
p2


308 
bdnz
 
ˇcheE500DißbÀFlush


309 
sync


310 
isync


311 
mf•r
 
p2
,
L1CSR0


312 
lis
 
p1
,
	`HIADJ
(~
_PPC_L1CSR_E
)

313 
addi
 
p1
,p1,
	`LO
(~
_PPC_L1CSR_E
)

314 
™d
 
p2
,p2,
p1


315 
msync


316 
isync


317 
mt•r
 
L1CSR0
,
p2


318 
mtm§
 
p5


319 
b
 
ˇcheArchOK


321 
ˇchePpcDißbÀLﬂdIéb
:

322 
b
 
ˇchePpcDißbÀLﬂdDéb


323 
	$FUNC_END
(
ˇcheE500DißbÀD_Im∂
)

342 
	$FUNC_BEGIN
(
ˇcheE500FlushAŒD
)

343 
lis
 
p3
, 
	$HIADJ
(
µcE500DCACHE_FLUSH_NUM
)

344 
lwz
 
p3
, 
	$LO
(
µcE500DCACHE_FLUSH_NUM
)(
p3
)

345 
§wi
 
p2
, 
p3
, 
MMU_RPN_SHIFT
 - 
_CPU_CACHE_ALIGN_SHIFT


346 
mt•r
 
CTR
, 
p2


347 
lis
 
p2
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

348 
lwz
 
p2
, 
	$LO
(
ˇchePpcRódOrigö
)(
p2
)

349 
li
 
p6
,
MMU_PAGE_SIZE


350 
mfm§
 
p5


351 
	$INT_MASK
(
p5
, 
p0
)

352 
	$_PPC_KERNEL_MTMSR
(
p0
,Ö0, 
ˇcheE500FlushAŒD
)

353 
b
 
ˇchePpcDißbÀLﬂdIéb2


355 
ˇchePpcDißbÀLﬂdDéb2
:

356 
lbzu
 
p4
,0(
p2
)

357 
add
 
p2
,p2,
p6


358 
bdnz
 
ˇchePpcDißbÀLﬂdDéb2


359 
mt•r
 
CTR
, 
p3


360 
lis
 
p4
, 
	$HIADJ
(
µcE500CACHE_ALIGN_SIZE
)

361 
lwz
 
p4
, 
	$LO
(
µcE500CACHE_ALIGN_SIZE
)(
p4
)

362 
lis
 
p7
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

363 
lwz
 
p7
, 
	$LO
(
ˇchePpcRódOrigö
)(
p7
)

364 
subf
 
p2
, 
p4
, 
p7


366 
ˇcheE500DißbÀLﬂd2
:

367 
add
 
p2
, 
p4
,Ö2

368 
lbzu
 
p7
, 0(
p2
)

369 
bdnz
 
ˇcheE500DißbÀLﬂd2


370 
isync


371 
mt•r
 
CTR
, 
p3


372 
lis
 
p7
, 
	$HIADJ
(
ˇchePpcRódOrigö
)

373 
lwz
 
p7
, 
	$LO
(
ˇchePpcRódOrigö
)(
p7
)

374 
subf
 
p2
, 
p4
, 
p7


376 
ˇcheE500DißbÀFlush2
:

377 
add
 
p2
, 
p4
,Ö2

378 
dcbf
 0,
p2


379 
bdnz
 
ˇcheE500DißbÀFlush2


380 
sync


381 
isync


382 
mtm§
 
p5


383 
bÃ


385 
ˇchePpcDißbÀLﬂdIéb2
:

386 
b
 
ˇchePpcDißbÀLﬂdDéb2


387 
	$FUNC_END
(
ˇcheE500FlushAŒD
)

397 
	$FUNC_BEGIN
(
ˇcheArchOK
)

398 
sync


399 
ˇcheArchOkNoSync
:

400 
li
 
p0
,
OK


401 
bÃ


402 
	`FUNC_END
(
ˇcheArchOK
)

	@arch/sysCacheE500Lib.c

41 
	~<libc/°ddef.h
>

42 
	~<c⁄fig.h
>

43 
	~<µc/toﬁPpc.h
>

44 
	~<µc/¨chPpc.h
>

45 
	~<µc/mmuE500Lib.h
>

46 
	~<µc/asmPpc.h
>

47 
	~<µc/excPpcLib.h
>

51 
	#CACHE_DISABLED
 0x00

	)

52 
	#CACHE_WRITETHROUGH
 0x01

	)

53 
	#CACHE_COPYBACK
 0x02

	)

54 
	#CACHE_WRITEALLOCATE
 0x04

	)

55 
	#CACHE_NO_WRITEALLOCATE
 0x08

	)

56 
	#CACHE_SNOOP_ENABLE
 0x10

	)

57 
	#CACHE_SNOOP_DISABLE
 0x20

	)

58 
	#CACHE_BURST_ENABLE
 0x40

	)

59 
	#CACHE_BURST_DISABLE
 0x80

	)

65 
	mINSTRUCTION_CACHE
 = 
_INSTRUCTION_CACHE
,

66 
	mDATA_CACHE
 = 
_DATA_CACHE


67 } 
	tCACHE_TYPE
;

71 
IMPORT
 
STATUS
 
ˇcheE500E«bÀI_Im∂
 ();

72 
IMPORT
 
STATUS
 
ˇcheE500E«bÀD_Im∂
 ();

73 
IMPORT
 
STATUS
 
ˇcheE500DißbÀI_Im∂
 ();

74 
IMPORT
 
STATUS
 
ˇcheE500DißbÀD_Im∂
 ();

76 
IMPORT
 
sysL1CSR0Së
 (
UINT32
);

77 
IMPORT
 
UINT32
 
sysL1CSR0Gë
 ();

78 
IMPORT
 
sysL1CSR1Së
 (
UINT32
);

79 
IMPORT
 
UINT32
 
sysL1CSR1Gë
 ();

80 
IMPORT
 
ötCpuLock
 ();

81 
IMPORT
 
ötCpuU∆ock
 ();

85 
ˇcheE500E«bÀI
 ();

86 
ˇcheE500E«bÀD
 ();

87 
ˇcheE500DißbÀI
 ();

88 
ˇcheE500DißbÀD
 ();

89 
BOOL
 
ˇcheIsOnI
 ();

90 
BOOL
 
ˇcheIsOnD
 ();

92 
ˇcheArchE«bÀ
 (
CACHE_TYPE
 
ˇche
);

94 
ˇcheE500DißbÀIFromMmu
 ();

95 
ˇcheE500DißbÀDFromMmu
 ();

96 
ˇcheE500InvÆid©eAŒD
 ();

101 
VOIDFUNCPTR
 
	g_pSysL2CacheInvFunc
 = 
NULL
;

102 
VOIDFUNCPTR
 
	g_pSysL2CacheE«bÀ
 = 
NULL
;

103 
VOIDFUNCPTR
 
	g_pSysL2CacheFlush
 = 
NULL
;

104 
VOIDFUNCPTR
 
	g_pSysL2CacheDißbÀ
 = 
NULL
;

112 
IMPORT
 *
	gˇchePpcRódOrigö
;

125 
	gˇcheArchE«bÀ


127 
CACHE_TYPE
 
	gˇche


130 i‡(
	gˇche
 =
INSTRUCTION_CACHE
)

131  
ˇcheE500E«bÀI
 ();

133 i‡(
	gˇche
 =
DATA_CACHE
)

134  
ˇcheE500E«bÀD
 ();

146 
	$ˇcheE500E«bÀI
 ()

148 
key
;

150 
key
 = 
	`ötCpuLock
();

151 (Ë
	`ˇcheE500E«bÀI_Im∂
 ();

152 
	`ötCpuU∆ock
(
key
);

153 
	}
}

165 
	$ˇcheE500E«bÀD
 ()

167 
key
;

169 
key
 = 
	`ötCpuLock
();

171 (Ë
	`ˇcheE500E«bÀD_Im∂
 ();

173 i‡(
_pSysL2CacheInvFunc
 !
NULL
)

174 (*
_pSysL2CacheInvFunc
) ();

176 i‡(
_pSysL2CacheE«bÀ
 !
NULL
)

177 (*
_pSysL2CacheE«bÀ
) ();

179 
	`ötCpuU∆ock
(
key
);

180 
	}
}

191 
	$ˇcheE500DißbÀI
 ()

193 
	`ˇcheE500DißbÀIFromMmu
 ();

194 
	}
}

205 
	$ˇcheE500DißbÀIFromMmu
 ()

207 
key
;

209 
key
 = 
	`ötCpuLock
();

210 (Ë
	`ˇcheE500DißbÀI_Im∂
 ();

211 
	`ötCpuU∆ock
(
key
);

212 
	}
}

223 
	$ˇcheE500DißbÀD
 ()

225 
	`ˇcheE500DißbÀDFromMmu
 ();

226 
	}
}

237 
	$ˇcheE500DißbÀDFromMmu
 ()

239 
key
;

240 
key
 = 
	`ötCpuLock
();

242 i‡(
_pSysL2CacheFlush
 !
NULL
)

243 (*
_pSysL2CacheFlush
) ();

245 i‡(
_pSysL2CacheDißbÀ
 !
NULL
)

246 (*
_pSysL2CacheDißbÀ
) ();

248 (Ë
	`ˇcheE500DißbÀD_Im∂
 ();

250 
	`ötCpuU∆ock
(
key
);

251 
	}
}

262 
	$ˇcheE500InvÆid©eAŒD
 ()

264 
UINT32
 
lic§0
;

265 
key
 = 
	`ötCpuLock
();

267 i‡(
_pSysL2CacheInvFunc
 !
NULL
)

268 (*
_pSysL2CacheInvFunc
) ();

270  ((
lic§0
=
	`sysL1CSR0Gë
()Ë& 
_PPC_L1CSR_FI
) != 0);

271 
	`sysL1CSR0Së
–
lic§0
 | 
_PPC_L1CSR_FI
);

272  ( 
	`sysL1CSR0Gë
(Ë& 
_PPC_L1CSR_FI
) != 0);

274 
	`ötCpuU∆ock
(
key
);

275 
	}
}

286 
BOOL
 
	$ˇcheIsOnI
 ()

288  ((
	`sysL1CSR1Gë
 (Ë& 
_PPC_L1CSR_E
) != 0);

289 
	}
}

300 
BOOL
 
	$ˇcheIsOnD
 ()

302  ((
	`sysL1CSR0Gë
 (Ë& 
_PPC_L1CSR_E
) != 0);

303 
	}
}

	@arch/sysCacheExt.S

37 
	#_ASMLANGUAGE


	)

38 
	~<libc/ˇgboŸ.h
>

39 
	~<c⁄fig.h
>

40 
	~<µc/toﬁPpc.h
>

41 
	~<µc/¨chPpc.h
>

42 
	~<µc/mmuE500Lib.h
>

43 
	~<µc/asmPpc.h
>

44 
	~<µc/excPpcLib.h
>

51 
sync


52 
mf•r
 
	gr11
, 
SPRN_L1CSR1


53 
æwöm
 
	gr11
,Ñ11, 0, ~
L1CSR1_ICUL


54 
sync


55 
isync


56 
mt•r
 
	gSPRN_L1CSR1
, 
r11


57 
isync


59 
mÊr
 
r12


60 
	gbl
 5f

61 5: 
mÊr
 
r5


62 
addi
 
r5
, 
	gr5
, 2f - 5b

63 
	gicbés
 0, 0, 
r5


64 
addi
 
	gr5
,Ñ5, 64

66 
sync


67 
mf•r
 
	gr11
, 
	gSPRN_L1CSR1


68 3: 
™di
. 
r11
, 
	gr11
, 
L1CSR1_ICUL


69 
	gb√
 3b

71 
	gicbés
 0, 0, 
r5


72 
addi
 
	gr5
,Ñ5, 64

74 
sync


75 
mf•r
 
	gr11
, 
	gSPRN_L1CSR1


76 3: 
™di
. 
r11
, 
	gr11
, 
L1CSR1_ICUL


77 
	gb√
 3b

79 
	gb
 2f

80 .
	gÆign
 6

82 2: 
sync


89 .
ª±
 19

90 
n›


91 .
ídr


93 
sync


94 
mf•r
 
r11
, 
SPRN_L1CSR1


95 
æwöm
 
	gr11
,Ñ11, 0, ~
L1CSR1_ICUL


96 
sync


97 
isync


98 
mt•r
 
	gSPRN_L1CSR1
, 
r11


99 
isync


101 
mér
 
r12


102 
bÃ


107 
lis
 
	gr3
,
	gCONFIG_SYS_INIT_RAM_ADDR
@
h


108 
‹i
 
	gr3
,r3,
	gCONFIG_SYS_INIT_RAM_ADDR
@
l


109 
mf•r
 
	gr2
, 
L1CFG0


110 
	g™di
. 
	gr2
,Ñ2, 0x1ff

112 
¶wi
 
	gr2
,Ñ2, (10 - 1 - 
	gL1_CACHE_SHIFT
)

113 
mt˘r
 
r2


114 
li
 
	gr0
,0

116 
dcbz
 
r0
,
r3


117 
	gdcbés
 0,
	gr0
,
r3


118 
addi
 
	gr3
,r3,
CONFIG_SYS_CACHELINE_SIZE


119 
	gbdnz
 1b

121 .
globl
 
u∆ock_øm_ö_ˇche


122 
	gu∆ock_øm_ö_ˇche
:

124 
lis
 
r3
,(
	gCONFIG_SYS_INIT_RAM_ADDR
 & ~(
	gCONFIG_SYS_CACHELINE_SIZE
-1))@
h


125 
‹i
 
	gr3
,r3,(
	gCONFIG_SYS_INIT_RAM_ADDR
 & ~(
	gCONFIG_SYS_CACHELINE_SIZE
-1))@
l


126 
mf•r
 
	gr4
,
L1CFG0


127 
	g™di
. 
	gr4
,r4,0x1ff

128 
¶wi
 
	gr4
,r4,(10 - 1 - 
	gL1_CACHE_SHIFT
)

129 
mt˘r
 
	gr4


130 1: 
dcbi
 
r0
,
r3


131 
dcblc
 
	gr0
,
r3


132 
addi
 
	gr3
,r3,
CONFIG_SYS_CACHELINE_SIZE


133 
	gbdnz
 1b

134 
	gsync


	@arch/sysCpuE500ALib.S

35 
	#_ASMLANGUAGE


	)

36 
	~<libc/ˇgboŸ.h
>

37 
	~<c⁄fig.h
>

38 
	~<µc/toﬁPpc.h
>

39 
	~<µc/¨chPpc.h
>

40 
	~<µc/mmuE500Lib.h
>

41 
	~<µc/asmPpc.h
>

42 
	~<µc/excPpcLib.h
>

44 
	$FUNC_EXPORT
(
ötCpuLock
)

45 
	$FUNC_EXPORT
(
ötCpuU∆ock
)

46 
	$FUNC_EXPORT
(
ötCpuMi¸oLock
)

47 
	$FUNC_EXPORT
(
ötCpuMi¸oU∆ock
)

48 
	$FUNC_EXPORT
(
ötLock
)

49 
	$FUNC_EXPORT
(
ötU∆ock
)

51 
_CAG_TEXT_SEG_START


88 #if (
_CPU_CACHE_ALIGN_SIZE
 == 32) || (_CPU_CACHE_ALIGN_SIZE == 16)

89 .
bÆign
 
_CPU_CACHE_ALIGN_SIZE


92 
	$FUNC_BEGIN
(
ötCpuLock
)

93 
	$FUNC_BEGIN
(
ötCpuMi¸oLock
)

118 
	$FUNC_LABEL
(
ötLock
)

119 
mfm§
 
p0


120 
	$INT_MASK
(
p0
, 
p1
)

121 
	$_PPC_KERNEL_MTMSR_WITH_BLR
(
p1
,Ö1)

123 
	$FUNC_END
(
ötCpuMi¸oLock
)

124 
	$FUNC_END
(
ötCpuLock
)

146 
	$FUNC_BEGIN
(
ötCpuU∆ock
)

167 
	$FUNC_LABEL
(
ötU∆ock
)

169 
mfm§
 
p1


171 #ifdef 
_PPC_MSR_CE_U


172 
æwöm
 
p0
,Ö0, 0, 
_PPC_MSR_BIT_CE
, 
_PPC_MSR_BIT_EE


173 
æwöm
 
p0
,Ö0, 0, 
_PPC_MSR_BIT_EE
, 
_PPC_MSR_BIT_CE


175 
æwöm
 
p0
,Ö0, 0, 
_PPC_MSR_BIT_EE
, _PPC_MSR_BIT_EE

178 
‹
 
p0
, 
p1
,Ö0

180 
	$FUNC_BEGIN
(
ötCpuMi¸oU∆ock
)

181 
mtm§
 
p0


182 
bÃ


184 
	$FUNC_END
(
ötCpuMi¸oU∆ock
)

185 
	`FUNC_END
(
ötCpuU∆ock
)

	@arch/sysCpuE500Lib.c

42 
	~<libc/°dio.h
>

43 
	~<libc/ˇgboŸ.h
>

44 
	~<c⁄fig.h
>

45 
	~<µc/toﬁPpc.h
>

46 
	~<µc/¨chPpc.h
>

47 
	~<µc/mmuE500Lib.h
>

48 
	~<µc/asmPpc.h
>

49 
	~<µc/excPpcLib.h
>

53 
	#xbô0
(
x
, 
n
Ë((x & (1 << (31 -Ç))Ë>> (31 -Ç)Ë

	)

54 
	#xbô32
(
x
, 
n
Ë((x & (1 << (63 -Ç))Ë>> (63 -Ç)Ë

	)

55 
	#⁄off0
(
x
, 
n
Ë
	`xbô0
(x,ÇË? "ON", "OFF"

	)

56 
	#⁄off32
(
x
, 
n
Ë
	`xbô32
(x,ÇË? "ON", "OFF"

	)

57 
	#MAX_CPUS
 2

	)

58 
	#TLB1INDEX
 15

	)

63 
IMPORT
 
ötCpuLock
 ();

64 
IMPORT
 
ötCpuU∆ock
 ();

65 
IMPORT
 
mmuPpcTlbWrôeExecuã
(
UINT32
 
mas0
, UINT32 
mas1
,

66 
UINT32
 
mas2
, UINT32 
mas3
, UINT32 
mas7
);

67 
IMPORT
 
UINT32
 
sysCpuIndexGë
 ();

70 
˝uE500Show
 ();

71 
	gfú°SèticDesc
[
MAX_CPUS
];

72 
	gnumbîSèticAvaû
[
MAX_CPUS
];

73 
	gtŸÆSèticDesc
 = 
MMUE500_NUM_STATIC_TLB_ENTIRES
;

86 
	$˝uE500Show
 ()

88 vﬁ©ûê
UINT32
 
tmp
, 
tmp2
;

90 
tmp
 = 
	`sysM§Gë
();

91 (Ë
	`¥ötf
("MSR - 0x%x\n", 
tmp
);

92 (Ë
	`¥ötf
(" UCLE-%x SPE-%x WE-%x CE-%x EE-%x PR-%x ME-%x\n",

93 
	`xbô32
(
tmp
,37), xbit32(tmp,38), xbit32(tmp,45), xbit32(tmp,46),

94 
	`xbô32
(
tmp
,48), xbit32(tmp,49), xbit32(tmp,51));

95 (Ë
	`¥ötf
(" UBLE-%x DE-%x IS-%x DS-%x PMM-%x\n",

96 
	`xbô32
(
tmp
,53), xbit32(tmp,54), xbit32(tmp,58), xbit32(tmp,59),

97 
	`xbô32
(
tmp
,61));

98 
tmp
 = 
	`sysHid0Gë
();

100 
tmp2
 = 
	`sysHid1Gë
();

101 (Ë
	`¥ötf
("HID0 = 0x%x, HID1 = 0x%x\n", 
tmp
, 
tmp2
);

103 
tmp
 = 
	`sysL1CSR0Gë
();

104 (Ë
	`¥ötf
("L1CSR0: cachêi†%†- 0x%x\n", 
tmp
&1?"ON":"OFF",Åmp);

105 
tmp
 = 
	`sysL1CSR1Gë
();

106 (Ë
	`¥ötf
("L1CSR1: Iˇchêi†%†- 0x%x\n", 
tmp
&1?"ON":"OFF",Åmp);

107 
tmp
 = 
	`sysL1CFG0Gë
();

108 
tmp2
 = 
	`sysL1CFG1Gë
();

109 (Ë
	`¥ötf
("L1CFG0 = 0x%x, L1CFG1 = 0x%x\n", 
tmp
, 
tmp2
);

110 
	}
}

128 
	gmmuE500TlbSèticE¡rySë


130 
	gödex
,

131 
TLB_ENTRY_DESC
 * 
	gpTlbDesc
,

132 
BOOL
 
	gˇcheAŒow
,

133 
BOOL
 
	g£tTid


136 
MMUE500_PTE
 
	ge500Pã
;

139 
	ge500Pã
.
	gw‹ds
.
	gw‹d0
 = 0;

140 
	ge500Pã
.
	gw‹ds
.
	gw‹d1
 = 0;

141 
	ge500Pã
.
	gw‹ds
.
	gw‹d2
 = 0;

142 
	ge500Pã
.
	gw‹ds
.
	gw‹d3
 = 0;

145 
	ge500Pã
.
	gfõld
.
	gv
 = 1;

146 
	ge500Pã
.
	gfõld
.
	gùrŸ
 = ((
pTlbDesc
->
©å
 & 
_MMU_TLB_IPROT
) ? 1 : 0);

147 
	ge500Pã
.
	gfõld
.
	gtid
 = (
£tTid
 ? 1 : 0);

148 
	ge500Pã
.
	gfõld
.
	gts
 = ((
pTlbDesc
->
©å
 & 
_MMU_TLB_TS_1
) ? 1 : 0);

149 
	ge500Pã
.
	gfõld
.
	gtsize
 =

150 ((
pTlbDesc
->
©å
 & 
_MMU_TLB_SZ_MASK
Ë>> 
_MMU_TLB_SZ_SHIFT
);

153 
	ge500Pã
.
	gfõld
.
	gïn
 = 
pTlbDesc
->
effAddr
 >> 
MMU_RPN_SHIFT
;

154 i‡(
	gˇcheAŒow
 =
TRUE
) {

156 
e500Pã
.
fõld
.
w
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_ATTR_W
 ? 1 : 0);

157 
	ge500Pã
.
	gfõld
.
	gi
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_ATTR_I
 ? 1 : 0);

160 
	ge500Pã
.
	gfõld
.
	gw
 = 0;

161 
	ge500Pã
.
	gfõld
.
	gi
 = 1;

163 
	ge500Pã
.
	gfõld
.
	gm
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_ATTR_M
 ? 1 : 0);

164 
	ge500Pã
.
	gfõld
.
	gg
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_ATTR_G
 ? 1 : 0);

167 
	ge500Pã
.
	gfõld
.
	gΩn
 = 
pTlbDesc
->
ªÆAddr
 >> 
MMU_RPN_SHIFT
;

168 
	ge500Pã
.
	gfõld
.
	gsx
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_PERM_X
 ? 1 : 0);

169 
	ge500Pã
.
	gfõld
.
	gsw
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_PERM_W
 ? 1 : 0);

170 
	ge500Pã
.
	gfõld
.
	g§
 = 1;

171 
	ge500Pã
.
	gfõld
.
	gux
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_PERM_UX
 ? 1 : 0);

172 
	ge500Pã
.
	gfõld
.
	guw
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_PERM_UW
 ? 1 : 0);

173 
	ge500Pã
.
	gfõld
.
	gur
 = (
pTlbDesc
->
©å
 & 
_MMU_TLB_PERM_UR
 ? 1 : 0);

176 
	ge500Pã
.
	gfõld
.
	gî≤
 = 
pTlbDesc
->
ªÆAddrExt
;

178 
	glockKey
 = 
ötCpuLock
 ();

180 
mmuPpcTlbWrôeExecuã
(((
ödex
 << 
_PPC_MAS0_ESEL_BIT
) &

181 
_PPC_MAS0_ESEL_MASK
Ë| 
_PPC_MAS0_TLBSEL1
,

182 
e500Pã
.
w‹ds
.
w‹d0
,

183 
e500Pã
.
w‹ds
.
w‹d1
,

184 
e500Pã
.
w‹ds
.
w‹d2
,

185 
e500Pã
.
w‹ds
.
w‹d3


188 
ötCpuU∆ock
 (
lockKey
);

207 
	gmmuE500TlbSèticInô


209 
	gnumDescs
,

210 
TLB_ENTRY_DESC
 * 
	gpTlbDesc
,

211 
BOOL
 
	gˇcheAŒow


214 
UINT32
 
	gödex
;

215 
UINT32
 
	guCpuIndex
 = 
sysCpuIndexGë
 ();

217 
	gfú°SèticDesc
[
uCpuIndex
] = 
numDescs
;

218 
	gnumbîSèticAvaû
[
uCpuIndex
] = 
tŸÆSèticDesc
 - 
numDescs
;

222 
	gödex
 = 
TLB1INDEX
; index > 
	gTLB1INDEX
 - 
	gnumDescs
; index--, 
	gpTlbDesc
++)

223 
mmuE500TlbSèticE¡rySë
(
ödex
, 
pTlbDesc
, 
ˇcheAŒow
,0);

226 
	gmmuE500TlbSèticInô1


228 
	g°¨t
,

229 
	gíd
,

230 
TLB_ENTRY_DESC
 * 
	gpTlbDesc
,

231 
BOOL
 
	gˇcheAŒow


234 
UINT32
 
	gödex
;

238 
	gödex
 = 
°¨t
; index <
	gíd
; index++, 
	gpTlbDesc
++) {

239 
mmuE500TlbSèticE¡rySë
(
ödex
, 
pTlbDesc
, 
ˇcheAŒow
,0);

	@arch/sysE500Tlb.S

35 
	#_ASMLANGUAGE


	)

36 
	~<libc/ˇgboŸ.h
>

37 
	~<c⁄fig.h
>

38 
	~<µc/toﬁPpc.h
>

39 
	~<µc/¨chPpc.h
>

40 
	~<µc/mmuE500Lib.h
>

41 
	~<µc/asmPpc.h
>

42 
	~<µc/excPpcLib.h
>

46 
	#INV_TLB1
 0x8

	)

47 
	#INV_TLB0
 0x0

	)

48 
	#TLBSYNC
()

	)

54 
	$FUNC_EXPORT
(
mmuPpcPidSë
)

55 
	$FUNC_EXPORT
(
mmuPpcSórchPidGë
)

56 
	$FUNC_EXPORT
(
mmuPpcSórchPidSë
)

57 
	$FUNC_EXPORT
(
mmuPpcPidGë
)

58 
	$FUNC_EXPORT
(
mmuE500TlbDy«micInvÆid©e
)

59 
	$FUNC_EXPORT
(
mmuE500TlbSèticInvÆid©e
)

60 
	$FUNC_EXPORT
(
mmuPpcE500Tlbõ
)

61 
	$FUNC_EXPORT
(
mmuPpcE500TlbõSètic
)

62 
	$FUNC_EXPORT
(
mmuPpcTlbRódE¡ryW‹d0
)

63 
	$FUNC_EXPORT
(
mmuPpcTlbRódE¡ryW‹d1
)

64 
	$FUNC_EXPORT
(
mmuPpcTlbRódE¡ryW‹d2
)

65 
	$FUNC_EXPORT
(
mmuPpcTlbWrôeExecuã
)

66 
	$FUNC_EXPORT
(
mmuPpcTlb1NE¡rõsGë
)

68 
_CAG_TEXT_SEG_START


75 
	$FUNC_BEGIN
(
mmuPpcTlbRódE¡ryW‹d0
)

76 
mf•r
 
p0
, 
MAS1


77 
bÃ


78 
	$FUNC_END
(
mmuPpcTlbRódE¡ryW‹d0
)

86 
	$FUNC_BEGIN
(
mmuPpcTlbRódE¡ryW‹d1
)

87 
mf•r
 
p0
, 
MAS2


88 
bÃ


89 
	$FUNC_END
(
mmuPpcTlbRódE¡ryW‹d1
)

96 
	$FUNC_BEGIN
(
mmuPpcTlbRódE¡ryW‹d2
)

97 
mf•r
 
p0
, 
MAS3


98 
bÃ


99 
	$FUNC_END
(
mmuPpcTlbRódE¡ryW‹d2
)

106 
	$FUNC_BEGIN
(
mmuPpcTlbRódE¡ryW‹d3
)

107 
mf•r
 
p0
, 
MAS7


108 
bÃ


109 
	$FUNC_END
(
mmuPpcTlbRódE¡ryW‹d3
)

126 
	`FUNC_BEGIN
(
mmuPpcTlbWrôeExecuã
)

128 .
bÆign
 64

130 
mt•r
 
MAS0
, 
r3


131 
mt•r
 
MAS1
, 
r4


132 
mt•r
 
MAS2
, 
r5


133 
mt•r
 
MAS3
, 
r6


134 
mt•r
 
MAS7
, 
r7


135 
isync


137 
ébwe


138 
isync


139 
sync


140 
isync


142 
bÃ


143 
	$FUNC_END
(
mmuPpcTlbWrôeExecuã
)

153 
	$FUNC_BEGIN
(
mmuE500TlbDy«micInvÆid©e
)

154 
lis
 
p0
, 
	$HIADJ
(
_PPC_MMUCSR0_L2TLB0_FI
)

155 
addi
 
p0
,Ö0, 
	$LO
 (
_PPC_MMUCSR0_L2TLB0_FI
)

156 
isync


157 
mt•r
 
MMUCSR0
, 
p0


158 
isync


159 
bÃ


160 
	$FUNC_END
(
mmuE500TlbDy«micInvÆid©e
)

170 
	$FUNC_BEGIN
(
mmuE500TlbSèticInvÆid©e
)

172 
lis
 
p0
, 
	$HIADJ
(
_PPC_MMUCSR0_L2TLB1_FI
)

173 
addi
 
p0
,Ö0, 
	$LO
 (
_PPC_MMUCSR0_L2TLB1_FI
)

174 
isync


175 
mt•r
 
MMUCSR0
, 
p0


176 
isync


177 
bÃ


178 
	$FUNC_END
(
mmuE500TlbSèticInvÆid©e
)

185 
	$FUNC_BEGIN
(
mmuPpcPidSë
)

186 
mt•r
 
PID
, 
r3


187 
isync


188 
bÃ


189 
	$FUNC_END
(
mmuPpcPidSë
)

196 
	$FUNC_BEGIN
(
mmuPpcSórchPidGë
)

197 
mf•r
 
r3
, 
MAS6


198 
isync


199 
bÃ


200 
	$FUNC_END
(
mmuPpcSórchPidGë
)

207 
	$FUNC_BEGIN
(
mmuPpcSórchPidSë
)

208 
mt•r
 
MAS6
, 
r3


209 
isync


210 
bÃ


211 
	$FUNC_END
(
mmuPpcSórchPidSë
)

218 
	$FUNC_BEGIN
(
mmuPpcPidGë
)

219 
mf•r
 
r3
, 
PID


220 
bÃ


221 
	$FUNC_END
(
mmuPpcPidGë
)

237 
	$FUNC_BEGIN
(
mmuPpcE500TlbõSètic
)

238 
‹i
 
p0
,Ö0, 
INV_TLB1


239 
b
 
mmuPpcE500TlbõComm⁄


240 
	$FUNC_END
(
mmuPpcE500TlbõSètic
)

256 
	$FUNC_BEGIN
(
mmuPpcE500Tlbõ
)

257 #if (
INV_TLB0
 != 0)

258 
‹i
 
p0
,Ö0, 
INV_TLB0


261 
mmuPpcE500TlbõComm⁄
:

262 
isync


263 
ébivax
 
r0
, 
p0


264 
msync


265 
isync


266 
	$TLBSYNC
()

267 
bÃ


268 
	$FUNC_END
(
mmuPpcE500Tlbõ
)

275 
	$FUNC_BEGIN
(
mmuPpcTlb1NE¡rõsGë
)

276 
mf•r
 
r3
, 
TLB1CFG


277 
˛æwi
 
r3
,r3,20

278 
bÃ


279 
	`FUNC_END
(
mmuPpcTlb1NE¡rõsGë
)

	@arch/sysExcArchALib.S

37 
	#PPC750CX_ERRATUM_16_STWCX


	)

43 
	#_ASMLANGUAGE


	)

44 
	~<libc/ˇgboŸ.h
>

45 
	~<c⁄fig.h
>

46 
	~<µc/toﬁPpc.h
>

47 
	~<µc/¨chPpc.h
>

48 
	~<µc/asmPpc.h
>

49 
	~<µc/excPpcLib.h
>

50 
	~<µc/µc85xx.h
>

52 
	#SVR
 1023

	)

53 
	$FUNC_EXPORT
(
sysSdaInô
)

54 
	$FUNC_EXPORT
(
sysTimeBa£Së
)

55 
	$FUNC_EXPORT
(
sysTimeBa£Gë
)

56 
	$FUNC_EXPORT
(
sysTimeBa£Inô
)

58 
	$FUNC_EXPORT
(
sysM§Gë
)

59 
	$FUNC_EXPORT
(
sysM§Së
)

60 
	$FUNC_EXPORT
(
sysDórGë
)

61 
	$FUNC_EXPORT
(
sysDórSë
)

62 
	$FUNC_EXPORT
(
sysC§r0Gë
)

63 
	$FUNC_EXPORT
(
sysC§r0Së
)

64 
	$FUNC_EXPORT
(
sysC§r1Gë
)

65 
	$FUNC_EXPORT
(
sysC§r1Së
)

66 
	$FUNC_EXPORT
(
sysMc§r0Gë
)

67 
	$FUNC_EXPORT
(
sysMc§r0Së
)

68 
	$FUNC_EXPORT
(
sysMc§r1Gë
)

69 
	$FUNC_EXPORT
(
sysMc§r1Së
)

70 #ifde‡
_CAG_SPE_SUPPORT


71 
	$FUNC_EXPORT
(
sysS≥fs¸Gë
)

72 
	$FUNC_EXPORT
(
sysS≥fs¸Së
)

74 
	$FUNC_EXPORT
(
sysDeˇrSë
)

75 
	$FUNC_EXPORT
(
sysL1CSR0Gë
)

76 
	$FUNC_EXPORT
(
sysL1CSR0Së
)

77 
	$FUNC_EXPORT
(
sysL1CSR1Gë
)

78 
	$FUNC_EXPORT
(
sysL1CSR1Së
)

79 
	$FUNC_EXPORT
(
sysL1CFG0Gë
)

80 
	$FUNC_EXPORT
(
sysL1CFG1Gë
)

81 
	$FUNC_EXPORT
(
sysIv‹1Së
)

82 
	$FUNC_EXPORT
(
sysE«bÀBP
)

83 
	$FUNC_EXPORT
(
sysDißbÀBP
)

84 
	$FUNC_EXPORT
(
sysBuc§Gë
)

85 
	$FUNC_EXPORT
(
sysSº0Gë
)

86 
	$FUNC_EXPORT
(
sysSº0Së
)

87 
	$FUNC_EXPORT
(
sysSº1Gë
)

88 
	$FUNC_EXPORT
(
sysSº1Së
)

90 
	$FUNC_EXPORT
(
sysPvrGë
)

91 
	$FUNC_EXPORT
(
sysSvrGë
)

92 
	$FUNC_EXPORT
(
sysFú°Bô
)

93 
	$FUNC_EXPORT
(
sysFú°RBô
)

94 
	$FUNC_EXPORT
(
sysEõio
)

96 
	$FUNC_EXPORT
(
sysHid0Gë
)

97 
	$FUNC_EXPORT
(
sysHid0Së
)

98 
	$FUNC_EXPORT
(
sysHid1Gë
)

99 
	$FUNC_EXPORT
(
sysHid1Së
)

100 
	$FUNC_EXPORT
(
sysTas
)

102 
	$FUNC_EXPORT
(
sysDecSë
)

103 
	$FUNC_EXPORT
(
sysDecGë
)

104 
	$FUNC_EXPORT
(
sysDb¸2Gë
)

105 
	$FUNC_EXPORT
(
sysDb¸2Së
)

106 
	$FUNC_EXPORT
(
sysDecI¡E«bÀ
)

107 
	$FUNC_EXPORT
(
sysDecI¡Ack
)

108 
	$FUNC_EXPORT
(
sysFôI¡E«bÀ
)

109 
	$FUNC_EXPORT
(
sysFôI¡DißbÀ
)

110 
	$FUNC_EXPORT
(
sysFôI¡Ack
)

111 
	$FUNC_EXPORT
(
sysIv¥Gë
)

112 
	$FUNC_EXPORT
(
sysIv¥Së
)

113 
	$FUNC_EXPORT
(
sysT¸Gë
)

114 
	$FUNC_EXPORT
(
sysT¸Së
)

115 
	$FUNC_EXPORT
(
sysT§Gë
)

116 
	$FUNC_EXPORT
(
sysT§Së
)

117 
	$FUNC_EXPORT
(
sysDb¸2Gë
)

118 
	$FUNC_EXPORT
(
sysDb¸2Së
)

119 
	$FUNC_EXPORT
(
sysDb§Gë
)

120 
	$FUNC_EXPORT
(
sysDb§CÀ¨
)

121 
	$FUNC_EXPORT
(
sysDac1Gë
)

122 
	$FUNC_EXPORT
(
sysDac1Së
)

123 
	$FUNC_EXPORT
(
sysDac2Gë
)

124 
	$FUNC_EXPORT
(
sysDac2Së
)

125 
	$FUNC_EXPORT
(
sysIac1Gë
)

126 
	$FUNC_EXPORT
(
sysIac1Së
)

127 
	$FUNC_EXPORT
(
sysIac2Gë
)

128 
	$FUNC_EXPORT
(
sysIac2Së
)

129 
	$FUNC_EXPORT
(
sysPúGë
)

130 
	$FUNC_EXPORT
(
sysPúSë
)

131 
	$FUNC_EXPORT
(
sysLpidSë
)

132 
	$FUNC_EXPORT
(
sysCpuLibInô
)

133 
	$FUNC_EXPORT
(
excIv‹Inô
)

134 
	$FUNC_EXPORT
(
sysCpuIndexGë
)

135 
	$FUNC_EXPORT
(
gë_ticks
)

137 
_CAG_TEXT_SEG_START


156 
	$FUNC_BEGIN
(
sysTas
)

157 
lis
 
r4
, 0x8000

158 #ifde‡
PPC750CX_ERRATUM_16_STWCX


159 
sync


172 
eõio


174 
lw¨x
 
r5
, 0, 
r3


175 
cmpwi
 
r5
, 0

176 
b√
 
sysTasEnd


178 
°wcx
. 
r4
, 0, 
r3


179 
eõio


180 
b√
- 
sysTas


181 
li
 
r3
, 0x01

182 
bÃ


183 
sysTasEnd
:

184 
li
 
r3
, 0

185 
bÃ


186 
	$FUNC_END
(
sysTas
)

197 
	$FUNC_BEGIN
(
sysSdaInô
)

199 
lis
 
r2
, 
	$HI
(
_SDA2_BASE_
)

200 
‹i
 
r2
,Ñ2, 
	$LO
(
_SDA2_BASE_
)

202 
lis
 
r13
, 
	$HI
(
_SDA_BASE_
)

203 
‹i
 
r13
,Ñ13, 
	$LO
(
_SDA_BASE_
)

204 
bÃ


205 
	$FUNC_END
(
sysSdaInô
)

218 
	$FUNC_BEGIN
(
sysM§Gë
)

219 
mfm§
 
p0


220 
bÃ


221 
	$FUNC_END
(
sysM§Gë
)

238 
	$FUNC_BEGIN
(
sysM§Së
)

239 
mtm§
 
p0


240 
isync


241 
bÃ


243 
	$FUNC_END
(
sysM§Së
)

256 
	$FUNC_BEGIN
(
sysDórGë
)

257 
mf•r
 
p0
, 
DEAR


258 
bÃ


259 
	$FUNC_END
(
sysDórGë
)

273 
	$FUNC_BEGIN
(
sysDórSë
)

274 
mt•r
 
DEAR
, 
p0


275 
bÃ


276 
	$FUNC_END
(
sysDórSë
)

289 
	$FUNC_BEGIN
(
sysC§r0Gë
)

290 
mf•r
 
p0
, 
CSRR0


291 
bÃ


292 
	$FUNC_END
(
sysC§r0Gë
)

306 
	$FUNC_BEGIN
(
sysC§r0Së
)

307 
mt•r
 
CSRR0
, 
p0


308 
bÃ


309 
	$FUNC_END
(
sysC§r0Së
)

323 
	$FUNC_BEGIN
(
sysC§r1Gë
)

324 
mf•r
 
p0
, 
CSRR1


325 
bÃ


326 
	$FUNC_END
(
sysC§r1Gë
)

340 
	$FUNC_BEGIN
(
sysC§r1Së
)

341 
mt•r
 
CSRR1
, 
p0


342 
bÃ


343 
	$FUNC_END
(
sysC§r1Së
)

356 
	$FUNC_BEGIN
(
sysMc§r0Gë
)

357 
mf•r
 
p0
, 
MCSRR0


358 
bÃ


359 
	$FUNC_END
(
sysMc§r0Gë
)

373 
	$FUNC_BEGIN
(
sysMc§r0Së
)

374 
mt•r
 
MCSRR0
, 
p0


375 
bÃ


376 
	$FUNC_END
(
sysMc§r0Së
)

390 
	$FUNC_BEGIN
(
sysMc§r1Gë
)

391 
mf•r
 
p0
, 
MCSRR1


392 
bÃ


393 
	$FUNC_END
(
sysMc§r1Gë
)

407 
	$FUNC_BEGIN
(
sysMc§r1Së
)

408 
mt•r
 
MCSRR1
, 
p0


409 
bÃ


410 
	$FUNC_END
(
sysMc§r1Së
)

412 #ifde‡
_CAG_SPE_SUPPORT


424 
	$FUNC_BEGIN
(
sysS≥fs¸Gë
)

425 
mf•r
 
p0
, 
SPEFSCR


426 
bÃ


427 
	$FUNC_END
(
sysS≥fs¸Gë
)

441 
	$FUNC_BEGIN
(
sysS≥fs¸Së
)

442 
mt•r
 
SPEFSCR
, 
p0


443 
isync


444 
bÃ


445 
	$FUNC_END
(
sysS≥fs¸Së
)

459 
	$FUNC_BEGIN
(
sysDeˇrSë
)

460 
mt•r
 
DECAR
, 
p0


461 
bÃ


462 
	$FUNC_END
(
sysDeˇrSë
)

476 
	$FUNC_BEGIN
(
sysL1CSR0Gë
)

477 
sync


478 
mf•r
 
p0
, 
L1CSR0


479 
bÃ


480 
	$FUNC_END
(
sysL1CSR0Gë
)

494 
	$FUNC_BEGIN
(
sysL1CSR0Së
)

495 
msync


496 
isync


497 
mt•r
 
L1CSR0
, 
p0


498 
isync


499 
bÃ


500 
	$FUNC_END
(
sysL1CSR0Së
)

514 
	$FUNC_BEGIN
(
sysL1CSR1Gë
)

515 
sync


516 
mf•r
 
p0
, 
L1CSR1


517 
bÃ


518 
	$FUNC_END
(
sysL1CSR1Gë
)

532 
	$FUNC_BEGIN
(
sysL1CSR1Së
)

533 
msync


534 
isync


535 
mt•r
 
L1CSR1
, 
p0


536 
isync


537 
bÃ


538 
	$FUNC_END
(
sysL1CSR1Së
)

551 
	$FUNC_BEGIN
(
sysL1CFG0Gë
)

552 
mf•r
 
p0
, 
L1CFG0


553 
bÃ


554 
	$FUNC_END
(
sysL1CFG0Gë
)

568 
	$FUNC_BEGIN
(
sysL1CFG1Gë
)

569 
mf•r
 
p0
, 
L1CFG1


570 
bÃ


571 
	$FUNC_END
(
sysL1CFG1Gë
)

584 
	$FUNC_BEGIN
(
sysIv‹1Së
)

585 
mt•r
 
IVOR1
, 
p0


586 
bÃ


587 
	$FUNC_END
(
sysIv‹1Së
)

600 
	$FUNC_BEGIN
(
sysSº0Gë
)

601 
mf§r0
 
p0


602 
bÃ


603 
	$FUNC_END
(
sysSº0Gë
)

617 
	$FUNC_BEGIN
(
sysSº0Së
)

618 
mt§r0
 
p0


619 
bÃ


620 
	$FUNC_END
(
sysSº0Së
)

634 
	$FUNC_BEGIN
(
sysSº1Gë
)

635 
mf§r1
 
p0


636 
bÃ


637 
	$FUNC_END
(
sysSº1Gë
)

651 
	$FUNC_BEGIN
(
sysSº1Së
)

652 
mt§r1
 
p0


653 
bÃ


654 
	$FUNC_END
(
sysSº1Së
)

668 
	$FUNC_BEGIN
(
sysFú°Bô
)

669 
˙ézw
 
p0
,Ö0

670 
bÃ


671 
	$FUNC_END
(
sysFú°Bô
)

686 
	$FUNC_BEGIN
(
sysFú°RBô
)

687 
mr
 
p1
, 
p0


688 
˙ézw
 
p0
, 
p1


689 
cmpwi
 
p0
, 32

690 
b√
 
födBô


691 
bÃ


692 
födBô
:

693 
li
 
p0
, -1

694 
födBô2
:

695 
addic
 
p0
,Ö0, 1

696 
rŸrwi
 
p1
,Ö1, 1

697 
˙ézw
. 
p2
, 
p1


698 
b√
 
födBô2


699 
bÃ


700 
	$FUNC_END
(
sysFú°RBô
)

712 
	$FUNC_BEGIN
(
sysPvrGë
)

713 
mf•r
 
p0
, 
PVR


714 
bÃ


715 
	$FUNC_END
(
sysPvrGë
)

731 
	$FUNC_BEGIN
(
sysEõio
)

732 
eõio


733 
bÃ


734 
	$FUNC_END
(
sysEõio
)

745 
	$FUNC_BEGIN
(
sysHid0Së
)

746 
isync


747 
mt•r
 
HID0
, 
p0


748 
isync


749 
bÃ


750 
	$FUNC_END
(
sysHid0Së
)

762 
	$FUNC_BEGIN
(
sysHid0Gë
)

763 
mf•r
 
p0
, 
HID0


764 
bÃ


765 
	$FUNC_END
(
sysHid0Gë
)

776 
	$FUNC_BEGIN
(
sysHid1Së
)

777 
msync


778 
mt•r
 
HID1
, 
p0


779 
isync


780 
bÃ


781 
	$FUNC_END
(
sysHid1Së
)

792 
	$FUNC_BEGIN
(
sysHid1Gë
)

793 
mf•r
 
p0
, 
HID1


794 
bÃ


795 
	$FUNC_END
(
sysHid1Gë
)

814 
	$FUNC_BEGIN
(
sysTimeBa£Inô
)

815 
mâbl
 
p0


816 
mâbu
 
p1


817 
bÃ


818 
	$FUNC_END
(
sysTimeBa£Inô
)

835 
	$FUNC_BEGIN
(
sysTimeBa£Së
)

836 
li
 
p2
, 0

837 
mt•r
 
TBL_W
, 
p2


838 
mt•r
 
TBU_W
, 
p0


839 
mt•r
 
TBL_W
, 
p1


840 
bÃ


841 
	$FUNC_END
(
sysTimeBa£Së
)

859 
	$FUNC_BEGIN
(
sysTimeBa£Gë
)

861 
mf•r
 
p2
, 
TBU_R


862 
mf•r
 
p3
, 
TBL_R


863 
mf•r
 
p4
, 
TBU_R


864 
cmpw
 
p2
, 
p4


865 
b√
 
sysTimeBa£Gë


866 
°w
 
p2
, 0x0(
p0
)

867 
°w
 
p3
, 0x0(
p1
)

868 
bÃ


869 
	$FUNC_END
(
sysTimeBa£Gë
)

882 
	$FUNC_BEGIN
(
sysDecSë
)

883 
mt•r
 
DEC
, 
p0


884 
mt•r
 
DECAR
, 
p0


885 
bÃ


886 
	$FUNC_END
(
sysDecSë
)

900 
	$FUNC_BEGIN
(
sysDecGë
)

901 
mf•r
 
p0
, 
DEC


902 
bÃ


903 
	$FUNC_END
(
sysDecGë
)

917 
	$FUNC_BEGIN
(
sysDecI¡E«bÀ
)

918 
mf•r
 
p1
, 
TCR


919 
‹is
 
p1
,Ö1, 
_PPC_TCR_DIE_U


920 
mt•r
 
TCR
, 
p1


921 
mfm§
 
p0


922 
‹i
 
p0
,Ö0, 
_PPC_MSR_EE


923 
mtm§
 
p0


924 
bÃ


925 
	$FUNC_END
(
sysDecI¡E«bÀ
)

939 
	$FUNC_BEGIN
(
sysDecI¡Ack
)

940 
addis
 
p0
, 
r0
, 
_PPC_TSR_DIS_U


941 
mt•r
 
TSR
, 
p0


942 
bÃ


943 
	$FUNC_END
(
sysDecI¡Ack
)

960 
	$FUNC_BEGIN
(
sysE«bÀBP
)

961 
mf•r
 
p0
, 
BUCSR


962 
™di
. 
p1
, 
p0
, 
_PPC_BUCSR_E


963 
b√Ã


964 
™di
. 
p1
, 
p0
, 
	`LO
(~
_PPC_BUCSR_FI
)

965 
mt•r
 
BUCSR
, 
p1


966 
isync


967 
‹i
 
p1
, 
p0
, 
	$LO
(
_PPC_BUCSR_FI
)

968 
mt•r
 
BUCSR
, 
p1


969 
isync


970 
mf•r
 
p0
, 
BUCSR


971 
‹i
 
p1
, 
p0
, 
	$LO
(
_PPC_BUCSR_E
)

972 
mt•r
 
BUCSR
, 
p1


973 
isync


974 
bÃ


975 
	$FUNC_END
(
sysE«bÀBP
)

992 
	$FUNC_BEGIN
(
sysDißbÀBP
)

993 
mf•r
 
p0
, 
BUCSR


994 
™di
. 
p1
, 
p0
, 
	`LO
(~
_PPC_BUCSR_E
)

995 
mt•r
 
BUCSR
, 
p1


996 
isync


997 
mf•r
 
p0
, 
BUCSR


998 
™di
. 
p1
, 
p0
, 
	`LO
(~
_PPC_BUCSR_FI
)

999 
mt•r
 
BUCSR
, 
p1


1000 
isync


1001 
‹i
 
p1
, 
p0
, 
	$LO
(
_PPC_BUCSR_FI
)

1002 
mt•r
 
BUCSR
, 
p1


1003 
isync


1004 
bÃ


1005 
	$FUNC_END
(
sysDißbÀBP
)

1018 
	$FUNC_BEGIN
(
sysBuc§Gë
)

1019 
mf•r
 
p0
, 
BUCSR


1020 
bÃ


1021 
	$FUNC_END
(
sysBuc§Gë
)

1034 
	$FUNC_BEGIN
(
sysDb¸0Gë
)

1035 
mf•r
 
p0
, 
DBCR0


1036 
bÃ


1037 
	$FUNC_END
(
sysDb¸0Gë
)

1051 
	$FUNC_BEGIN
(
sysDb¸0Së
)

1052 
mt•r
 
DBCR0
, 
p0


1053 
isync


1054 
bÃ


1055 
	$FUNC_END
(
sysDb¸0Së
)

1069 
	$FUNC_BEGIN
(
sysDb¸1Gë
)

1070 
mf•r
 
p0
, 
DBCR1


1071 
bÃ


1072 
	$FUNC_END
(
sysDb¸1Gë
)

1086 
	$FUNC_BEGIN
(
sysDb¸1Së
)

1087 
mt•r
 
DBCR1
, 
p0


1088 
isync


1089 
bÃ


1090 
	$FUNC_END
(
sysDb¸1Së
)

1104 
	$FUNC_BEGIN
(
sysDb¸2Gë
)

1105 
mf•r
 
p0
, 
DBCR2


1106 
bÃ


1107 
	$FUNC_END
(
sysDb¸2Gë
)

1121 
	$FUNC_BEGIN
(
sysDb¸2Së
)

1122 
mt•r
 
DBCR2
, 
p0


1123 
isync


1124 
bÃ


1125 
	$FUNC_END
(
sysDb¸2Së
)

1139 
	$FUNC_BEGIN
(
sysFôI¡Ack
)

1140 
addis
 
p0
, 
r0
, 
_PPC_TSR_FIS_U


1141 
mt•r
 
TSR
, 
p0


1142 
bÃ


1143 
	$FUNC_END
(
sysFôI¡Ack
)

1157 
	$FUNC_BEGIN
(
sysFôI¡DißbÀ
)

1158 
mf•r
 
p0
, 
TCR


1159 
addis
 
p1
, 
r0
, 
_PPC_TCR_FIE_U


1160 
™dc
 
p1
, 
p0
,Ö1

1161 
mt•r
 
TCR
, 
p1


1162 
bÃ


1163 
	$FUNC_END
(
sysFôI¡DißbÀ
)

1177 
	$FUNC_BEGIN
(
sysFôI¡E«bÀ
)

1178 
mf•r
 
p1
, 
TCR


1179 
‹is
 
p1
,Ö1, 
_PPC_TCR_FIE_U


1180 
mt•r
 
TCR
, 
p1


1181 
bÃ


1182 
	$FUNC_END
(
sysFôI¡E«bÀ
)

1195 
	$FUNC_BEGIN
(
sysT¸Gë
)

1196 
mf•r
 
p0
, 
TCR


1197 
bÃ


1198 
	$FUNC_END
(
sysT¸Gë
)

1212 
	$FUNC_BEGIN
(
sysT¸Së
)

1213 
mt•r
 
TCR
, 
p0


1214 
bÃ


1215 
	$FUNC_END
(
sysT¸Së
)

1229 
	$FUNC_BEGIN
(
sysT§Gë
)

1230 
mf•r
 
p0
, 
TSR


1231 
bÃ


1232 
	$FUNC_END
(
sysT§Gë
)

1246 
	$FUNC_BEGIN
(
sysT§Së
)

1247 
mt•r
 
TSR
, 
p0


1248 
bÃ


1249 
	$FUNC_END
(
sysT§Së
)

1251 #ifdef 
IVPR


1263 
	$FUNC_BEGIN
(
sysIv¥Gë
)

1264 
mf•r
 
p0
, 
IVPR


1265 
bÃ


1266 
	$FUNC_END
(
sysIv¥Gë
)

1280 
	$FUNC_BEGIN
(
sysIv¥Së
)

1281 
mt•r
 
IVPR
, 
p0


1282 
bÃ


1283 
	$FUNC_END
(
sysIv¥Së
)

1299 
	$FUNC_BEGIN
(
sysDb§Gë
)

1300 
mf•r
 
p0
, 
DBSR


1301 
bÃ


1302 
	$FUNC_END
(
sysDb§Gë
)

1316 
	$FUNC_BEGIN
(
sysDb§CÀ¨
)

1317 
mt•r
 
DBSR
, 
p0


1318 
isync


1319 
bÃ


1320 
	$FUNC_END
(
sysDb§CÀ¨
)

1334 
	$FUNC_BEGIN
(
sysDac1Gë
)

1335 
mf•r
 
p0
, 
DAC1


1336 
bÃ


1337 
	$FUNC_END
(
sysDac1Gë
)

1351 
	$FUNC_BEGIN
(
sysDac1Së
)

1352 
mt•r
 
DAC1
, 
p0


1353 
bÃ


1354 
	$FUNC_END
(
sysDac1Së
)

1368 
	$FUNC_BEGIN
(
sysDac2Gë
)

1369 
mf•r
 
p0
, 
DAC2


1370 
bÃ


1371 
	$FUNC_END
(
sysDac2Gë
)

1385 
	$FUNC_BEGIN
(
sysDac2Së
)

1386 
mt•r
 
DAC2
, 
p0


1387 
bÃ


1388 
	$FUNC_END
(
sysDac2Së
)

1402 
	$FUNC_BEGIN
(
sysIac1Gë
)

1403 
mf•r
 
p0
, 
IAC1


1404 
bÃ


1405 
	$FUNC_END
(
sysIac1Gë
)

1419 
	$FUNC_BEGIN
(
sysIac1Së
)

1420 
mt•r
 
IAC1
, 
p0


1421 
isync


1422 
bÃ


1423 
	$FUNC_END
(
sysIac1Së
)

1437 
	$FUNC_BEGIN
(
sysIac2Gë
)

1438 
mf•r
 
p0
, 
IAC2


1439 
bÃ


1440 
	$FUNC_END
(
sysIac2Gë
)

1454 
	$FUNC_BEGIN
(
sysIac2Së
)

1455 
mt•r
 
IAC2
, 
p0


1456 
isync


1457 
bÃ


1458 
	$FUNC_END
(
sysIac2Së
)

1473 
	$FUNC_BEGIN
(
sysSvrGë
)

1474 
mf•r
 
p0
, 
SVR


1475 
bÃ


1476 
	$FUNC_END
(
sysSvrGë
)

1478 #ifde‡
PIR


1493 
	$FUNC_BEGIN
(
sysPúGë
)

1494 
mf•r
 
p0
, 
PIR


1495 
bÃ


1496 
	$FUNC_END
(
sysPúGë
)

1511 
	$FUNC_BEGIN
(
sysPúSë
)

1512 
mt•r
 
PIR
, 
p0


1513 
bÃ


1514 
	$FUNC_END
(
sysPúSë
)

1528 
	$FUNC_BEGIN
(
sysCpuLibInô
)

1529 
li
 
p0
, 0

1530 
mt•r
 
PIR
, 
p0


1531 
bÃ


1532 
	$FUNC_END
(
sysCpuLibInô
)

1549 
	$FUNC_BEGIN
(
sysCpuIndexGë
)

1550 
li
 
p0
, 0

1551 
bÃ


1552 
	$FUNC_END
(
sysCpuIndexGë
)

1563 
	$FUNC_BEGIN
(
excIv‹Inô
)

1564 
li
 
p0
, 
IVOR0_VAL


1565 
mt•r
 
IVOR0
, 
p0


1566 
li
 
p0
, 
IVOR1_VAL


1567 
mt•r
 
IVOR1
, 
p0


1568 
li
 
p0
, 
IVOR2_VAL


1569 
mt•r
 
IVOR2
, 
p0


1570 
li
 
p0
, 
IVOR3_VAL


1571 
mt•r
 
IVOR3
, 
p0


1572 
li
 
p0
, 
IVOR4_VAL


1573 
mt•r
 
IVOR4
, 
p0


1574 
li
 
p0
, 
IVOR5_VAL


1575 
mt•r
 
IVOR5
, 
p0


1576 
li
 
p0
, 
IVOR6_VAL


1577 
mt•r
 
IVOR6
, 
p0


1578 
li
 
p0
, 
IVOR7_VAL


1579 
mt•r
 
IVOR7
, 
p0


1580 
li
 
p0
, 
IVOR8_VAL


1581 
mt•r
 
IVOR8
, 
p0


1582 
li
 
p0
, 
IVOR9_VAL


1583 
mt•r
 
IVOR9
, 
p0


1584 
li
 
p0
, 
IVOR10_VAL


1585 
mt•r
 
IVOR10
, 
p0


1586 
li
 
p0
, 
IVOR11_VAL


1587 
mt•r
 
IVOR11
, 
p0


1588 
li
 
p0
, 
IVOR12_VAL


1589 
mt•r
 
IVOR12
, 
p0


1590 
li
 
p0
, 
IVOR13_VAL


1591 
mt•r
 
IVOR13
, 
p0


1592 
li
 
p0
, 
IVOR14_VAL


1593 
mt•r
 
IVOR14
, 
p0


1594 
li
 
p0
, 
IVOR15_VAL


1595 
mt•r
 
IVOR15
, 
p0


1596 #ifdef 
IVOR32


1597 
li
 
p0
, 
IVOR32_VAL


1598 
mt•r
 
IVOR32
, 
p0


1600 #ifdef 
IVOR33


1601 
li
 
p0
, 
IVOR33_VAL


1602 
mt•r
 
IVOR33
, 
p0


1604 #ifdef 
IVOR34


1605 
li
 
p0
, 
IVOR34_VAL


1606 
mt•r
 
IVOR34
, 
p0


1608 #ifde‡ 
IVOR35


1609 
li
 
p0
, 
IVOR35_VAL


1610 
mt•r
 
IVOR35
, 
p0


1612 
bÃ


1613 
	$FUNC_END
(
excIv‹Inô
)

1620 
	$FUNC_BEGIN
(
gë_ticks
)

1621 
gë_ticks
:

1622 1: 
m·bu
 
r3


1623 
m·b
 
r4


1624 
m·bu
 
r5


1625 
cmp
 0,
r3
,
r5


1626 
b√
 1b

1627 
bÃ


1628 
	`FUNC_END
(
gë_ticks
)

	@arch/sysExcArchLib.c

37 
	~<libc/ˇgboŸ.h
>

38 
	~<c⁄fig.h
>

39 
	~<libc/°dio.h
>

40 
	~<libc/sy°em.h
>

41 
	~<µc/¨chPpc.h
>

42 
	~<µc/µc85xx.h
>

43 
	~<µc/excPpcLib.h
>

44 
	~"sysExcLib.h
"

45 
	~<kî√l/sysOs.h
>

51 
IMPORT
 
codeBa£
 
	gexcVecBa£A…Adrs
;

55 
LOCAL
 
ve˘‹Ba£
 
	gexcVecBa£
 = (ve˘‹Ba£)
NULL
;

58 
UINT32
 
	mg¥
;

59 * 
	mg¥Msg
;

60 } 
	tEXC_GPR_MSG
;

62 
EXC_GPR_MSG
 
	g¥eg
 [] = {

107 #ifde‡
IVOR0


108 
IMPORT
 
excIv‹Inô
 ();

110 
IMPORT
 
execuãEx˚±i⁄
(
UINT8
 
ve˘‹
);

111 
STATUS
 
ö°ÆlE500P¨ôyEº‹Recovîy
 ();

112 
IMPORT
 
∑nic
(c⁄° *
fmt
, ...);

136 
STATUS
 
	gexcVecInô


138 
FUNCPTR
 * 
	gba£Addr


142 
excVecBa£Së
(
ba£Addr
);

144 #ifdef 
IVOR0


145 
excIv‹Inô
();

148 
sysM§Së
 (
sysM§Gë
(Ë| 
_PPC_MSR_ME


149 #ifdef 
_PPC_MSR_RI


150 | 
_PPC_MSR_RI


154 
ö°ÆlE500P¨ôyEº‹Recovîy
();

155 
ex˚Inô
();

157  (
	gOK
);

171 
	gexcVecBa£Së


173 
FUNCPTR
 * 
	gba£Addr


176 
	gexcVecBa£
 = (
ve˘‹Ba£
)((
UINT32
)
ba£Addr
 & 0x0ffff0000);

177 
sysIv¥Së
 ((Ë
excVecBa£
);

194 
FUNCPTR
 * 
	$excVecBa£Gë
 ()

196  (
FUNCPTR
 *)
excVecBa£
;

197 
	}
}

211 
STATUS
 
	$ö°ÆlE500P¨ôyEº‹Recovîy
 ()

213 
	`sysIv‹1Së
(
_EXC_OFF_L1_PARITY
);

214 
	`sysL1CSR0Së
(
	`sysL1CSR0Gë
()|
_PPC_L1CSR_CPE
);

215 
	`sysL1CSR1Së
(
	`sysL1CSR1Gë
()|
_PPC_L1CSR_CPE
);

216  
OK
;

217 
	}
}

226 
	$machöeEx˚±i⁄
(
UINT32
 
mc§
)

228 
	`¥ötf
("Cau£d by (‰om mc§): 0x%08x\n", 
mc§
);

229 i‡(
mc§
 & 0x80000000)

230 
	`¥ötf
("Machine check inputÖin\n");

231 i‡(
mc§
 & 0x40000000)

232 
	`¥ötf
("Instruction cacheÖarityÉrror\n");

233 i‡(
mc§
 & 0x20000000)

234 
	`¥ötf
("Data cacheÖushÖarityÉrror\n");

235 i‡(
mc§
 & 0x10000000)

236 
	`¥ötf
("Data cacheÖarityÉrror\n");

237 i‡(
mc§
 & 0x00000080)

238 
	`¥ötf
("Bus instructionáddressÉrror\n");

239 i‡(
mc§
 & 0x00000040)

240 
	`¥ötf
("Bus ReadáddressÉrror\n");

241 i‡(
mc§
 & 0x00000020)

242 
	`¥ötf
("Bus WriteáddressÉrror\n");

243 i‡(
mc§
 & 0x00000010)

244 
	`¥ötf
("Bus Instruction data busÉrror\n");

245 i‡(
mc§
 & 0x00000008)

246 
	`¥ötf
("Bus Read data busÉrror\n");

247 i‡(
mc§
 & 0x00000004)

248 
	`¥ötf
("Bus Write busÉrror\n");

249 i‡(
mc§
 & 0x00000002)

250 
	`¥ötf
("Bus InstructionÖarityÉrror\n");

251 i‡(
mc§
 & 0x00000001)

252 
	`¥ötf
("Bus ReadÖarityÉrror\n");

253 
	}
}

262 
	$S≥Ex˚±i⁄
()

264 
UINT32
 
•efs¸
;

265 
•efs¸
 = 
	`sysS≥fs¸Gë
 ();

267 i‡((
•efs¸
 & 
_PPC_SPEFSCR_FINV
) != 0)

268 
	`¥ötf
("Set whenán input value onÅhe high side isá NaN, Inf, or Denorm. Also set oná divide if bothÅhe dividendánd divisoráre zero.\n");

269 i‡((
•efs¸
 & 
_PPC_SPEFSCR_FDBZ
) != 0)

270 
	`¥ötf
("Embedded floating-point divide-by-zeroÉrror. Set ifÅhe dividend isÇon-zeroándÅhe divisor is zero.\n");

271 i‡((
•efs¸
 & 
_PPC_SPEFSCR_FUNF
) != 0)

272 
	`¥ötf
("Embedded floating-point underflowÉrror\n");

273 i‡((
•efs¸
 & 
_PPC_SPEFSCR_FOVF
) != 0)

274 
	`¥ötf
("Embedded floating-point overflowÉrror\n");

275 
	}
}

284 
	$gíîÆEx˚±i⁄
(
UINT32
 
•
,UINT32 
dór
,UINT32 
e§
,UINT32 
ty≥
)

286 
UINT32
 
m§
=0;

287 
UINT32
 
i
=0;

288 
__asm__
 
	`__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

289 
	`¥ötf
("\n########################################\n");

290 
	`¥ötf
("\n EnterÅhe PPCE500Éxception....\n");

291 
	`¥ötf
("----------------------------------------->\n");

292 
	`¥ötf
(" The system will hang\n");

293 
	`¥ötf
("<-----------------------------------------\n");

295 
	`¥ötf
("èsk sp:%x,ef„˘ivêaddªss:%x,ex˚±i⁄ c⁄dôi⁄s:%x,m§:%x\n",
•
,
dór
,
e§
,
m§
);

297 
ty≥
) {

298 
_EXC_OFF_CRTL
:

299 
	`¥ötf
("you meetÅhe unsupport CriticalÉxception\n");

301 
_EXC_OFF_MACH
:

302 
	`¥ötf
("you meetÅhe mache checkÉxception\n");

303 
	`machöeEx˚±i⁄
 (
e§
);

304 
	`execuãEx˚±i⁄
(
EXCEPTION_MACHINE_CHECK
);

306 
_EXC_OFF_DATA
:

307 
	`¥ötf
("you meetÅhe data storageÉxception\n");

308 
	`execuãEx˚±i⁄
(
EXCEPTION_DSI
);

310 
_EXC_OFF_INST
:

311 
	`¥ötf
("you meetÅhe inst storageÉxception\n");

312 
	`execuãEx˚±i⁄
(
EXCEPTION_ISI
);

314 
_EXC_OFF_INTR
:

315 
	`¥ötf
("you meetÅhe unsupportÉxtern interruptÉxception\n");

317 
_EXC_OFF_ALIGN
:

318 
	`¥ötf
("you meetÅheálignedÉxception\n");

319 
	`execuãEx˚±i⁄
(
EXCEPTION_ALIGMENT
);

321 
_EXC_OFF_PROG
:

322 
	`¥ötf
("you meetÅheÖrogramÉxception\n");

323 
	`execuãEx˚±i⁄
(
EXCEPTION_PROGRAM
);

325 
_EXC_OFF_DECR
:

326 
	`¥ötf
("you meetÅhe unsupport dec interrupt\n");

328 
_EXC_OFF_DATA_MISS
:

329 
	`¥ötf
("B you meetÅhe data missÉxception\n");

330 
	`execuãEx˚±i⁄
(
EXCEPTION_DMISS
);

332 
_EXC_OFF_INST_MISS
:

333 
	`execuãEx˚±i⁄
(
EXCEPTION_IMISS
);

334 
	`¥ötf
("you meetÅhe inst missÉxception\n");

336 
_EXC_OFF_DBG
:

337 
	`¥ötf
("you meetÅhe unsupport dbgÉxception\n");

339 
_EXC_OFF_SPE
:

340 
	`¥ötf
("you meetÅhe SPE unavaiableÉxception\n");

342 
_EXC_OFF_VEC_DATA
:

343 
	`¥ötf
("you meetÅhe SPE dataÉxception\n");

344 
	`S≥Ex˚±i⁄
();

345 
	`execuãEx˚±i⁄
(
EXCEPTION_SPE
);

347 
_EXC_OFF_VEC_RND
:

348 
	`¥ötf
("you meetÅhe SPEÑoundÉxception\n");

349 
	`execuãEx˚±i⁄
(
EXCEPTION_SPE
);

352 
	`¥ötf
("??ex˚±i⁄à0x%x\n",
ty≥
);

356 
UINT32
 *
±rExc
 = (UINT32 *)(
EXC_STACK_HIGH
 - 
EXC_FRAME_SIZE
);

358 
i
=39; i>0; i--) {

359 
	`¥ötf
("%8s=%8x ",
¥eg
[
i
].
g¥Msg
,*(
±rExc
));

360 if(
i
%5==0) {

361 
	`¥ötf
("\n");

363 
±rExc
++;

367 
	`∑nic
 ("theÅarget willÑeboot\n");

368 
	}
}

	@arch/sysExcLib.c

30 
	~<libc/°ddef.h
>

31 
	~<libc/°dio.h
>

32 
	~<libc/°rög.h
>

33 
	~"sysExcLib.h
"

35 
ex˚±i⁄Desc
 
	gex˚±i⁄DescTabÀ
[
EXCEPTION_MAX_NUM
];

38 
	$ex˚Inô
()

40 
	`mem£t
(
ex˚±i⁄DescTabÀ
,0,(exceptionDescTable));

41 
	}
}

50 
	$uƒegi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
)

52 sig√d 
ªt
=0;

54 if(
ex˚±i⁄_ty≥
>=
EXCEPTION_MAX_NUM
) {

55 
ªt
=-1;

56 
	`¥ötf
("ex˚±i⁄_num i†bey⁄dÅhêmaxÇum :%s\n",
__FUNCTION__
);

59 if(
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
h™dÀr
!=
NULL
) {

60 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
h™dÀr
=(
ex˚±i⁄_h™dÀr
)
NULL
;

61 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
p_d©a
=
NULL
;

62 
	`mem£t
(
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
«me
,0,(exceptionDescTable[exception_type].name));

63 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
Êags
=0;

64 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
ex˚±i⁄_num
=0xffffffff;

67  
ªt
;

68 
	}
}

77 
	$ªgi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
,
ex˚±i⁄_h™dÀr
 
h™dÀr
,* 
¥iv©e_d©a
,c⁄° * 
«me
)

79 sig√d 
ªt
=0;

81 if(
«me
 =
NULL
) {

82 
	`¥ötf
("∂ó£ sëÅhêex¯«me, %s\n",
__FUNCTION__
);

86 if(
ex˚±i⁄_ty≥
>=
EXCEPTION_MAX_NUM
) {

87 
ªt
=-1;

88 
	`¥ötf
("ex˚±i⁄_ty≥ i†bey⁄dÅhêmaxÇum :%s\n",
__FUNCTION__
);

90 if(
NULL
==
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
h™dÀr
) {

91 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
h™dÀr
=handler;

92 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
p_d©a
=
¥iv©e_d©a
;

93 
	`°∫˝y
(
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
«me
,name,32);

94 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
Êags
=0;

95 
ex˚±i⁄DescTabÀ
[
ex˚±i⁄_ty≥
].
ex˚±i⁄_num
=exception_type;

97 
ªt
=-1;

100  
ªt
;

101 
	}
}

110 
	$execuãEx˚±i⁄
(
UINT8
 
ve˘‹
)

112 if(
NULL
==
ex˚±i⁄DescTabÀ
[
ve˘‹
].
h™dÀr
) {

113 
	`¥ötf
("i give youá interface,you should do something before i shut downÅhe cagOS\n");

116 (
ex˚±i⁄DescTabÀ
[
ve˘‹
].
h™dÀr
)(ve˘‹,ex˚±i⁄DescTabÀ[ve˘‹].
p_d©a
);

118 
	}
}

	@arch/sysExcLib.h

31 #i‚de‡
__EXCEPTION_H__


32 
	#__EXCEPTION_H__


	)

34 
	~<libc/ˇgboŸ.h
>

36 
	#EXCEPTION_MAX_NUM
 6

	)

38 
ex˚±i⁄Des¸ùt‹
 
	tex˚±i⁄Desc
;

39 (*
	tex˚±i⁄_h™dÀr
)(
	tUINT32
,*);

41 
	sex˚±i⁄Des¸ùt‹
 {

42 
ex˚±i⁄_h™dÀr
 
h™dÀr
;

43 
ex˚±i⁄_num
;

44 * 
p_d©a
;

45 
UINT32
 
Êags
;

46 
UINT32
 
cou¡
;

47 
«me
[32];

48 
ex˚±i⁄Desc
 * 
√xt
;

51 
	eEXCEPTION_TYPE
 {

52 
EXCEPTION_MACHINE_CHECK
,

53 
EXCEPTION_DSI
,

54 
EXCEPTION_ISI
,

55 
EXCEPTION_ALIGMENT
,

56 
EXCEPTION_PROGRAM
,

57 
EXCEPTION_SPE
,

58 
EXCEPTION_IMISS
,

59 
EXCEPTION_DMISS
,

62 
	`ªgi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
,
ex˚±i⁄_h™dÀr
 
h™dÀr
,* 
¥iv©e_d©a
,c⁄° * 
«me
);

63 
	`uƒegi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
);

	@arch/sysSpeExcLib.c

70 
	~<c⁄fig.h
>

71 
	~<libc/ˇgboŸ.h
>

72 
	~<µc/¨chPpc.h
>

73 
	~<µc/toﬁPpc.h
>

74 
	~<µc/µc85xx.h
>

75 
	~<µc/excPpcLib.h
>

76 
	~<µc/•ePpcLib.h
>

80 
UINT32
 
	ge500_•e_exc_íabÀ
;

81 
UINT32
 
	ge500_•e_exc_mask
;

94 
	$•eExcInô
 ()

96 
UINT32
 
•efs¸
 = 
	`sysS≥fs¸Gë
 ();

97 
UINT32
 
m§
 = 
	`sysM§Gë
 ();

98 
	`sysM§Së
 (
m§
 | 
_PPC_MSR_SPE
);

99 
e500_•e_exc_mask
 = 
_PPC_SPEFSCR_FINVE
 | 
_PPC_SPEFSCR_FDBZE
 |

100 
_PPC_SPEFSCR_FUNFE
 | 
_PPC_SPEFSCR_FOVFE
;

101 
•efs¸
 |
e500_•e_exc_mask
;

102 
	`sysS≥fs¸Së
 (
•efs¸
);

103 
e500_•e_exc_íabÀ
 = 
TRUE
;

104 
	}
}

	@arch/sysSpeVectorALib.S

32 
	#_ASMLANGUAGE


	)

33 
	~<c⁄fig.h
>

34 
	~<libc/ˇgboŸ.h
>

35 
	~<µc/toﬁPpc.h
>

36 
	~<µc/¨chPpc.h
>

37 
	~<µc/asmPpc.h
>

38 
	~<µc/µc85xx.h
>

39 
	~<µc/•ePpcLib.h
>

43 
	$FUNC_EXPORT
(
•eSave
)

44 
	$FUNC_EXPORT
(
•eRe°‹e
)

46 
_CAG_TEXT_SEG_START


71 
	$FUNC_BEGIN
(
•eRe°‹e
)

72 
mfm§
 
r5


73 
‹is
 
r5
,Ñ5, 
	$HI
(
_PPC_MSR_SPE
)

74 
b
 1f

75 .
bÆign
 64

77 
mt§r1
 
r5


78 
lis
 
r5
, 
	$HI
(2f)

79 
‹i
 
r5
,Ñ5, 
	$LO
(2f)

80 
mt§r0
 
r5


81 
rfi


84 
subi
 
r3
,r3,
SPE_FRAME_SIZE


86 
evldd
 
r0
,
	$SPE_OFFSET
(0)(
r3
)

87 
evldd
 
r1
,
	$SPE_OFFSET
(1)(
r3
)

88 
evldd
 
r2
,
	$SPE_OFFSET
(2)(
r3
)

89 
evldd
 
r4
,
	$SPE_OFFSET
(4)(
r3
)

90 
evldd
 
r5
,
	$SPE_OFFSET
(5)(
r3
)

91 
evldd
 
r6
,
	$SPE_OFFSET
(6)(
r3
)

92 
evldd
 
r7
,
	$SPE_OFFSET
(7)(
r3
)

93 
evldd
 
r8
,
	$SPE_OFFSET
(8)(
r3
)

94 
evldd
 
r9
,
	$SPE_OFFSET
(9)(
r3
)

95 
evldd
 
r10
,
	$SPE_OFFSET
(10)(
r3
)

96 
evldd
 
r11
,
	$SPE_OFFSET
(11)(
r3
)

97 
evldd
 
r12
,
	$SPE_OFFSET
(12)(
r3
)

98 
evldd
 
r13
,
	$SPE_OFFSET
(13)(
r3
)

99 
evldd
 
r14
,
	$SPE_OFFSET
(14)(
r3
)

100 
evldd
 
r15
,
	$SPE_OFFSET
(15)(
r3
)

101 
evldd
 
r16
,
	$SPE_OFFSET
(16)(
r3
)

102 
evldd
 
r17
,
	$SPE_OFFSET
(17)(
r3
)

103 
evldd
 
r18
,
	$SPE_OFFSET
(18)(
r3
)

104 
evldd
 
r19
,
	$SPE_OFFSET
(19)(
r3
)

105 
evldd
 
r20
,
	$SPE_OFFSET
(20)(
r3
)

106 
evldd
 
r21
,
	$SPE_OFFSET
(21)(
r3
)

107 
evldd
 
r22
,
	$SPE_OFFSET
(22)(
r3
)

108 
evldd
 
r23
,
	$SPE_OFFSET
(23)(
r3
)

109 
evldd
 
r24
,
	$SPE_OFFSET
(24)(
r3
)

110 
evldd
 
r25
,
	$SPE_OFFSET
(25)(
r3
)

111 
evldd
 
r26
,
	$SPE_OFFSET
(26)(
r3
)

112 
evldd
 
r27
,
	$SPE_OFFSET
(27)(
r3
)

113 
evldd
 
r28
,
	$SPE_OFFSET
(28)(
r3
)

114 
evldd
 
r29
,
	$SPE_OFFSET
(29)(
r3
)

115 
evldd
 
r30
,
	$SPE_OFFSET
(30)(
r3
)

116 
evldd
 
r31
,
	$SPE_OFFSET
(31)(
r3
)

117 
evldd
 
r3
,
	$SPE_OFFSET
(3)(
r3
)

120 
evmø
 
r5
 ,r5

121 
isync


122 
bÃ


123 
	$FUNC_END
(
•eRe°‹e
)

148 
	$FUNC_BEGIN
(
•eSave
)

149 
mfm§
 
r5


150 
‹is
 
r5
,Ñ5, 
	$HI
(
_PPC_MSR_SPE
)

151 
b
 1f

152 .
bÆign
 64

154 
mt§r1
 
r5


155 
lis
 
r5
, 
	$HI
(2f)

156 
‹i
 
r5
,Ñ5, 
	$LO
(2f)

157 
mt§r0
 
r5


158 
rfi


162 
subi
 
r3
,r3,
SPE_FRAME_SIZE


163 
ev°dd
 
r0
,
	$SPE_OFFSET
(0)(
r3
)

164 
ev°dd
 
r1
,
	$SPE_OFFSET
(1)(
r3
)

165 
ev°dd
 
r2
,
	$SPE_OFFSET
(2)(
r3
)

166 
ev°dd
 
r3
,
	$SPE_OFFSET
(3)(
r3
)

167 
ev°dd
 
r4
,
	$SPE_OFFSET
(4)(
r3
)

168 
ev°dd
 
r5
,
	$SPE_OFFSET
(5)(
r3
)

169 
ev°dd
 
r6
,
	$SPE_OFFSET
(6)(
r3
)

170 
ev°dd
 
r7
,
	$SPE_OFFSET
(7)(
r3
)

171 
ev°dd
 
r8
,
	$SPE_OFFSET
(8)(
r3
)

172 
ev°dd
 
r9
,
	$SPE_OFFSET
(9)(
r3
)

173 
ev°dd
 
r10
,
	$SPE_OFFSET
(10)(
r3
)

174 
ev°dd
 
r11
,
	$SPE_OFFSET
(11)(
r3
)

175 
ev°dd
 
r12
,
	$SPE_OFFSET
(12)(
r3
)

176 
ev°dd
 
r13
,
	$SPE_OFFSET
(13)(
r3
)

177 
ev°dd
 
r14
,
	$SPE_OFFSET
(14)(
r3
)

178 
ev°dd
 
r15
,
	$SPE_OFFSET
(15)(
r3
)

179 
ev°dd
 
r16
,
	$SPE_OFFSET
(16)(
r3
)

180 
ev°dd
 
r17
,
	$SPE_OFFSET
(17)(
r3
)

181 
ev°dd
 
r18
,
	$SPE_OFFSET
(18)(
r3
)

182 
ev°dd
 
r19
,
	$SPE_OFFSET
(19)(
r3
)

183 
ev°dd
 
r20
,
	$SPE_OFFSET
(20)(
r3
)

184 
ev°dd
 
r21
,
	$SPE_OFFSET
(21)(
r3
)

185 
ev°dd
 
r22
,
	$SPE_OFFSET
(22)(
r3
)

186 
ev°dd
 
r23
,
	$SPE_OFFSET
(23)(
r3
)

187 
ev°dd
 
r24
,
	$SPE_OFFSET
(24)(
r3
)

188 
ev°dd
 
r25
,
	$SPE_OFFSET
(25)(
r3
)

189 
ev°dd
 
r26
,
	$SPE_OFFSET
(26)(
r3
)

190 
ev°dd
 
r27
,
	$SPE_OFFSET
(27)(
r3
)

191 
ev°dd
 
r28
,
	$SPE_OFFSET
(28)(
r3
)

192 
ev°dd
 
r29
,
	$SPE_OFFSET
(29)(
r3
)

193 
ev°dd
 
r30
,
	$SPE_OFFSET
(30)(
r3
)

194 
ev°dd
 
r31
,
	$SPE_OFFSET
(31)(
r3
)

198 
addi
 
r3
,Ñ3, 
	$SPE_OFFSET
(32)

199 
evx‹
 
r5
,Ñ5,Ñ5

200 
evmwumüa
 
r5
,Ñ5,Ñ5

201 
ev°dd
 
r5
,0(
r3
)

202 
isync


203 
bÃ


204 
	`FUNC_END
(
•eSave
)

	@cagos.h

1 #¥agm®
⁄˚


30 
	#NULL
 0

	)

32 
dfd
;

33 
sffs_idx
;

43 
	tUINT32
;

44 sig√d 
	tINT32
;

45 
	tUINT16
;

46 sig√d 
	tINT16
;

47 
	tUINT8
;

48 sig√d 
	tINT8
;

49 
	tUINT64
;

50 sig√d 
	tINT64
;

51 
	tBOOL
;

54 
	#OS_ERR_NONE
 0

	)

55 
	eIPBUS_TYPE
 {

56 
	mREAD_IPBUS_INPUT
,

57 
	mWRITE_IPBUS_OUTPUT
,

58 
	mWRITE_IPBUS_ARG1
,

59 
	mWRITE_IPBUS_ARG2
,

60 
	mWRITE_SENDBOX
,

61 
	mREAD_RECVBOX
,

73 
	#OS_OPT_DEL_NO_PEND
 (
UINT16
)(0x0000u)

	)

75 
	#OS_OPT_DEL_ALWAYS
 (
UINT16
)(0x0001u)

	)

80 
	#OS_OPT_PEND_BLOCKING
 (
UINT16
)(0x0000u)

	)

82 
	#OS_OPT_PEND_NON_BLOCKING
 (
UINT16
)(0x8000u)

	)

91 
	#OS_OPT_POST_1
 (
UINT16
)(0x0000uË

	)

94 
	#OS_OPT_POST_ALL
 (
UINT16
)(0x0200uË

	)

97 
	#OS_OPT_POST_NONE
 (
UINT16
)(0x0000uË

	)

100 
	#OS_OPT_POST_FIFO
 (
UINT16
)(0x0000uË

	)

101 
	#OS_OPT_POST_LIFO
 (
UINT16
)(0x0010uË

	)

104 
	#OS_OPT_POST_NO_SCHED
 (
UINT16
)(0x8000uË

	)

110 
INT32
 
os_¸óã_èsk
(*
≤ame
, *
±ask
, *
∑rg
, INT32 
¥io
,
UINT32
 
tq
, UINT32 *
îr
);

111 
INT32
 
os_dñ_èsk
(INT32 
id
, 
UINT32
 *
îr
);

112 
INT32
 
os_ªsume_èsk
(INT32 
id
, 
UINT32
 *
îr
);

113 
INT32
 
os_su•íd_èsk
(INT32 
id
, 
UINT32
 *
îr
);

114 
INT32
 
os_èsk_£t_ts
(INT32 
id
,
UINT32
 
time_¶i˚
, UINT32 *
îr
);

115 
os_dñay_èsk
(
INT32
 
ticks
, 
UINT32
 *
îr
);

116 
udñay
(
INT32
 
us
);

119 
INT32
 
os_queue_¸óã
(*
q«me
,INT32 
qsize
, 
UINT32
 *
îr
);

120 
INT32
 
os_queue_dñ
(INT32 
qnum
,INT32 
›t
, 
UINT32
 *
îr
);

121 
INT32
 
os_queue_po°
(INT32 
qnum
,*
buf
,INT32 
size
,INT32 
›t
, 
UINT32
 *
îr
);

122 
INT32
 
os_queue_gë
(INT32 
qnum
,*
buf
,
UINT16
 *
size
,INT32 
›t
,INT32 
timeout
, 
UINT32
 *
îr
);

125 
INT32
 
os_£m_¸óã
(*
¢ame
, 
UINT32
 
˙t
,UINT32 *
îr
);

126 
INT32
 
os_£m_dñ
(INT32 
sid
,
UINT16
 
›t
,
UINT32
 *
îr
);

127 
UINT32
 
os_£m_≥nd
(
INT32
 
sid
,UINT32 
timeout
,
UINT16
 
›t
,UINT32 *
îr
);

128 
UINT32
 
os_£m_po°
(
INT32
 
sid
, 
UINT16
 
›t
, UINT32 *
îr
);

131 
INT32
 
os_muãx_¸óã
(*
m«me
,
UINT32
 *
îr
);

132 
INT32
 
os_muãx_dñ
(INT32 
mid
, 
UINT16
 
›t
,
UINT32
 *
îr
);

133 
INT32
 
os_muãx_≥nd
(INT32 
mid
,
UINT32
 
timeout
,
UINT16
 
›t
,UINT32 *
îr
);

134 
INT32
 
os_muãx_po°
(INT32 
mid
,
UINT16
 
›t
,
UINT32
 *
îr
);

137 *
os_vîsi⁄
();

149 
	#DFS_DFD_FAULT
 -1

	)

150 
	#DFS_PARA_FAULT
 -2

	)

153 
	#DFS_WRITE
 0

	)

154 
	#DFS_READ
 1

	)

155 
	#DFS_ERASE
 2

	)

156 
	#DFS_LENGTH
 3

	)

157 
	#DFS_START
 4

	)

158 
	#DFS_END
 5

	)

160 
INT32
 
dfs_wrôe
(INT32 
dfd
, 
UINT32
 
d°
,
UINT8
 *
§c
,UINT32 
˙t
);

161 
INT32
 
dfs_ªad
(INT32 
dfd
, 
UINT32
 
§c
, 
UINT8
 *
buf
,UINT32 
˙t
);

162 
INT32
 
dfs_îa£
(INT32 
did
,
UINT32
 
no
,UINT32 
num
);

172 
	#SFFS_ERASE_HDRSS_ERR
 -4

	)

173 
	#SFFS_WRITE_HDRSS_ERR
 -10

	)

174 
	#SFFS_HDRSS_FULL_ERR
 -7

	)

175 
	#SFFS_NO_FREEHDRSS_ERR
 -5

	)

176 
	#SFFS_NO_FREEHDRSS_ERR1
 -31

	)

177 
	#SFFS_FILE_NUM_FULL_ERR
 -6

	)

179 
	#SFFS_PARA_ERR
 -1

	)

181 
	#SFFS_FILENAME_NOT_EXIST_ERR1
 -38

	)

182 
	#SFFS_FILENAME_NOT_EXIST_ERR2
 -39

	)

183 
	#SFFS_FILENAME_NOT_EXIST_ERR3
 -40

	)

184 
	#SFFS_FILENAME_NOT_EXIST_ERR4
 -41

	)

185 
	#SFFS_FILENAME_NOT_EXIST_ERR5
 -42

	)

186 
	#SFFS_FD_ERR
 -9

	)

187 
	#SFFS_WRONLY_ERR
 -15

	)

188 
	#SFFS_READMODE_ERROR
 -18

	)

189 
	#SFFS_WRITEMODE_ERR
 -19

	)

190 
	#SFFS_FILE_REWRITE_ERR
 -12

	)

191 
	#SFFS_UNALIGN_WRITE_ERR
 -14

	)

192 
	#SFFS_DEL_ERR
 -21

	)

193 
	#SFFS_FILE_LOCKED_ERR
 -2

	)

194 
	#SFFS_FILE_NOT_COMMIT_ERR
 -20

	)

195 
	#SFFS_FILE_SIZE_EXCED_ERR
 -16

	)

196 
	#SFFS_INIT_ERR
 -22

	)

197 
	#SFFS_NOT_NOT_MOUNTED
 -23

	)

198 
	#SFFS_MODE_ERR
 -29

	)

200 
	#SFFS_NO_FREE_SE
 -3

	)

201 
	#SFFS_READ_DATA_ERR
 -11

	)

202 
	#SFFS_ERASE_DATA_ERR
 -13

	)

203 
	#SFFS_WRITE_DATA_ERR1
 -32

	)

204 
	#SFFS_WRITE_DATA_ERR2
 -33

	)

205 
	#SFFS_WRITE_DATA_ERR3
 -34

	)

206 
	#SFFS_WRITE_DATA_ERR4
 -35

	)

207 
	#SFFS_WRITE_DATA_ERR5
 -36

	)

208 
	#SFFS_WRITE_DATA_ERR6
 -37

	)

209 
	#SFFS_OFFSET_ERR
 -30

	)

211 
	#SFFS_GLOBAL_ERR
 -24

212 
	#SFFS_BUF_ERR
 -25

	)

213 
	#SFFS_FNAME_DUPLICATE_ERR
 -26

	)

214 
	#SFFS_RENAME_FAIL1
 -27

	)

215 
	#SFFS_RENAME_FAIL2
 -28

	)

219 
	#FS_CLOSED
 0

	)

220 
	#FS_RDONLY
 1

	)

221 
	#FS_WRONLY
 2

	)

225 
	#FS_OPEN_NORMAL
 0

226 
	#FS_OPEN_TRU
 1

227 
	#FS_OPEN_CREATE
 2

228 

	)

230 
	#FS_ID_POS
(
id
Ë((id==0)?0:(1<<(16-1+id)))

	)

231 
	#FS_ID_GET
(
id
Ë(
	`__buûtö_ffs
((id&0xffff0000)>>16))

	)

234 
	#FS_SEEK_SET
 0

	)

236 
	#FS_SEEK_TELL
 1

	)

239 
	#FS_OK
 0

	)

240 
	#FS_FAIL
 -1

	)

243 
INT32
 
fs_ª«me
(c⁄° 
INT8
 *
ﬁd_«me
,c⁄° INT8 *
√w_«me
);

244 
INT32
 
fs_f‹m©
(INT32 
ty≥
);

245 
INT32
 
fs_umou¡
(INT32 
fsid
);

246 
INT32
 
fs_mou¡
(INT32 
ty≥
);

247 
INT32
 
fs_›í
(c⁄° 
INT8
 *
‚ame
, INT32 
Êags
, INT32 
mode
);

248 
INT32
 
fs_ªmove
(c⁄° 
INT8
 *
‚ame
);

249 
INT32
 
fs_˛o£
(INT32 
fd
);

250 
INT32
 
fs_wrôe
(INT32 
fd
, c⁄° *
buf
, 
UINT32
 
cou¡
);

251 
INT32
 
fs_ªad
(INT32 
fd
, *
buf
, 
UINT32
 
cou¡
);

252 
INT32
 
fs_l£ek
(INT32 
fd
, INT32 
pos
, INT32 
cfg
);

253 
INT32
 
fs_fûe_Àn
(
INT8
 *
‚ame
);

254 
INT32
 
fs_ls
();

255 
INT32
 
fs_u£d
();

256 
INT32
 
fs_‰ì
();

258 
INT32
 
sffs_gë_î∫o
(INT32 
fsid
);

268 
	#TRUE
 1

	)

269 
	#FALSE
 0

	)

272 
UINT32
 
	g©omicCÀ¨


274 
UINT32
 *
	gèrgë


279 
UINT32
 
	g©omic32Së


281 
UINT32
 *
	gèrgë
,

282 
UINT32
 
	gvÆue


286 
UINT32
 
	g©omic32Gë


288 
UINT32
 * 
	gèrgë


293 
UINT32
 
	g©omic32Add


295 
UINT32
 *
	gèrgë
,

296 
UINT32
 
	gvÆue


300 
UINT32
 
	g©omic32Sub


302 
UINT32
 *
	gèrgë
,

303 
UINT32
 
	gvÆue


307 
UINT32
 
	g©omic32And


309 
UINT32
 *
	gèrgë
,

310 
UINT32
 
	gvÆue


314 
UINT32
 
	g©omic32Or


316 
UINT32
 *
	gèrgë
,

317 
UINT32
 
	gvÆue


321 
UINT32
 
	g©omic32X‹


323 
UINT32
 *
	gèrgë
,

324 
UINT32
 
	gvÆue


328 
BOOL
 
	g©omic32Cas


330 
UINT32
 *
	gèrgë
,

331 
UINT32
 
	gldVÆue
,

332 
UINT32
 
	g√wVÆue


339 
UINT16
 
Âga_ªad
(
UINT32
 
ªg_num
);

341 
Âga_wrôe
(
UINT32
 
ªg_num
,
UINT16
 
vÆue
);

354 
INT32
 
pcõ_£nd
(INT32 
id
, 
UINT32
 
§c
 , UINT32 
d°
,UINT32 
˙t
);

356 
INT32
 
pcõ_ªcv
(INT32 
id
, 
UINT32
 
§c
 , UINT32 
d°
,UINT32 
˙t
);

359 
pcõ_ªad
(
UINT8
 *
d°
, UINT8 *
§c
, 
UINT32
 
Àn
);

361 
pcõ_wrôe
(
UINT8
 *
d°
, UINT8 *
§c
, 
UINT32
 
Àn
);

365 
	#FUNC_OK
 0

366 
	#FUNC_NO
 -1

367 
	#FUNC_PARA_ERR
 -2

368 

	)

369 
	#DATA_BUF
 1

	)

370 
	#STATE_BUF
 2

	)

372 
	#CM_DATA
 1

	)

373 
	#CM_RECV
 2

	)

375 
	#PMBUS_1
 1

	)

376 
	#PMBUS_2
 2

	)

380 
INT8
 
£t_pm_¶Ÿ
();

382 
INT8
 
gë_pm_¶Ÿ
();

389 
INT16
 
c›y_to_pmbuf
(
INT8
 
bus_no
, 
UINT8
 *
d©a
, 
INT32
 
Àn
);

391 
INT16
 
íabÀ_pm_£nd
(
INT8
 
bus_no
,INT8 
buf_no
);

393 
INT16
 
check_pm_£nd
(
INT8
 
bus_no
);

396 
INT16
 
c›y_‰om_pmbuf
(
INT8
 
bus_no
, INT8 
buf_no
, 
UINT8
 *
buf
);

398 
INT16
 
check_pm_ªcv
(
INT8
 
bus_no
,INT8 
buf_no
);

401 
˛ór_¥ecv_°©us
(
öt8_t
 
bus_no
);

404 
INT16
 
gë_pmªcv_time
(
INT8
 
bus_no
, INT8 
bu‚o
);

411 
INT16
 
c›y_to_cmbuf
(
UINT8
 *
d©a
, 
INT32
 
Àn
);

413 
INT16
 
íabÀ_cm_£nd
(
°©i⁄
);

415 
INT16
 
check_cm_£nd
();

418 
INT16
 
check_cm_ªcv
();

420 
INT16
 
c›y_‰om_cmbuf
(
UINT8
 *
buf
);

423 
INT16
 
gë_cmªcv_time
();

426 
˛ór_¸ecv_°©us
();

429 
	#gë_˝u_no
(Ë(*(vﬁ©ûê
UINT32
 *)(0xf„40090)Ë

	)

432 
INT16
 
ùbus_ªad
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
);

435 
INT16
 
ùbus_wrôe
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
);

440 
	#GPIO_0
 0

	)

441 
	#GPIO_1
 1

	)

442 
	#GPIO_2
 2

	)

443 
	#GPIO_3
 3

	)

444 
	#GPIO_4
 4

	)

445 
	#GPIO_5
 5

	)

446 
	#GPIO_6
 6

	)

447 
	#GPIO_7
 7

	)

448 
	#GPIO_8
 8

	)

449 
	#GPIO_9
 9

	)

450 
	#GPIO_10
 10

	)

451 
	#GPIO_11
 11

	)

452 
	#GPIO_12
 12

	)

453 
	#GPIO_13
 13

	)

454 
	#GPIO_14
 14

	)

455 
	#GPIO_15
 15

	)

456 
	#GPIO_PIN_MAX
 15

	)

458 
	#GPIO_LOW
 0x00

	)

459 
	#GPIO_HIGH
 0x01

	)

461 
	#GPIO_OUT
 0x00008000

	)

462 
	#GIPO_OD
 0x00000001

	)

463 
	#GPIO_IN
 0x00000000

	)

464 
	#GPIO_INT
 0x80000000

	)

466 
sysGpioLöeC⁄fig
 (
UINT8
 
löeNo
, 
UINT32
 
°yÀ
);

467 
sysGpioLöeSë
 (
UINT8
 
löeNo
, UINT8 
vÆue
);

468 
sysGpioLöeGë
 (
UINT32
 * 
gpioD©a
, 
UINT8
 
löeNo
);

470 (*
	tex˚±i⁄_h™dÀr
)();

472 
	eEXCEPTION_TYPE
 {

473 
EXCEPTION_MACHINE_CHECK
,

474 
EXCEPTION_DSI
,

475 
EXCEPTION_ISI
,

476 
EXCEPTION_ALIGMENT
,

477 
EXCEPTION_PROGRAM
,

478 
EXCEPTION_SPE
,

479 
EXCEPTION_IMISS
,

480 
EXCEPTION_DMISS
,

490 
	`ªgi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
,
ex˚±i⁄_h™dÀr
 
h™dÀr
,* 
¥iv©e_d©a
,c⁄° * 
«me
);

491 
	`uƒegi°îEx˚±i⁄
(
EXCEPTION_TYPE
 
ex˚±i⁄_ty≥
);

495 
	`os_c›y_d©a
(
UINT32
 
‰om
, 
INT32
 
size
);

497 
	`os_c›y_°ack
();

498 
	`os_˛ór_d©a
(
UINT32
 
‰om
, 
INT32
 
size
);

499 
	`os_˛ór_°ack
();

501 
	`os_ch™ge_mmu
();

503 
INT32
 
	`os_gë_mno
();

505 
	`os_upd©e_mno
();

506 
	`OSTaskCª©e
 (*
p_tcb
,*
p_«me
,*
p_èsk
,*
p_¨g
,
¥io
,

507 *
p_°k_ba£
,
°k_limô
,
°k_size
,
q_size
,
time_qu™è
,*
p_ext
,

508 
›t
,*
p_îr
);

511 
	`powîpcI¡DißbÀ
();

512 
	`powîpcI¡E«bÀ
();

514 
	`ˇcheE500DißbÀD
();

515 
	`ˇcheIsOnD
();

524 
	`Œd_wrôe
 ( 
addr
, *
§c
, 
˙t
);

525 
	`Œd_ªad
 ( 
addr
 , *
buf
, 
˙t
);

526 
	`Œd_îa£
(
no
, 
num
);

	@config.h

29 
	#_CAG_CONFIG_FLASH_SIZE
 0x01000000

	)

30 
	#_CAG_CONFIG_FLASH_BASE_ADRS
 0xEC000000

	)

31 
	#_CAG_CONFIG_HEAP_SIZE
 0x200000

	)

32 
	#_CAG_CONFIG_CCSBAR
 0xFFE00000

	)

33 
	#_CAG_CONFIG_ROM_TEXT_ADRS
 0xFFE00000

	)

34 
	#_CAG_CONFIG_SIO_BAUDRATE
 115200

	)

35 
	#_CAG_CONFIG_FLASH_SECTOR_SIZE
 0x20000

	)

36 
	#_CAG_CONFIG_LINK_ADDR
 0x00000000

	)

37 
	#_CAG_CONFIG_SRAM_ADDR
 0xFF600000

	)

38 
	#_CAG_CONFIG_SRAM_SIZE
 0x100000

	)

39 
	#_CAG_CONFIG_FPGA_ADDR
 0xFF700000

	)

40 
	#_CAG_CONFIG_FPGA_SIZE
 0x10000

	)

42 #i‡(
_CAG_START_TEXT
 == 0x04eb0000 || _CAG_START_TEXT == 0x04fe0000 )

43 
	#_CAG_CONFIG_SIO_BASE
 0xFFE04500

	)

45 
	#_CAG_CONFIG_SIO_BASE
 0xFFE04600

	)

50 
	#_CAG_CONFIG_NS16550_SIO
 1

	)

51 
	#_CAG_CONFIG_SIO_REG_INTERVAL
 1

	)

52 
	#_CAG_CONFIG_SIO
 1

	)

53 
	#_CAG_CONFIG_ARCH_HAS_MEM_ACCESSORS
 0

	)

54 
	#_CAG_SPE_SUPPORT
 1

	)

55 
	#_CAG_CONFIG_KERNEL
 1

	)

56 
	#_CAG_CONFIG_VSNPRINTF
 1

	)

57 
	#_CAG_CONFIG_HANG
 1

	)

58 
	#_CAG_CONFIG_FREQ
 1

	)

60 
	#_CAG_CONFIG_SHELL
 0

	)

61 
	#_CAG_CONFIG_EPIC
 1

	)

65 #i‡(
_CAG_START_TEXT
 == 0x04eb0000 || _CAG_START_TEXT == 0x04fe0000)

66 
	#_CAG_CONFIG_AMP0
 1

	)

67 #unde‡
_CAG_CONFIG_AMP1


69 #unde‡
_CAG_CONFIG_AMP0


70 
	#_CAG_CONFIG_AMP1
 1

	)

75 
	#_CAG_CONFIG_CPU_NUM
 0x2

	)

76 
	#_CAG_CONFIG_SHELL_PROMPT
 "ˇgOs$"

	)

80 
	#L2_CACHE_SIZE
 2

	)

81 
	#USER_RESERVED_MEM
 0x00000000

	)

82 
	#LOCAL_MEM_SIZE
 0x20000000

	)

83 
	#LOCAL_MEM_LOCAL_ADRS
 
_CAG_START_TEXT


	)

84 
	#VEC_BASE_ADRS
 
LOCAL_MEM_LOCAL_ADRS


	)

88 
	#TASK_SPESTACK_SIZE
 400

	)

89 
	#TASK_STACK_SIZE
 0x10000

	)

90 
	#STASK_SIZE
 0x1000

	)

91 
	#GAP_SIZE
 0x10

	)

92 
	#CYCLONE_BIN_RAM_HIGH
 0x12c00000

	)

95 #ifde‡
_CAG_CONFIG_AMP0


96 
	#GAP_0
 (0x05000000 + 0x00400000)

	)

98 
	#GAP_0
 (0x01000000 + 0x00580000)

	)

101 
	#KERNEL_STACK_LOW
 (
GAP_0
 + 
GAP_SIZE
 )

	)

102 
	#KERNEL_STACK_HIGH
 (
KERNEL_STACK_LOW
 + 0x08000)

	)

104 
	#GAP_1
 (
KERNEL_STACK_HIGH
)

	)

105 
	#TASK_STACK_LOW
 (
GAP_1
 + 
GAP_SIZE
)

	)

106 #ifde‡
_CAG_CONFIG_AMP0


107 
	#TASK_STACK_HIGH
 (
TASK_STACK_LOW
 + 3*(
TASK_STACK_SIZE
 + 
GAP_SIZE
)-GAP_SIZE)

	)

109 
	#TASK_STACK_HIGH
 (
TASK_STACK_LOW
 + 4*(
TASK_STACK_SIZE
 + 
GAP_SIZE
)-GAP_SIZE)

	)

112 
	#GAP_2
 (
TASK_STACK_HIGH
 )

	)

113 
	#TASK_CLK_STACK_LOW
 (
GAP_2
+
GAP_SIZE
)

	)

114 
	#TASK_CLK_STACK_HIGH
 (
TASK_CLK_STACK_LOW
 + 
STASK_SIZE
)

	)

116 
	#GAP_3
 (
TASK_CLK_STACK_HIGH
)

	)

117 
	#TASK_IDLE_STACK_LOW
 (
GAP_3
 + 
GAP_SIZE
)

	)

118 
	#TASK_IDLE_STACK_HIGH
 (
TASK_IDLE_STACK_LOW
 + 
STASK_SIZE
)

	)

120 
	#GAP_4
 (
TASK_IDLE_STACK_HIGH
)

	)

121 
	#TASK_SPESTACK_LOW
 (
GAP_4
+
GAP_SIZE
)

	)

122 
	#TASK_SPESTACK_HIGH
 (
TASK_SPESTACK_LOW
 + 6*(
TASK_SPESTACK_SIZE
+
GAP_SIZE
)-GAP_SIZE)

	)

124 
	#GAP_5
 (
TASK_SPESTACK_HIGH
)

	)

125 
	#EXC_STACK_LOW
 (
GAP_5
+
GAP_SIZE
)

	)

126 
	#EXC_STACK_HIGH
 (
EXC_STACK_LOW
 + 0x08000)

	)

128 
	#GAP_6
 (
EXC_STACK_HIGH
)

	)

129 
	#IRQ_STACK_LOW
 (
GAP_6
 +
GAP_SIZE
)

	)

130 
	#IRQ_STACK_HIGH
 (
IRQ_STACK_LOW
 + 0x08000)

	)

132 
	#GAP_7
 (
IRQ_STACK_HIGH
)

	)

133 
	#GAP_END
 (
GAP_7
+
GAP_SIZE
)

	)

135 
	#DEC_STACK_LOW
 0

136 
	#DEC_STACK_HIGH
 0

	@demo/cmbus_demo.c

1 
	~"../drivî/bus/cmbus.h
"

3 
öt16_t
 
	$cmbus_£nd
(
öt32_t
 
°©i⁄
, 
öt8_t
 *
buf
, i¡32_à
Àn
,öt32_à
timeout
)

5 
öt16_t
 
ªs
 = -9;

6 if(
	`c›y_to_cmbuf
(
buf
,
Àn
)<0){

10 i‡–
	`íabÀ_cm_£nd
(
°©i⁄
) <0){

14 
ªs
 = 
	`check_cm_£nd
();

15 i‡(
ªs
 >=0 || 
timeout
-- == 0)

19  
ªs
;

20 
	}
}

21 
öt16_t
 
	$cmbus_ªcv
(
öt8_t
 *
buf
, 
öt32_t
 
timeout
)

23 
öt16_t
 
ªs
 = -9;

25 
ªs
 = 
	`check_cm_ªcv
();

26 if(
ªs
 >=0 || 
timeout
-- == 0)

29 i‡(
ªs
 >0 ){

30 
ªs
 = 
	`c›y_‰om_cmbuf
(
buf
);

32  
ªs
;

33 
	}
}

35 
	$cmbus_demo
()

37 
uöt8_t
 
buf1
[4*1024],
buf2
[4*1024];

38 
	`¥ötf
("cmbus demo\n");

39 
	`£t_pm_¶Ÿ
();

42 i‡(
	`cmbus_£nd
(6,
buf1
,(buf1),0x20000)<0){

43 
	`¥ötf
("cmbus send fail\n");

46 
	`¥ötf
("cmbu†£nd ok %x\n",
buf1
[0]);

48 if–
	`cmbus_ªcv
(
buf2
,0x20000) <0){

49 
	`¥ötf
("cmbusÑecv fail\n");

52 
	`¥ötf
("cmbu‡ªcv ok %x %x\n",
buf2
[0],buf2[4096]);

54 
	`sysUsDñay
(2000*1000);

56 
	}
}

	@demo/demo.c

29 
	~"demo.h
"

30 
	~<c⁄fig.h
>

31 
	~<libc/°dio.h
>

32 
	~<p1020rdb.h
>

33 
	~<kî√l/sysPic.h
>

34 
	~<µc/toﬁPpc.h
>

36 
	~<kî√l/sysOs.h
>

38 
	$maö
()

41 
	`¥ötf
("3demo main\n");

43 
t1
,
t2
;

45 
	`dma_öô
();

46 
	`mem£t
(0x100000,0x0c,0x19000);

47 
t1
 = 
	`gë_‰ì
();

48 
	`pcõ_ªcv
(1,0,0,0x400);

49 
t2
=
	`gë_‰ì
();

50 
	`¥ötf
("%d %d %d-\n",
t1
,
t2
,t2-t1);

52 
t1
 = 
	`gë_‰ì
();

53 
	`pcõ_ªcv
(1,0,0,8096);

54 
t2
=
	`gë_‰ì
();

55 
	`¥ötf
("%d %d %d+\n",
t1
,
t2
,t2-t1);

57 
	`mem£t
(0x100000,0x3c,0x19000);

58 
t1
 = 
	`gë_‰ì
();

59 
	`dma_mem˝y
(0x100000,(
uöt8_t
 *)(0x2000) ,100);

60 
t2
=
	`gë_‰ì
();

61 
	`¥ötf
("%d %d %d$\n",
t1
,
t2
,t2-t1);

63 
	`mem£t
(0x100000,0x2c,0x19000);

64 
t1
 = 
	`gë_‰ì
();

65 
	`dma_mem˝y
(0x100000,(
uöt8_t
 *)(0x2000) ,0x400);

66 
t2
=
	`gë_‰ì
();

67 
	`¥ötf
("%d %d %d^\n",
t1
,
t2
,t2-t1);

69 
	`mem£t
(0x100000,0x1c,0x19000);

70 
t1
 = 
	`gë_‰ì
();

71 
	`dma_mem˝y
(0x100000,(
uöt8_t
 *)(0x2000) ,0x19000);

72 
t2
=
	`gë_‰ì
();

73 
	`¥ötf
("%d %d %d-\n",
t1
,
t2
,t2-t1);

74 
	`duÆ_ã°
();

75 
	}
}

80 
INT8
 
	gd©a
[16]={0xa};

81 
mem£t
(
d©a
,0xac,16);

82 
	gd©a
[0]='0';

83 
	gd©a
[1]='1';

84 
	gd©a
[2]='2';

85 
	gd©a
[3]='3';

86 
	gd©a
[4]='4';

87 
	gd©a
[5]='5';

88 
	gd©a
[6]='6';

89 
	gd©a
[7]='7';

90 
	gd©a
[8]='8';

91 
	gd©a
[9]='9';

92 
	gd©a
[10]='a';

93 
	gd©a
[11]='b';

94 
	gd©a
[12]='c';

95 
	gd©a
[13]='d';

96 
	gd©a
[14]='e';

97 
	gd©a
[15]='f';

101 
öô_u¨t
(1);

103 
u¨t_£nd
(2,16,
d©a
);

104 
¥ötf
("abcd\n");

105 
u¨t_£nd
(2,16,
d©a
);

111 
ªcv
: i‡(
	`u¨t_ªcv
(1,16,
d©a
)==0){

112 
ªcv
 ;

114 
	`¥ötf
("recv:");

115 
i
=0;i<16;i++){

116 
	`¥ötf
("%c:%x\n",
d©a
[
i
],data[i]);

118 
	`¥ötf
("\n");

121 
£nd
: i‡(
	`u¨t_£nd
(1,16,
d©a
)==0)

122 
£nd
;

124 
	`udñay
(1400);

127 
	}
}

	@demo/demo.h

30 #i‚de‡
__TEST_H__


31 
	#__TEST_H__


	)

32 
	~<libc/°rög.h
>

	@demo/demo_cmd.c

1 
	~<libc/ønd.h
>

2 
	~<libc/shñl.h
>

3 
	~<libc/ˇgboŸ.h
>

4 
	~<libc/°dio.h
>

6 
©oi
(c⁄° *
°r
);

8 
demo_ã°
(
¨gc
,*
¨gv
[]);

10 
	#cmd_°r
 "ußge: demo_cmd <›ti⁄>\n"

	)

13 
shñl_cmd
 
	gcmd_demo
= {

14 .
«me
 = "demo_cmd",

15 .
	ghñp
 = "demo",

16 .
	gußge
 = 
cmd_°r
,

17 .
	gh™dÀr
 = 
demo_ã°


21 
	$demo_ã°
(
¨gc
,*
¨gv
[])

23 
i
;

24 i‡(
¨gc
 != 2 ) {

25 
	`¥ötf
("%s",
cmd_°r
);

28 
i
=
	`©oi
(
¨gv
[1]);

29 
i
) {

31 
	`n‹_öô_demo
();

32 
	`do_demo_n‹
();

35 
	`iic_öô_demo
();

36 
	`ã°_iic_demo
();

39 
	`•i_öô_demo
();

40 
	`•i_ã°_demo
();

43 
	`ã°_sffs_demo
();

50 
	}
}

53 
	$demo_ªgi°î
()

55 
	`shñlCmdRegi°î
(&
cmd_demo
);

56 
	}
}

	@demo/dfs_demo.c

29 
	~"../drivî/devi˚/n‹Êash/Œd.h
"

30 
	~"../drivî/devi˚/dfs/dfs.h
"

31 
	~"demo.h
"

32 
	~<drv_c⁄fig.h
>

33 
	~<libc/ønd.h
>

35 
	~<libc/°rög.h
>

38 
dfs_›s
 
	gn‹_demo_›s
;

39 
dfs_›s
 
	gn‹_demo_›s2
;

40 
Êash_°ru˘
 
	gn‹_demo_°
;

42 
n‹_Êash_î∫o
;

43 
	gn‹_demo_did
= 0;

45 
	gdemo_dfd1
0,
	gdemo_dfd2
 = 0;

47 #ifde‡
CONFIG_NOR_FLASH


48 
	$n‹_öô_demo
()

50 
	`¥ötf
("helloÇor demo\n");

52 
	`Œd_InôCmd
((
UINT16
 *)0xec000000);

55 
	`mem£t
(&
n‹_demo_›s
,0,(nor_demo_ops));

56 
	`mem£t
(&
n‹_demo_›s2
,0,(nor_demo_ops2));

59 
n‹_demo_°
.
£Size
 = 
SE_SIZE
;

60 
n‹_demo_°
.
£Num
 = 
SE_NUM
;

62 
n‹_demo_°
.
ssSize
 = 
SS_SIZE
;

63 
n‹_demo_°
.
ssNum
 = 
SS_NUM
;

65 
n‹_demo_°
.
tŸÆSize
 = 
DEVICE_SIZE
;

69 
n‹_demo_›s
.
d«me
 = (*)"s29gl512p_1\0";

71 
n‹_demo_›s
.
wrôe
 = 
Œd_wrôe
;

72 
n‹_demo_›s
.
ªad
 = 
Œd_ªad
;

73 
n‹_demo_›s
.
îa£
 = 
Œd_îa£
;

75 
n‹_demo_›s
.
ba£_addr
 = 
FLASH_BASE_ADDR
;

76 
n‹_demo_›s
.
size
 = 20*1024*1024;

77 
n‹_demo_›s
.
°¨t
 = 1024*1024;

78 
n‹_demo_›s
.
íd
 =Ç‹_demo_›s.
°¨t
 +Ç‹_demo_›s.
size
;

79 
n‹_demo_›s
.
î∫o
 = &
n‹_Êash_î∫o
;

80 
n‹_demo_›s
.
d©a
 = (
Êash_°ru˘
 *)&
n‹_demo_°
;

84 
n‹_demo_›s2
.
d«me
 = (*)"s29gl512p_2\0";

86 
n‹_demo_›s2
.
ªad
 = 
Œd_ªad
;

88 
n‹_demo_›s2
.
ba£_addr
 = 
FLASH_BASE_ADDR
;

89 
n‹_demo_›s2
.
size
 = 10*1024*1024;

90 
n‹_demo_›s2
.
°¨t
 = 30*1024*1024;

91 
n‹_demo_›s2
.
íd
 = 
n‹_demo_›s
.
°¨t
 +Ç‹_demo_›s.
size
 ;

92 
n‹_demo_›s2
.
î∫o
 = &
n‹_Êash_î∫o
;

93 
n‹_demo_›s2
.
d©a
 = (
Êash_°ru˘
 *)&
n‹_demo_°
;

96 
demo_dfd1
 = 
	`dfs_ªgi°î
(&
n‹_demo_›s
);

97 
demo_dfd2
 = 
	`dfs_ªgi°î
(&
n‹_demo_›s2
);

99 
	`¥ötf
("dfd 1 %d 2 %d\n",
demo_dfd1
,
demo_dfd2
);

100 
ªt
;

101 
ªt
 = 
	`dfs_ˇp
(
demo_dfd1
,
DFS_WRITE
);

102 
	`¥ötf
("n‹ 1 c™ ? wrôê%d\n",
ªt
);

104 
ªt
 = 
	`dfs_ˇp
(
demo_dfd2
,
DFS_WRITE
);

105 
	`¥ötf
("n‹ 2 c™ ? wrôê%d\n",
ªt
);

106 
	}
}

109 #ifde‡
CONFIG_IIC


110 
f¶_i2c_öô
(
id
, 
•ìd
, 
¶avódd
);

112 
dfs_›s
 
	gdemoRtcOps
;

113 
	gdemoRtcId
;

114 
	$iic_öô_demo
()

117 
	`f¶_i2c_öô
(0,
CONFIG_SYS_FSL_I2C_SPEED
,
CONFIG_SYS_FSL_I2C_SLAVE
);

119 
	`mem£t
(&
demoRtcOps
,0,(demoRtcOps));

123 
demoRtcOps
.
wrôe
 = 
πc_wrôe
;

124 
demoRtcOps
.
ªad
 = 
πc_ªad
;

126 
demoRtcOps
.
size
 = 32;

127 
demoRtcOps
.
°¨t
 = 0;

128 
demoRtcOps
.
íd
 = 31;

129 
demoRtcOps
.
ba£_addr
 = 0;

132 
demoRtcId
 = 
	`dfs_ªgi°î
(&
demoRtcOps
);

134 
ªt
;

135 
ªt
 = 
	`dfs_ˇp
(
demoRtcId
,
DFS_ERASE
);

136 
	`¥ötf
("ii¯ˇ¿?Éø£ %d\n",
ªt
);

138 
	}
}

141 #ifde‡
CONFIG_SPI_FLASH


142 
dfs_›s
 
	g•i_demo
;

143 
Êash_°ru˘
 
	g•iÊash_demo
;

144 
	gdemoSfDid
 = 0;

146 
	gdemoDfd
 =0;

148 
	$•i_öô_demo
()

150 
	`mem£t
(&
•i_demo
,0,(spi_demo));

151 
	`mem£t
(&
•iÊash_demo
,0,(spiflash_demo));

155 
•iÊash_demo
.
£Size
 = 
BYTES_PER_SECTOR
;

156 
•iÊash_demo
.
£Num
 = 256;

157 
•iÊash_demo
.
ssSize
 = 
BYTES_PER_PAGE
;

158 
•iÊash_demo
.
ssNum
 = 256;

159 
•iÊash_demo
.
tŸÆSize
 = 16*1024*1024;

162 
•i_demo
.
d«me
 = (
UINT8
 *)"s25fl128s\n";

163 
•i_demo
.
wrôe
 = 
sf_wrôe
;

164 
•i_demo
.
ªad
 = 
sf_ªad
;

165 
•i_demo
.
îa£
 = 
sf_îa£
;

166 
•i_demo
.
ba£_addr
 = 0;

167 
•i_demo
.
°¨t
 = 0;

168 
•i_demo
.
size
 = 16*1024*1024;

169 
•i_demo
.
íd
 = spi_demo.
°¨t
 +•i_demo.
size
;

170 
•i_demo
.
d©a
 = (
Êash_°ru˘
 *)&
•iÊash_demo
;

174 
demoDfd
 = 
	`dfs_ªgi°î
(&
•i_demo
);

175 
demoSfDid
 = 
demoDfd
;

176 i‡(
demoDfd
 <0) {

177 
	`¥ötf
("s‡›†ªgi°î faû %d\n",
demoDfd
);

181 
ªt
;

182 
ªt
 = 
	`dfs_ˇp
(
demoSfDid
,
DFS_ERASE
);

183 
	`¥ötf
("•òˇ¿?Éø£ %d\n",
ªt
);

185 
	}
}

	@demo/dma_demo.c

1 
	~"../drivî/devi˚/dma/f¶_dma.h
"

4 
	$dma_demo
()

6 
	`dma_öô
();

7 
uöt8_t
 
buf1
[1024*1024],
buf2
[1024*1024];

8 
time1
,
time2
;

9 
ªt
;

10 
time1
=
	`gë_ticks
();

11 
	`mem£t
(
buf1
,0xab,(buf1));

12 
time2
=
	`gë_ticks
();

13 
	`¥ötf
("mem£à1M %dÅick†\n",
time2
-
time1
);

16 
time1
=
	`gëTblus
();

17 
ªt
 = 
	`dma_mem˝y
(
buf2
,
buf1
,(buf1));

18 
time2
=
	`gëTblus
();

19 if(
ªt
 <0)

20 
	`¥ötf
("dma fail\n");

21 
	`¥ötf
("dma˝y 1M %dÅick†\n",
time2
-
time1
);

23 
time1
=
	`gëTblus
();

24 
ªt
 = 
	`mem˝y
(
buf2
,
buf1
,(buf1));

25 
time2
=
	`gëTblus
();

26 
	`¥ötf
("mem˝y 1M %dÅick†\n",
time2
-
time1
);

28 
	}
}

	@demo/fsf_demo.c

3 
	~"../drivî/devi˚/•iÊash/sf.h
"

4 
	~"../ˇgos.h
"

6 
	$fsf_demo
()

8 #ifde‡
_CAG_CONFIG_AMP0


11 
	`¥ötf
("spiflash demo 1\n");

12 
uöt8_t
 
buf
[4096]={0};

13 
xxx
;

14 
ªt
;

15 
	`¥ötf
("spi 0\n");

22 
	`mem£t
(
buf
,0x15,4096);

24 i‡((
ªt
 = 
	`•iÊash_îa£
(0x14000/4096,1)) != 0)

25 
	`¥ötf
("îa£ faûe1 %d %x %d\n",0x14000/4096,0x14000,
ªt
);

27 i‡((
ªt
=
	`•iÊash_wrôe
(0x14000,
buf
,256)) != 256){

28 
	`¥ötf
("wr\n");

29 
	`¥ötf
("îa£ faûe1 %d %x %d\n",0x14000/4096,0x14000,
ªt
);

32 i‡((
ªt
 = 
	`•iÊash_ªad
(0x14000,
buf
,256))==256) {

33 
i
 =0;i<256;i++)

34 if(
buf
[
i
]!=0x15){

35 
	`¥ötf
("11îºº %x %x %d %d\n",
buf
[
i
],14000,14000,
ªt
);

41 
	`mem£t
(
buf
,0x15,4096);

42 i‡((
ªt
=
	`•iÊash_wrôe
(0x14000+256,
buf
,256)) != 256){

43 
	`¥ötf
("wr2 \n");

44 
	`¥ötf
("îa£ faûe1 %d %x %d\n",0x14000/4096,0x14000+256,
ªt
);

47 i‡((
ªt
 = 
	`•iÊash_ªad
(0x14000+256,
buf
,256))==256) {

48 
i
 =0;i<256;i++)

49 if(
buf
[
i
]!=0x15){

50 
	`¥ötf
("11îºº %x %x %d %d\n",
buf
[
i
],14000+256,14000/4096,
ªt
);

57 
ii
=0,
adr
=0x0;

61 i‡((
ªt
 = 
	`•iÊash_îa£
(
ii
,1)) != 0)

62 
	`¥ötf
("îa£ faûe1 %d %x %d\n",
ii
,
adr
,
ªt
);

64 
	`mem£t
(
buf
,0xdd,4096);

66 i‡((
ªt
=
	`•iÊash_wrôe
(
adr
,
buf
,256)) != 256){

67 
	`¥ötf
("wrôêÁûed %x %d %d\n",
adr
,
ii
,
ªt
);

68 i‡((
ªt
 = 
	`•iÊash_ªad
(
adr
,
buf
,256))==256) {

69 
i
 =0;i<256;i++)

70 if(
buf
[
i
]!=0x15){

71 
	`¥ötf
("11îºº %x %x %d %d\n",
buf
[
i
],
adr
,
ii
,
ªt
);

78 
	`mem£t
(
buf
,0,4096);

79 i‡((
ªt
 = 
	`•iÊash_ªad
(
adr
,
buf
,256))==256) {

80 
i
 =0;i<256;i++)

81 if(
buf
[
i
]!=0xdd){

82 
	`¥ötf
("îºº %x %x %d %d\n",
buf
[
i
],
adr
,
ii
,
ªt
);

86 
	`¥ötf
("%x ",
buf
[
i
]);

90 
ii
++;

91 
adr
+=4096;

92 if(
adr
 == 0x1000000)

97 i‡(
	`•iÊash_îa£
(0,1) != 0)

98 
	`¥ötf
("erase faile1\n");

99 i‡(
	`•iÊash_îa£
(32,1) != 0)

100 
	`¥ötf
("erase faile2\n");

102 i‡(
	`•iÊash_îa£
(33,1) != 0)

103 
	`¥ötf
("erase faile2\n");

104 
x
 = 0;x<4096;x++)

105 
buf
[
x
]=x%255;

108 
	`mem£t
(
buf
,0xab,4096);

110 i‡(
	`•iÊash_wrôe
(0x00000,
buf
,256) != 256){

111 
	`¥ötf
("write failed\n");

114 
	`mem£t
(
buf
,0,4096);

115 i‡(
	`•iÊash_ªad
(0x00000,
buf
,256)==256) {

116 
i
 =0;i<256;i++)

117 
	`¥ötf
("%x ",
buf
[
i
]);

119 
	`¥ötf
("\n");

124 
	`mem£t
(
buf
,0xcd,4096);

125 i‡(
	`•iÊash_wrôe
(0x20000,
buf
,255) != 255){

126 
	`¥ötf
("write failed\n");

128 
	`mem£t
(
buf
,0,4096);

130 i‡(
	`•iÊash_ªad
(0x20000,
buf
,255)==255) {

131 
i
 =0;i<255;i++)

132 
	`¥ötf
("%x ",
buf
[
i
]);

134 
	`¥ötf
("\n222");

136 
	`mem£t
(
buf
,0xcd,4096);

137 i‡(
	`•iÊash_wrôe
(0x21000,
buf
,255) != 255){

138 
	`¥ötf
("write failed\n");

140 
	`mem£t
(
buf
,0,4096);

142 i‡(
	`•iÊash_ªad
(0x21000,
buf
,255)==255) {

143 
i
 =0;i<255;i++)

144 
	`¥ötf
("%x ",
buf
[
i
]);

146 
	`¥ötf
("\n");

148 
	`mem£t
(
buf
,0,4096);

149 i‡(
	`•iÊash_ªad
(0x00000,
buf
,256)==256) {

150 
i
 =0;i<256;i++)

151 
	`¥ötf
("%x ",
buf
[
i
]);

153 
	`¥ötf
("\n");

158 i‡(
	`•iÊash_îa£
(0,1) != 0)

159 
	`¥ötf
("erase faile\n");

163 i‡(
	`•iÊash_îa£
(32,1) != 0)

164 
	`¥ötf
("erase faile\n");

165 
	`mem£t
(
buf
,0xef,4096);

166 i‡(
	`•iÊash_wrôe
(0x20000,
buf
,255) != 255){

167 
	`¥ötf
("write failed\n");

169 
	`mem£t
(
buf
,0,4096);

171 i‡(
	`•iÊash_ªad
(0x20000,
buf
,255)==255) {

172 
i
 =0;i<254;i++)

173 
	`¥ötf
("%x ",
buf
[
i
]);

175 
	`¥ötf
("\n");

176 i‡(
	`•iÊash_îa£
(32,1) != 0)

177 
	`¥ötf
("erase faile\n");

182 
	`¥ötf
("spi 1\n");

184 i‡((
xxx
 = 
	`•iÊash_id
())<0){

185 
	`¥ötf
("gë id faû : %x\n",
xxx
);

189 i‡((
xxx
=
	`•iÊash_ªad
(8*1024*1024,
buf
,100))==100) {

190 
i
 =0;i<100;i++)

191 
	`¥ötf
("%x ",
buf
[
i
]);

194 
	`¥ötf
("ªad %d\n",
xxx
);

195 
	`¥ötf
("\n");

197 
	`mem£t
(
buf
,0xcd,2048);

198 i‡((
xxx
=
	`•iÊash_wrôe
(8*1024*1024,
buf
,100)) != 100){

199 
	`¥ötf
("write failed\n");

202 
	`¥ötf
("wrôê%d\n",
xxx
);

204 i‡((
xxx
 = 
	`•iÊash_ªad
(8*1024*1024,
buf
,100))==100) {

205 
i
 =0;i<100;i++)

206 
	`¥ötf
("%x ",
buf
[
i
]);

209 
	`¥ötf
("ªad2 %d\n",
xxx
);

210 
	`¥ötf
("\n");

212 i‡((
xxx
=
	`•iÊash_îa£
(2048,1)) != 0)

213 
	`¥ötf
("îa£ faûê%d\n",
xxx
);

215 
	`¥ötf
("erase ok2\n");

217 i‡((
xxx
=
	`•iÊash_ªad
(8*1024*1024,
buf
,100))==100) {

218 
i
 =0;i<100;i++)

219 
	`¥ötf
("%x ",
buf
[
i
]);

222 
	`¥ötf
("ªad3 %d\n",
xxx
);

223 
	`¥ötf
("\n");

225 
	}
}

	@demo/iic_demo.c

28 
	~<libc/ˇgboŸ.h
>

29 
	~"../ˇgos.h
"

31 
	~<libc/ønd.h
>

32 
	~<libc/°rög.h
>

45 
demoRtcId
;

48 
	$ã°_iic_demo
()

50 
	`¥ötf
("test iic:rtc\n");

52 
buf
[100];

54 
buf
[0]=
	`ønd
()%60;

55 
buf
[1]=(
	`ønd
()+1)%60;

56 
buf
[2]=(
	`ønd
()+3)%60;

58 
	`¥ötf
("π¯wrôê0x%x 0x%x 0x%x\n",
buf
[0],buf[1],buf[2]);

61 
	`dfs_wrôe
(
demoRtcId
,0,
buf
,3);

64 
	`dfs_ªad
(
demoRtcId
,0,
buf
,1);

65 
	`¥ötf
("π¯ªad 0x%x 0x%x 0x%x\n",
buf
[0],buf[1],buf[2]);

68 
	}
}

	@demo/mq_demo.c

2 
	~<libc/ˇgboŸ.h
>

3 
	~"../ˇgos.h
"

5 
	gqnum1
,
	gqnum2
;

7 
	g£¡1
=0,
	g£¡2
=0,
	gªcv1
=0;

8 
	gªcv3
=0,
	gªcv2
=0;

10 
	$mq_èsk0
(*
¨g
)

12 
i
=0;

13 
îr
;

16 
	`¥ötf
("tsk0 %d síà1 %d síà2 %dÑecv1 %dÑecv2 %d\n",
i
,
£¡1
,
£¡2
,
ªcv1
,
ªcv2
);

17 
i
++;

18 
	`udñay
(500000);

20 
	}
}

23 
	$mq_èsk1
(*
¨g
)

25 
i
=0;

26 
	`¥ötf
("tsk1 %d\n",
i
);

27 
i
++;

30 
UINT32
 
to
=0;

31 
UINT8
 *
buf
="IámÅask 1";

32 
UINT8
 
ªcv
[100];

33 
UINT8
 *
¥ecv
;

34 
size
;

35 
îr
;

38 
¥ecv
 = 
ªcv
;

39 
size
 =0;

40 
	`os_queue_po°
(
qnum2
,
buf
,
	`°æí
(buf),
OS_OPT_POST_FIFO
,&
îr
);

41 i‡(
îr
 =
OS_ERR_NONE
) {

42 
£¡1
++;

44 
	`os_queue_gë
(
qnum1
,
ªcv
,&
size
,
OS_OPT_PEND_BLOCKING
,
to
,&
îr
);

45 i‡(
îr
 =
OS_ERR_NONE
) {

46 
ªcv1
++;

48 
	`¥ötf
("task 1ÑecvÇone\n");

49 
	`¥ötf
("\n");

50 
	`os_dñay_èsk
(1000,&
îr
);

53 
	}
}

56 
	$mq_èsk2
(*
¨g
)

58 
i
=0;

59 
	`¥ötf
("tsk2 %d\n",
i
);

60 
i
++;

62 
UINT32
 
to
=0;

63 
UINT8
 *
buf
="IámÅask 2";

64 
UINT8
 
ªcv
[100];

65 
UINT8
 *
¥ecv
;

66 
size
;

67 
îr
;

69 
¥ecv
 = 
ªcv
;

70 
size
=0;

71 
	`os_queue_po°
(
qnum1
,
buf
,
	`°æí
(buf),
OS_OPT_POST_FIFO
,&
îr
);

72 i‡(
îr
 =
OS_ERR_NONE
) {

73 
£¡2
++;

75 
	`os_queue_gë
(
qnum2
,
ªcv
,&
size
,
OS_OPT_PEND_BLOCKING
,
to
,&
îr
);

76 i‡(
îr
 =
OS_ERR_NONE
) {

77 
ªcv2
++;

79 
	`¥ötf
("task 2ÑecvÇone\n");

80 
	`¥ötf
("\n");

82 
	`os_dñay_èsk
(1000,&
îr
);

86 
	}
}

89 
	$mq_èsk3
(*
¨g
)

91 
i
=0;

92 
	`¥ötf
("tsk3 %d\n",
i
);

93 
i
++;

95 
UINT32
 
to
=0;

96 
UINT8
 *
buf
="IámÅask 3,I send you messages ,pleaseÑeceive it";

97 
UINT8
 
ªcv
[100];

98 
UINT8
 *
¥ecv
;

99 
size
;

100 
ts
,
îr
;

101 
i
=1;

103 
¥ecv
 = 
ªcv
;

104 
size
=0;

105 
	`os_queue_po°
(
qnum1
,
buf
,
	`°æí
(buf),
OS_OPT_POST_FIFO
,&
îr
);

106 i‡(
îr
 !
OS_ERR_NONE
) {

109 
£¡1
++;

111 if(
i
%20==0)

112 
	`os_dñay_èsk
(1,&
îr
);

113 
i
++;

117 
	}
}

120 
	$mq_èsk4
(*
¨g
)

122 
i
=0;

123 
	`¥ötf
("tsk4 %d\n",
i
);

124 
i
++;

126 
UINT32
 
to
=0;

127 
UINT8
 *
buf
="IámÅask 4,I send you messages ,pleaseÑeceive it";

128 
UINT8
 
ªcv
[100];

129 
UINT8
 *
¥ecv
;

130 
size
;

131 
îr
;

132 
i
=1;

134 
¥ecv
 = 
ªcv
;

135 
size
=0;

136 
	`os_queue_gë
(
qnum1
,
ªcv
,&
size
,
OS_OPT_PEND_BLOCKING
,
to
,&
îr
);

137 i‡(
îr
 =
OS_ERR_NONE
) {

138 
ªcv1
++;

140 
	`¥ötf
("ªcvÇ⁄ê%d\n",
îr
);

143 if(
i
%2==0) {

144 
	`os_dñay_èsk
(1,&
îr
);

146 
i
++;

151 
	}
}

154 
	$mq_èsk5
(*
¨g
)

156 
i
=0;

157 
	`¥ötf
("tsk5 %d\n",
i
);

158 
i
++;

160 
UINT32
 
to
=0;

161 
UINT8
 *
buf
="IámÅask 4,I send you messages ,pleaseÑeceive it";

162 
UINT8
 
ªcv
[100];

163 
UINT8
 *
¥ecv
;

164 
size
;

165 
îr
;

166 
i
=1;

168 
¥ecv
 = 
ªcv
;

169 
size
=0;

170 
	`os_queue_gë
(
qnum1
,
ªcv
,&
size
,
OS_OPT_PEND_BLOCKING
,
to
,&
îr
);

171 i‡(
îr
 =
OS_ERR_NONE
) {

172 
ªcv2
++;

174 
	`¥ötf
("ªcvÇ⁄ê%d\n",
îr
);

177 if(
i
%2==0) {

178 
	`os_dñay_èsk
(1,&
îr
);

180 
i
++;

184 
	}
}

187 
	$mq_èsk6
(*
¨g
)

189 
i
=0;

190 
	`¥ötf
("tsk6 %d\n",
i
);

191 
i
++;

193 
UINT32
 
to
=0;

194 
UINT8
 *
buf
="IámÅask 4,I send you messages ,pleaseÑeceive it";

195 
UINT8
 
ªcv
[100];

196 
UINT8
 *
¥ecv
;

197 
size
;

198 
îr
;

199 
i
=1;

201 
¥ecv
 = 
ªcv
;

202 
size
=0;

203 
	`os_queue_po°
(
qnum1
,
buf
,
	`°æí
(buf),
OS_OPT_POST_ALL
,&
îr
);

204 i‡(
îr
 !
OS_ERR_NONE
) {

205 
	`¥ötf
("po° faû %d\n",
îr
);

207 
£¡2
++;

208 if(
i
%13==0) {

209 
	`os_dñay_èsk
(1000,&
îr
);

211 
i
++;

214 
	}
}

217 
	$mq_èsk7
(*
¨g
)

219 
i
=0;

220 
	`¥ötf
("tsk7 %d\n",
i
);

221 
i
++;

223 
UINT32
 
to
=0;

224 
UINT8
 *
buf
="IámÅask 4,I send you messages ,pleaseÑeceive it";

225 
UINT8
 
ªcv
[100];

226 
UINT8
 *
¥ecv
;

227 
size
;

228 
îr
;

229 
i
=1;

231 
¥ecv
 = 
ªcv
;

232 
size
=0;

233 
	`os_queue_gë
(
qnum1
,
ªcv
,&
size
,
OS_OPT_PEND_BLOCKING
,
to
,&
îr
);

234 i‡(
îr
 =
OS_ERR_NONE
) {

235 
ªcv2
++;

238 if(
i
%2==0) {

239 
	`os_dñay_èsk
(10,&
îr
);

241 
i
++;

244 
	}
}

246 
	$ã°_msg_demo
()

248 
a
=1;

249 
îr
;

251 
UINT8
 *
q«me
="msgq1";

252 
OS_MSG_QTY
 
q1Max
 = 100;

253 
OS_ERR
 
q1îr
;

254 
UINT8
 *
q«me2
="msgq2";

255 
OS_MSG_QTY
 
q2Max
 = 100;

256 
OS_ERR
 
q2îr
;

258 
qnum1
 = 
	`os_queue_¸óã
(
q«me
,
q1Max
,&
q1îr
);

259 i‡(
q1îr
 !
OS_ERR_NONE
) {

260 
	`¥ötf
("osq 1 cª©êÁûê%d\n",
q1îr
);

264 
qnum2
 = 
	`os_queue_¸óã
(
q«me2
,
q2Max
,&
q2îr
);

265 i‡(
q1îr
 !
OS_ERR_NONE
) {

266 
	`¥ötf
("osq 2 cª©êÁûê%d\n",
q1îr
);

267 
	`os_queue_dñ
(
qnum2
,
OS_OPT_DEL_ALWAYS
,&
q2îr
);

268 i‡(
q2îr
 !
OS_ERR_NONE
 ) {

269 
	`¥ötf
("osq 1 dñëêÁû %d\n",
q2îr
);

274 
UINT8
 *
mq_èsk0Name
="mq_task0";

275 
UINT8
 *
mq_èsk1Name
="mq_task1";

276 
UINT8
 *
mq_èsk2Name
="mq_task2";

277 
UINT8
 *
mq_èsk3Name
="mq_task3";

278 
UINT8
 *
mq_èsk4Name
="mq_task4";

279 
UINT8
 *
mq_èsk5Name
="mq_task5";

282 #ifde‡
_SEND_MORE_


283 
	`os_¸óã_èsk
(
mq_èsk2Name
,
mq_èsk3
,
NULL
,0,0,&
îr
);

284 
	`os_¸óã_èsk
(
mq_èsk1Name
,
mq_èsk4
,
NULL
,1,0,&
îr
);

285 
	`os_¸óã_èsk
(
mq_èsk0Name
,
mq_èsk0
,
NULL
,2,0,&
îr
);

286 #ñi‡
	`deföed
(
_RECV_MORE_
)

287 
	`os_¸óã_èsk
(
mq_èsk2Name
,
mq_èsk5
,
NULL
,0,0,&
îr
);

288 
	`os_¸óã_èsk
(
mq_èsk1Name
,
mq_èsk3
,
NULL
,1,0,&
îr
);

289 
	`os_¸óã_èsk
(
mq_èsk0Name
,
mq_èsk0
,
NULL
,
îr
);

290 #ñi‡
	`deföed
(
_BROADCAST_
)

291 
	`os_¸óã_èsk
(
mq_èsk2Name
,
mq_èsk6
,
NULL
,0,0,&
îr
);

292 
	`os_¸óã_èsk
(
mq_èsk3Name
,
mq_èsk4
,
NULL
,1,0,&
îr
);

293 
	`os_¸óã_èsk
(
mq_èsk1Name
,
mq_èsk5
,
NULL
,2,0,&
îr
);

294 
	`os_¸óã_èsk
(
mq_èsk0Name
,
mq_èsk0
,
NULL
,3,0,&
îr
);

295 #ñi‡
	`deföed
(
_PEND_NON_BLOCK_
)

296 
	`os_¸óã_èsk
(
mq_èsk2Name
,
mq_èsk7
,
NULL
,0,0,&
îr
);

297 
	`os_¸óã_èsk
(
mq_èsk1Name
,
mq_èsk3
,
NULL
,1,0,&
îr
);

298 
	`os_¸óã_èsk
(
mq_èsk0Name
,
mq_èsk0
,
NULL
,2,0,&
îr
);

300 
	`os_¸óã_èsk
(
mq_èsk2Name
,
mq_èsk1
,
NULL
,0,0,&
îr
);

301 
	`os_¸óã_èsk
(
mq_èsk1Name
,
mq_èsk2
,
NULL
,1,0,&
îr
);

302 
	`os_¸óã_èsk
(
mq_èsk0Name
,
mq_èsk0
,
NULL
,2,0,&
îr
);

304 
	}
}

	@demo/mt_demo.c

1 
	~<libc/ˇgboŸ.h
>

2 
	~"../ˇgos.h
"

4 
	gtimes1
 = 0,
	gtimes2
 = 0;

5 
	gmt0
;

8 
	$mt_èsk1
(*
¨g
)

10 
îr
=0;

13 
	`os_muãx_≥nd
(
mt0
,0,
OS_OPT_PEND_BLOCKING
,&
îr
);

14 if(
îr
 !
OS_ERR_NONE
)

15 
	`¥ötf
("t1 get mutext fail\n");

16 
times1
 ++;

17 
	`¥ötf
("t1 %d \n",
times1
);

19 
	`os_muãx_po°
(
mt0
,
OS_OPT_POST_NONE
,&
îr
);

20 if(
îr
 !
OS_ERR_NONE
)

21 
	`¥ötf
("t1 get mutext fail\n");

22 
	`os_dñay_èsk
(1,&
îr
);

24 
	}
}

27 
	$mt_èsk2
(*
¨g
)

29 
îr
=0;

32 
	`os_muãx_≥nd
(
mt0
,0,
OS_OPT_PEND_BLOCKING
,&
îr
);

33 if(
îr
 !
OS_ERR_NONE
)

34 
	`¥ötf
("t22 get mutext fail\n");

35 
times2
 ++;

36 
	`¥ötf
("t2 %d \n",
times2
);

38 
	`os_muãx_po°
(
mt0
,
OS_OPT_POST_NONE
,&
îr
);

39 if(
îr
 !
OS_ERR_NONE
)

40 
	`¥ötf
("t2Öut mutext fail\n");

41 
	`os_dñay_èsk
(1,&
îr
);

43 
	}
}

45 
	$mt_idÀ
(*
¨g
)

48 
	`¥ötf
("mt idle\n");

50 
	}
}

52 
	$muãx_ã°_demo
()

54 
îr
=0;

57 
mt0
 = 
	`os_muãx_¸óã
("mt0",&
îr
);

58 if(
îr
 !
OS_ERR_NONE
) {

59 
	`¥ötf
("mutex create fail\n");

62 
	`os_¸óã_èsk
("p",
mt_èsk1
,
NULL
,10,0,&
îr
);

63 
	`os_¸óã_èsk
("v",
mt_èsk2
,
NULL
,11,0,&
îr
);

64 
	`os_¸óã_èsk
("idÀ",
mt_idÀ
,
NULL
,12,0,&
îr
);

65 
	}
}

	@demo/nor_demo.c

29 
	~"demo.h
"

30 
	~<drv_c⁄fig.h
>

31 
	~<libc/ønd.h
>

32 
	~"../drivî/devi˚/dfs/dfs.h
"

33 
	~"../drivî/devi˚/n‹Êash/Œd.h
"

36 
Êash_°ru˘
 
n‹_demo_°
;

38 
demo_dfd1
,
demo_dfd2
;

39 
	gbuf
[128*1024]={0};

40 
	gbuf2
[128*1024]={0};

41 
	#gëTblus
 
gë_‰ì


	)

42 
	$do_demo_n‹1
()

44 
ªt
 =0,
i
;

45 
t1
 ,
t2
;

47 
ªt
 = 
	`Œd_îa£
(240,1);

48 if(
ªt
 <0){

49 
	`¥ötf
("erase fail\n");

53 
ªt
 = 
	`Œd_wrôe
(0xede00000,
buf
,128*1024);

54 if(
ªt
 != 128*1024){

55 
	`¥ötf
("ªà%d\n",
ªt
);

57 
ªt
 = 
	`Œd_ªad
(0xede00000,
buf2
,128*1024);

58 if(
ªt
 != 128*1024){

59 
	`¥ötf
("ªà%d\n",
ªt
);

61 
i
=1000;i<1020;i++){

62 
	`¥ötf
("%d ",
buf2
[
i
]);

64 
	`¥ötf
(" AokÑë %d\n",
ªt
);

67 
ªt
 = 
	`Œd_îa£
(2,40);

68 if(
ªt
 <0){

69 
	`¥ötf
("erase fail\n");

73 
i
=0;i<0x20000/300*40;i++){

75 
ªt
 = 
	`Œd_wrôe
(0xec040000+
i
*300,
buf
,300);

76 if(
ªt
 != 300){

77 
	`¥ötf
("ªà%d\n",
ªt
);

80 
	`¥ötf
("done1\n");

83 
i
=0;i<0x20000/0x600;i++){

84 
t1
 = 
	`gëTblus
();

85 
	`Œd_wrôe
(0xEDE00000+
i
*0x600,
buf
,224);

86 
t2
 = 
	`gëTblus
();

87 
	`¥ötf
("224Å %d %d %d\n",
t2
,
t1
,t2-t1);

89 
t1
 = 
	`gëTblus
();

90 
	`Œd_wrôe
(0xEDE00100+
i
*0x600,
buf
,196);

91 
t2
 = 
	`gëTblus
();

92 
	`¥ötf
("196Å %d %d %d\n",
t2
,
t1
,t2-t1);

94 
t1
 = 
	`gëTblus
();

95 
	`Œd_wrôe
(0xEDE00200+
i
*0x600,
buf
,192);

96 
t2
 = 
	`gëTblus
();

97 
	`¥ötf
("192Å %d %d %d\n",
t2
,
t1
,t2-t1);

99 
t1
 = 
	`gëTblus
();

100 
	`Œd_wrôe
(0xEDE00300+
i
*0x600,
buf
,64);

101 
t2
 = 
	`gëTblus
();

102 
	`¥ötf
("64Å %d %d %d\n",
t2
,
t1
,t2-t1);

104 
t1
 = 
	`gëTblus
();

105 
	`Œd_wrôe
(0xEDE00400+
i
*0x600,
buf
,32);

106 
t2
 = 
	`gëTblus
();

107 
	`¥ötf
("32Å %d %d %d\n",
t2
,
t1
,t2-t1);

112 
t1
 = 
	`gëTblus
();

113 
	`Œd_wrôe
(0xEDE00200,
buf
,320);

114 
t2
 = 
	`gëTblus
();

115 
	`¥ötf
("320Å %d %d %d\n",
t2
,
t1
,t2-t1);

117 
t1
 = 
	`gëTblus
();

118 
	`Œd_wrôe
(0xEDE00400,
buf
,300);

119 
t2
 = 
	`gëTblus
();

120 
	`¥ötf
("300Å %d %d %d\n",
t2
,
t1
,t2-t1);

122 
t1
 = 
	`gëTblus
();

123 
	`Œd_wrôe
(0xEDE00600,
buf
,240);

124 
t2
 = 
	`gëTblus
();

125 
	`¥ötf
("240Å %d %d %d\n",
t2
,
t1
,t2-t1);

127 
t1
 = 
	`gëTblus
();

128 
	`Œd_wrôe
(0xEDE00800,
buf
,224);

129 
t2
 = 
	`gëTblus
();

130 
	`¥ötf
("224Å %d %d %d\n",
t2
,
t1
,t2-t1);

132 
t1
 = 
	`gëTblus
();

133 
	`Œd_wrôe
(0xEDE00a00,
buf
,200);

134 
t2
 = 
	`gëTblus
();

135 
	`¥ötf
("200Å %d %d %d\n",
t2
,
t1
,t2-t1);

137 
t1
 = 
	`gëTblus
();

138 
	`Œd_wrôe
(0xEDE00c00,
buf
,196);

139 
t2
 = 
	`gëTblus
();

140 
	`¥ötf
("196Å %d %d %d\n",
t2
,
t1
,t2-t1);

142 
t1
 = 
	`gëTblus
();

143 
	`Œd_wrôe
(0xEDE00e00,
buf
,192);

144 
t2
 = 
	`gëTblus
();

145 
	`¥ötf
("192Å %d %d %d\n",
t2
,
t1
,t2-t1);

147 
t1
 = 
	`gëTblus
();

148 
	`Œd_wrôe
(0xEDE01000,
buf
,180);

149 
t2
 = 
	`gëTblus
();

150 
	`¥ötf
("180Å %d %d %d\n",
t2
,
t1
,t2-t1);

152 
t1
 = 
	`gëTblus
();

153 
	`Œd_wrôe
(0xEDE01200,
buf
,160);

154 
t2
 = 
	`gëTblus
();

155 
	`¥ötf
("160Å %d %d %d\n",
t2
,
t1
,t2-t1);

157 
	}
}

158 
	$do_demo_n‹
()

160 
	`¥ötf
("testÇor\n");

161 
i
=0;

162 
INT32
 
t
,
°ï
,
size
;

163 
UINT8
 
buf
[32*1024];

165 
t
=0;

166 
°ï
 = 
n‹_demo_°
.
ssSize
;

167 
size
 = 
n‹_demo_°
.
£Size
;

168 
i
 =0; i<
°ï
; i++)

169 
buf
[
i
]=(
	`ønd
()*2)%256;

173 
	`dfs_îa£
(
demo_dfd1
,
i
,1);

176 
	`¥ötf
("‹ò%x %x %x %x\n",
buf
[0],buf[1024],buf[2345],buf[
°ï
-1]);

179 i‡–
	`dfs_wrôe
(
demo_dfd1
,
t
*
°ï
,
buf
,step) != step) {

180 
	`¥ötf
("wrôêÁûádd∏0x%xÜí %dÖo†0x%x\n",
i
*
size
,
°ï
,
t
*step);

182 
	`mem£t
(&
buf
[
°ï
],0,step);

184 i‡–
	`dfs_ªad
(
demo_dfd1
,
t
*
°ï
,&
buf
[step],step) != step) {

185 
	`¥ötf
("ªad faûádd∏0x%xÜí %dÖo†0x%x\n",
i
*
size
,
°ï
,
t
*step);

187 
	`¥ötf
("ªd %x %x %x %x\n",
buf
[0+
°ï
],buf[1024+step],buf[2345+step],buf[step-1+step]);

192 
i
=0;

193 
t
=0;

195 
	`dfs_îa£
(
demo_dfd2
,
i
,1);

198 
	`¥ötf
("‹ò%x %x %x %x\n",
buf
[0],buf[1024],buf[2345],buf[
°ï
-1]);

201 i‡–
	`dfs_wrôe
(
demo_dfd2
,
t
*
°ï
,
buf
,step) != step) {

202 
	`¥ötf
("wrôêÁûádd∏0x%xÜí %dÖo†0x%x\n",
i
*
size
,
°ï
,
t
*step);

204 
	`mem£t
(&
buf
[
°ï
],0,step);

206 i‡–
	`dfs_ªad
(
demo_dfd2
,
t
*
°ï
,&
buf
[step],step) != step) {

207 
	`¥ötf
("ªad faûádd∏0x%xÜí %dÖo†0x%x\n",
i
*
size
,
°ï
,
t
*step);

209 
	`¥ötf
("ªd %x %x %x %x\n",
buf
[0+
°ï
],buf[1024+step],buf[2345+step],buf[step-1+step]);

211 
	}
}

	@demo/oscheck.c

2 
	~"demo.h
"

3 
	~<c⁄fig.h
>

4 
	~<libc/°dio.h
>

5 
	~<p1020rdb.h
>

6 
	~<kî√l/sysPic.h
>

7 
	~<µc/toﬁPpc.h
>

10 
	~<kî√l/sysApi.h
>

12 * c⁄° 
	gÊag1
=0x1100000;

13 * c⁄° 
	gÊag2
=0x2100000;

14 * c⁄° 
	gÊag3
=0x3100000;

15 * c⁄° 
	gÊag4
=0x5100000;

16 * c⁄° 
	gÊag5
=0x6100000;

17 * c⁄° 
	gÊag6
=0x7100000;

21 
	$jumpos
()

23 
UINT32
 
t1
,
t2
,
t3
,
t4
;

24 
	`¥ötf
("†%d\n",
TASK_SPESTACK_HIGH
-
KERNEL_STACK_LOW
);

26 #ifde‡
_CAG_CONFIG_AMP0


28 
	`os_c›y_d©a
(0x5000000,0x00100000);

29 
	`¥ötf
("11\n");

30 
	`os_c›y_°ack
();

31 
	`¥ötf
("22\n");

33 
	`os_ch™ge_mmu
();

34 
	`¥ötf
("D\n");

36 
	`os_˛ór_d©a
(0x5000000,0x00100000);

37 
	`os_˛ór_°ack
();

38 
	`os_upd©e_mno
();

42 
	`os_c›y_d©a
(0x1000000,0x00100000);

43 
	`¥ötf
("11\n");

44 
	`os_c›y_°ack
();

45 
	`¥ötf
("22\n");

47 
	`os_ch™ge_mmu
();

48 
	`¥ötf
("D\n");

50 
	`os_˛ór_d©a
(0x1000000,0x00100000);

51 
	`os_˛ór_°ack
();

52 
	`os_upd©e_mno
();

57 
	}
}

59 
	$os_swôch
()

61 
	`powîpcI¡DißbÀ
();

62 
	`¥ötf
("os_s\n");

63 
	`os_g≠_check
();

64 
	`jumpos
();

65 
	`powîpcI¡E«bÀ
();

66 
	}
}

68 
	gãmp
[140];

70 #ifde‡
_CAG_CONFIG_AMP0


71 
	#CHANGE_STK
 0x04100000

	)

73 
	#CHANGE_STK
 0x00100000

	)

76 
	$Ÿhîs
()

78 
îr
;

82 
	`OSTaskCª©e
(
ãmp
,

84 
os_swôch
,

85 
NULL
,

87 
CHANGE_STK
,

94 &
îr
);

95 
	}
}

97 
	$èsk_void
(
a
[])

99 
i
=1;

100 
îr
;

102 
	`¥ötf
("è %d\n",
i
++);

103 
	`powîpcI¡DißbÀ
();

104 
	`os_g≠_check
();

105 
	`¥ötf
("T1 0x%x:%x 0x%x:%x 0x%x:%x ",
Êag1
,*Êag1,
Êag2
,*Êag2,
Êag3
,*flag3);

106 
	`¥ötf
("T11 0x%x:%x 0x%x:%x 0x%x:%x\n",
Êag4
,*Êag4,
Êag5
,*Êag5,
Êag6
,*flag6);

107 
	`powîpcI¡E«bÀ
();

108 
	`¥ötf
("MU\n");

110 if(
i
%1 == 0) {

111 
	`¥ötf
("os_switch\n");

112 
	`Ÿhîs
();

117 
	`os_dñay_èsk
(1,&
îr
);

121 
	}
}

123 
	$èsk_void1
(
a
[])

125 
i
=0;

126 
îr
;

128 
	`¥ötf
("tb\n");

129 
	`powîpcI¡DißbÀ
();

130 
	`¥ötf
("T2 0x%x:%x 0x%x:%x 0x%x:%x ",
Êag1
,*Êag1,
Êag2
,*Êag2,
Êag3
,*flag3);

131 
	`¥ötf
("T2 0x%x:%x 0x%x:%x 0x%x:%x\n",
Êag4
,*Êag4,
Êag5
,*Êag5,
Êag6
,*flag6);

132 
	`powîpcI¡E«bÀ
();

133 
	`os_dñay_èsk
(1,&
îr
);

135 
	}
}

137 
	gid1
,
	gid2
;

139 
	$duÆ_ã°
()

141 
	`¥ötf
("maina\n");

142 
îr
;

143 
Ø
 = 1;

144 
bb
=2;

145 
c
=3;

147 *
Êag1
=0x11111111;

148 *
Êag2
=0x22222222;

149 *
Êag3
=0x33333333;

150 *
Êag4
=0x44444444;

151 *
Êag5
=0x55555555;

152 *
Êag6
=0x66666666;

154 
	`¥ötf
("createÅasks\n");

155 
id1
 = 
	`os_¸óã_èsk
("èsk1",
èsk_void
,&
Ø
,1,1,&
îr
);

156 if(
îr
 != 0)

157 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

159 
id2
 = 
	`os_¸óã_èsk
("èsk2",
èsk_void1
,&
bb
,1,1,&
îr
);

160 if(
îr
 != 0)

161 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

163 
id2
 = 
	`os_¸óã_èsk
("èsk3",
èsk_void1
,&
c
,1,1,&
îr
);

164 if(
îr
 != 0)

165 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

166 
	`os_g≠_check
();

167 
	}
}

169 
	$os_g≠_fûl
()

171 
	`mem£t
(
GAP_0
,0x00,
GAP_SIZE
);

172 
	`mem£t
(
GAP_1
,0x00,
GAP_SIZE
);

173 
	`mem£t
(
GAP_2
,0x00,
GAP_SIZE
);

174 
	`mem£t
(
GAP_3
,0x00,
GAP_SIZE
);

175 
	`mem£t
(
GAP_4
,0x00,
GAP_SIZE
);

176 
	`mem£t
(
GAP_5
,0x00,
GAP_SIZE
);

177 
	`mem£t
(
GAP_6
,0x00,
GAP_SIZE
);

178 
	`mem£t
(
GAP_7
,0x00,
GAP_SIZE
);

180 #ifde‡
_CAG_CONFIG_AMP0


181 
i
=1;i<3;i++){

183 
i
=1;i<4;i++){

185 
	`mem£t
(
TASK_STACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_STACK_SIZE
),0x00,GAP_SIZE);

187 
i
=1;i<7;i++){

188 
	`mem£t
(
TASK_SPESTACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_SPESTACK_SIZE
),0x00,GAP_SIZE);

190 
	}
}

192 
	$os_g≠_check
()

194 
öt8_t
 
brokí
=0;

195 
uöt8_t
 
buf
[
GAP_SIZE
]={0x00};

196 
	`mem£t
(
buf
,0x00,
GAP_SIZE
);

197 
ªt
=0;

198 
	`¥ötf
("check\n");

199 
ªt
=
	`memcmp
(
GAP_0
,
buf
,
GAP_SIZE
);

200 if(
ªt
 !=0){

201 
	`powîpcI¡DißbÀ
();

202 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

203 
i
=0;i<
GAP_SIZE
;i++){

204 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_0
+
i
));

206 
brokí
=1;

207 
	`¥ötf
("\n");

209 
ªt
=
	`memcmp
(
GAP_1
,
buf
,
GAP_SIZE
);

210 if(
ªt
 !=0){

211 
	`powîpcI¡DißbÀ
();

212 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

213 
i
=0;i<
GAP_SIZE
;i++){

214 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_1
+
i
));

216 
brokí
=1;

217 
	`¥ötf
("\n");

219 
ªt
=
	`memcmp
(
GAP_2
,
buf
,
GAP_SIZE
);

220 if(
ªt
 !=0){

221 
	`powîpcI¡DißbÀ
();

222 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

223 
	`¥ötf
("%x\n",
GAP_2
);

224 
i
=0;i<
GAP_SIZE
;i++){

225 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_2
+
i
));

227 
brokí
=1;

228 
	`¥ötf
("\n");

230 
ªt
=
	`memcmp
(
GAP_3
,
buf
,
GAP_SIZE
);

231 if(
ªt
 !=0){

232 
	`powîpcI¡DißbÀ
();

233 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

234 
	`¥ötf
("%x\n",
GAP_3
);

235 
i
=0;i<
GAP_SIZE
;i++){

236 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_3
+
i
));

238 
brokí
=1;

239 
	`¥ötf
("\n");

241 
ªt
=
	`memcmp
(
GAP_4
,
buf
,
GAP_SIZE
);

242 if(
ªt
 !=0){

243 
	`powîpcI¡DißbÀ
();

244 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

245 
i
=0;i<
GAP_SIZE
;i++){

246 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_4
+
i
));

248 
brokí
=1;

249 
	`¥ötf
("\n");

251 
ªt
=
	`memcmp
(
GAP_5
,
buf
,
GAP_SIZE
);

252 if(
ªt
 !=0){

253 
	`powîpcI¡DißbÀ
();

254 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

255 
i
=0;i<
GAP_SIZE
;i++){

256 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_5
+
i
));

258 
brokí
=1;

259 
	`¥ötf
("\n");

261 
ªt
=
	`memcmp
(
GAP_6
,
buf
,
GAP_SIZE
);

262 if(
ªt
 !=0){

263 
	`powîpcI¡DißbÀ
();

264 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

265 
i
=0;i<
GAP_SIZE
;i++){

266 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_6
+
i
));

268 
brokí
=1;

269 
	`¥ötf
("\n");

271 
ªt
=
	`memcmp
(
GAP_7
,
buf
,
GAP_SIZE
);

272 if(
ªt
 !=0){

273 
	`powîpcI¡DißbÀ
();

274 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

275 
	`¥ötf
("%x\n",
GAP_7
);

276 
i
=0;i<
GAP_SIZE
;i++){

277 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
GAP_7
+
i
));

279 
brokí
=1;

280 
	`¥ötf
("\n");

283 #ifde‡
_CAG_CONFIG_AMP0


284 
i
=1;i<3;i++){

286 
i
=1;i<4;i++){

288 
ªt
=
	`memcmp
(
TASK_STACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_STACK_SIZE
),
buf
,GAP_SIZE);

289 if(
ªt
 !=0){

290 
	`powîpcI¡DißbÀ
();

291 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

292 
j
=0;j<
GAP_SIZE
;j++){

293 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
TASK_STACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_STACK_SIZE
)+
j
));

295 
brokí
=1;

296 
	`¥ötf
("\n");

299 
i
=1;i<7;i++){

300 
ªt
=
	`memcmp
(
TASK_SPESTACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_SPESTACK_SIZE
),
buf
,GAP_SIZE);

301 if(
ªt
 !=0){

302 
	`powîpcI¡DißbÀ
();

303 
	`¥ötf
("%†%d\n",
__FUNCTION__
,
__LINE__
);

304 
j
=0;j<
GAP_SIZE
;j++){

305 
	`¥ötf
("%x ",*(
uöt8_t
 *)(
TASK_SPESTACK_HIGH
- 
i
 *(
GAP_SIZE
+
TASK_SPESTACK_SIZE
)+
j
));

307 
brokí
=1;

308 
	`¥ötf
("\n");

311 if(
brokí
==1){

314 
	}
}

	@demo/pcie_demo.c

1 
	~"demo.h
"

2 
	~<libc/°dio.h
>

3 
	~<libc/ˇgboŸ.h
>

4 
	~<ˇgos.h
>

5 
	~"../drivî/devi˚/pcõ/pcõ.h
"

8 
	$pcõ_mem˝y
()

10 
§c
,
d°
,
˙t
;

12 
§c
=
FPGA_PCIE1_BAR0_BASE
;

13 
d°
=
PPC_PCIE_DDR1_OFFSET
;

14 
˙t
=100;

16 
	`¥ötf
("exchange data between cpuánd fpgaÖcie via memcpy\n");

17 
	`¥ötf
("‰om 0x%xÅÿ0x%x c¡ %d\n",
§c
,
d°
,
˙t
);

18 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
PPC_PCIE_DDR1_OFFSET
);

19 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

20 
	`mem˝y
((
uöt32_t
*)
d°
,(uöt32_t*)
§c
,
˙t
);

21 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
PPC_PCIE_DDR1_OFFSET
);

22 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

24 
	}
}

26 
	$pcõ_demo
()

28 
ªs
;

30 
	`¥ötf
("pcie send : send from cpuÅo fpgaÖcie\n");

31 
	`¥ötf
("1 sr¯%x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR1_OFFSET
+0x080000));

32 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

33 
ªs
 = 
	`pcõ_£nd
(1,0x080000,0x0,0x64);

34 i‡(
ªs
 <0)

35 
	`¥ötf
("send fail\n");

36 
	`¥ötf
("2 sr¯%x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR1_OFFSET
+0x080000));

37 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

39 
	`¥ötf
("pcieÑecv :Ñecv from fpgaÖcieÅo cpuÖcie\n");

40 
	`mem£t
((
uöt32_t
*)(
PPC_PCIE_DDR1_OFFSET
+0x1000),0x0,0x100);

41 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

42 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR1_OFFSET
+0x1000));

43 
ªs
 = 
	`pcõ_ªcv
(1,0x0,0x1000,0x64);

44 i‡(
ªs
 <0)

45 
	`¥ötf
("recv fail\n");

46 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

47 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE1_BAR0_BASE
);

48 
	`¥ötf
("pcie1 done\n");

53 
	`¥ötf
("pcie send\n");

54 
	`¥ötf
("2 sr¯%x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR2_OFFSET
+0x100000));

55 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE2_BAR0_BASE
);

56 
ªs
 = 
	`pcõ_£nd
(2,0x100000,0x0,0x64);

57 i‡(
ªs
 <0)

58 
	`¥ötf
("send fail\n");

59 
	`¥ötf
("2 sr¯%x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR2_OFFSET
+0x100000));

60 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE2_BAR0_BASE
);

62 
	`¥ötf
("pcieÑecv\n");

63 
	`mem£t
((
uöt32_t
*)(
PPC_PCIE_DDR2_OFFSET
 +0x1000),0x0,0x100);

64 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE2_BAR0_BASE
);

65 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)(
PPC_PCIE_DDR2_OFFSET
+0x1000));

66 
ªs
 = 
	`pcõ_ªcv
(2,0x0,0x1000,0x64);

67 i‡(
ªs
 <0)

68 
	`¥ötf
("recv fail\n");

69 
	`¥ötf
("§¯%x\n",*(
uöt32_t
 *)
FPGA_PCIE2_BAR0_BASE
);

70 
	`¥ötf
("d° %x\n",*(
uöt32_t
 *)
FPGA_PCIE2_BAR0_BASE
);

71 
	`¥ötf
("pcie2 done\n");

73 
	}
}

	@demo/pmbus_demo.c

1 
	~"../drivî/bus/pmbus.h
"

3 
	$pmbus_demo
()

5 
	`¥ötf
("test send\n");

6 
öt8_t
 
s1
 = 
	`£t_pm_¶Ÿ
();

7 
uöt8_t
 
buf1
[1024] ,
buf2
[1024],
buf3
[1024];

8 
i
 = 1;

9 
x
 = 0;

10 
	`mem£t
(
buf1
,0,(buf1));

12 
s1
 = 
	`gë_pm_¶Ÿ
();

13 
	`¥ötf
("¶Ÿ %x %x\n",
	`gë_pm_¶Ÿ
(),
s1
);

14 i‡(
s1
 == 0){

16 
i
 = 100;

18 
	`¥ötf
("0 cy˛ê%d\n",
x
++);

19 
	`mem£t
(
buf2
,
x
%256,(buf2));

20 
	`mem£t
(
buf3
,0x0,(buf3));

23 
	`¥ötf
("send dataÅo slot 2\n");

24 
	`c›y_to_pmbuf
(2,
buf2
,
i
);

26 
	`¥ötf
("start send data from slot 0Åo 2\n");

27 
	`íabÀ_pm_£nd
(2,1);

29 
	`¥ötf
("check send\n");

30 
	`check_pm_£nd
(2)<0)

33 
	`¥ötf
("send ok\n");

35 
	`¥ötf
("tryÅoÑecv data \n");

38 
öt16_t
 
ªs
 ;

39 
	`¥ötf
("checkÑecv\n");

40 
	`check_pm_ªcv
(2,1)<0)

43 
	`¥ötf
("recv data from slot 2Åo 0 \n");

44 
ªs
 = 
	`c›y_‰om_pmbuf
(2,1,
buf3
);

45 if(
ªs
 >=0){

46 
	`¥ötf
("ªcv %d byã†,d©®¨ê:\n",
ªs
);

47 
j
 =0 ; j<
ªs
;j++){

48 
	`¥ötf
("%x ",
buf3
[
j
]);

49 i‡(
buf3
[
j
] !(
x
%256))

50 
	`¥ötf
("ªcv fÆà%x\n",
buf3
[
j
]);

52 
	`¥ötf
("\n");

56 i‡(
s1
 ==1 ){

58 
i
 = 100;

60 
	`¥ötf
("1 cy˛ê%d\n",
x
++);

61 
	`mem£t
(
buf2
,
x
%256,(buf2));

62 
	`mem£t
(
buf3
,0x0,(buf3));

65 
	`¥ötf
("send dataÅo slot 2\n");

66 
	`c›y_to_pmbuf
(2,
buf2
,
i
);

68 
	`¥ötf
("start send data from slot 0Åo 2\n");

69 
	`íabÀ_pm_£nd
(2,1);

71 
	`¥ötf
("check send\n");

72 
	`check_pm_£nd
(2)<0)

75 
	`¥ötf
("send ok\n");

77 
	`¥ötf
("tryÅoÑecv data \n");

80 
öt16_t
 
ªs
 ;

81 
	`¥ötf
("checkÑecv\n");

82 
	`check_pm_ªcv
(2,1)<0)

85 
	`¥ötf
("recv data from slot 2Åo 0 \n");

86 
ªs
 = 
	`c›y_‰om_pmbuf
(2,1,
buf3
);

87 if(
ªs
 >=0){

88 
	`¥ötf
("ªcv %d byã†,d©®¨ê:\n",
ªs
);

89 
j
 =0 ; j<
ªs
;j++){

90 
	`¥ötf
("%x ",
buf3
[
j
]);

91 i‡(
buf3
[
j
] !(
x
%256))

92 
	`¥ötf
("ªcv fÆà%x\n",
buf3
[
j
]);

94 
	`¥ötf
("\n");

98 i‡(
s1
 == 2) {

100 
i
 = 100;

102 
	`¥ötf
("2 cy˛ê%d\n",
x
++);

103 
	`mem£t
(
buf2
,
x
%256,(buf2));

104 
	`mem£t
(
buf3
,0x0,(buf3));

105 
öt16_t
 
ªs
 ;

107 
	`¥ötf
("tryÅoÑecv data \n");

108 
	`¥ötf
("checkÑecv\n");

110 
	`check_pm_ªcv
(1,1)<0)

112 
	`¥ötf
("recv data from slot 2Åo 0 \n");

113 
ªs
 = 
	`c›y_‰om_pmbuf
(1,1,
buf3
);

114 i‡(
ªs
 >=0){

115 
	`¥ötf
("ªcv %d byã†, d©®¨ê:\n",
ªs
);

116 
j
 =0 ; j<
ªs
;j++){

117 
	`¥ötf
("%x ",
buf3
[
j
]);

118 i‡(
buf3
[
j
] !(
x
%256))

119 
	`¥ötf
("ªcv fÆà%x\n",
buf3
[
j
]);

121 
	`¥ötf
("\n");

125 
	`¥ötf
("send dataÅo slot 0\n");

126 
	`c›y_to_pmbuf
(1,
buf2
,
i
);

127 
	`¥ötf
("start send\n");

128 
	`íabÀ_pm_£nd
(1,1);

129 
	`¥ötf
("check send\n");

130 
	`check_pm_£nd
(1)<0)

132 
	`¥ötf
("send ok\n");

137 
	}
}

	@demo/sem_demo.c

2 
	~<libc/ˇgboŸ.h
>

3 
	~"../ˇgos.h
"

4 
	g£ms
[2]= {0xa};

5 
	gpos
=0;

6 
	g£m0
;

8 
	$£m_idÀ
(*
¨g
)

10 
t1
,
t2
;

11 
t1
=
£ms
[0];

12 
t2
=
£ms
[1];

14 if(
t1
 !
£ms
[0] || 
t2
 != sems[1]) {

15 
	`¥ötf
("£m idÀ %d %d\n",
£ms
[0],sems[1]);

16 
t1
=
£ms
[0];

17 
t2
=
£ms
[1];

21 
	}
}

23 
	$£m_èsk0
(*
¨g
)

25 
îr
=0;

28 
	`os_£m_≥nd
(
£m0
,0,
OS_OPT_PEND_BLOCKING
,&
îr
);

29 if(
îr
 !
OS_ERR_NONE
) {

30 
	`¥ötf
("tsk0 sem get fail\n");

32 
pos
=(pos+1)%2;

33 
£ms
[
pos
]=0;

34 
	`os_dñay_èsk
(200,&
îr
);

36 
	`os_£m_po°
(
£m0
,
OS_OPT_POST_1
,&
îr
);

37 if(
îr
 !
OS_ERR_NONE
) {

38 
	`¥ötf
("tsk0 semÖost fail\n");

41 
	}
}

43 
	$£m_èsk1
(*
¨g
)

45 
îr
=0;

48 
	`os_£m_≥nd
(
£m0
,0,
OS_OPT_PEND_BLOCKING
,&
îr
);

49 if(
îr
 !
OS_ERR_NONE
) {

50 
	`¥ötf
("tsk1 sem get fail\n");

52 
pos
=(pos+1)%2;

53 
£ms
[
pos
]=1;

54 
	`os_dñay_èsk
(200,&
îr
);

56 
	`os_£m_po°
(
£m0
,
OS_OPT_POST_1
,&
îr
);

57 if(
îr
 !
OS_ERR_NONE
) {

58 
	`¥ötf
("tsk1 semÖost fail\n");

62 
	}
}

64 
	$£m_èsk2
(*
¨g
)

66 
îr
=0;

69 
	`os_£m_≥nd
(
£m0
,0,
OS_OPT_PEND_BLOCKING
,&
îr
);

70 if(
îr
 !
OS_ERR_NONE
) {

71 
	`¥ötf
("tsk2 sem get fail\n");

73 
pos
=(pos+1)%2;

74 
£ms
[
pos
]=2;

75 
	`os_dñay_èsk
(200,&
îr
);

77 
	`os_£m_po°
(
£m0
,
OS_OPT_POST_1
,&
îr
);

78 if(
îr
 !
OS_ERR_NONE
) {

79 
	`¥ötf
("tsk2 semÖost fail\n");

82 
	}
}

85 
	$£m_ã°_demo
()

87 
îr
=0;

90 
£m0
 = 
	`os_£m_¸óã
("£m0",2,&
îr
);

91 if–
îr
 !
OS_ERR_NONE
) {

92 
	`¥ötf
("sem create fail\n");

96 
	`os_¸óã_èsk
("p1",
£m_èsk0
,
NULL
,10,0,&
îr
);

97 
	`os_¸óã_èsk
("p2",
£m_èsk1
,
NULL
,11,0,&
îr
);

98 
	`os_¸óã_èsk
("p3",
£m_èsk2
,
NULL
,12,0,&
îr
);

99 
	`os_¸óã_èsk
("idÀ",
£m_idÀ
,
NULL
,13,0,&
îr
);

101 
	}
}

	@demo/sffs_demo.c

28 
	~<libc/ˇgboŸ.h
>

29 
	~"../ˇgos.h
"

32 
	~"demo.h
"

33 
	~<drv_c⁄fig.h
>

35 
sffs_idx
;

36 
sffs_idx2
;

37 
sffs_idx3
;

39 *
	gsffs_ã°_d©a
 =0x10000000;

40 *
	gsffs_ã°_d©a2
=0x13000000;

42 
	$make_ã°_d©a
(
Àn_w
,
£ed
)

44 if(
Àn_w
 >16*1024*1024)

45 
Àn_w
=2*1024*1024;

47 
i
 =0; i<
Àn_w
; i++) {

48 *(
sffs_ã°_d©a
+
i
Ë
£ed
+i;

50 
	}
}

55 
	$fs_mu…i_demo
()

57 
öt8_t
 *
‚ame1
="ã°",*
‚ame2
="ã°2",*
‚ame3
="deled";

60 
öt32_t
 
fd1
,
fd2
;

61 
öt32_t
 
˙t
;

62 
uöt8_t
 
buf
[4096],
buf1
[4096];

63 
öt32_t
 
ªt
 = 
FS_FAIL
;

64 
rd
=0,
rd2
,
ii
 = 0;

67 c⁄° *
 ame
[]= {

90 
kk
 = 0;kk<21;kk++){

91 
	`¥ötf
("%s\n",
 ame
[
kk
]);

93 
	`mem£t
(
buf
,0x5a,(buf));

94 
	`mem£t
(
buf1
,0,(buf1));

96 
	`¥ötf
("ã° i¿f†3 %d\n",
sffs_idx3
);

97 
sffs_idx
 = 
sffs_idx3
;

99 
	`fs_f‹m©
(0);

101 
	`fs_ls
();

104 
	`¥ötf
("ã° %d\n",
ii
);

106 
rd
 = 
	`ønd
()%20;

107 
	`¥ötf
("rd %d,%s\n",
rd
,
 ame
[rd]);

110 
fd1
 = 
	`fs_›í
(
 ame
[
rd
],
FS_OPEN_CREATE
,
FS_WRONLY
);

111 i‡(
fd1
 <0) {

112 
	`¥ötf
("1›í fûê¸óã %†Áû i¿f†%dÑë %d\n",
 ame
[
rd
],
	`FS_ID_POS
(
sffs_idx
),
fd1
);

116 
	`¥ötf
("rd1 %†%x \n",
 ame
[
rd
],rd);

118 
˙t
 = 131072;

119 
	`¥ötf
("rd1.0 %†%x \n",
 ame
[
rd
],rd);

120 
	`make_ã°_d©a
(
˙t
/4,9);

121 
	`¥ötf
("rd1.1 %†%x \n",
 ame
[
rd
],rd);

124 
i
 =0 ; i<
˙t
; i+=4096) {

128 
ªt
 = 
	`fs_wrôe
(
fd1
,
sffs_ã°_d©a
,4096);

129 
	`¥ötf
("rd1.2 %†%x %d\n",
 ame
[
rd
],rd,
i
);

133 if(
ªt
 < 4096) {

134 i‡(
	`sffs_gë_î∫o
(0Ë=
SFFS_NO_FREE_SE
 ) {

135 
	`¥ötf
("full\n");

136 
	`fs_ls
();

137 
˛s
;

140 i‡(
	`sffs_gë_î∫o
(0Ë=
SFFS_FILE_REWRITE_ERR
) {

141 
˛s
;

144 
	`¥ötf
("1wrôêfûê%†ÁûÑë %dÉº %d\n",
 ame
[
rd
],
ªt
,
	`sffs_gë_î∫o
(0));

148 
	`¥ötf
("rd1.2.1 %†%x %d\n",
 ame
[
rd
],rd,
i
);

151 
	`¥ötf
("rd2 %†%x \n",
 ame
[
rd
],rd);

153 
˛s
: 
ªt
 = 
	`fs_˛o£
(
fd1
);

154 if(
ªt
 <0) {

155 
	`¥ötf
("1˛o£ fûê%†ÁûÑë %dÉº %d \n",
 ame
[
rd
],
ªt
,
	`sffs_gë_î∫o
(0));

161 
	`¥ötf
("rd3 %†%x \n",
 ame
[
rd
],rd);

163 
fd1
 = 
	`fs_›í
(
 ame
[
rd
],
FS_OPEN_NORMAL
,
FS_RDONLY
);

164 i‡(
fd1
 <0) {

165 
	`¥ötf
("1›í fûên‹mÆ %†Áû i¿f†%dÑë %dÉº %d\n",
 ame
[
rd
],
	`FS_ID_POS
(
sffs_idx
),
fd1
,
	`sffs_gë_î∫o
(0));

166 
kk
 = 0;kk<21;kk++){

167 
	`¥ötf
("%s\n",
 ame
[
kk
]);

173 
ªt
 = 
	`fs_ªad
(
fd1
,
sffs_ã°_d©a2
,
˙t
);

174 if(
ªt
 < 0) {

175 
	`¥ötf
("1ªad faûÑë %d\n",
ªt
);

179 i‡(
ªt
 == 0 )

180 
	`¥ötf
("fileÑead 0\n");

182 i‡(!
	`memcmp
(
sffs_ã°_d©a
,
sffs_ã°_d©a2
,
˙t
Ë&& !memcmp(sffs_ã°_d©a,sffs_ã°_d©a2,
ªt
)) {

183 
	`¥ötf
("ªad o∏wrôêÁû %d\n",
ªt
);

184 
	`¥ötf
("read 1:\n");

185 
i
 =0; i<
ªt
; i++) {

186 
	`¥ötf
("%x ",
sffs_ã°_d©a2
[
i
]);

188 
	`¥ötf
("\n");

191 
	`¥ötf
("readt \n");

192 
i
 =0; i<100; i++) {

193 
	`¥ötf
("%x ",
sffs_ã°_d©a2
[
i
]);

195 
	`¥ötf
("\n");

196 
	`¥ötf
("\n");

200 
ªt
 = 
	`fs_˛o£
(
fd1
);

201 if(
ªt
 <0) {

202 
	`¥ötf
("1˛o£ fûê%†ÁûÑë %dÉº %d\n",
 ame
[
rd
],
ªt
,
	`sffs_gë_î∫o
(0));

206 
rd2
=
	`ønd
()%20;

208 
ªt
 = 
	`fs_ª«me
(
 ame
[
rd
], ame[
rd2
]);

209 if(
ªt
 < 0) {

210 i‡(
	`sffs_gë_î∫o
(0Ë!
SFFS_FILENAME_NOT_EXIST_ERR2
 &&

211 
	`sffs_gë_î∫o
(0Ë!
SFFS_FNAME_DUPLICATE_ERR
 ){

212 
	`¥ötf
("1ª«mêÁûÑë %dÉº %d\n",
ªt
,
	`sffs_gë_î∫o
(0));

217 
	`¥ötf
("ª«mê%†tÿ%s\n",
 ame
[
rd
], ame[
rd2
]);

221 
	`¥ötf
("1 %†2 %s\n",
 ame
[
rd
], ame[
rd2
]);

222 
	`fs_ls
();

223 
fd1
 = 
	`fs_›í
(
 ame
[
rd
],
FS_OPEN_NORMAL
,
FS_RDONLY
);

224 i‡(
fd1
 <0) {

225 
	`¥ötf
("1›í fûên‹mÆ %†Áû i¿f†%dÑë %dÉº %d\n",
 ame
[
rd
],
	`FS_ID_POS
(
sffs_idx
),
fd1
,
	`sffs_gë_î∫o
(0));

232 
rmf
 : 
rd2
=
	`ønd
()%20;

233 i‡(
ii
 % 4 == 0){

234 
ªt
 = 
	`fs_ªmove
(
 ame
[
rd2
]);

235 
	`¥ötf
("ªmovê%s\n",
 ame
[
rd2
]);

236 if(
ªt
 < 0) {

237 i‡(
	`sffs_gë_î∫o
(0Ë!
SFFS_FILENAME_NOT_EXIST_ERR3
){

238 
	`¥ötf
("1ªmovêÁûÑë %dÉº %d\n",
ªt
,
	`sffs_gë_î∫o
(0));

244 
	`¥ötf
("rm fûê%s\n",
 ame
[
rd2
]);

248 
xxx
: 
ii
++;

250 
	`fs_ls
();

253 
	`¥ötf
("sffs demo done\n");

254 
	}
}

258 
	$ufs_demo
()

260 
öt8_t
 *
‚ame1
="ã°",*
‚ame2
="ã°2",*
‚ame3
="deled";

261 
öt32_t
 
fd1
,
fd2
;

262 
öt32_t
 
˙t
;

263 
uöt8_t
 
buf
[4096],
buf1
[4096];

264 
öt32_t
 
ªt
 = 
FS_FAIL
;

266 
˙t
 = 2345;

267 
	`mem£t
(
buf
,0x5a,(buf));

268 
	`mem£t
(
buf1
,0,(buf1));

270 
	`¥ötf
("test in fs 1\n");

272 
fd1
 = 
	`fs_›í
(
‚ame1
,
FS_OPEN_CREATE
,
FS_WRONLY
|
	`FS_ID_POS
(
sffs_idx3
));

273 i‡(
fd1
 <0) {

274 
	`¥ötf
("1›í fûê¸óã|åu %†Áû i¿f†%dÑë %d\n",
‚ame1
,
	`FS_ID_POS
(
sffs_idx3
),
fd1
);

277 
ªt
 = 
	`fs_wrôe
(
fd1
,
buf
,
˙t
);

278 if(
ªt
 < 
˙t
) {

279 
	`¥ötf
("1wrôêfûê%†ÁûÑë %d\n",
‚ame1
,
ªt
);

283 
ªt
 = 
	`fs_˛o£
(
fd1
);

284 if(
ªt
 <0) {

285 
	`¥ötf
("1˛o£ fûê%†ÁûÑë %d\n",
‚ame1
,
ªt
);

288 
fd1
 = 
	`fs_›í
(
‚ame1
,
FS_OPEN_NORMAL
,
FS_RDONLY
|
	`FS_ID_POS
(
sffs_idx3
));

289 i‡(
fd1
 <0) {

290 
	`¥ötf
("1›í fûên‹mÆ %†Áû i¿f†%dÑë %d\n",
‚ame1
,
	`FS_ID_POS
(
sffs_idx3
),
fd1
);

293 
ªt
 = 
	`fs_ªad
(
fd1
,
buf1
,
˙t
);

294 if(
ªt
 < 0) {

295 
	`¥ötf
("1ªad faûÑë %d\n",
ªt
);

298 
	`¥ötf
("read:\n");

299 
i
 =0; i<
ªt
; i++) {

300 
	`¥ötf
("%x ",
buf1
[
i
]);

302 
	`¥ötf
("\n");

303 
ªt
 = 
	`fs_˛o£
(
fd1
);

304 if(
ªt
 <0) {

305 
	`¥ötf
("1˛o£ fûê%†ÁûÑë %d\n",
‚ame1
,
ªt
);

308 
ªt
 = 
	`fs_ª«me
(
‚ame1
,
‚ame3
);

309 if(
ªt
 < 0) {

310 
	`¥ötf
("1ª«mêÁûÑë %d\n",
ªt
);

313 
ªt
 = 
	`fs_ªmove
(
‚ame3
);

314 if(
ªt
 < 0) {

315 
	`¥ötf
("1ªmovêÁûÑë %d\n",
ªt
);

318 
	`¥ötf
("sffs ufs demo done\n");

319 
	}
}

	@demo/spi_demo.c

29 
	~<libc/ˇgboŸ.h
>

30 
	~"../ˇgos.h
"

31 
	~"demo.h
"

36 
demoSfDid
 ;

37 
demoDfd
 ;

39 
	$•i_ã°_demo
()

42 
ªt
;

43 
buf
[1024];

44 
	`mem£t
(
buf
,0,(buf));

47 
ªt
 = 
	`dfs_ªad
(
demoSfDid
,0x100000,
buf
,128);

48 
	`¥ötf
("ªad 0Ñë = %d \n",
ªt
);

49 
i
 =0; i<128; i++) {

50 
	`¥ötf
("0x%x ",
buf
[
i
]);

52 
	`¥ötf
("\n");

58 
ªt
 = 
	`dfs_îa£
(
demoSfDid
,0,1);

59 
	`¥ötf
("s‡îa£ %dÑë %d\n",0,
ªt
);

62 
	`mem£t
(
buf
,0,(buf));

63 
ªt
 = 
	`dfs_wrôe
(
demoSfDid
,0,
buf
,128);

64 
	`¥ötf
("s‡wrôê%d byã†%dÑë %d\n",0,128,
ªt
);

67 
ªt
 = 
	`dfs_ªad
(
demoSfDid
,0,
buf
,128);

68 
	`¥ötf
("ªad 1Ñë = %d \n",
ªt
);

69 
i
 =0; i<128; i++) {

70 
	`¥ötf
("0x%x ",
buf
[
i
]);

72 
	`¥ötf
("\n");

75 
	}
}

	@demo/task_demo.c

29 
	~<libc/ˇgboŸ.h
>

30 
	~<kî√l/sysOs.h
>

31 
	~"../ˇgos.h
"

32 
	gid1
,
	gid2
,
	gid3
;

34 
	tuöt32_t
;

35 
uöt32_t
 
	gs_uiRTStoUP1Sem
;

36 
uöt32_t
 
	gs_uiRTStoUP2Sem
;

37 
uöt32_t
 
	gs_uiUP1toRTSSem
;

38 
uöt32_t
 
	gs_uiUP2toRTSSem
;

40 
	$èsk_1
(*
¨g
)

42 
îr
;

44 
	`¥ötf
("èsk %d\n",*(*)
¨g
);

45 i‡–0 !
	`os_ªsume_èsk
(
id3
,&
îr
)) {

46 
	`¥ötf
("ªsumêèsk 3 faû %d\n",
îr
);

48 
	`os_dñay_èsk
(3,&
îr
);

50 
	}
}

52 
	$èsk_2
(*
¨g
)

54 
todñ
=1;

55 
îr
;

57 if(0 !
	`os_dñ_èsk
(
todñ
,&
îr
)) {

58 if(0 !
	`os_dñ_èsk
(0xffff,&
îr
)) {

59 
	`¥ötf
("deleteÅasks fail\n");

63 
	`os_dñay_èsk
(11,&
îr
);

65 
	}
}

67 
	$èsk_3
(*
¨g
)

69 
dly
=3;

70 
îr
;

72 
	`¥ötf
("èsk %d\n",*(*)
¨g
);

73 i‡–0 !
	`os_su•íd_èsk
(
id3
,&
îr
)) {

74 
	`¥ötf
("su•ídÅask 3 faû %d\n",
îr
);

76 
	`¥ötf
("èsk %d back\n",*(*)
¨g
);

78 
	}
}

85 
	gvÆ1
=0,
	gvÆ2
=0,
	gvÆ3
=0,
	gvÆ4
=0;

87 
OS_TCB
 *
OSTCBCurPå
;

89 
	g˙t
[2]={0};

90 
	$èsk_void
(*
¨g
)

92 
uöt32_t
 
uiPíd
,
uiEº
;

94 if(
˙t
[1] == 0){

95 
x

	`gëTblus
();

96 
	`¥ötf
("tv0 %d ,tq: %d\n",
x
,
OSTCBCurPå
->
TimeQu™èCå
);

97 
˙t
[1] = 1;

98 
˙t
[0]=0;

100 
uiPíd
 = 
	`os_£m_≥nd
(
s_uiRTStoUP1Sem
, 0, 
OS_OPT_PEND_BLOCKING
, &
uiEº
);

101 
	`¥ötf
("pendÑ2u1\n");

102 if(
uiPíd
 == 0) {

103 
	`os_£m_po°
(
s_uiUP1toRTSSem
, 
OS_OPT_POST_1
|
OS_OPT_POST_NO_SCHED
, &
uiEº
);

104 
	`¥ötf
("post u12r\n");

107 
	}
}

109 
	$èsk_void1
(*
¨g
)

111 
uöt32_t
 
uiPíd
,
uiEº
;

113 if(
˙t
[0] == 0){

114 
x

	`gëTblus
();

115 
	`¥ötf
("tv1 %d ,tq: %d\n",
x
,
OSTCBCurPå
->
TimeQu™èCå
);

116 
˙t
[0] = 1;

117 
˙t
[1]=0;

119 
uiPíd
 = 
	`os_£m_≥nd
(
s_uiUP1toRTSSem
, 0, 
OS_OPT_PEND_NON_BLOCKING
, &
uiEº
);

120 
	`¥ötf
("PEND u12r\n");

121 if(
uiPíd
 == 0){

122 
	`os_£m_po°
(
s_uiRTStoUP1Sem
, 
OS_OPT_POST_1
|
OS_OPT_POST_NO_SCHED
, &
uiEº
);

123 
	`¥ötf
("POSTÑ2u1\n");

126 
	}
}

127 
	$èsk_void2
(*
¨g
)

129 
x
 = 0;

130 
y
=
	`gëTblus
();

133 i‡(
	`gëTblus
()-
y
 >= 10000000){

134 
	`¥ötf
("%x %x\n",
˙t
[0],cnt[1]);

135 
y
=
	`gëTblus
();

138 
	}
}

140 
	$èsk_1q
(*
¨g
)

142 
îr
;

144 
vÆ1
++;

145 i‡(
vÆ1
 == 0x10000000) {

146 
	`¥ötf
("val1\n");

147 
	`os_ªsume_èsk
(
id2
,&
îr
);

148 if(
îr
 != 0)

149 
	`¥ötf
("ªsumê%d faû\n",
id2
);

150 
vÆ1
 =0;

153 
	}
}

155 
	$èsk_2q
(*
¨g
)

157 
îr
;

159 
vÆ2
++;

160 i‡(
vÆ2
 == 0x10000000) {

161 
	`¥ötf
("val2\n");

162 
	`os_su•íd_èsk
(
id2
,&
îr
);

163 if(
îr
 != 0)

164 
	`¥ötf
("su•íd %dÉº\n",
id2
);

165 
vÆ2
 =0;

168 
	}
}

170 
	$èsk_3q
(*
¨g
)

172 
îr
;

174 
vÆ3
++;

175 i‡(
vÆ3
 == 0x10000000) {

176 
	`¥ötf
("val3\n");

177 
	`os_dñ_èsk
(
id3
,&
îr
);

178 if(
îr
 != 0)

179 
	`¥ötf
("su•íd %dÉº\n",
id3
);

180 
vÆ3
 =0;

183 
	}
}

188 
	$ã°_èsk_demo
()

190 
	`¥ötf
("123\n");

191 
a
=1;

192 
îr
;

194 
id1
 = 
	`os_¸óã_èsk
("èsk1",
èsk_1
,&
a
,1,0,&
îr
);

195 if(
îr
 != 0)

196 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

197 
a
=2;

198 
	`os_¸óã_èsk
("èsk2",
èsk_2
,&
a
,2,0,&
îr
);

199 if(
îr
 != 0)

200 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

201 
a
=3;

202 
	`os_¸óã_èsk
("èsk3",
èsk_3
,&
a
,3,0,&
îr
);

203 if(
îr
 != 0)

204 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

208 
	`¥ötf
("123\n");

209 
id1
 = 
	`os_¸óã_èsk
("èsk1",
èsk_1q
,&
a
,3,2,&
îr
);

210 if(
îr
 != 0)

211 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

212 
a
=2;

213 
	`¥ötf
("123\n");

214 
id2
 = 
	`os_¸óã_èsk
("èsk2",
èsk_2q
,&
a
,3,5,&
îr
);

215 if(
îr
 != 0)

216 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

217 
a
=3;

218 
	`¥ötf
("123\n");

219 
id3
 = 
	`os_¸óã_èsk
("èsk3",
èsk_3q
,&
a
,3,4,&
îr
);

220 if(
îr
 != 0)

221 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

222 
	`¥ötf
("ffff\n");

226 
uöt32_t
 
uiEº
=0;

227 
s_uiRTStoUP1Sem
 = 
	`os_£m_¸óã
("RTStoUP1", 1, &
uiEº
);

228 
s_uiRTStoUP2Sem
 = 
	`os_£m_¸óã
("RTStoUP2", 1, &
uiEº
);

229 
s_uiUP1toRTSSem
 = 
	`os_£m_¸óã
("UP1toRTS", 0, &
uiEº
);

230 
s_uiUP2toRTSSem
 = 
	`os_£m_¸óã
("UP2toRTS", 0, &
uiEº
);

233 
	`¥ötf
("abc\n");

234 
a
=0;

235 
Ø
 = 0;

236 
id1
 = 
	`os_¸óã_èsk
("èsk1",
èsk_void
,&
Ø
,3,3000,&
îr
);

237 if(
îr
 != 0)

238 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

239 
a
=1;

240 
	`¥ötf
("abc\n");

241 
bb
=1;

242 
id2
 = 
	`os_¸óã_èsk
("èsk2",
èsk_void1
,&
bb
,3,5000,&
îr
);

243 if(
îr
 != 0)

244 
	`¥ötf
("¸óãÅask1 faû %d\n",
îr
);

246 
a
=2;

247 
	`¥ötf
("abc\n");

249 if(
îr
 != 0)

250 
	`¥ötf
("¸óãÅask3 faû %d\n",
îr
);

253 
	}
}

	@demo/task_sem_demo.c

2 
	~<libc/ˇgboŸ.h
>

3 
	~"../ˇgos.h
"

5 
	g£ms
[2]= {0xa};

6 
	gpos
=0;

7 
	gid1
,
	gid2
,
	gid3
;

9 
	$£m_idÀ
(*
¨g
)

11 
t1
,
t2
;

12 
t1
=
£ms
[0];

13 
t2
=
£ms
[1];

15 if(
t1
 !
£ms
[0] || 
t2
 != sems[1]) {

16 
	`¥ötf
("£m idÀ %d %d\n",
£ms
[0],sems[1]);

17 
t1
=
£ms
[0];

18 
t2
=
£ms
[1];

22 
	}
}

24 
	$£m_èsk0
(*
¨g
)

26 
îr
=0;

27 
	`os_èsk_£m_£t
(0,0,&
îr
);

28 if(
îr
 !
OS_ERR_NONE
)

29 
	`¥ötf
("set semphore fail\n");

31 
	`os_èsk_£m_≥nd
(1,
OS_OPT_PEND_BLOCKING
,
îr
);

32 if(
îr
 !
OS_ERR_NONE
) {

33 
	`¥ötf
("tsk0 sem get fail\n");

35 
pos
=(pos+1)%2;

36 
£ms
[
pos
]=0;

37 
	`os_dñay_èsk
(200,&
îr
);

38 
	`os_èsk_£m_po°
(
id2
,
OS_OPT_POST_NONE
,&
îr
);

39 if(
îr
 !
OS_ERR_NONE
) {

40 
	`¥ötf
("tsk0 semÖost fail\n");

42 
	`¥ötf
("post2\n");

44 
	}
}

46 
	$£m_èsk1
(*
¨g
)

48 
îr
=0;

49 
	`os_èsk_£m_£t
(1,0,&
îr
);

50 if(
îr
 !
OS_ERR_NONE
)

51 
	`¥ötf
("set semphore fail\n");

54 
	`os_èsk_£m_≥nd
(1,
OS_OPT_PEND_BLOCKING
,&
îr
);

55 if(
îr
 !
OS_ERR_NONE
) {

56 
	`¥ötf
("tsk1 sem get fail\n");

58 
pos
=(pos+1)%2;

59 
£ms
[
pos
]=1;

60 
	`os_dñay_èsk
(200,&
îr
);

61 
	`os_èsk_£m_po°
(
id1
,
OS_OPT_POST_NONE
,&
îr
);

62 if(
îr
 !
OS_ERR_NONE
) {

63 
	`¥ötf
("tsk1 semÖost fail\n");

65 
	`¥ötf
("post1\n");

68 
	}
}

70 
	$èsk_£m_ã°_demo
()

72 
îr
=0;

74 
id1
 = 
	`os_¸óã_èsk
("p1",
£m_èsk0
,
NULL
,0,0,&
îr
);

75 if(
îr
 !=0)

76 
	`¥ötf
("task 1Érror\n");

77 
id2
 = 
	`os_¸óã_èsk
("p2",
£m_èsk1
,
NULL
,1,0,&
îr
);

78 if(
îr
 !=0)

79 
	`¥ötf
("task 2Érror\n");

80 
id3
 = 
	`os_¸óã_èsk
("idÀ",
£m_idÀ
,
NULL
,3,0,&
îr
);

81 if(
îr
 !=0)

82 
	`¥ötf
("task 3Érror\n");

84 
	}
}

	@driver/bus/cmbus.c

29 
	~<libc/ˇgboŸ.h
>

30 
	~"cmbus.h
"

34 
	#STARTSEND3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
SEND_ENABLE3
))

	)

35 
	#SENDSTATUS3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
SEND_STATUS3
))

	)

36 
	#SENDLEN3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
SEND_LEN3
))

	)

38 
	#RECVSTATUS3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
RECV_STATUS3
))

	)

39 
	#RECVLEN3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
RECV_LEN3
))

	)

40 
	#RECVTIME3
(
ba£
Ë((
VUINT16
 *)(ba£ + 
RECV_TIME3
))

	)

41 
	#TATSTATION
(
ba£
Ë((
VUINT16
 *)(ba£ + 
TAR_STATION
))

	)

44 vﬁ©ûê
VUINT16
 *
	g°¨t_£nd3
 = (VUINT16 *)(
_CAG_CONFIG_FPGA_ADDR
 + 
SEND_ENABLE3
);

47 
	#cmbus_log
(
log
)

	)

54 
öt16_t
 
	$c›y_to_cmbuf
(
uöt8_t
 *
d©a
, 
öt32_t
 
Àn
)

56 
öt16_t
 
ªs
 = 0;

57 if(
Àn
 <0 ||Üí > 
CMBUS_SEND_BUF_SIZE
) {

58 
	`cmbus_log
(
CMBUS_PARA_ERR1
);

62 if(!(*
	`SENDSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
) & 1)) {

63 
	`pcõ_wrôe
((
uöt8_t
*)
CMBUS_SEND_BUF
,
d©a
,(
uöt32_t
)
Àn
);

64 *
	`SENDLEN3
(
_CAG_CONFIG_FPGA_ADDR
Ë
Àn
;

66 
ªs
 = -1;

67 
	`cmbus_log
(
CMBUS_SENDNREADY_ERR
);

69  
ªs
;

70 
	}
}

78 
öt16_t
 
	$íabÀ_cm_£nd
(
°©i⁄
)

80 
öt16_t
 
ªs
 = 0;

81 i‡(
°©i⁄
 <3 || station >15) {

82 
ªs
 = -3;

83 
	`cmbus_log
(
CMBUS_PARA_ERR2
);

84  
ªs
;

87 *
	`TATSTATION
(
_CAG_CONFIG_FPGA_ADDR
Ë
°©i⁄
;

88 *
	`STARTSEND3
(
_CAG_CONFIG_FPGA_ADDR
) = 0x1;

90  
ªs
;

91 
	}
}

99 
öt16_t
 
	$check_cm_£nd
()

101 
öt16_t
 
ªs
 = -1;

102 if–(*
	`SENDSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
) & 0x1) == 0) {

103 
ªs
 = 0;

105  
ªs
;

106 
	}
}

113 
öt16_t
 
	$check_cm_ªcv
()

115 
öt16_t
 
ªs
 = -1;

116 
VUINT16
 
°©
 = *
	`RECVSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
);

118 i‡((
°©
 & 0x3) == 0) {

120 
ªs
 = -1;

121 } i‡((
°©
 & 0x1) == 1 && (stat &0x4) == 0) {

123 
ªs
 = 1;

124 } i‡((
°©
 & 0x2) == 0x2 && (stat & 0x4) == 0) {

126 
ªs
 = 2;

128 
	`cmbus_log
(
CMBUS_RECVFAIL_ERR
);

129 
ªs
 =-2;

131 *
	`RECVSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

134  
ªs
;

135 
	}
}

143 
öt16_t
 
	$c›y_‰om_cmbuf
(
uöt8_t
 *
buf
)

145 
öt16_t
 
Àn
 = -1;

146 if(
buf
 =
NULL
) {

147 
	`cmbus_log
(
CMBUS_PARA_ERR3
);

151 
Àn
 = *
	`RECVLEN3
(
_CAG_CONFIG_FPGA_ADDR
);

152 
	`pcõ_ªad
(
buf
,(
uöt8_t
*)
CMBUS_RECV_BUF
,(
uöt32_t
)
Àn
);

154 *
	`RECVSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

156  
Àn
;

157 
	}
}

159 
	$˛ór_¸ecv_°©us
()

162 *
	`RECVSTATUS3
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

163 
	}
}

170 
öt16_t
 
	$gë_cmªcv_time
()

172  *
	`RECVTIME3
(
_CAG_CONFIG_FPGA_ADDR
);

173 
	}
}

	@driver/bus/cmbus.h

28 #¥agm®
⁄˚


31 
	~<libc/ˇgboŸ.h
>

32 
	~<c⁄fig.h
>

33 
	~"../devi˚/Âga/Âga.h
"

34 
	~"../devi˚/pcõ/pcõ.h
"

35 
	~<logh.h
>

38 
	#NULL
 0

	)

40 
	#CMBUS_SEND_BUF
 0xc000

	)

41 
	#CMBUS_SEND_BUF_SIZE
 0x2000

	)

42 
	#CMBUS_RECV_BUF
 0xe000

	)

43 
	#CMBUS_RECV_BUF_SIZE
 0x2000

	)

45 
	#PARA_ERR
 -3

	)

46 
	#FUNC_ERR
 -1

	)

47 
	#FUNC_OK
 -1

	)

48 
	#DATA_ERR
 -2

	)

51 
öt16_t
 
c›y_to_cmbuf
(
uöt8_t
 *
d©a
, 
öt32_t
 
Àn
);

52 
öt16_t
 
íabÀ_cm_£nd
(
°©i⁄
);

53 
öt16_t
 
check_cm_£nd
();

55 
öt16_t
 
check_cm_ªcv
();

56 
öt16_t
 
c›y_‰om_cmbuf
(
uöt8_t
 *
buf
);

58 
öt16_t
 
gë_cmªcv_time
();

	@driver/bus/ipbus.c

28 
	~"ùbus.h
"

31 
	#ùbus_log
(
log
)

	)

41 
INT16
 
	$ùbus_wrôe
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
)

43 i‡(
d©a
 =
NULL
) {

44 
	`ùbus_log
(
IPBUS_PARA_ERR1
);

48 
ªs
 = 0;

49 
UINT32
 
adrs
 = 0;

50 
UINT32
 
size
 = 0;

51 
›t
) {

52 
WRITE_IPBUS_OUTPUT
:

53 
adrs
 = 
IPBUS_OUTPUT
;

54 
size
 = 
IPBUS_OUTPUT_SIZE
;

56 
WRITE_IPBUS_ARG1
:

57 
adrs
 = 
IPBUS_ARG1
;

58 
size
 = 
IPBUS_ARG1_SIZE
;

60 
WRITE_IPBUS_ARG2
:

61 
adrs
 = 
IPBUS_ARG2
;

62 
size
 = 
IPBUS_ARG2_SIZE
;

64 
WRITE_SENDBOX
:

65 
adrs
 = 
IPBUS_SENDBOX
;

66 
size
 = 
IPBUS_SENDBOX_SIZE
;

69 
ªs
 = -2;

70 
	`ùbus_log
(
IPBUS_PARA_ERR2
);

71  
ªs
;

74 if(
Àn
 > (
size
 - 
off£t
) || offset > size) {

75 
ªs
 = -1;

76 
	`ùbus_log
(
IPBUS_PARA_ERR3
);

77  
ªs
;

80 
	`pcõ_wrôe
((
UINT8
 *)(
adrs
 + 
off£t
), 
d©a
, (
UINT32
)
Àn
);

81  
Àn
;

82 
	}
}

92 
INT16
 
	$ùbus_ªad
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
)

94 i‡(
d©a
 =
NULL
) {

95 
	`ùbus_log
(
IPBUS_PARA_ERR4
);

99 
ªs
 = 0;

100 
UINT32
 
adrs
 = 0;

101 
UINT32
 
size
 = 0;

102 
›t
) {

103 
READ_IPBUS_INPUT
:

104 
adrs
 = 
IPBUS_INPUT
;

105 
size
 = 
IPBUS_INPUT_SIZE
;

107 
READ_RECVBOX
:

108 
adrs
 = 
IPBUS_RECVBOX
;

109 
size
 = 
IPBUS_RECVBOX_SIZE
;

112 
ªs
 = -2;

113 
	`ùbus_log
(
IPBUS_PARA_ERR5
);

114  
ªs
;

117 if(
Àn
 > (
size
 - 
off£t
) || offset > size) {

118 
ªs
 = -1;

119 
	`ùbus_log
(
IPBUS_PARA_ERR6
);

120  
ªs
;

123 
	`pcõ_ªad
(
d©a
, (
UINT8
*)(
adrs
 + 
off£t
), (
UINT32
)
Àn
);

124  
Àn
;

125 
	}
}

	@driver/bus/ipbus.h

28 #¥agm®
⁄˚


30 
	~"../devi˚/pcõ/pcõ.h
"

31 
	~<libc/ˇgboŸ.h
>

32 
	~<c⁄fig.h
>

33 
	~<logh.h
>

35 
	#NULL
 0

	)

37 
	#IPBUS_INPUT
 0x40000

	)

38 
	#IPBUS_INPUT_SIZE
 0x8000

	)

39 
	#IPBUS_OUTPUT
 0x48000

	)

40 
	#IPBUS_OUTPUT_SIZE
 0x10000

	)

41 
	#IPBUS_ARG1
 0x50000

	)

42 
	#IPBUS_ARG1_SIZE
 0x10000

	)

43 
	#IPBUS_ARG2
 0x60000

	)

44 
	#IPBUS_ARG2_SIZE
 0x10000

	)

45 
	#IPBUS_SENDBOX
 0x70000

	)

46 
	#IPBUS_SENDBOX_SIZE
 0x200

	)

47 
	#IPBUS_RECVBOX
 0x70200

	)

48 
	#IPBUS_RECVBOX_SIZE
 0x200

	)

50 
	eIPBUS_TYPE
 {

51 
	mREAD_IPBUS_INPUT
,

52 
	mWRITE_IPBUS_OUTPUT
,

53 
	mWRITE_IPBUS_ARG1
,

54 
	mWRITE_IPBUS_ARG2
,

55 
	mWRITE_SENDBOX
,

56 
	mREAD_RECVBOX
,

59 
INT16
 
ùbus_ªad
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
);

60 
INT16
 
ùbus_wrôe
(
UINT8
 
›t
, UINT8 *
d©a
, 
UINT32
 
off£t
, UINT32 
Àn
);

	@driver/bus/pmbus.c

29 
	~"pmbus.h
"

32 
	#STARTSEND1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x0))

	)

33 
	#SENDSTATUS1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x2))

	)

34 
	#SENDLEN1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x4))

	)

35 
	#DATASTATUS1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x6))

	)

36 
	#DATALEN1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x8))

	)

37 
	#DATATIME1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0xa))

	)

38 
	#STATESTATUS1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0xc))

	)

39 
	#STATELEN1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0xe))

	)

40 
	#STATETIME1
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x10))

	)

43 
	#STARTSEND2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x20))

	)

44 
	#SENDSTATUS2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x22))

	)

45 
	#SENDLEN2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x24))

	)

46 
	#DATASTATUS2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x26))

	)

47 
	#DATALEN2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x28))

	)

48 
	#DATATIME2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x2a))

	)

49 
	#STATESTATUS2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x2c))

	)

50 
	#STATELEN2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x2e))

	)

51 
	#STATETIME2
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x30))

	)

54 
	#SLOT
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x60))

	)

55 
	#STATION
(
ba£
Ë((
VUINT16
 *)(ba£ + 0x6e))

	)

57 
	#pmbus_log
(
log
)

	)

65 
öt8_t
 
	$£t_pm_¶Ÿ
()

67 
uöt16_t
 
s1
;

68 
öt8_t
 
s2
, 
s3
;

69 
öt8_t
 
ªt
 = 0;

71 
s1
 = *
	`SLOT
(
_CAG_CONFIG_FPGA_ADDR
) ;

72 i‡–(
s1
 & 0x8000) && (s1 & 0x80)) {

73 
s2
 = 
s1
 & 0xff;

74 
s3
 = (
s1
 & 0xff00)>>8;

75 i‡(
s2
 =
s3
) {

76 
s2
 &= 0x3;

77 *
	`STATION
(
_CAG_CONFIG_FPGA_ADDR
Ë
s2
;

78 
ªt
 = 0;

80 
ªt
 = -2;

81 
	`pmbus_log
(
PMBUS_NREADY_ERR1
);

84 
ªt
 = -1;

85 
	`pmbus_log
(
PMBUS_NREADY_ERR2
);

88  
ªt
;

89 
	}
}

96 
öt8_t
 
	$gë_pm_¶Ÿ
()

98 
uöt16_t
 
s1
;

99 
uöt8_t
 
s2
,
s3
;

100 
öt8_t
 
ªs
 = 0;

102 
s1
 = *
	`SLOT
(
_CAG_CONFIG_FPGA_ADDR
) ;

103 i‡–(
s1
 & 0x8000) && (s1 & 0x80)) {

104 
s2
 = 
s1
 & 0xff;

105 
s3
 = (
s1
 & 0xff00)>>8;

106 i‡(
s2
 =
s3
) {

107 
s2
 &= 0x3;

108 
ªs
 = 
s2
;

110 
ªs
 = -2;

111 
	`pmbus_log
(
PMBUS_NREADY_ERR3
);

114 
ªs
 = -1;

115 
	`pmbus_log
(
PMBUS_NREADY_ERR4
);

118  
ªs
;

119 
	}
}

129 
öt16_t
 
	$c›y_to_pmbuf
(
öt8_t
 
bus_no
, 
uöt8_t
 *
d©a
, 
öt32_t
 
Àn
)

131 
öt16_t
 
ªs
 = 0;

132 
öt8_t
 
ãmp
;

133 if(
Àn
 <0 ||Üí > 
PMBUS_BUF_SPACE
 || 
d©a
 =
NULL
) {

134 
	`pmbus_log
(
PMBUS_PARA_ERR1
);

138 if(
bus_no
 =1 && !(*
	`SENDSTATUS1
(
_CAG_CONFIG_FPGA_ADDR
) & 1)) {

139 
	`pcõ_wrôe
((
uöt8_t
 *)
PMBUS1_SEND_BUF
,
d©a
,(
uöt32_t
)
Àn
);

140 *
	`SENDLEN1
(
_CAG_CONFIG_FPGA_ADDR
Ë
Àn
;

141 
	`pcõ_ªad
((
uöt8_t
 *)&
ãmp
,(uöt8_à*)
PMBUS1_SEND_BUF
,1);

142 } if(
bus_no
 =2 && !(*
	`SENDSTATUS2
(
_CAG_CONFIG_FPGA_ADDR
) & 1)) {

143 
	`pcõ_wrôe
((
uöt8_t
 *)
PMBUS2_SEND_BUF
,
d©a
,(
uöt32_t
)
Àn
);

144 *
	`SENDLEN2
(
_CAG_CONFIG_FPGA_ADDR
Ë
Àn
;

145 
	`pcõ_ªad
((
uöt8_t
 *)&
ãmp
,(uöt8_à*)
PMBUS2_SEND_BUF
,1);

147 
ªs
 = -1;

148 
	`pmbus_log
(
PMBUS_PARA_ERR2
);

150  
ªs
;

151 
	}
}

161 
öt16_t
 
	$c›y_‰om_pmbuf
(
öt8_t
 
bus_no
, i¡8_à
buf_no
, 
uöt8_t
 *
buf
)

163 
öt16_t
 
Àn
 = -1;

165 if(
buf
 =
NULL
) {

166 
	`pmbus_log
(
PMBUS_CNULLP_ERR
);

170 i‡(
bus_no
 =1 && 
buf_no
 == 1) {

171 
Àn
 = *
	`DATALEN1
(
_CAG_CONFIG_FPGA_ADDR
);

172 
	`pcõ_ªad
(
buf
,(
uöt8_t
 *)(
buf_no
*
PMBUS_BUF_SPACE
Ë,(
uöt32_t
)
Àn
);

174 *
	`DATASTATUS1
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

175 } i‡(
bus_no
 =1 && 
buf_no
 == 2) {

176 
Àn
 = *
	`STATELEN1
(
_CAG_CONFIG_FPGA_ADDR
);

177 
	`pcõ_ªad
(
buf
,(
uöt8_t
*)(
buf_no
*
PMBUS_BUF_SPACE
Ë,(
uöt32_t
)
Àn
);

179 *
	`STATESTATUS1
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

180 } i‡(
bus_no
 =2 && 
buf_no
 == 1) {

181 
Àn
 = *
	`DATALEN2
(
_CAG_CONFIG_FPGA_ADDR
);

182 
	`pcõ_ªad
(
buf
,(
uöt8_t
*)(
buf_no
*
PMBUS_BUF_SPACE
 + 
PMBUS1_SPACE
),(
uöt32_t
)
Àn
);

184 *
	`DATASTATUS2
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

185 } i‡(
bus_no
 =2 && 
buf_no
 == 2) {

186 
Àn
 = *
	`STATELEN2
(
_CAG_CONFIG_FPGA_ADDR
);

187 
	`pcõ_ªad
(
buf
,(
uöt8_t
*)(
buf_no
*
PMBUS_BUF_SPACE
 + 
PMBUS1_SPACE
),(
uöt32_t
)
Àn
);

189 *
	`STATESTATUS2
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

191 
Àn
 = -1;

192 
	`pmbus_log
(
PMBUS_PARA_ERR3
);

195  
Àn
;

196 
	}
}

198 
	$˛ór_¥ecv_°©us
(
öt8_t
 
bus_no
)

200 i‡(
bus_no
 == 1 ) {

202 *
	`DATASTATUS1
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

203 } i‡(
bus_no
 == 2 ) {

205 *
	`DATASTATUS2
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

207 
	`pmbus_log
(
PMBUS_PARA_ERR4
);

209 
	}
}

219 
öt16_t
 
	$gë_pmªcv_time
(
öt8_t
 
bus_no
, i¡8_à
buf_no
)

221 
öt16_t
 
ªs
 = -1;

223 i‡(
bus_no
 =1 && 
buf_no
 == 1) {

224 
ªs
 = *
	`DATATIME1
(
_CAG_CONFIG_FPGA_ADDR
);

225 } i‡(
bus_no
 =1 && 
buf_no
 == 2) {

226 
ªs
 = *
	`STATETIME1
(
_CAG_CONFIG_FPGA_ADDR
);

227 } i‡(
bus_no
 =2 && 
buf_no
 == 1) {

228 
ªs
 = *
	`DATATIME2
(
_CAG_CONFIG_FPGA_ADDR
);

229 } i‡(
bus_no
 =2 && 
buf_no
 == 2) {

230 
ªs
 = *
	`STATETIME2
(
_CAG_CONFIG_FPGA_ADDR
);

232 
ªs
 = -1;

233 
	`pmbus_log
(
PMBUS_PARA_ERR5
);

236  
ªs
;

237 
	}
}

246 
öt16_t
 
	$íabÀ_pm_£nd
(
öt8_t
 
bus_no
,öt8_à
buf_no
)

248 
öt16_t
 
°
 = 0;

249 
öt16_t
 
ªs
 = 0;

250 i‡(
bus_no
 =1 && 
buf_no
 == 1) {

251 
°
 |= 0x1;

252 *
	`STARTSEND1
(
_CAG_CONFIG_FPGA_ADDR
Ë
°
;

253 } i‡(
bus_no
 =1 && 
buf_no
 == 2) {

254 
°
 |= 0x2;

255 *
	`STARTSEND1
(
_CAG_CONFIG_FPGA_ADDR
Ë
°
;

256 } i‡(
bus_no
 =2 && 
buf_no
 == 1) {

257 
°
 |= 0x1;

258 *
	`STARTSEND2
(
_CAG_CONFIG_FPGA_ADDR
Ë
°
;

259 } i‡(
bus_no
 =2 && 
buf_no
 == 2) {

260 
°
 |= 0x2;

261 *
	`STARTSEND2
(
_CAG_CONFIG_FPGA_ADDR
Ë
°
;

263 
ªs
 = -1;

264 
	`pmbus_log
(
PMBUS_PARA_ERR6
);

267  
ªs
;

268 
	}
}

277 
öt16_t
 
	$check_pm_ªcv
(
öt8_t
 
bus_no
,öt8_à
buf_no
)

279 
öt16_t
 
ªs
 = -1;

280 
öt16_t
 
ªg
 = 0;

282 i‡(
bus_no
 =1 && 
buf_no
 == 1) {

283 
ªg
 = *
	`DATASTATUS1
(
_CAG_CONFIG_FPGA_ADDR
);

284 if–
ªg
 & 0x1) {

285 i‡–
ªg
 & 0x2 ){

286 
ªs
 = -3;

289 
ªs
 = 0;

292 
ªs
 = -2;

293 
	`pmbus_log
(
PMBUS_DATARECVFAIL_ERR1
);

295 } i‡(
bus_no
 =1 && 
buf_no
 == 2) {

296 
ªg
 = *
	`STATESTATUS1
(
_CAG_CONFIG_FPGA_ADDR
);

297 if–
ªg
 & 0x1) {

298 i‡–
ªg
 & 0x2 ){

299 
ªs
 = -3;

302 
ªs
 = 0;

305 
ªs
 = -2;

306 
	`pmbus_log
(
PMBUS_STATRECVFAIL_ERR1
);

308 } i‡(
bus_no
 =2 && 
buf_no
 == 1) {

309 
ªg
 = *
	`DATASTATUS2
(
_CAG_CONFIG_FPGA_ADDR
);

310 if–
ªg
 & 0x1) {

311 i‡–
ªg
 & 0x2 ){

312 
ªs
 = -3;

315 
ªs
 = 0;

318 
ªs
 = -2;

319 
	`pmbus_log
(
PMBUS_DATARECVFAIL_ERR2
);

321 } i‡(
bus_no
 =2 && 
buf_no
 == 2) {

322 
ªg
 = *
	`STATESTATUS2
(
_CAG_CONFIG_FPGA_ADDR
);

323 if–
ªg
 & 0x1) {

324 i‡–
ªg
 & 0x2 ){

325 
ªs
 = -3;

328 
ªs
 = 0;

331 
ªs
 = -2;

332 
	`pmbus_log
(
PMBUS_STATRECVFAIL_ERR2
);

335 
ªs
 = -1;

336 
	`pmbus_log
(
PMBUS_PARA_ERR7
);

339  
ªs
;

340 
	}
}

348 
öt16_t
 
	$check_pm_£nd
(
öt8_t
 
bus_no
)

350 
öt16_t
 
ªs
 = 0;

351 
öt16_t
 
ªg
 = 0;

352 if(
bus_no
 == 1) {

353 
ªg
 = *
	`SENDSTATUS1
(
_CAG_CONFIG_FPGA_ADDR
);

354 i‡–
ªg
 & 0x1) {

355 
	`pmbus_log
(
PMBUS_SENDFAIL_ERR1
);

358 *
	`SENDSTATUS1
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

359 i‡(
ªg
 & 0x6) {

362 } if(
bus_no
 == 2) {

363 
ªg
 = *
	`SENDSTATUS2
(
_CAG_CONFIG_FPGA_ADDR
);

364 i‡–
ªg
 & 0x1) {

365 
	`pmbus_log
(
PMBUS_SENDFAIL_ERR2
);

368 *
	`SENDSTATUS2
(
_CAG_CONFIG_FPGA_ADDR
) = 0xffff;

369 i‡(
ªg
 & 0x6) {

373 
ªs
 = -3;

374 
	`pmbus_log
(
PMBUS_PARA_ERR8
);

376  
ªs
;

377 
	}
}

	@driver/bus/pmbus.h

28 #¥agm®
⁄˚


30 
	~<libc/ˇgboŸ.h
>

31 
	~<c⁄fig.h
>

32 
	~"../devi˚/pcõ/pcõ.h
"

33 
	~<logh.h
>

36 
	#NULL
 0

	)

38 
	#PMBUS1_SEND_BUF
 0

	)

39 
	#PMBUS1_SEND_BUF_SIZE
 0x2000

	)

40 
	#PMBUS1_DATA_BUF
 0x2000

	)

41 
	#PMBUS1_DATA_BUF_SIZE
 0x800

	)

42 
	#PMBUS1_STATE_BUF
 0x4000

	)

43 
	#PMBUS1_STATE_BUF_SIZE
 0x2000

	)

44 
	#PMBUS1_SPACE
 0x6000

	)

46 
	#PMBUS2_SEND_BUF
 0x6000

	)

47 
	#PMBUS2_SEND_BUF_SIZE
 0x2000

	)

48 
	#PMBUS2_DATA_BUF
 0x8000

	)

49 
	#PMBUS2_DATA_BUF_SIZE
 0x800

	)

50 
	#PMBUS2_STATE_BUF
 0xa000

	)

51 
	#PMBUS2_STATE_BUF_SIZE
 0x2000

	)

52 
	#PMBUS2_SPACE
 0x6000

	)

54 
	#PMBUS_BUF_SPACE
 0x2000

	)

56 
	#PARA_ERR
 -3

	)

57 
	#FUNC_ERR
 -1

	)

58 
	#FUNC_OK
 0

	)

59 
	#DATA_ERR
 -2

	)

61 
öt8_t
 
£t_pm_¶Ÿ
();

62 
öt8_t
 
gë_pm_¶Ÿ
();

63 
öt16_t
 
c›y_to_pmbuf
(
öt8_t
 
bus_no
, 
uöt8_t
 *
d©a
, 
öt32_t
 
Àn
);

64 
öt16_t
 
c›y_‰om_pmbuf
(
öt8_t
 
bus_no
, i¡8_à
buf_no
, 
uöt8_t
 *
buf
);

65 
öt16_t
 
gë_pmªcv_time
(
öt8_t
 
bus_no
, i¡8_à
no
);

66 
öt16_t
 
íabÀ_pm_£nd
(
öt8_t
 
bus_no
,öt8_à
buf_no
);

67 
öt16_t
 
check_pm_£nd
(
öt8_t
 
bus_no
);

68 
öt16_t
 
check_pm_ªcv
(
öt8_t
 
bus_no
,öt8_à
buf_no
);

	@driver/device/dfs/dfs.c

29 
	~"dfs.h
"

31 
	#dfs_log
(
log
)

	)

33 
	#DFS_CKDFD
 i‡(
dfd
 <0 || dfd >=
DFS_NUM
 || 
dfs_èbÀ
[dfd]==
NULL
 ) \

34  
DFS_DFD_FAULT
;

	)

36 
INT32
 
	gi2c_dfd
;

37 
INT32
 
	g•i_dfd
;

38 
INT32
 
	gn‹_dfd
;

40 
dfs_›s
 *
	gdfs_èbÀ
[
DFS_NUM
];

42 
	$dfs_öô
()

44 
INT32
 
i
=0; i<
DFS_NUM
; i++) {

45 
dfs_èbÀ
[
i
]=
NULL
;

47 
	}
}

49 
INT32
 
	$dfs_ªgi°î
(
dfs_›s
 *
d›s
)

51 if(
d›s
 !
NULL
) {

52 
INT32
 
i
=0; i<
DFS_NUM
; i++) {

53 i‡(
dfs_èbÀ
[
i
] =
NULL
) {

54 
dfs_èbÀ
[
i
] = 
d›s
;

55  
i
;

59 
	`dfs_log
(
DFS_FULL_ERR
);

60  
DFS_PARA_FAULT
;

61 
	}
}

63 
	$dfs_uƒegi°î
(
INT32
 
dfd
)

65 
INT32
 
i
=0; i<
DFS_NUM
; i++) {

66 i‡(
dfs_èbÀ
[
i
] !
NULL
) {

67 
dfs_èbÀ
[
i
] =
NULL
;

70 
	}
}

72 
dfs_›s
 *
	$gë_dfs
(
uöt32_t
 
id
)

74 if(
id
 < 
DFS_NUM
) {

75  
dfs_èbÀ
[
id
];

77 
	`dfs_log
(
DFS_GETFAIL_ERR
);

80 
	}
}

92 
INT32
 
	$dfs_wrôe
(
INT32
 
dfd
, 
UINT32
 
d°
,
UINT8
 *
§c
,UINT32 
˙t
)

94 
DFS_CKDFD
;

95 i‡(
§c
 =
NULL
 ||
d°
 >
dfs_èbÀ
[
dfd
]->
size
 || dfs_èbÀ[dfd]->
wrôe
 =NULL || (d°+
˙t
)>dfs_table[dfd]->size) {

96 
	`LOG_DEBUG
("df†wrôêîr‹ did %d\n",
dfd
);

97 
	`dfs_log
(
DFS_PARA_ERR1
);

98  
DFS_PARA_FAULT
;

100  
dfs_èbÀ
[
dfd
]->
	`wrôe
((
UINT32
)(dfs_èbÀ[dfd]->
ba£_addr
Ë+ (UINT32)(dfs_èbÀ[dfd]->
°¨t
)+
d°
 ,
§c
,
˙t
);

102 
	}
}

110 
INT32
 
	$dfs_ªad
(
INT32
 
dfd
, 
UINT32
 
§c
, 
UINT8
 *
buf
,UINT32 
˙t
)

112 
DFS_CKDFD
;

114 i‡(
buf
 =
NULL
 ||
§c
 >
dfs_èbÀ
[
dfd
]->
size
 || dfs_èbÀ[dfd]->
ªad
 =NULL || (§c+
˙t
) > dfs_table[dfd]->size) {

115 
	`LOG_DEBUG
("df†ªadÉº‹ did %d\n",
dfd
);

116 
	`LOG_DEBUG
("sizê%dÑód %d c¡ %d\n",
dfs_èbÀ
[
dfd
]->
size
,dfs_èbÀ[dfd]->
ªad
,
˙t
);

117 
	`dfs_log
(
DFS_PARA_ERR2
);

118  
DFS_PARA_FAULT
;

120  
dfs_èbÀ
[
dfd
]->
	`ªad
(dfs_èbÀ[dfd]->
ba£_addr
 + dfs_èbÀ[dfd]->
°¨t
 + 
§c
,
buf
,
˙t
);

121 
	}
}

132 
INT32
 
	$dfs_îa£
(
INT32
 
dfd
,
UINT32
 
no
,UINT32 
num
)

134 
DFS_CKDFD
;

135 i‡(
no
<0 ||Ço*
dfs_èbÀ
[
dfd
]->
îa£Unô
 >dfs_èbÀ[dfd]->
size
 || (no+
num
)*dfs_èbÀ[dfd]->îa£Unô >dfs_èbÀ[dfd]->sizê|| dfs_èbÀ[dfd]->
îa£
 =
NULL
) {

136 
	`dfs_log
(
DFS_PARA_ERR3
);

137  
DFS_PARA_FAULT
;

139 
	`LOG_DEBUG
("df†îa£ %d %x\n",
dfd
,
no
 + 
dfs_èbÀ
[dfd]->
°¨t
/dfs_èbÀ[dfd]->
îa£Unô
);

140  
dfs_èbÀ
[
dfd
]->
	`îa£
(
no
 + dfs_èbÀ[dfd]->
°¨t
/dfs_èbÀ[dfd]->
îa£Unô
,
num
);

141 
	}
}

154 
INT32
 
	$dfs_ˇp
(
INT32
 
dfd
,INT32 
›s
)

156 
DFS_CKDFD
;

157 
›s
) {

158 
DFS_WRITE
:

159  !(
dfs_èbÀ
[
dfd
]->
wrôe
 =
NULL
);

160 
DFS_READ
:

161  !(
dfs_èbÀ
[
dfd
]->
ªad
 =
NULL
);

162 
DFS_ERASE
:

163  !(
dfs_èbÀ
[
dfd
]->
îa£
 =
NULL
);

164 
DFS_LENGTH
:

165  !
dfs_èbÀ
[
dfd
]->
size
;

166 
DFS_START
:

167  !
dfs_èbÀ
[
dfd
]->
°¨t
;

168 
DFS_END
:

169  !
dfs_èbÀ
[
dfd
]->
íd
;

171 
	`dfs_log
(
DFS_PARA_ERR4
);

174 
	}
}

	@driver/device/dfs/dfs.h

29 #i‚de‡
__DFS_INC__


30 
	#__DFS_INC__


	)

33 
	~<c⁄fig.h
>

34 
	~<libc/°ddef.h
>

35 
	~<drv_c⁄fig.h
>

36 
	~<libc/°dio.h
>

37 
	~<libc/ˇgboŸ.h
>

38 
	~<logh.h
>

40 #ifde‡ 
CONFIG_FS


41 
	~"../../fs/fs_≠i.h
"

44 
	sdfs_›s
 {

45 
INT32
 (*
wrôe
)(
UINT32
 
	md°
,
UINT8
 *
	m§c
,UINT32 
	m˙t
 );

46 
INT32
 (*
ªad
)(
UINT32
 
	m§c
, 
UINT8
 *
	mbuf
, UINT32 
	m˙t
);

47 
INT32
 (*
îa£
)(INT32 
	mno
,INT32 
	mnum
);

48 
INT32
 (*
l£ek
)(INT32 
	moff£t
, INT32 
	mwhí˚
);

49 
INT32
 (*
io˘l
)(INT32 
	mcmd
, *
	m¨gs
);

50 
INT32
 
	mba£_addr
;

51 
INT32
 
	m°¨t
;

52 
INT32
 
	míd
;

53 
INT32
 
	msize
;

54 
INT32
 
	mîa£Unô
;

55 
INT32
 *
	mî∫o
;

56 
UINT8
 *
	md«me
;

57 *
	md©a
;

61 
	sÊash_°ru˘
 {

62 
INT32
 
	m£Size
;

63 
INT32
 
	m£Num
;

64 
INT32
 
	mssSize
;

65 
INT32
 
	mssNum
;

66 
INT32
 
	mtŸÆSize
;

69 
dfs_öô
();

70 
INT32
 
dfs_ˇp
(INT32 
dfd
, INT32 
›s
);

74 
	#DFS_DFD_FAULT
 -1

	)

75 
	#DFS_PARA_FAULT
 -2

	)

78 
	#DFS_WRITE
 0

	)

79 
	#DFS_READ
 1

	)

80 
	#DFS_ERASE
 2

	)

81 
	#DFS_LENGTH
 3

	)

82 
	#DFS_START
 4

	)

83 
	#DFS_END
 5

	)

84 
INT32
 
dfs_ªgi°î
(
dfs_›s
 *
d›s
);

85 
dfs_uƒegi°î
(
INT32
 
dfd
);

86 
dfs_›s
 *
gë_dfs
(
UINT32
 
id
);

87 
INT32
 
dfs_wrôe
(INT32 
dfd
, 
UINT32
 
d°
,
UINT8
 *
§c
,UINT32 
˙t
);

88 
INT32
 
dfs_ªad
(INT32 
dfd
, 
UINT32
 
§c
, 
UINT8
 *
buf
,UINT32 
˙t
);

89 
INT32
 
dfs_îa£
(INT32 
did
,
UINT32
 
no
,UINT32 
num
);

	@driver/device/dma/fsl_dma.c

13 
	~<µc/io.h
>

14 
	~"f¶_dma.h
"

17 
	#FSL_DMA_MAX_SIZE
 (0x3ffffff)

	)

19 
	#FSL_DMA_MR_DEFAULT
 (
FSL_DMA_MR_BWC_DIS
 | 
FSL_DMA_MR_CTM_DIRECT
)

	)

21 
	#MIN
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

24 
cc§_dma_t
 *
	gdma_ba£
 = (*)(
DMA1_REGBASE
);

26 
	$dma_sync
()

28 
	`__asm__
("sync; isync; msync");

29 
	}
}

31 
	$out_dma32
(vﬁ©ûê*
addr
, 
vÆ
)

33 
	`out_be32
(
addr
, 
vÆ
);

34 
	}
}

36 
uöt32_t
 
	$ö_dma32
(vﬁ©ûê*
addr
)

38  
	`ö_be32
(
addr
);

39 
	}
}

41 
uöt32_t
 
	$dma_check
()

43 vﬁ©ûê
f¶_dma_t
 *
dma
 = &
dma_ba£
->dma[0];

44 
uöt32_t
 
°©us
;

48 
°©us
 = 
	`ö_dma32
(&
dma
->
§
);

49 } 
°©us
 & 
FSL_DMA_SR_CB
);

52 
	`out_dma32
(&
dma
->
mr
, 
	`ö_dma32
(&dma->mrË& ~
FSL_DMA_MR_CS
);

53 
	`dma_sync
();

55 i‡(
°©us
 != 0)

56 
	`¥ötf
 ("DMA Eº‹: sètu†%x\n", 
°©us
);

58  
°©us
;

59 
	}
}

61 
	$dma_öô
()

63 vﬁ©ûê
f¶_dma_t
 *
dma
 = &
dma_ba£
->dma[0];

65 
	`out_dma32
(&
dma
->
ßå
, 
FSL_DMA_SATR_SREAD_SNOOP
);

66 
	`out_dma32
(&
dma
->
d©r
, 
FSL_DMA_DATR_DWRITE_SNOOP
);

67 
	`out_dma32
(&
dma
->
§
, 0xffffffff);

68 
	`dma_sync
();

69 
	}
}

71 
	$dma_mem˝y
(
phys_addr_t
 
de°
,Öhys_addr_à
§c
, 
phys_size_t
 
cou¡
)

73 vﬁ©ûê
f¶_dma_t
 *
dma
 = &
dma_ba£
->dma[0];

74 
uöt32_t
 
x„r_size
;

76 
cou¡
) {

77 
x„r_size
 = 
	`MIN
(
FSL_DMA_MAX_SIZE
, 
cou¡
);

79 
	`out_dma32
(&
dma
->
d¨
, (
uöt32_t
Ë(
de°
 & 0xFFFFFFFF));

80 
	`out_dma32
(&
dma
->
ßr
, (
uöt32_t
Ë(
§c
 & 0xFFFFFFFF));

81 
	`out_dma32
(&
dma
->
b¸
, 
x„r_size
);

82 
	`dma_sync
();

85 
	`out_dma32
(&
dma
->
mr
, 
FSL_DMA_MR_DEFAULT
);

86 
	`dma_sync
();

89 
	`out_dma32
(&
dma
->
mr
, 
FSL_DMA_MR_DEFAULT
 | 
FSL_DMA_MR_CS
);

91 
cou¡
 -
x„r_size
;

92 
§c
 +
x„r_size
;

93 
de°
 +
x„r_size
;

95 
	`dma_sync
();

97 i‡(
	`dma_check
())

102 
	}
}

	@driver/device/dma/fsl_dma.h

25 #i‚de‡
_ASM_FSL_DMA_H_


26 
	#_ASM_FSL_DMA_H_


	)

28 
	~<libc/ˇgboŸ.h
>

29 
	~<p1020rdb.h
>

30 
	~<c⁄fig.h
>

31 
	~<libc/°dio.h
>

34 
	sf¶_dma
 {

35 
uöt32_t
 
	mmr
;

36 
	#FSL_DMA_MR_CS
 0x00000001

	)

37 
	#FSL_DMA_MR_CC
 0x00000002

	)

38 
	#FSL_DMA_MR_CTM
 0x00000004

	)

39 
	#FSL_DMA_MR_CTM_DIRECT
 0x00000004

	)

40 
	#FSL_DMA_MR_CA
 0x00000008

	)

41 
	#FSL_DMA_MR_CDSM
 0x00000010

	)

42 
	#FSL_DMA_MR_XFE
 0x00000020

	)

43 
	#FSL_DMA_MR_EIE
 0x00000040

	)

44 
	#FSL_DMA_MR_EOLSIE
 0x00000080

	)

45 
	#FSL_DMA_MR_EOLNIE
 0x00000100

	)

46 
	#FSL_DMA_MR_EOSIE
 0x00000200

	)

47 
	#FSL_DMA_MR_SRW
 0x00000400

	)

48 
	#FSL_DMA_MR_SAHE
 0x00001000

	)

49 
	#FSL_DMA_MR_DAHE
 0x00002000

	)

50 
	#FSL_DMA_MR_SAHTS_MASK
 0x0000c000

	)

51 
	#FSL_DMA_MR_DAHTS_MASK
 0x00030000

	)

52 
	#FSL_DMA_MR_EMS_EN
 0x00040000

	)

53 
	#FSL_DMA_MR_EMP_EN
 0x00200000

	)

54 
	#FSL_DMA_MR_BWC_MASK
 0x0f000000

	)

55 
	#FSL_DMA_MR_BWC_DIS
 0x0f000000

	)

56 
uöt32_t
 
	m§
;

57 
	#FSL_DMA_SR_EOLSI
 0x00000001

	)

58 
	#FSL_DMA_SR_EOSI
 0x00000002

	)

59 
	#FSL_DMA_SR_CB
 0x00000004

	)

60 
	#FSL_DMA_SR_EOLNI
 0x00000008

	)

61 
	#FSL_DMA_SR_PE
 0x00000010

	)

62 
	#FSL_DMA_SR_CH
 0x00000020

	)

63 
	#FSL_DMA_SR_TE
 0x00000080

	)

64 
	mªs0
[4];

65 
uöt32_t
 
	m˛nd¨
;

66 
uöt32_t
 
	mßå
;

67 
	#FSL_DMA_SATR_ESAD_MASK
 0x000001f‡

	)

68 
	#FSL_DMA_SATR_SREAD_NO_SNOOP
 0x00040000

	)

69 
	#FSL_DMA_SATR_SREAD_SNOOP
 0x00050000

	)

70 
	#FSL_DMA_SATR_SREAD_UNLOCK
 0x00070000

	)

71 
	#FSL_DMA_SATR_STRAN_MASK
 0x00f00000

	)

72 
	#FSL_DMA_SATR_SSME
 0x01000000

	)

73 
	#FSL_DMA_SATR_SPCIORDER
 0x02000000

	)

74 
	#FSL_DMA_SATR_STFLOWLVL_MASK
 0x0c000000

	)

75 
	#FSL_DMA_SATR_SBPATRMU
 0x20000000

	)

76 
uöt32_t
 
	mßr
;

77 
uöt32_t
 
	md©r
;

78 
	#FSL_DMA_DATR_EDAD_MASK
 0x000001f‡

	)

79 
	#FSL_DMA_DATR_DWRITE_NO_SNOOP
 0x00040000

	)

80 
	#FSL_DMA_DATR_DWRITE_SNOOP
 0x00050000

	)

81 
	#FSL_DMA_DATR_DWRITE_ALLOC
 0x00060000

	)

82 
	#FSL_DMA_DATR_DWRITE_LOCK
 0x00070000

	)

83 
	#FSL_DMA_DATR_DTRAN_MASK
 0x00f00000

	)

84 
	#FSL_DMA_DATR_DSME
 0x01000000

	)

85 
	#FSL_DMA_DATR_DPCIORDER
 0x02000000

	)

86 
	#FSL_DMA_DATR_DTFLOWLVL_MASK
 0x0c000000

	)

87 
	#FSL_DMA_DATR_DBPATRMU
 0x20000000

	)

88 
uöt32_t
 
	md¨
;

89 
uöt32_t
 
	mb¸
;

90 
	mªs1
[4];

91 
uöt32_t
 
	m∆nd¨
;

92 
	mªs2
[8];

93 
uöt32_t
 
	m˛abd¨
;

94 
	mªs3
[4];

95 
uöt32_t
 
	m∆sd¨
;

96 
uöt32_t
 
	ms§
;

97 
uöt32_t
 
	md§
;

98 
	mªs4
[56];

99 } 
	tf¶_dma_t
;

102 
	scc§_dma
 {

103 
	mªs1
[256];

104 
f¶_dma
 
	mdma
[4];

105 
uöt32_t
 
	mdg§
;

106 
	mªs2
[3324];

107 } 
	tcc§_dma_t
;

109 
dma_öô
();

110 
dma_mem˝y
(
phys_addr_t
 
de°
,Öhys_addr_à
§c
, 
phys_size_t
 
n
);

	@driver/device/duart/duart.c

1 
	~"du¨t.h
"

4 
du¨t
 *
	gsio
[2];

6 
INT32
 
	$check_no
(
UINT8
 
no
)

8 
INT32
 
ªt
=0;

9 i‡(
no
 !=1 &&Ço != 2)

10 
ªt
 = -1;

11  
ªt
;

12 
	}
}

13 
	$öô_u¨t
(
UINT8
 
no
)

15 
UINT32
 
ba£
;

16 
UINT32
 
u¨tClk
 = 
	`sysU¨tClkR©eGë
();

18 if(
no
==1){

19 
ba£
 = 
DUART1_BASE
;

20 
sio
[
no
]=(
du¨t
 *)
DUART1_BASE
;

22 i‡(
no
==2){

23 
ba£
 = 
DUART2_BASE
;

24 
sio
[
no
]=(
du¨t
 *)
DUART2_BASE
;

27 
ba£
 = 0;

32 if(
ba£
 !=0){

33 
	`¥ötf
("ba£ %x\n",
ba£
);

35 
	`outb
(&
sio
[
no
]->
õr
,0);

37 
	`outb
(&
sio
[
no
]->
l¸
,
CHAR_LEN_8
|
ONE_STOP
|
LCR_DLAB
);

38 
	`outb
(&
sio
[
no
]->
dlb
,
	`BAUD_LO
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

39 
	`outb
(&
sio
[
no
]->
dmb
,
	`BAUD_HI
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

41 
	`outb
(&
sio
[
no
]->
l¸
,
CHAR_LEN_8
|
ONE_STOP
);

42 
	`outb
(&
sio
[
no
]->
f¸
,
FCR_RXCLR
| 
FCR_TXCLR
| 
RTL_1
|
FCR_DMS
);

43 
	`outb
(&
sio
[
no
]->
f¸
,
FCR_RXCLR
| 
FCR_TXCLR
| 
FCR_EN
 | 
RTL_1
|
FCR_DMS
);

45 
	`¥ötf
("iú %x\n",
	`öb
(&
sio
[
no
]->
iú
));

48 
	`¥ötf
("l§ %x\n",
	`öb
(&
sio
[
no
]->
l§
));

49 
	}
}

51 
INT16
 
	$u¨t_£nd
(
UINT8
 
no
,UINT8 
num
, UINT8 *
d©a
)

53 
i
=0;

54 i‡(
	`check_no
(
no
) ==0){

56 if((
	`öb
(&
sio
[
no
]->
d§
Ë& 0x2)!=0x0 && (öb(&sio[no]->
l§
)&0x60)==0x60){

60 
UINT32
 
t1
 = 
	`gëTblus
();

61 
i
=0;i<
num
&&i<16;i++){

62 
	`outb
(&
sio
[
no
]->
thr
,*(
d©a
+
i
) );

64 
UINT32
 
t2
 = 
	`gëTblus
();

65 
	`¥ötf
("†%d\n",
t2
-
t1
);

69 
i
=-1;

72  
i
;

73 
	}
}

75 
INT8
 
	gxxxy
[1024]={0};

76 
INT32
 
	gxxxi
=0;

84 
INT16
 
	$u¨t_ªcv
(
UINT8
 
no
,UINT8 
num
, UINT8 *
d©a
)

86 
INT16
 
ªt
=0,
i
=0;

88 i‡(
	`check_no
(
no
) ==0) {

89 if((
	`öb
(&
sio
[
no
]->
d§
)&0x1)==0x1 || (öb(&sio[no]->
l§
)&0x2) == 0x0 ){

92 i‡((
	`öb
(&
sio
[
no
]->
l§
)&0x8e) != 0){

93 
	`¥ötf
("err\n");

94  
i
;

97 
UINT32
 
t1
 = 
	`gëTblus
();

98 
i
=0;i<
num
+1&&i<17;i++){

99 *(
d©a
+
i
)=
	`öb
(&
sio
[
no
]->
rbr
);

103 
	`outb
(&
sio
[
no
]->
f¸
,
FCR_RXCLR
|
FCR_EN
|
RTL_1
|
FCR_DMS
);

104 
	`u¨t_˛ór_fifo
(2);

105 
UINT32
 
t2
 = 
	`gëTblus
();

106 
	`¥ötf
("∏%d\n",
t2
-
t1
);

112 
i
=-1;

114  
i
;

115 
	}
}

117 
	$u¨t_˛ór_fifo
(
no
)

119 i‡(
	`check_no
(
no
) ==0) {

120 
	`outb
(&
sio
[
no
]->
f¸
,0);

121 
	`outb
(&
sio
[
no
]->
f¸
,
FCR_RXCLR
| 
FCR_TXCLR
| 
FCR_EN
 | 
RTL_1
|
FCR_DMS
);

123 
	}
}

	@driver/device/duart/duart.h

1 #¥agm®
⁄˚


3 
	~<libc/ˇgboŸ.h
>

4 
	~<c⁄fig.h
>

5 
	~<libc/ac˚ss.h
>

8 
	#SIO_READ
(
a
Ë
	`öb
◊)

	)

9 
	#SIO_WRITE
(
a
, 
v
Ë
	`outb
◊, v)

	)

13 
	#NS16550
(
x
) \

14 
x
; \

15 
__∑d__
##
x
 [
_CAG_CONFIG_SIO_REG_INTERVAL
 - 1];

	)

17 
	sdu¨t
{

18 
UINT8
 
	mrbr
;

19 
UINT8
 
	mõr
;

20 
UINT8
 
	miú
;

21 
UINT8
 
	ml¸
;

22 
UINT8
 
	mm¸
;

23 
UINT8
 
	ml§
;

24 
UINT8
 
	mm§
;

25 
UINT8
 
	ms¸
;

26 
UINT8
 
	m∑d1
[2];

27 
UINT8
 
	md§
;

30 
	#thr
 
rbr


	)

31 
	#dlb
 
rbr


	)

32 
	#dmb
 
õr


	)

33 
	#f¸
 
iú


	)

34 
	#a‰
 
iú


	)

36 
	#DUART1_BASE
 0xFFE04500

	)

37 
	#DUART2_BASE
 0xFFE04600

	)

40 
	#BAUD_LO
(
˛k
, 
baud
Ë((˛k / (16 * baud)Ë& 0xff)

	)

41 
	#BAUD_HI
(
˛k
, 
baud
Ë(((˛k / (16 * baud)Ë& 0xff00Ë>> 8)

	)

45 
	#CHAR_LEN_5
 0x00

	)

46 
	#CHAR_LEN_6
 0x01

	)

47 
	#CHAR_LEN_7
 0x02

	)

48 
	#CHAR_LEN_8
 0x03

	)

49 
	#LCR_STB
 0x04

	)

50 
	#ONE_STOP
 0x00

	)

51 
	#LCR_PEN
 0x08

	)

52 
	#PARITY_NONE
 0x00

	)

53 
	#LCR_EPS
 0x10

	)

54 
	#LCR_SP
 0x20

	)

55 
	#LCR_SBRK
 0x40

	)

56 
	#LCR_DLAB
 0x80

	)

57 
	#DLAB
 
LCR_DLAB


	)

61 
	#LSR_DR
 0x01

	)

62 
	#RxCHAR_AVAIL
 
LSR_DR


	)

63 
	#LSR_OE
 0x02

	)

64 
	#LSR_PE
 0x04

	)

65 
	#LSR_FE
 0x08

	)

66 
	#LSR_BI
 0x10

	)

67 
	#LSR_THRE
 0x20

	)

68 
	#LSR_TEMT
 0x40

	)

69 
	#LSR_FERR
 0x80

	)

73 
	#IIR_IP
 0x01

	)

74 
	#IIR_ID
 0x0e

	)

75 
	#IIR_RLS
 0x06

	)

76 
	#Rx_INT
 
IIR_RLS


	)

77 
	#IIR_RDA
 0x04

	)

78 
	#RxFIFO_INT
 
IIR_RDA


	)

79 
	#IIR_THRE
 0x02

	)

80 
	#TxFIFO_INT
 
IIR_THRE


	)

81 
	#IIR_MSTAT
 0x00

	)

82 
	#IIR_TIMEOUT
 0x0¯

	)

86 
	#IER_ERDAI
 0x01

	)

87 
	#RxFIFO_BIT
 
IER_ERDAI


	)

88 
	#IER_ETHREI
 0x02

	)

89 
	#TxFIFO_BIT
 
IER_ETHREI


	)

90 
	#IER_ELSI
 0x04

	)

91 
	#Rx_BIT
 
IER_ELSI


	)

92 
	#IER_EMSI
 0x08

	)

96 
	#MCR_DTR
 0x01

	)

97 
	#DTR
 
MCR_DTR


	)

98 
	#MCR_RTS
 0x02

	)

99 
	#MCR_OUT1
 0x04

	)

100 
	#MCR_OUT2
 0x08

	)

101 
	#MCR_LOOP
 0x10

	)

105 
	#MSR_DCTS
 0x01

	)

106 
	#MSR_DDSR
 0x02

	)

107 
	#MSR_TERI
 0x04

	)

108 
	#MSR_DDCD
 0x08

	)

109 
	#MSR_CTS
 0x10

	)

110 
	#MSR_DSR
 0x20

	)

111 
	#MSR_RI
 0x40

	)

112 
	#MSR_DCD
 0x80

	)

116 
	#FCR_EN
 0x01

	)

117 
	#FCR_RXCLR
 0x02

	)

118 
	#FCR_TXCLR
 0x04

	)

119 
	#FCR_DMS
 0x08

	)

120 
	#FCR_RXTRIG_L
 0x40

	)

121 
	#FCR_RXTRIG_H
 0x80

	)

122 
	#RTL_14
 0xc0

	)

123 
	#RTL_4
 0x40

	)

124 
	#RTL_1
 0x00

	)

	@driver/device/fpga/fpga.c

28 
	~"Âga.h
"

29 
	~<libc/ˇgboŸ.h
>

30 
	~<c⁄fig.h
>

33 
uöt16_t
 
	$Âga_ªad
(
uöt32_t
 
ªg_num
)

35  *(
uöt16_t
 *)(
_CAG_CONFIG_FPGA_ADDR
+
ªg_num
);

36 
	}
}

39 
	$Âga_wrôe
(
uöt32_t
 
ªg_num
,
uöt16_t
 
vÆue
)

41 *(
uöt16_t
 *)(
_CAG_CONFIG_FPGA_ADDR
+
ªg_num
Ë
vÆue
;

42 
	}
}

	@driver/device/fpga/fpga.h

28 #¥agm®
⁄˚


30 
	e_‰eg
 {

32 
	mSEND_ENABLE1
 = 0x0,

33 
	mSEND_STATUS1
 = 0x2,

34 
	mSEND_LEN1
 = 0x4,

35 
	mDATA_RECV_STATUS1
 = 0x6,

36 
	mDATA_RECV_LEN1
 = 0x8,

37 
	mDATA_RECV_TIME1
 = 0xa,

38 
	mSTATE_RECV_STATUS1
 = 0xc,

39 
	mSTATE_RECV_LEN1
 = 0xe,

40 
	mSTATE_RECV_TIME1
 = 0x10,

43 
	mSEND_ENABLE2
 = 0x20,

44 
	mSEND_STATUS2
 = 0x22,

45 
	mSEND_LEN2
 = 0x24,

46 
	mDATA_RECV_STATUS2
 = 0x26,

47 
	mDATA_RECV_LEN2
 = 0x28,

48 
	mDATA_RECV_TIME2
 = 0x2a,

49 
	mSTATE_RECV_STATUS2
 = 0x2c,

50 
	mSTATE_RECV_LEN2
 = 0x2e,

51 
	mSTATE_RECV_TIME2
 = 0x30,

54 
	mSEND_ENABLE3
 = 0x40,

55 
	mSEND_STATUS3
 = 0x42,

56 
	mSEND_LEN3
 =0x44,

57 
	mRECV_STATUS3
 = 0x46,

58 
	mRECV_LEN3
 = 0x48,

59 
	mRECV_TIME3
 = 0x4a,

60 
	mTAR_STATION
 = 0x4c,

63 
	mSLOT_ADDR
 = 0x60,

64 
	mKEY_SWITCH
 = 0x62,

65 
	mSTATE_MON
 = 0x64,

66 
	mTEMP_MON
 = 0x66,

67 
	mSTATE_LED
 = 0x68,

68 
	mKEY_LED
 = 0x6a,

69 
	mCOMM_LED
 = 0x6c,

70 
	mSTATION_ADDR
 = 0x6e,

71 
	mHB_STATUS
 = 0x80,

72 
	mMODULE_OL
 = 0x82,

73 
	mSW_OK
 = 0x84,

74 
	mUP_EN
 = 0x86,

75 
	mSYNC_TIME1
 = 0xa0,

76 
	mSYNC_TIME2
 = 0xa2,

77 
	mSYNC_TIME3
 = 0xa4,

78 
	mSYNC_STATUS
 = 0xa6,

79 
	mSYNC_CALI1
 = 0xa8,

80 
	mSYNC_CALI2
 = 0xaa,

81 
	mSYNC_CALI3
 = 0xac,

82 
	mSYNCCALI_EN
 = 0x1ae,

83 
	mSOE_TIME1
 = 0xc0,

84 
	mSOE_TIME2
 = 0xc2,

85 
	mSOE_TIME3
 = 0xc4,

86 
	mSOE_TIME4
 = 0xc6,

87 
	mSOE_CALI1
 = 0xc8,

88 
	mSOE_CALI2
 = 0xca,

89 
	mSOE_CALI3
 = 0xcc,

90 
	mSOE_CALI4
 = 0xce,

91 
	mSOECALI_EN
 = 0xd0,

92 } 
	t‰eg_t
;

94 
Âga_ªad
(
ªg_num
);

95 
Âga_wrôe
(
ªg_num
, 
vÆue
);

	@driver/device/norflash/S29GLxxxP.h

2 
	#LLD_RESET_CMD


	)

3 
	#LLD_SECTOR_ERASE_CMD_1


	)

4 
	#LLD_CHIP_ERASE_CMD_1


	)

5 
	#LLD_PROGRAM_CMD_1


	)

6 
	#LLD_WRITE_BUFFER_CMD_1


	)

7 
	#LLD_CFI_CMD_1


	)

8 
	#LLD_UNLOCKBYPASS_CMD


	)

9 
	#LLD_AUTOSELECT_CMD


	)

10 
	#LLD_SUSP_RESUME_CMD_1


	)

11 
	#LLD_GET_ID_CMD_1


	)

12 
	#LLD_CONFIG_REG_CMD_3


	)

13 
	#LLD_POLL_TOGGLE


	)

14 
	#LLD_STATUS_GET


	)

15 
	#LLD_SECSI_SECTOR_CMD_1


	)

16 
	#LLD_DELAY_MSEC


	)

17 
	#LLD_READ_OP


	)

18 
	#LLD_WRITE_BUFFER_OP


	)

19 
	#LLD_PROGRAM_OP


	)

20 
	#LLD_SECTOR_ERASE_OP


	)

21 
	#LLD_CHIP_ERASE_OP


	)

22 
	#LLD_SUSP_RESUME_OP_1


	)

23 
	#LLD_MEMCPY_OP


	)

24 
	#LLD_LOCKREG_CMD_1


	)

25 
	#LLD_PASSWORD_CMD


	)

26 
	#LLD_PPB_CMD


	)

27 
	#LLD_LOCKBIT_CMD


	)

28 
	#LLD_DYB_CMD


	)

29 
	#LLD_LOCK_BIT_RD_OP


	)

30 
	#LLD_LOCK_BIT_SET_OP


	)

31 
	#LLD_PPB_ERASE_OP


	)

32 
	#LLD_PPB_PGM_OP


	)

33 
	#LLD_PPB_READ_OP


	)

34 
	#LLD_LOCKREG_RD_OP_1


	)

35 
	#LLD_LOCKREG_WR_OP_1


	)

38 
	#S29GLxxxP


	)

41 
	#PAGE_NUM
 32

	)

42 
	#SECTOR_NUM
 512

	)

	@driver/device/norflash/lld.c

33 
	~"Œd.h
"

34 #ifde‡
S29GLxxxP


35 
	~"S29GLxxxP.h
"

36 
	#LLD_BUFFER_SIZE
 32

	)

37 
	#LLD_SECTOR_SIZE
 (0x10000Ë

	)

38 
	#LLD_SUSP_RESUME_DELAY
 30

	)

41 
	#Œd_log
(
log
)

42 
n‹_Êash_î∫o
 = 0;

	)

44 #i‚de‡
LLD_STATUS_REG


45 
FLSTATE
 
	gFLSTATEOP
 = 
FLSTATE_NOT_BUSY
;

46 
	gg_su•íd_°©e
 = 
FLRESUME
;

47 
ADDRESS
 
	gg_su•íd_£˘‹
, 
	gg_wrôebuf„r_£˘‹
;

49 
	#DQ1_MASK
 (0x02 * 
LLD_DEV_MULTIPLIER
Ë

	)

50 
	#DQ2_MASK
 (0x04 * 
LLD_DEV_MULTIPLIER
Ë

	)

51 
	#DQ3_MASK
 (0x08 * 
LLD_DEV_MULTIPLIER
Ë

	)

52 
	#DQ5_MASK
 (0x20 * 
LLD_DEV_MULTIPLIER
Ë

	)

53 
	#DQ6_MASK
 (0x40 * 
LLD_DEV_MULTIPLIER
Ë

	)

54 
	#DQ6_TGL_DQ1_MASK
 (
dq6_toggÀs
 >> 5Ë

	)

55 
	#DQ6_TGL_DQ5_MASK
 (
dq6_toggÀs
 >> 1Ë

	)

58 
ötLock
();

59 
ötU∆ock
();

61 
	#LLD_LOCK


62 
x1
 = 
__LINE__
;\

63 
Œdlock
 = 
	`Œd_lock
(
x1
); \

64 i‡(
Œdlock
 =0xffffffffË 
DEV_LOCK_FAIL
;

	)

67 
	#LLD_UNLOCK


68 
Œdu∆ock
 = 
	`Œd_u∆ock
(
Œdlock
,
x1
); \

69 i‡(
Œdu∆ock
 =0xffffffffË 
DEV_UNLOCK_FAIL
;

	)

71 
	gã°Œd
 = 0;

74 
	$Œd_lock
(
xx
)

76 i‡(
ã°Œd
 !=0) {

79 
	`Œd_log
(
NOR_LOCKFAIL_ERR
);

82 
ã°Œd
 = 1;

84  
	`ötLock
();

85 
	}
}

87 
	$Œd_u∆ock
(
lockî
,
xx
)

89 i‡(
ã°Œd
 !=1) {

92 
	`Œd_log
(
NOR_UNLOCKFAIL_ERR
);

95 
ã°Œd
 = 0;

97 
	`ötU∆ock
(
lockî
);

99 
	}
}

112 
	$Œd_GëVîsi⁄
–
LLD_CHAR
 
vîsi⁄Så
[])

114 
LLD_CHAR
* 
pVî
 = (LLD_CHAR*)
LLD_VERSION
;

116 i‡(
vîsi⁄Så
) {

117 *
pVî
Ë*
vîsi⁄Så
++ = *pVer++;

118 *
vîsi⁄Så
 = 0;

120 
	}
}

131 
	gŒd_InôCmd


133 
FLASHDATA
 * 
	gba£_addr


136 (Ë
	gba£_addr
;

137 #ifde‡
S29GLxxxP


138 
	gFLSTATEOP
 = 
FLSTATE_NOT_BUSY
;

152 
	gŒd_Re£tCmd


154 
FLASHDATA
 * 
	gba£_addr


157 #ifde‡
LLD_RESET_CMD


159 
FLASH_WR
(
ba£_addr
, 0, 
NOR_RESET_CMD
);

160 
Œd_InôCmd
(
ba£_addr
);

164 #ifde‡
LLD_SECTOR_ERASE_CMD_1


176 
	gŒd_Se˘‹Eø£Cmd


178 
FLASHDATA
 * 
	gba£_addr
,

179 
ADDRESS
 
	goff£t


184 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

185 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

187 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_ERASE_SETUP_CMD
);

189 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

190 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

193 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_SECTOR_ERASE_CMD
);

195 #ifde‡
S29GLxxxP


196 
	gFLSTATEOP
 = 
FLSTATE_ERASE
;

201 #ifde‡
LLD_CHIP_ERASE_CMD_1


212 
	gŒd_ChùEø£Cmd


214 
FLASHDATA
 * 
	gba£_addr


218 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

219 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

221 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_ERASE_SETUP_CMD
);

223 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

224 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

227 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_CHIP_ERASE_CMD
);

231 #ifde‡
LLD_PROGRAM_CMD_1


242 
	gŒd_ProgømCmd


244 
FLASHDATA
 * 
	gba£_addr
,

245 
ADDRESS
 
	goff£t
,

246 
FLASHDATA
 *
	gpgm_d©a_±r


249 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

250 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

253 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_PROGRAM_CMD
);

255 
FLASH_WR
(
ba£_addr
, 
off£t
, *
pgm_d©a_±r
);

259 #ifde‡
LLD_WRITE_BUFFER_CMD_1


267 
	gŒd_WrôeToBuf„rCmd


269 
FLASHDATA
 * 
	gba£_addr
,

270 
ADDRESS
 
	goff£t


274 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

275 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

278 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_WRITE_BUFFER_LOAD_CMD
);

280 #ifde‡
S29GLxxxP


281 
	gFLSTATEOP
 = 
FLSTATE_WRITEBUFFER
;

282 
	gg_wrôebuf„r_£˘‹
 = 
off£t
 / 
LLD_SECTOR_SIZE
;

292 
	gŒd_ProgømBuf„rToFœshCmd


294 
FLASHDATA
 * 
	gba£_addr
,

295 
ADDRESS
 
	goff£t


299 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_WRITE_BUFFER_PGM_CONFIRM_CMD
);

308 
	gŒd_WrôeBuf„rAb‹tRe£tCmd


310 
FLASHDATA
 * 
	gba£_addr


315 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

316 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

319 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_WRITE_BUFFER_ABORT_RESET_CMD
);

323 #ifde‡
LLD_SUSP_RESUME_CMD_1


331 
	gŒd_ProgømSu•ídCmd


333 
FLASHDATA
 * 
	gba£_addr
,

334 
ADDRESS
 
	goff£t


338 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_SUSPEND_CMD
);

348 
	gŒd_Eø£Su•ídCmd


350 
FLASHDATA
 * 
	gba£_addr
,

351 
ADDRESS
 
	goff£t


355 #ifde‡
PAUSE_BETWEEN_ERASE_SUSPENDS


356 
DñayMûli£c⁄ds
(5);

359 #ifde‡
S29GLxxxP


360 
FLASHDATA
 
	gdq6_toggÀs
;

361 
FLASHDATA
 
	g°©us_ªad_1
, 
	g°©us_ªad_2
, 
	g°©us_ªad_3
;

363 
	g°©us_ªad_1
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

364 
	g°©us_ªad_2
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

365 
	g°©us_ªad_3
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

368 
	gdq6_toggÀs
 = ((
°©us_ªad_1
 ^ 
°©us_ªad_2
) &

369 (
°©us_ªad_2
 ^ 
°©us_ªad_3
) &

370 
DQ6_MASK
 );

372 i‡(
	gdq6_toggÀs
 && (
	gg_su•íd_°©e
 =
FLRESUME
)) {

373 
g_su•íd_°©e
 = 
FLSUSPEND
;

374 
	gg_su•íd_£˘‹
 = 
off£t
 / 
LLD_SECTOR_SIZE
;

379 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_SUSPEND_CMD
);

389 
	gŒd_Eø£ResumeCmd


391 
FLASHDATA
 * 
	gba£_addr
,

392 
ADDRESS
 
	goff£t


397 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_RESUME_CMD
);

399 #ifde‡
S29GLxxxP


400 
	gg_su•íd_°©e
 = 
FLRESUME
;

411 
	gŒd_ProgømResumeCmd


413 
FLASHDATA
 * 
	gba£_addr
,

414 
ADDRESS
 
	goff£t


419 
FLASH_WR
(
ba£_addr
, 
off£t
, 
NOR_RESUME_CMD
);

425 #ifde‡
LLD_SUSP_RESUME_OP_1


438 
DEVSTATUS
 
	gŒd_Eø£Su•ídOp


440 
FLASHDATA
 * 
	gba£_addr
,

441 
ADDRESS
 
	goff£t


444 
FLASHDATA
 
	g°©us_ªg
;

445 #ifde‡
LLD_POLL_TOGGLE


446 #i‚de‡
LLD_POLL_STATUS


447 
	gpﬁlög_cou¡î
 = 0xFFFFFFFF;

450 #ifde‡
LLD_POLL_STATUS


451 
Œd_Eø£Su•ídCmd
(
ba£_addr
);

452 
	g°©us_ªg
 = 
Œd_Pﬁl
(
ba£_addr
, 0);

453 if–(
	g°©us_ªg
 & 
	gDEV_ERASE_SUSP_MASK
Ë=
DEV_ERASE_SUSP_MASK
 )

454 –
DEV_ERASE_SUSPEND
 );

455 –
	gDEV_ERASE_SUSPEND_ERROR
 );

457 #ifde‡
LLD_POLL_TOGGLE


458 
	gLLD_LOCK
;

459 
Œd_Eø£Su•ídCmd
(
ba£_addr
, 
off£t
);

461 
	gpﬁlög_cou¡î
--;

462 
	g°©us_ªg
 = 
Œd_SètusGëReg
(
ba£_addr
, 
off£t
);

463 } (
	g°©us_ªg
 =
DEV_BUSY
Ë&& 
pﬁlög_cou¡î
);

465 if–(
	g°©us_ªg
 & 
	gDEV_ERASE_SUSP_MASK
Ë=
DEV_ERASE_SUSP_MASK
 ) {

466 
LLD_UNLOCK
;

467 –
	gDEV_ERASE_SUSPEND
 );

469 
	gLLD_UNLOCK
;

470 –
	gDEV_ERASE_SUSPEND_ERROR
 );

472 
DñayMi¸o£c⁄ds
(
LLD_SUSP_RESUME_DELAY
);

473 –
	gDEV_ERASE_SUSPEND
 );

491 
DEVSTATUS
 
	gŒd_ProgømSu•ídOp


493 
FLASHDATA
 * 
	gba£_addr
,

494 
ADDRESS
 
	goff£t


497 
FLASHDATA
 
	g°©us_ªg
;

499 #ifde‡
LLD_POLL_TOGGLE


500 #i‚de‡
LLD_POLL_STATUS


501 
	gpﬁlög_cou¡î
 = 0xFFFFFFFF;

505 #ifde‡
LLD_POLL_STATUS


506 
Œd_ProgømSu•ídCmd
(
ba£_addr
);

507 
	g°©us_ªg
 = 
Œd_Pﬁl
–
ba£_addr
, 0 );

508 if–(
	g°©us_ªg
 & 
	gDEV_PROGRAM_SUSP_MASK
Ë=
DEV_PROGRAM_SUSP_MASK
 )

509 –
DEV_PROGRAM_SUSPEND
 );

510 –
	gDEV_PROGRAM_SUSPEND_ERROR
 );

512 #ifde‡
LLD_POLL_TOGGLE


513 
	gLLD_LOCK
;

514 
Œd_ProgømSu•ídCmd
(
ba£_addr
, 
off£t
);

516 
	gpﬁlög_cou¡î
--;

517 
	g°©us_ªg
 = 
Œd_SètusGëReg
(
ba£_addr
, 
off£t
);

518 } (
	g°©us_ªg
 =
DEV_BUSY
Ë&& 
pﬁlög_cou¡î
);

520 if–(
	g°©us_ªg
 & 
	gDEV_PROGRAM_SUSP_MASK
Ë=
DEV_PROGRAM_SUSP_MASK
 ) {

521 
LLD_UNLOCK
;

522 –
	gDEV_PROGRAM_SUSPEND
 );

524 
	gLLD_UNLOCK
;

525 –
	gDEV_PROGRAM_SUSPEND_ERROR
 );

527 
DñayMi¸o£c⁄ds
(
LLD_SUSP_RESUME_DELAY
);

528 –
	gDEV_PROGRAM_SUSPEND
 );

535 #ifde‡
LLD_GET_ID_CMD_1


543 
	gŒd_GëDevi˚Id


545 
FLASHDATA
 * 
	gba£_addr


548 
	gid
;

551 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

552 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

554 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_AUTOSELECT_CMD
);

556 #i‚de‡
LLD_CONFIGURATION_X8X16_AS_X8


557 #i‚de‡
LLD_CONFIGURATION_X8_AS_X8


558 
	gid
 = ()(
FLASH_RD
(
ba£_addr
, 0x0001) & 0x000000FF) << 16;

559 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x000E) & 0x000000FF) << 8;

560 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x000F) & 0x000000FF) ;

562 
	gid
 = ()(
FLASH_RD
(
ba£_addr
, 0x0002) & 0x000000FF) << 16;

563 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x001C) & 0x000000FF) << 8;

564 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x001E) & 0x000000FF) ;

567 
	gid
 = ()(
FLASH_RD
(
ba£_addr
, 0x0002) & 0x000000FF) << 16;

568 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x001C) & 0x000000FF) << 8;

569 
	gid
 |()(
FLASH_RD
(
ba£_addr
, 0x001E) & 0x000000FF) ;

572 
FLASH_WR
(
ba£_addr
, 0, 
NOR_RESET_CMD
);

574 (
	gid
);

579 #ifde‡
LLD_CONFIG_REG_CMD_3


587 
	gŒd_SëC⁄figRegCmd


589 
FLASHDATA
 * 
	gba£_addr
,

590 
FLASHDATA
 
	gvÆue
,

591 
FLASHDATA
 
	gvÆue1


595 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

596 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

597 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_SET_CONFIG_CMD
);

599 
FLASH_WR
(
ba£_addr
, 0, 
vÆue
);

600 
FLASH_WR
(
ba£_addr
, 1, 
vÆue1
);

611 
FLASHDATA
 
	gŒd_RódC⁄figRegCmd


613 
FLASHDATA
 * 
	gba£_addr
,

614 
FLASHDATA
 
	goff£t


618 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_UNLOCK_DATA1
);

619 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR2
, 
NOR_UNLOCK_DATA2
);

621 
FLASH_WR
(
ba£_addr
, 
LLD_UNLOCK_ADDR1
, 
NOR_READ_CONFIG_CMD
);

622 (
FLASH_RD
(
ba£_addr
, 
off£t
));

627 #ifde‡
LLD_POLL_TOGGLE


628 #ifde‡
LLD_DEV_FLASH


651 
DEVSTATUS
 
	gŒd_Pﬁl


653 
FLASHDATA
 * 
	gba£_addr
,

654 
ADDRESS
 
	goff£t
,

655 
FLASHDATA
 *
	gexp_d©a_±r
,

656 
FLASHDATA
 *
	ga˘_d©a_±r
,

657 
POLLING_TYPE
 
	gpﬁlög_ty≥


660 
DEVSTATUS
 
	gdev_°©us
;

661 
	gpﬁlög_cou¡î
 = 0xFFFFFFFF;

665 
	gpﬁlög_cou¡î
--;

666 
	gdev_°©us
 = 
Œd_SètusGë
(
ba£_addr
, 
off£t
);

667 } (
	gdev_°©us
 =
DEV_BUSY
Ë&& 
pﬁlög_cou¡î
);

671 if(
	gdev_°©us
 !
DEV_NOT_BUSY
) {

672 #ifde‡
LLD_WRITE_BUFFER_OP


673 if(
dev_°©us
 =
DEV_WRITE_BUFFER_ABORT
) {

674 
Œd_log
(
NOR_POLL_ERR1
);

675 
Œd_WrôeBuf„rAb‹tRe£tCmd
(
ba£_addr
);

677 
Œd_log
(
NOR_POLL_ERR2
);

679 
FLASH_WR
(
ba£_addr
, 0, 
NOR_RESET_CMD
);

683 
Œd_log
(
NOR_POLL_ERR3
);

684 (
	gdev_°©us
);

686 
	gLLD_LOCK
;

688 *
	ga˘_d©a_±r
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

691 if((*
	gexp_d©a_±r
 & 
	gLLD_DB_READ_MASK
Ë=(*
a˘_d©a_±r
 & 
LLD_DB_READ_MASK
)) {

692 
dev_°©us
 = 
DEV_NOT_BUSY
;

693 
	gLLD_UNLOCK
;

694 (
	gdev_°©us
);

696 
	gdev_°©us
 = 
DEV_VERIFY_ERROR
;

697 
Œd_log
(
NOR_POLL_ERR4
);

698 
	gLLD_UNLOCK
;

699 (
	gdev_°©us
);

707 #ifde‡
LLD_STATUS_GET


717 
DEVSTATUS
 
	gŒd_SètusGë


719 
FLASHDATA
 * 
	gba£_addr
,

720 
ADDRESS
 
	goff£t


724 
FLASHDATA
 
	gdq2_toggÀs
;

725 
FLASHDATA
 
	gdq6_toggÀs
;

726 
FLASHDATA
 
	g°©us_ªad_1
;

727 
FLASHDATA
 
	g°©us_ªad_2
;

728 
FLASHDATA
 
	g°©us_ªad_3
;

730 
	g°©us_ªad_1
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

731 
	g°©us_ªad_2
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

732 
	g°©us_ªad_3
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

735 
	gdq6_toggÀs
 = ((
°©us_ªad_1
 ^ 
°©us_ªad_2
) &

736 (
°©us_ªad_2
 ^ 
°©us_ªad_3
) &

737 
DQ6_MASK
 );

740 
	gdq2_toggÀs
 = ((
°©us_ªad_1
 ^ 
°©us_ªad_2
) &

741 (
°©us_ªad_2
 ^ 
°©us_ªad_3
) &

742 
DQ2_MASK
 );

744 i‡(
	gdq6_toggÀs
) {

747 i‡((!
	gdq2_toggÀs
) &&

748 ((
	gDQ6_TGL_DQ1_MASK
 & 
	g°©us_ªad_1
Ë=
DQ6_TGL_DQ1_MASK
)

749 #ifde‡
S29GLxxxP


750 && (
FLSTATEOP
 =
FLSTATE_WRITEBUFFER
)

751 && (
g_wrôebuf„r_£˘‹
 =(
off£t
 / 
LLD_SECTOR_SIZE
))

754  
DEV_WRITE_BUFFER_ABORT
;

759 i‡((
	gDQ6_TGL_DQ5_MASK
 & 
	g°©us_ªad_1
Ë=
DQ6_TGL_DQ5_MASK
 ) {

760  
DEV_EXCEEDED_TIME_LIMITS
;

764  
	gDEV_BUSY
;

767 
	g°©us_ªad_1
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

768 
	g°©us_ªad_2
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

771 i‡((((
	g°©us_ªad_1
 ^ 
	g°©us_ªad_2
Ë& 
	gDQ2_MASK
) == 0)

772 #ifde‡
S29GLxxxP


773 && (
g_su•íd_°©e
 =
FLRESUME
)

776  
DEV_NOT_BUSY
;

778 #ifde‡
S29GLxxxP


779 i‡–(
	gg_su•íd_°©e
 =
FLSUSPEND
) &&

780 (
g_su•íd_£˘‹
 !(
off£t
 / 
LLD_SECTOR_SIZE
))

782  
DEV_NOT_BUSY
;

785  
	gDEV_SUSPEND
;

798 
	gŒd_SètusCÀ¨


800 
FLASHDATA
 * 
	gba£_addr
,

801 
ADDRESS
 
	goff£t


804 
FLASHDATA
 
	g°©us_ªg
;

806 
	g°©us_ªg
 = 
Œd_SètusGëReg
(
ba£_addr
, 
off£t
);

809 if–((
	g°©us_ªg
 & 
	gDEV_RDY_MASK
Ë=
DEV_RDY_MASK
) &&

810 ((
°©us_ªg
 & 
DEV_PROGRAM_MASK
) == DEV_PROGRAM_MASK) &&

811 ((
°©us_ªg
 & 
DEV_ERASE_MASK
) != DEV_ERASE_MASK)

813 #ifde‡
LLD_WRITE_BUFFER_CMD_1


814 
Œd_WrôeBuf„rAb‹tRe£tCmd
(
ba£_addr
);

817 
Œd_Re£tCmd
(
ba£_addr
);

830 
FLASHDATA
 
	gŒd_SètusGëReg


832 
FLASHDATA
 * 
	gba£_addr
,

833 
ADDRESS
 
	goff£t


836 
FLASHDATA
 
	g£˘‹_¥Ÿe˘ed
 = 0x0;

837 
FLASHDATA
 
	g°©us_ªg
 = 0x0000;

838 
DEVSTATUS
 
	g°©us
;

840 
	g°©us
 = 
Œd_SètusGë
(
ba£_addr
, 
off£t
);

842 if(
	g°©us
 =
DEV_NOT_BUSY
) {

843 
°©us_ªg
 |
DEV_RDY_MASK
;

844 } if(
	g°©us
 =
DEV_WRITE_BUFFER_ABORT
) {

845 
°©us_ªg
 |
DEV_RDY_MASK
;

846 
	g°©us_ªg
 |
DEV_PROGRAM_MASK
;

847 } if(
	g°©us
 =
DEV_EXCEEDED_TIME_LIMITS
) {

848 
°©us_ªg
 |
DEV_RDY_MASK
;

849 
	g°©us_ªg
 |
DEV_PROGRAM_MASK
;

850 
	g°©us_ªg
 |
DEV_ERASE_MASK
;

851 } if(
	g°©us
 =
DEV_SUSPEND
) {

852 
°©us_ªg
 |
DEV_RDY_MASK
;

853 
	g°©us_ªg
 |
DEV_ERASE_SUSP_MASK
;

856 if((
	g°©us
 !
DEV_BUSY
Ë&& (
°©us
 !
DEV_WRITE_BUFFER_ABORT
)) {

857 #ifde‡
LLD_AUTOSELECT_CMD


859 
Œd_Auto£À˘E¡ryCmd
(
ba£_addr
);

861 
	goff£t
 &= ~(0xFF);

862 #i‚de‡
LLD_CONFIGURATION_X8X16_AS_X8


863 #i‚de‡
LLD_CONFIGURATION_X8_AS_X8


864 
	goff£t
 |= 0x02;

866 
	goff£t
 |= 0x04;

869 
	goff£t
 |= 0x04;

871 
	g£˘‹_¥Ÿe˘ed
 = (
FLASH_RD
(
ba£_addr
, 
off£t
));

873 
Œd_Auto£À˘ExôCmd
(
ba£_addr
);

877 if(
	g£˘‹_¥Ÿe˘ed
 == 0x1) {

878 
°©us_ªg
 |
DEV_SEC_LOCK_MASK
;

881  
	g°©us_ªg
;

886 #ifde‡
LLD_READ_OP


894 
FLASHDATA
 
	gŒd_RódOp


896 
FLASHDATA
 * 
	gba£_addr
,

897 
ADDRESS
 
	goff£t


900 
FLASHDATA
 
	gd©a
;

902 
	gLLD_LOCK
;

903 
	gd©a
 = 
FLASH_RD
(
ba£_addr
, 
off£t
);

904 
	gLLD_UNLOCK
;

906 (
	gd©a
);

910 #ifde‡
LLD_WRITE_BUFFER_OP


936 #ifde‡
LLD_STATUS_REG


939 
DEVSTATUS
 
	gŒd_WrôeBuf„rProgømOp


941 
FLASHDATA
 * 
	gba£_addr
,

942 
ADDRESS
 
	goff£t
,

943 
WORDCOUNT
 
	gw‹d_cou¡
,

944 
FLASHDATA
 *
	gd©a_buf


947 
DEVSTATUS
 
	g°©us
;

948 
FLASHDATA
 
	gwrôe_d©a
 = 0;

949 
FLASHDATA
 
	gªad_d©a
 = 0;

950 
ADDRESS
 
	gœ°_lﬂded_addr
;

951 
ADDRESS
 
	gcuºít_off£t
;

952 
ADDRESS
 
	gíd_off£t
;

953 
FLASHDATA
 
	gwcou¡
;

956 
	gcuºít_off£t
 = 
off£t
;

957 
	gíd_off£t
 = 
off£t
 + 
w‹d_cou¡
 - 1;

958 
	gœ°_lﬂded_addr
 = 
off£t
;

961 i‡(!
	gw‹d_cou¡
) {

962 (
	gDEV_NOT_BUSY
);

965 
	gLLD_LOCK
;

967 
Œd_WrôeToBuf„rCmd
(
ba£_addr
, 
off£t
);

970 
	gwcou¡
 = (
FLASHDATA
)
w‹d_cou¡
 - 1;

971 
	gwcou¡
 *
LLD_DEV_MULTIPLIER
;

973 
udñay
(30);

974 
FLASH_WR
(
ba£_addr
, 
off£t
, 
wcou¡
);

977 
	gcuºít_off£t
 <
íd_off£t
) {

979 
œ°_lﬂded_addr
 = 
cuºít_off£t
;

980 
	gwrôe_d©a
 = *
d©a_buf
;

981 
udñay
(10);

984 
FLASH_WR
(
ba£_addr
, 
cuºít_off£t
++, *
d©a_buf
++);

985 
udñay
(20);

989 
Œd_ProgømBuf„rToFœshCmd
(
ba£_addr
, 
œ°_lﬂded_addr
);

990 
	gLLD_UNLOCK
;

992 
udñay
(20);

993 
	g°©us
 = 
Œd_Pﬁl
(
ba£_addr
, 
œ°_lﬂded_addr
, &
wrôe_d©a
,

994 &
ªad_d©a
, 
LLD_P_POLL_WRT_BUF_PGM
);

996 (
	g°©us
);

1001 #ifde‡
LLD_PROGRAM_OP


1012 #ifde‡
LLD_STATUS_REG


1014 
DEVSTATUS
 
	gŒd_ProgømOp


1016 
FLASHDATA
 * 
	gba£_addr
,

1017 
ADDRESS
 
	goff£t
,

1018 
FLASHDATA
 
	gwrôe_d©a


1021 
FLASHDATA
 
	gªad_d©a
 = 0;

1022 
DEVSTATUS
 
	g°©us
;

1024 
	gLLD_LOCK
;

1025 
Œd_ProgømCmd
(
ba£_addr
, 
off£t
, &
wrôe_d©a
);

1026 
	gLLD_UNLOCK
;

1027 
	g°©us
 = 
Œd_Pﬁl
(
ba£_addr
, 
off£t
, &
wrôe_d©a
, &
ªad_d©a
, 
LLD_P_POLL_PGM
);

1028 (
	g°©us
);

1033 #ifde‡
LLD_SECTOR_ERASE_OP


1046 #ifde‡
LLD_STATUS_REG


1048 #ifde‡
LLD_DEV_FLASH


1049 
DEVSTATUS
 
	gŒd_Se˘‹Eø£Op


1051 
FLASHDATA
 * 
	gba£_addr
,

1052 
ADDRESS
 
	goff£t


1055 
FLASHDATA
 
	gex≥˘_d©a
 = (FLASHDATA)0xFFFFFFFF;

1056 
FLASHDATA
 
	ga˘uÆ_d©a
 = 0;

1057 
DEVSTATUS
 
	g°©us
;

1059 
	gt1
,
	gt2
;

1061 
	gLLD_LOCK
;

1062 
Œd_Se˘‹Eø£Cmd
(
ba£_addr
, 
off£t
);

1063 
	gLLD_UNLOCK
;

1068 
	gt1
=
gë_‰ì
();

1069 
	g°©us
 = 
Œd_Pﬁl
(
ba£_addr
, 
off£t
, &
ex≥˘_d©a
, &
a˘uÆ_d©a
, 
LLD_P_POLL_SEC_ERS
);

1070 
	gt2
=
gë_‰ì
();

1071 
¥ötf
("â %d %d %d \n",
t1
,
t2
,t2-t1);

1072 (
	g°©us
);

1079 #ifde‡
LLD_CHIP_ERASE_OP


1090 #ifde‡
LLD_STATUS_REG


1092 
DEVSTATUS
 
	gŒd_ChùEø£Op


1094 
FLASHDATA
 * 
	gba£_addr


1098 
DEVSTATUS
 
	g°©us
;

1099 
FLASHDATA
 
	gex≥˘_d©a
 = (FLASHDATA)0xFFFFFFFF;

1100 
FLASHDATA
 
	ga˘uÆ_d©a
 = 0;

1102 
	gLLD_LOCK
;

1103 
Œd_ChùEø£Cmd
(
ba£_addr
);

1104 
	gLLD_UNLOCK
;

1105 
	g°©us
 = 
Œd_Pﬁl
(
ba£_addr
, 0, &
ex≥˘_d©a
, &
a˘uÆ_d©a
, 
LLD_P_POLL_CHIP_ERS
);

1108 if(
	g°©us
 !
DEV_NOT_BUSY
)

1110 
FLASH_WR
(
ba£_addr
, 0, 
NOR_RESET_CMD
);

1111 (
	g°©us
);

1117 #ifde‡
LLD_MEMCPY_OP


1127 
DEVSTATUS
 
	gŒd_mem˝y


1129 
FLASHDATA
 * 
	gba£_addr
,

1130 
ADDRESS
 
	goff£t
,

1131 
WORDCOUNT
 
	gw‹d_˙t
,

1132 
FLASHDATA
 *
	gd©a_buf


1135 
ADDRESS
 
	gmask
 = 
LLD_BUFFER_SIZE
 - 1;

1136 
WORDCOUNT
 
	götwc
 = 
w‹d_˙t
;

1137 
DEVSTATUS
 
	g°©us
 = 
DEV_NOT_BUSY
;

1139 i‡(
	goff£t
 & 
	gmask
) {

1141 i‡(
	gw‹d_˙t
 < (
	gLLD_BUFFER_SIZE
 - (
	goff£t
 & 
	gmask
)) )

1142 
	götwc
 = 
w‹d_˙t
;

1144 
	götwc
 = 
LLD_BUFFER_SIZE
 - (
off£t
 & 
mask
);

1147 
	g°©us
 = 
Œd_WrôeBuf„rProgømOp
(
ba£_addr
, 
off£t
, 
ötwc
, 
d©a_buf
);

1148 i‡(
	g°©us
 !
DEV_NOT_BUSY
) {

1149 
Œd_log
(
NOR_MEMCPY_ERR1
);

1150 (
	g°©us
);

1153 
	goff£t
 +
ötwc
;

1154 
	gw‹d_˙t
 -
ötwc
;

1155 
	gd©a_buf
 +
ötwc
;

1156 i‡(
	gw‹d_˙t
 == 0) {

1157 (
°©us
);

1161 
	gw‹d_˙t
 >
LLD_BUFFER_SIZE
) {

1162 
°©us
 = 
Œd_WrôeBuf„rProgømOp
(
ba£_addr
, 
off£t
, 
LLD_BUFFER_SIZE
, 
d©a_buf
);

1163 i‡(
	g°©us
 !
DEV_NOT_BUSY
) {

1164 
Œd_log
(
NOR_MEMCPY_ERR2
);

1165 (
	g°©us
);

1168 
	goff£t
 +
LLD_BUFFER_SIZE
;

1169 
	gw‹d_˙t
 -
LLD_BUFFER_SIZE
;

1170 
	gd©a_buf
 +
LLD_BUFFER_SIZE
;

1172 i‡(
	gw‹d_˙t
 == 0) {

1173 (
°©us
);

1176 
	g°©us
 = 
Œd_WrôeBuf„rProgømOp
(
ba£_addr
, 
off£t
, 
w‹d_˙t
, 
d©a_buf
);

1177 (
	g°©us
);

1181 
	$Êash_ªad8
(
ADDRESS
 
addr
)

1183 
FLASHDATA
 *
ba£_addr
 = (FLASHDATA *)
FLASH_BASE_ADDR
;

1184 
ADDRESS
 
off£t
;

1185 
FLASHDATA
 
d©a
;

1186 
cda
;

1187 
ul⁄g
 
wp
 ;

1189 
wp
 = (
addr
 & ~(
LLD_PORT_WIDTH
 - 1));

1190 
off£t
 = ((
FLASHDATA
 *)
wp
 - 
ba£_addr
);

1192 
d©a
 = 
	`Œd_RódOp
(
ba£_addr
,
off£t
);

1194 i‡(
off£t
 & (
LLD_PORT_WIDTH
 - 1)) {

1195 
cda
 =(Ë
d©a
;

1197 
cda
 = ()(
d©a
>>8) ;

1199  
cda
;

1200 
	}
}

1202 
	$Êash_add_byã
 (
FLASHDATA
 *
cw‹d
, 
uch¨
 
c
)

1204 *
cw‹d
 = (*cw‹d << 8Ë| 
c
;

1205 
	}
}

1214 
	$Œd_wrôe
 ( 
ADDRESS
 
addr
, 
uch¨
 *
§c
, 
˙t
)

1216 
FLASHDATA
 *
ba£_addr
 = (FLASHDATA *)
FLASH_BASE_ADDR
;

1217 
DEVSTATUS
 
°©us
;

1218 
FLASHDATA
 
cw‹d
;

1219 
WORDCOUNT
 
w˙t
;

1220 
Æign
, 
i
;

1221 
uch¨
 
p‹twidth
 = 
LLD_PORT_WIDTH
;

1222 
wp
;

1223 
˝
;

1224 
˙t_bak
 = 
˙t
;

1225 
ADDRESS
 
off£t
 = 0;

1226 
FLASHDATA
 
wrôe_d©a
 = 0;

1227 
cd©a
 = 255;

1229 i‡(
˙t_bak
 == 0){

1234 
wp
 = 
addr
 & ~(
p‹twidth
 - 1);

1235 
Æign
 = 
addr
 - 
wp
;

1236 i‡(0 !
Æign
 ) {

1237 
cw‹d
 = 0;

1238 
˝
 = 
wp
;

1240 
i
 = 0; i < 
Æign
; ++i, ++
˝
) {

1241 
cd©a
 = 
	`Êash_ªad8
(
˝
);

1242 
	`Êash_add_byã
(&
cw‹d
, 
cd©a
);

1245 ; ((
i
 < 
p‹twidth
Ë&& (
˙t
 > 0)); i++) {

1246 
	`Êash_add_byã
(&
cw‹d
, *
§c
);

1247 
§c
++;

1248 
˙t
--;

1251 
off£t
 = (
FLASHDATA
 *)
wp
 - 
ba£_addr
;

1253 
°©us
 = 
	`Œd_ProgømOp
(
ba£_addr
, 
off£t
, 
cw‹d
);

1254 i‡(
DEV_NOT_BUSY
 !
°©us
) {

1255 
n‹_Êash_î∫o
 = 
°©us
;

1256 
	`Œd_log
(
NOR_WRITEFAIL_ERR1
);

1257  (
˙t_bak
-
˙t
);

1259 i‡(0 =
˙t
)

1260  
˙t_bak
;

1263 
addr
 = (add∏+ 
p‹twidth
 - 1) & ~(portwidth - 1);

1264 
off£t
 = (
FLASHDATA
 *)
addr
 - 
ba£_addr
;

1265 
w˙t
 = 
˙t
 / 
p‹twidth
;

1267 
°©us
 = 
	`Œd_mem˝y
(
ba£_addr
, 
off£t
, 
w˙t
, (
FLASHDATA
 *)
§c
);

1268 i‡(
DEV_NOT_BUSY
 !
°©us
) {

1269 
n‹_Êash_î∫o
 = 
°©us
;

1270 
	`Œd_log
(
NOR_WRITEFAIL_ERR2
);

1271  (
˙t_bak
-
˙t
);

1274 
˙t
 %
p‹twidth
;

1275 i‡(0 !
˙t
) {

1276 
wp
 = 
addr
 + (
w˙t
 * 
p‹twidth
);

1277 
off£t
 +
w˙t
;

1278 
§c
 +(
w˙t
 * 
p‹twidth
);

1279 
wrôe_d©a
 = 0;

1280 
i
 = 0; ((ò< 
˙t
) && (cnt > 0)); i++) {

1281 
	`Êash_add_byã
(&
wrôe_d©a
, *
§c
);

1282 
§c
++;

1283 
˙t
--;

1285 ; 
i
 < 
p‹twidth
; i++) {

1286 
cd©a
 = 
	`Êash_ªad8
(
wp
 + 
i
);

1287 
	`Êash_add_byã
(&
wrôe_d©a
, 
cd©a
);

1289 
°©us
 = 
	`Œd_ProgømOp
(
ba£_addr
, 
off£t
, 
wrôe_d©a
);

1290 i‡(
DEV_NOT_BUSY
 !
°©us
) {

1291 
n‹_Êash_î∫o
 = 
°©us
;

1292 
	`Œd_log
(
NOR_WRITEFAIL_ERR3
);

1293  (
˙t_bak
-
˙t
);

1296  
˙t_bak
-
˙t
;

1297 
	}
}

1307 
	$Œd_ªad
 ( 
ADDRESS
 
addr
 , 
uch¨
* 
buf
, 
˙t
 )

1309 
FLASHDATA
 * 
ba£_addr
 = (FLASHDATA *)
FLASH_BASE_ADDR
;

1310 
FLASHDATA
 
cw‹d
;

1311 
ADDRESS
 
off£t
;

1312 
Æn
, 
i
,
˙t_bak
,
˙t2
;

1313 
p‹twidth
 = 
LLD_PORT_WIDTH
;

1314 
wp
;

1315 
w˙t
 = 0;

1317 
˙t_bak
 = 
˙t
;

1319 
wp
 = (
addr
 & ~(
p‹twidth
 - 1));

1320 
Æn
 = 
addr
 - 
wp
;

1322 i‡(0 !
Æn
) {

1323 
i
 = 
Æn
; ((ò< 
p‹twidth
Ë&& (
˙t
 > 0)); i++) {

1324 *
buf
 = 
	`Êash_ªad8
(
addr
);

1325 
addr
++;

1326 
buf
++;

1327 
˙t
--;

1329 i‡(
˙t
 == 0)

1330  
˙t_bak
;

1332 
w˙t
 = 
˙t
 / 
p‹twidth
;

1333 
off£t
 = (
FLASHDATA
 *)
addr
 - 
ba£_addr
;

1335 
i
 = 0; i < 
w˙t
; i++) {

1336 
cw‹d
 = 
	`Œd_RódOp
(
ba£_addr
, 
off£t
);

1337 
off£t
++;

1338 *((
FLASHDATA
 *)
buf
Ë
cw‹d
;

1339 
buf
 +
p‹twidth
;

1340 
˙t
-=
p‹twidth
;

1343 
addr
 +(
w˙t
 * 
p‹twidth
);

1344 
˙t2
 = 
˙t
 % 
p‹twidth
;

1346 i‡(
˙t2
 != 0)

1347 
i
 = 0; i<
˙t2
; i++) {

1348 *
buf
++ = 
	`Êash_ªad8
(
addr
+
i
);

1349 
˙t
--;

1351  
˙t_bak
-
˙t
;

1352 
	}
}

1363 
	$Œd_îa£
(
no
, 
num
)

1365 
DEVSTATUS
 
ªt
;

1366 
i
;

1367 i‡(
no
 <0 || 
num
 <0 ||Ço>
SECTOR_NUM
|| (no+num)>SECTOR_NUM) {

1368 
	`Œd_log
(
NOR_PARA_ERR1
);

1372 if(
num
 < 
SECTOR_NUM
) {

1373  
i
=0; i<
num
; i++ ) {

1374 
ªt
 = 
	`Œd_Se˘‹Eø£Op
((
FLASHDATA
 *)
FLASH_BASE_ADDR
, (
no
+
i
)*
LLD_SECTOR_SIZE
);

1375 i‡(
ªt
 !
DEV_NOT_BUSY
) {

1376 
	`Œd_log
(
NOR_ERASEFAIL_ERR1
);

1381 
ªt
 = 
	`Œd_ChùEø£Op
((
FLASHDATA
 *)
FLASH_BASE_ADDR
);

1382 i‡(
ªt
 !
DEV_NOT_BUSY
) {

1383 
	`Œd_log
(
NOR_ERASEFAIL_ERR2
);

1388 
	}
}

	@driver/device/norflash/lld.h

34 #i‚de‡
__INC_H_Œdh


35 
	#__INC_H_Œdh


	)

37 
	~<libc/°dio.h
>

38 
	~<logh.h
>

40 #ifde‡
__˝lu•lus


45 
	#LLD_VERSION
 "13.1.1"

	)

49 
	tBYTE
;

50 
	tLLD_CHAR
;

51 
	tLLD_UINT16
;

52 
	tLLD_UINT32
;

53 
	tLLD_UINT64
;

54 
LLD_UINT32
 
	tADDRESS
;

55 
	tWORDCOUNT
;

56 
LLD_UINT32
 
	tul⁄g
;

57 
LLD_CHAR
 
	tuch¨
;

60 #i‚de‡
TRUE


61 
	#TRUE
 (1)

	)

63 #i‚de‡
FALSE


64 
	#FALSE
 (0)

	)

67 
	#SA_OFFSET_MASK
 0xFFFFF000

	)

70 
	#NOR_CFI_QUERY_CMD
 ((0x98)*
LLD_DEV_MULTIPLIER
)

	)

71 
	#NOR_CHIP_ERASE_CMD
 ((0x10)*
LLD_DEV_MULTIPLIER
)

	)

72 
	#NOR_ERASE_SETUP_CMD
 ((0x80)*
LLD_DEV_MULTIPLIER
)

	)

73 
	#NOR_RESET_CMD
 ((0xF0)*
LLD_DEV_MULTIPLIER
)

	)

74 
	#NOR_SECSI_SECTOR_ENTRY_CMD
 ((0x88)*
LLD_DEV_MULTIPLIER
)

	)

75 
	#NOR_SECTOR_ERASE_CMD
 ((0x30)*
LLD_DEV_MULTIPLIER
)

	)

76 
	#NOR_WRITE_BUFFER_LOAD_CMD
 ((0x25)*
LLD_DEV_MULTIPLIER
)

	)

77 
	#NOR_WRITE_BUFFER_PGM_CONFIRM_CMD
 ((0x29)*
LLD_DEV_MULTIPLIER
)

	)

78 
	#NOR_SET_CONFIG_CMD
 ((0xD0)*
LLD_DEV_MULTIPLIER
)

	)

79 
	#NOR_BIT_FIELD_CMD
 ((0xBF)*
LLD_DEV_MULTIPLIER
)

	)

81 
	#NOR_ERASE_SUSPEND_CMD
 ((0xB0)*
LLD_DEV_MULTIPLIER
)

	)

82 
	#NOR_ERASE_RESUME_CMD
 ((0x30)*
LLD_DEV_MULTIPLIER
)

	)

83 
	#NOR_PROGRAM_SUSPEND_CMD
 ((0x51)*
LLD_DEV_MULTIPLIER
)

	)

84 
	#NOR_PROGRAM_RESUME_CMD
 ((0x50)*
LLD_DEV_MULTIPLIER
)

	)

85 
	#NOR_STATUS_REG_READ_CMD
 ((0x70)*
LLD_DEV_MULTIPLIER
)

	)

86 
	#NOR_STATUS_REG_CLEAR_CMD
 ((0x71)*
LLD_DEV_MULTIPLIER
)

	)

87 
	#NOR_BLANK_CHECK_CMD
 ((0x33)*
LLD_DEV_MULTIPLIER
)

	)

90 
	#NOR_AUTOSELECT_CMD
 ((0x90)*
LLD_DEV_MULTIPLIER
)

	)

91 
	#NOR_PROGRAM_CMD
 ((0xA0)*
LLD_DEV_MULTIPLIER
)

	)

92 
	#NOR_SECSI_SECTOR_EXIT_SETUP_CMD
 ((0x90)*
LLD_DEV_MULTIPLIER
)

	)

93 
	#NOR_SECSI_SECTOR_EXIT_CMD
 ((0x00)*
LLD_DEV_MULTIPLIER
)

	)

94 
	#NOR_UNLOCK_BYPASS_ENTRY_CMD
 ((0x20)*
LLD_DEV_MULTIPLIER
)

	)

95 
	#NOR_UNLOCK_BYPASS_PROGRAM_CMD
 ((0xA0)*
LLD_DEV_MULTIPLIER
)

	)

96 
	#NOR_UNLOCK_BYPASS_RESET_CMD1
 ((0x90)*
LLD_DEV_MULTIPLIER
)

	)

97 
	#NOR_UNLOCK_BYPASS_RESET_CMD2
 ((0x00)*
LLD_DEV_MULTIPLIER
)

	)

98 
	#NOR_UNLOCK_DATA1
 ((0xAA)*
LLD_DEV_MULTIPLIER
)

	)

99 
	#NOR_UNLOCK_DATA2
 ((0x55)*
LLD_DEV_MULTIPLIER
)

	)

100 
	#NOR_SUSPEND_CMD
 ((0xB0)*
LLD_DEV_MULTIPLIER
)

	)

101 
	#NOR_RESUME_CMD
 ((0x30)*
LLD_DEV_MULTIPLIER
)

	)

102 
	#NOR_READ_CONFIG_CMD
 ((0xC6)*
LLD_DEV_MULTIPLIER
)

	)

103 
	#NOR_WRITE_BUFFER_ABORT_RESET_CMD
 ((0xF0)*
LLD_DEV_MULTIPLIER
)

	)

106 
	#PPB_PROTECTED
 (0*
LLD_DEV_MULTIPLIER
)

	)

107 
	#PPB_UNPROTECTED
 (1*
LLD_DEV_MULTIPLIER
)

	)

109 
	#WSXXX_LOCK_REG_ENTRY
 (0x40*
LLD_DEV_MULTIPLIER
)

	)

111 
	#WSXXX_LOCK_REG2_ENTRY
 (0x41*
LLD_DEV_MULTIPLIER
)

	)

112 
	#WSXXX_PSWD_PROT_CMD_ENTRY
 (0x60*
LLD_DEV_MULTIPLIER
)

	)

113 
	#WSXXX_PSWD_UNLOCK_1
 (0x25*
LLD_DEV_MULTIPLIER
)

	)

114 
	#WSXXX_PSWD_UNLOCK_2
 (0x03*
LLD_DEV_MULTIPLIER
)

	)

115 
	#WSXXX_PSWD_UNLOCK_3
 (0x29*
LLD_DEV_MULTIPLIER
)

	)

116 
	#WSXXX_PPB_ENTRY
 (0xC0*
LLD_DEV_MULTIPLIER
)

	)

117 
	#WSXXX_PPB_ERASE_CONFIRM
 (0x30*
LLD_DEV_MULTIPLIER
)

	)

118 
	#WSXXX_PPB_LOCK_ENTRY
 (0x50*
LLD_DEV_MULTIPLIER
)

	)

119 
	#WSXXX_DYB_ENTRY
 (0xE0*
LLD_DEV_MULTIPLIER
)

	)

120 
	#WSXXX_DYB_CLEAR
 (0x01*
LLD_DEV_MULTIPLIER
)

	)

122 
	#NOR_LOCK_REG_ENTRY
 (0x40*
LLD_DEV_MULTIPLIER
)

	)

123 
	#NOR_SECTOR_LOCK_CMD
 (0x60*
LLD_DEV_MULTIPLIER
)

	)

124 
	#NOR_LOAD_SECTOR_ADR
 (0x61*
LLD_DEV_MULTIPLIER
)

	)

125 
	#NOR_SECTOR_UNLOCK_ADR6
 (0x40*
LLD_DEV_MULTIPLIER
)

	)

126 
	#NOR_SECTOR_LOCK_ADR6
 ((~
NOR_SECTOR_UNLOCK_ADR6
)*
LLD_DEV_MULTIPLIER
)

	)

131 
LLD_P_POLL_NONE
 = 0,

132 
LLD_P_POLL_PGM
,

133 
LLD_P_POLL_WRT_BUF_PGM
,

134 
LLD_P_POLL_SEC_ERS
,

135 
LLD_P_POLL_CHIP_ERS
,

136 
LLD_P_POLL_RESUME
,

137 
LLD_P_POLL_BLANK


138 } 
	tPOLLING_TYPE
;

142 
DEV_STATUS_UNKNOWN
 = 0,

143 
DEV_NOT_BUSY
,

144 
DEV_BUSY
,

145 
DEV_EXCEEDED_TIME_LIMITS
,

146 
DEV_SUSPEND
,

147 
DEV_WRITE_BUFFER_ABORT
,

148 
DEV_STATUS_GET_PROBLEM
,

149 
DEV_VERIFY_ERROR
,

150 
DEV_BYTES_PER_OP_WRONG
,

151 
DEV_ERASE_ERROR
,

152 
DEV_PROGRAM_ERROR
,

153 
DEV_SECTOR_LOCK
,

154 
DEV_PROGRAM_SUSPEND
,

155 
DEV_PROGRAM_SUSPEND_ERROR
,

156 
DEV_ERASE_SUSPEND
,

157 
DEV_ERASE_SUSPEND_ERROR
,

158 
DEV_BUSY_IN_OTHER_BANK
,

159 
DEV_LOCK_FAIL
,

160 
DEV_UNLOCK_FAIL


161 } 
	tDEVSTATUS
;

163 
	~"Œd_èrgë_•ecific.h
"

167 
FLSTATE_NOT_BUSY
 = 0,

168 
FLSTATE_ERASE
 = 1,

169 
FLSTATE_WRITEBUFFER
 = 2

170 } 
	tFLSTATE
;

172 
	#FLRESUME
 0

	)

173 
	#FLSUSPEND
 1

	)

175 
	#DEV_RDY_MASK
 (0x80*
LLD_DEV_MULTIPLIER
Ë

	)

176 
	#DEV_ERASE_SUSP_MASK
 (0x40*
LLD_DEV_MULTIPLIER
Ë

	)

177 
	#DEV_ERASE_MASK
 (0x20*
LLD_DEV_MULTIPLIER
Ë

	)

178 
	#DEV_PROGRAM_MASK
 (0x10*
LLD_DEV_MULTIPLIER
Ë

	)

179 
	#DEV_RFU_MASK
 (0x08*
LLD_DEV_MULTIPLIER
Ë

	)

180 
	#DEV_PROGRAM_SUSP_MASK
 (0x04*
LLD_DEV_MULTIPLIER
Ë

	)

181 
	#DEV_SEC_LOCK_MASK
 (0x02*
LLD_DEV_MULTIPLIER
Ë

	)

182 
	#DEV_BANK_MASK
 (0x01*
LLD_DEV_MULTIPLIER
Ë

	)

187 
	#FLASH_OFFSET
(
b
,
o
Ë(*(–(vﬁ©ûê
FLASHDATA
*)(bËË+ (o)))

	)

189 #ifde‡
LLD_DEV_FLASH


190 #ifde‡
TRACE


191 
	#FLASH_WR
(
b
,
o
,
d
Ë
	`FœshWrôe
–b,o,d )

	)

192 
	#FLASH_RD
(
b
,
o
Ë
	`FœshRód
(b,o)

	)

194 #ifde‡
EXTEND_ADDR


195 
	#FLASH_WR
(
b
,
o
,
d
Ë
	`FœshWrôe_Exãnd
(b,o,d)

	)

196 
	#FLASH_RD
(
b
,
o
Ë
	`FœshRód_Exãnd
(b,o)

	)

198 #ifde‡
USER_SPECIFIC_CMD


199 
	#FLASH_WR
(
b
,
o
,
d
Ë
	`FœshWrôeU£rCmd
((
ADDRESS
Ë((vﬁ©ûê
FLASHDATA
 *)(bË+ (ADDRESS)o),d)

	)

200 
	#FLASH_RD
(
b
,
o
Ë
	`FœshRódU£rCmd
((
ADDRESS
Ë((vﬁ©ûê
FLASHDATA
 *)(bË+ (ADDRESS)o))

	)

203 
	#FLASH_WR
(
b
,
o
,
d
Ë
	`FLASH_OFFSET
((b),(o)Ë(d)

	)

204 
	#FLASH_RD
(
b
,
o
Ë
	`FLASH_OFFSET
((b),(o))

	)

210 
	~"Œd_dev_sim.h
"

214 #ifde‡ 
LLD_CONFIGURATION_X16_AS_X16


216 
	#LLD_DEV_MULTIPLIER
 0x00000001

	)

217 
	#LLD_DB_READ_MASK
 0x0000FFFF

	)

218 
	#LLD_DEV_READ_MASK
 0x0000FFFF

	)

219 
	#LLD_UNLOCK_ADDR1
 0x00000555

	)

220 
	#LLD_UNLOCK_ADDR2
 0x000002AA

	)

221 
	#LLD_BYTES_PER_OP
 0x00000002

	)

222 #ifde‡
S29WSxxxN


223 
	#LLD_CFI_UNLOCK_ADDR1
 0x00000555

	)

225 
	#LLD_CFI_UNLOCK_ADDR1
 0x00000055

	)

227 
LLD_UINT16
 
	tFLASHDATA
;

233 #ifde‡
LLD_READ_OP


234 
FLASHDATA
 
Œd_RódOp


236 
FLASHDATA
 * 
ba£_addr
,

237 
ADDRESS
 
off£t


241 #ifde‡
LLD_WRITE_BUFFER_OP


242 
DEVSTATUS
 
Œd_WrôeBuf„rProgømOp


244 
FLASHDATA
 * 
ba£_addr
,

245 
ADDRESS
 
off£t
,

246 
WORDCOUNT
 
w‹d_˙t
,

247 
FLASHDATA
 *
d©a_buf


251 #ifde‡
LLD_PROGRAM_OP


252 
DEVSTATUS
 
Œd_ProgømOp


254 
FLASHDATA
 * 
ba£_addr
,

255 
ADDRESS
 
off£t
,

256 
FLASHDATA
 
wrôe_d©a


260 #ifde‡
LLD_SECTOR_ERASE_OP


261 
DEVSTATUS
 
Œd_Se˘‹Eø£Op


263 
FLASHDATA
 * 
ba£_addr
,

264 
ADDRESS
 
off£t


268 #ifde‡
LLD_CHIP_ERASE_OP


269 
DEVSTATUS
 
Œd_ChùEø£Op


271 
FLASHDATA
 * 
ba£_addr


275 
Œd_GëVîsi⁄
–
LLD_CHAR
 
vîsi⁄Så
[]);

277 
Œd_InôCmd


279 
FLASHDATA
 * 
ba£_addr


282 
Œd_Re£tCmd


284 
FLASHDATA
 * 
ba£_addr


287 #ifde‡
LLD_SECTOR_ERASE_CMD_1


288 
Œd_Se˘‹Eø£Cmd


290 
FLASHDATA
 * 
ba£_addr
,

291 
ADDRESS
 
off£t


294 #ifde‡
LLD_SECTOR_ERASE_CMD_2


295 
Œd_Se˘‹Eø£Cmd


297 
FLASHDATA
 * 
ba£_addr
,

298 
ADDRESS
 
off£t


302 #ifde‡
LLD_CHIP_ERASE_CMD_1


303 
Œd_ChùEø£Cmd


305 
FLASHDATA
 * 
ba£_addr


309 #ifde‡
LLD_PROGRAM_CMD_1


310 
Œd_ProgømCmd


312 
FLASHDATA
 * 
ba£_addr
,

313 
ADDRESS
 
off£t
,

314 
FLASHDATA
 *
pgm_d©a_±r


317 #ifde‡
LLD_PROGRAM_CMD_2


318 
Œd_ProgømCmd


320 
FLASHDATA
 * 
ba£_addr
,

321 
ADDRESS
 
off£t
,

322 
FLASHDATA
 *
pgm_d©a_±r


326 #ifde‡
LLD_SECSI_SECTOR_CMD_1


327 
Œd_SecSiSe˘‹ExôCmd


329 
FLASHDATA
 * 
ba£_addr


331 
Œd_SecSiSe˘‹E¡ryCmd


333 
FLASHDATA
 * 
ba£_addr


336 #i‡
deföed
(
LLD_SECSI_SECTOR_CMD_2
Ë|| deföed(
LLD_SECSI_SECTOR_CMD_3
)

337 
Œd_SecSiSe˘‹ExôCmd


339 
FLASHDATA
 * 
ba£_addr


341 
Œd_SecSiSe˘‹E¡ryCmd


343 
FLASHDATA
 * 
ba£_addr
,

344 
ADDRESS
 
off£t


348 #ifde‡
LLD_WRITE_BUFFER_CMD_1


349 
Œd_WrôeToBuf„rCmd


351 
FLASHDATA
 * 
ba£_addr
,

352 
ADDRESS
 
off£t


355 
Œd_ProgømBuf„rToFœshCmd


357 
FLASHDATA
 * 
ba£_addr
,

358 
ADDRESS
 
off£t


360 
Œd_WrôeBuf„rAb‹tRe£tCmd


362 
FLASHDATA
 * 
ba£_addr


366 #ifde‡
LLD_WRITE_BUFFER_CMD_2


367 
Œd_WrôeToBuf„rCmd


369 
FLASHDATA
 * 
ba£_addr
,

370 
ADDRESS
 
off£t


373 
Œd_ProgømBuf„rToFœshCmd


375 
FLASHDATA
 * 
ba£_addr
,

376 
ADDRESS
 
off£t


381 #ifde‡
LLD_CFI_CMD_1


382 
FLASHDATA
 
	gŒd_RódCfiW‹d


384 
FLASHDATA
 * 
	gba£_addr
,

385 
ADDRESS
 
	goff£t


387 
Œd_CfiExôCmd


389 
FLASHDATA
 * 
ba£_addr


391 
Œd_CfiE¡ryCmd


393 
FLASHDATA
 * 
ba£_addr


396 #ifde‡
LLD_CFI_CMD_2


397 
FLASHDATA
 
	gŒd_RódCfiW‹d


399 
FLASHDATA
 * 
	gba£_addr
,

400 
ADDRESS
 
	goff£t


402 
Œd_CfiExôCmd


404 
FLASHDATA
 * 
ba£_addr


406 
Œd_CfiE¡ryCmd


408 
FLASHDATA
 * 
ba£_addr
,

409 
ADDRESS
 
off£t


413 #ifde‡
LLD_STATUS_REG


414 #ifde‡
LLD_STATUS_GET


415 
DEVSTATUS
 
	gŒd_SètusGë


417 
FLASHDATA
 * 
	gba£_addr
,

418 
ADDRESS
 
	goff£t


421 #ifde‡
LLD_SIMULTANEOUS_OP_NONE


422 
	gŒd_SètusCÀ¨


424 
FLASHDATA
 * 
	gba£_addr


427 
	gŒd_SètusCÀ¨


429 
FLASHDATA
 * 
	gba£_addr
,

430 
ADDRESS
 
	goff£t


434 
FLASHDATA
 
	gŒd_SètusGëReg


436 
FLASHDATA
 * 
	gba£_addr
,

437 
ADDRESS
 
	goff£t


441 #ifde‡
LLD_STATUS_GET


443 
DEVSTATUS
 
	gŒd_SètusGë


445 
FLASHDATA
 * 
	gba£_addr
,

446 
ADDRESS
 
	goff£t


449 
	gŒd_SètusCÀ¨


451 
FLASHDATA
 * 
	gba£_addr
,

452 
ADDRESS
 
	goff£t


455 
FLASHDATA
 
	gŒd_SètusGëReg


457 
FLASHDATA
 * 
	gba£_addr
,

458 
ADDRESS
 
	goff£t


463 #ifde‡
LLD_MEMCPY_OP


464 
DEVSTATUS
 
	gŒd_mem˝y


466 
FLASHDATA
 * 
	gba£_addr
,

467 
ADDRESS
 
	goff£t
,

468 
WORDCOUNT
 
	gw‹ds_˙t
,

469 
FLASHDATA
 *
	gd©a_buf


473 #ifde‡
LLD_STATUS_REG


474 #ifde‡
LLD_SIMULTANEOUS_OP_NONE


475 
Œd_SètusRegCÀ¨Cmd


477 
FLASHDATA
 * 
ba£_addr


480 
Œd_SètusRegRódCmd


482 
FLASHDATA
 * 
ba£_addr


485 
Œd_SètusRegCÀ¨Cmd


487 
FLASHDATA
 * 
ba£_addr
,

488 
ADDRESS
 
off£t


491 
Œd_SètusRegRódCmd


493 
FLASHDATA
 * 
ba£_addr
,

494 
ADDRESS
 
off£t


499 #ifde‡
LLD_UNLOCKBYPASS_CMD


500 
Œd_U∆ockBy∑ssE¡ryCmd


502 
FLASHDATA
 * 
ba£_addr


505 
Œd_U∆ockBy∑ssProgømCmd


507 
FLASHDATA
 * 
ba£_addr
,

508 
ADDRESS
 
off£t
,

509 
FLASHDATA
 *
pgm_d©a_±r


512 
Œd_U∆ockBy∑ssRe£tCmd


514 
FLASHDATA
 * 
ba£_addr


518 #ifde‡
LLD_AUTOSELECT_CMD


519 
Œd_Auto£À˘E¡ryCmd


521 
FLASHDATA
 * 
ba£_addr


524 
Œd_Auto£À˘ExôCmd


526 
FLASHDATA
 * 
ba£_addr


530 #ifde‡
LLD_AUTOSELECT_CMD_2


531 
	gŒd_Auto£À˘E¡ryCmd


533 
FLASHDATA
 * 
	gba£_addr
,

534 
ADDRESS
 
	goff£t


537 
	gŒd_Auto£À˘ExôCmd


539 
FLASHDATA
 * 
	gba£_addr


543 #ifde‡
LLD_SUSP_RESUME_CMD_1


544 
Œd_ProgømSu•ídCmd


546 
FLASHDATA
 * 
ba£_addr
,

547 
ADDRESS
 
off£t


550 
Œd_Eø£Su•ídCmd


552 
FLASHDATA
 * 
ba£_addr
,

553 
ADDRESS
 
off£t


556 
Œd_Eø£ResumeCmd


558 
FLASHDATA
 * 
ba£_addr
,

559 
ADDRESS
 
off£t


562 
Œd_ProgømResumeCmd


564 
FLASHDATA
 * 
ba£_addr
,

565 
ADDRESS
 
off£t


568 #ifde‡
LLD_SUSP_RESUME_CMD_2


569 
Œd_ProgømSu•ídCmd


571 
FLASHDATA
 * 
ba£_addr


574 
Œd_Eø£Su•ídCmd


576 
FLASHDATA
 * 
ba£_addr


579 
Œd_Eø£ResumeCmd


581 
FLASHDATA
 * 
ba£_addr


584 
Œd_ProgømResumeCmd


586 
FLASHDATA
 * 
ba£_addr


589 #ifde‡
LLD_SUSP_RESUME_OP_2


590 
DEVSTATUS
 
Œd_Eø£Su•ídOp


592 
FLASHDATA
 * 
ba£_addr


594 
DEVSTATUS
 
Œd_ProgømSu•ídOp


596 
FLASHDATA
 * 
ba£_addr


600 #ifde‡
LLD_POLL_TOGGLE


601 
DEVSTATUS
 
Œd_Pﬁl


603 
FLASHDATA
 * 
ba£_addr
,

604 
ADDRESS
 
off£t
,

605 
FLASHDATA
 *
exp_d©a_±r
,

606 
FLASHDATA
 *
a˘_d©a_±r
,

607 
POLLING_TYPE
 
pﬁlög_ty≥


610 #ifde‡
LLD_POLL_STATUS


611 
FLASHDATA
 
Œd_Pﬁl


613 
FLASHDATA
 * 
ba£_addr
,

614 
ADDRESS
 
off£t


618 #ifde‡
LLD_GET_ID_CMD_1


619 
Œd_GëDevi˚Id


621 
FLASHDATA
 * 
ba£_addr


624 #ifde‡
LLD_GET_ID_CMD_2


625 
Œd_GëDevi˚Id


627 
FLASHDATA
 * 
ba£_addr
,

628 
ADDRESS
 
off£t


632 #ifde‡
LLD_CONFIG_REG_CMD_1


633 
Œd_SëC⁄figRegCmd


635 
FLASHDATA
 * 
ba£_addr
,

636 
FLASHDATA
 
vÆue


639 
FLASHDATA
 
Œd_RódC⁄figRegCmd


641 
FLASHDATA
 * 
ba£_addr


644 #ifde‡
LLD_CONFIG_REG_CMD_2


645 
Œd_SëC⁄figRegCmd


647 
FLASHDATA
 * 
ba£_addr
,

648 
ADDRESS
 
off£t
,

649 
FLASHDATA
 
vÆue


652 
FLASHDATA
 
Œd_RódC⁄figRegCmd


654 
FLASHDATA
 * 
ba£_addr
,

655 
ADDRESS
 
off£t


658 #ifde‡
LLD_CONFIG_REG_CMD_3


659 
Œd_SëC⁄figRegCmd


661 
FLASHDATA
 * 
ba£_addr
,

662 
FLASHDATA
 
vÆue
,

663 
FLASHDATA
 
vÆue1


666 
FLASHDATA
 
Œd_RódC⁄figRegCmd


668 
FLASHDATA
 * 
ba£_addr
,

669 
FLASHDATA
 
off£t


673 #i‡(
deföed
 
LLD_BLANK_CHK_CMD
)

674 
Œd_BœnkCheckCmd


676 
FLASHDATA
 * 
ba£_addr
,

677 
ADDRESS
 
off£t


681 #i‡(
deföed
 
LLD_BLANK_CHK_CMD
)

682 
DEVSTATUS
 
Œd_BœnkCheckOp


684 
FLASHDATA
 * 
ba£_addr
,

685 
ADDRESS
 
off£t


689 #ifde‡
LLD_DELAY_MSEC


693 
DñayMûli£c⁄ds


695 
mûli£c⁄ds


698 
DñayMi¸o£c⁄ds


700 
mi¸o£c⁄ds


704 #ifde‡
TRACE


705 
FœshWrôe
(
FLASHDATA
 * 
addr
, 
ADDRESS
 
off£t
, FLASHDATA 
d©a
);

706 
FLASHDATA
 
FœshRód
(FLASHDATA * 
addr
, 
ADDRESS
 
off£t
);

709 #ifde‡
EXTEND_ADDR


710 
FœshWrôe_Exãnd
(
FLASHDATA
 *
ba£_addr
, 
ADDRESS
 
off£t
, FLASHDATA 
d©a
);

711 
FLASHDATA
 
FœshRód_Exãnd
(FLASHDATA *
ba£_addr
, 
ADDRESS
 
off£t
);

714 #ifde‡
USER_SPECIFIC_CMD


715 
FœshWrôeU£rCmd
(
ADDRESS
 
addªss
, 
FLASHDATA
 
d©a
);

716 
FLASHDATA
 
FœshRódU£rCmd
(
ADDRESS
 
addªss
);

722 #ifde‡
LLD_LOCKREG2_ENTRY


723 
	gŒd_LockReg2E¡ryCmd


725 
FLASHDATA
 * 
	gba£_addr


729 #ifde‡
LLD_LOCKREG_CMD_1


730 
Œd_LockRegE¡ryCmd


732 
FLASHDATA
 * 
ba£_addr


734 
Œd_LockRegBôsProgømCmd


736 
FLASHDATA
 * 
ba£_addr
,

737 
FLASHDATA
 
vÆue


739 
FLASHDATA
 
Œd_LockRegBôsRódCmd


741 
FLASHDATA
 * 
ba£_addr


743 
Œd_LockRegExôCmd


745 
FLASHDATA
 * 
ba£_addr


749 #ifde‡
LLD_LOCKREG_CMD_2


750 
Œd_SSRLockRegE¡ryCmd


752 
FLASHDATA
 * 
ba£_addr
,

753 
ADDRESS
 
off£t


755 
Œd_SSRLockRegBôsProgømCmd


757 
FLASHDATA
 * 
ba£_addr
,

758 
ADDRESS
 
off£t
,

759 
FLASHDATA
 
vÆue


761 
FLASHDATA
 
Œd_SSRLockRegBôsRódCmd


763 
FLASHDATA
 * 
ba£_addr
,

764 
ADDRESS
 
off£t


766 
Œd_SSRLockRegExôCmd


768 
FLASHDATA
 * 
ba£_addr


772 #ifde‡
LLD_PASSWORD_CMD


773 
Œd_Passw‹dPrŸe˘i⁄E¡ryCmd


775 
FLASHDATA
 * 
ba£_addr


777 
Œd_Passw‹dPrŸe˘i⁄ProgømCmd


779 
FLASHDATA
 * 
ba£_addr
,

780 
ADDRESS
 
off£t
,

781 
FLASHDATA
 
pwd


783 
Œd_Passw‹dPrŸe˘i⁄RódCmd


785 
FLASHDATA
 * 
ba£_addr
,

786 
FLASHDATA
 *
pwd0
,

787 
FLASHDATA
 *
pwd1
,

788 
FLASHDATA
 *
pwd2
,

789 
FLASHDATA
 *
pwd3


791 
Œd_Passw‹dPrŸe˘i⁄U∆ockCmd


793 
FLASHDATA
 * 
ba£_addr
,

794 
FLASHDATA
 
pwd0
,

795 
FLASHDATA
 
pwd1
,

796 
FLASHDATA
 
pwd2
,

797 
FLASHDATA
 
pwd3


799 
Œd_Passw‹dPrŸe˘i⁄ExôCmd


801 
FLASHDATA
 * 
ba£_addr


805 #ifde‡
LLD_PPB_CMD


806 
Œd_PpbE¡ryCmd


808 
FLASHDATA
 * 
ba£_addr
,

809 
ADDRESS
 
off£t


811 
Œd_PpbProgømCmd


813 
FLASHDATA
 * 
ba£_addr
,

814 
ADDRESS
 
off£t


816 
Œd_PpbAŒEø£Cmd


818 
FLASHDATA
 * 
ba£_addr


820 
FLASHDATA
 
Œd_PpbSètusRódCmd


822 
FLASHDATA
 * 
ba£_addr
,

823 
ADDRESS
 
off£t


825 
Œd_PpbExôCmd


827 
FLASHDATA
 * 
ba£_addr


830 #ifde‡
LLD_LOCKBIT_CMD


831 
Œd_PpbLockBôE¡ryCmd


833 
FLASHDATA
 * 
ba£_addr


835 
Œd_PpbLockBôSëCmd


837 
FLASHDATA
 * 
ba£_addr


839 
FLASHDATA
 
Œd_PpbLockBôRódCmd


841 
FLASHDATA
 * 
ba£_addr


843 
Œd_PpbLockBôExôCmd


845 
FLASHDATA
 * 
ba£_addr


848 #ifde‡
LLD_DYB_CMD


849 
Œd_DybE¡ryCmd


851 
FLASHDATA
 * 
ba£_addr


853 
Œd_DybSëCmd


855 
FLASHDATA
 * 
ba£_addr
,

856 
ADDRESS
 
off£t


858 
Œd_DybCÃCmd


860 
FLASHDATA
 * 
ba£_addr
,

861 
ADDRESS
 
off£t


863 
FLASHDATA
 
Œd_DybRódCmd


864 –
FLASHDATA
 * 
ba£_addr
,

865 
ADDRESS
 
off£t


867 
Œd_DybExôCmd


869 
FLASHDATA
 * 
ba£_addr


872 #ifde‡
LLD_LOCK_BIT_RD_OP


873 
FLASHDATA
 
Œd_PpbLockBôRódOp


875 
FLASHDATA
 * 
ba£_addr


878 #ifde‡
LLD_PPB_ERASE_OP


879 
Œd_PpbAŒEø£Op


881 
FLASHDATA
 * 
ba£_addr


884 #ifde‡
LLD_PPB_ERASE_OP


885 
FLASHDATA
 
Œd_PpbSètusRódOp


887 
FLASHDATA
 * 
ba£_addr
,

888 
ADDRESS
 
off£t


891 #ifde‡
LLD_PPB_PGM_OP


892 
Œd_PpbProgømOp


894 
FLASHDATA
 * 
ba£_addr
,

895 
ADDRESS
 
off£t


898 #ifde‡
LLD_LOCK_BIT_SET_OP


899 
Œd_PpbLockBôSëOp


901 
FLASHDATA
 * 
ba£_addr


905 #ifde‡
LLD_LOCKREG_RD_OP_1


906 
FLASHDATA
 
Œd_LockRegBôsRódOp


908 
FLASHDATA
 * 
ba£_addr


911 #ifde‡
LLD_LOCKREG_RD_OP_2


912 
FLASHDATA
 
Œd_SSRLockRegBôsRódOp


914 
FLASHDATA
 *
ba£_addr
,

915 
ADDRESS
 
off£t


919 #ifde‡
LLD_LOCKREG_WR_OP_1


920 
Œd_LockRegBôsProgømOp


922 
FLASHDATA
 * 
ba£_addr
,

923 
FLASHDATA
 
vÆue


926 #ifde‡
LLD_LOCKREG_WR_OP_2


927 
Œd_SSRLockRegBôsProgømOp


929 
FLASHDATA
 *
ba£_addr
,

930 
ADDRESS
 
off£t
,

931 
FLASHDATA
 
vÆue


935 #ifde‡
LLD_SECTOR_LOCK_CMD


936 
Œd_Se˘‹LockCmd


938 
FLASHDATA
 * 
ba£_addr
,

939 
ADDRESS
 
off£t


942 #ifde‡
LLD_SECTOR_UNLOCK_CMD


943 
Œd_Se˘‹U∆ockCmd


944 –
FLASHDATA
 * 
ba£_addr
,

945 
ADDRESS
 
off£t


948 #ifde‡
LLD_LOCK_RANGE_CMD


949 
Œd_Se˘‹LockR™geCmd


951 
FLASHDATA
 * 
ba£_addr
,

952 
ADDRESS
 
Sèπoff£t
,

953 
ADDRESS
 
Endoff£t


957 
Œd_wrôe
 ( 
ADDRESS
 
addr
 ,
uch¨
 *
§c
, 
˙t
 );

958 
Œd_ªad
 ( 
ADDRESS
 
addr
 , 
uch¨
* 
buf
, 
˙t
 );

959 
Œd_îa£
(
no
,
num
);

961 
	#LLD_PORT_WIDTH
 2

	)

963 
	#FLASH_BASE_ADDR
 0xec000000

	)

964 #ifde‡
__˝lu•lus


	@driver/device/norflash/lld_target_specific.h

1 #i‚de‡
LLD_TARGET_SPECIFIC_INC_H


2 
	#LLD_TARGET_SPECIFIC_INC_H


	)

37 
	~"S29GLxxxP.h
"

46 
	#LLD_DEV_FLASH


	)

54 
	#LLD_CONFIGURATION_X16_AS_X16


	)

	@driver/device/pcie/pcie.c

28 
	~<libc/ˇgboŸ.h
>

29 
	~<libc/°ddef.h
>

30 
	~<libc/°rög.h
>

31 
	~<µc/io.h
>

32 
	~"../dfs/dfs.h
"

33 
	~"pcõ.h
"

35 
	#pcõ_log
(
log
)

	)

38 
	#DMA_DESC_CTRL_CHANNEL
 (1<<27)

	)

40 
	#DMA_DESC_CTRL_OBH
 (1<<31)

	)

42 
ölöe
 
öt32_t
 
	$pcõ_£nd_check
(
öt32_t
 
id
,
uöt32_t
 
§c
,uöt32_à
d°
,uöt32_à
˙t
)

44 
öt32_t
 
ªt
 = 
TRUE
;

45 i‡(
id
 == 1 ) {

46 i‡–(
§c
 + 
˙t
)>
PPC_PCIE1_BAR0_SIZE
 || (
d°
+˙t)>
FPGA_PCIE1_BAR0_SIZE
 || cnt ==0) {

47 
ªt
 = 
FALSE
;

48 
	`pcõ_log
(
PCIE_PARA_ERR1
);

50 } i‡(
id
 == 2) {

51 i‡–(
§c
 + 
˙t
)>
PPC_PCIE2_BAR0_SIZE
 || (
d°
+˙t)>
FPGA_PCIE2_BAR0_SIZE
 || cnt ==0) {

52 
ªt
 = 
FALSE
;

53 
	`pcõ_log
(
PCIE_PARA_ERR2
);

56 
ªt
 = 
FALSE
;

57 
	`pcõ_log
(
PCIE_PARA_ERR3
);

60  
ªt
 ;

61 
	}
}

64 
ölöe
 
öt32_t
 
	$pcõ_ªcv_check
(
öt32_t
 
id
,
uöt32_t
 
§c
,uöt32_à
d°
,uöt32_à
˙t
)

66 
öt32_t
 
ªt
 = 
TRUE
;

67 i‡(
id
 == 1 ) {

68 i‡–(
d°
 + 
˙t
)>
PPC_PCIE1_BAR0_SIZE
 || (
§c
 + c¡)>
FPGA_PCIE1_BAR0_SIZE
 || cnt ==0) {

69 
ªt
 = 
FALSE
;

70 
	`pcõ_log
(
PCIE_PARA_ERR4
);

72 } i‡(
id
 == 2) {

73 i‡–(
d°
 + 
˙t
)>
PPC_PCIE2_BAR0_SIZE
 || (
§c
 + c¡)>
FPGA_PCIE2_BAR0_SIZE
 || cnt ==0) {

74 
ªt
 = 
FALSE
;

75 
	`pcõ_log
(
PCIE_PARA_ERR5
);

78 
ªt
 = 
FALSE
;

79 
	`pcõ_log
(
PCIE_PARA_ERR6
);

82  
ªt
 ;

84 
	}
}

86 
öt32_t
 
	$pcõ_£nd
(
öt32_t
 
id
, 
uöt32_t
 
§c
, uöt32_à
d°
, uöt32_à
˙t
)

88 
uöt32_t
 
dma_ªg
,
dma_øm
,
p§c
,
pd°
;

89 
uöt32_t
 
desc
[8]= {0};

90 
uöt32_t
 
ãmp
;

91 
±rdiff_t
 
°©
 = 0,
˘æ
 = 4*4, 
ndp
 = 8*4;

92 
uöt32_t
 
timeout
 = 0x200000;

95 i‡(
id
 == 1) {

96 
dma_ªg
 = 
FPGA_DMA1_REG_ADDR
 ;

97 
dma_øm
 = 
FPGA_DMA1_RAM_ADDR
 ;

98 i‡(!
	`pcõ_£nd_check
(
id
,
§c
,
d°
,
˙t
)) {

101 
p§c
 = 
PPC_PCIE_SEND1_RAM_ADDR
 + 
§c
;

102 
pd°
 = 
FPGA_PCIE1_BAR0_OFFSET
 + 
d°
;

103 } i‡(
id
 ==2 ) {

104 
dma_ªg
 = 
FPGA_DMA2_REG_ADDR
 ;

105 
dma_øm
 = 
FPGA_DMA2_RAM_ADDR
 ;

106 i‡(!
	`pcõ_£nd_check
(
id
,
§c
,
d°
,
˙t
))

108 
p§c
 = 
PPC_PCIE_SEND2_RAM_ADDR
 + 
§c
;

109 
pd°
 = 
FPGA_PCIE2_BAR0_OFFSET
 + 
d°
;

111 
	`pcõ_log
(
PCIE_PARA_ERR7
);

118 
desc
[0] = 
p§c
;

120 
desc
[2] = 
pd°
;

121 
desc
[6] = 
˙t
;

123 
desc
[7] = 
DMA_DESC_CTRL_CHANNEL
|
DMA_DESC_CTRL_OBH
;

125 
i
=0; i<=7; i++) {

126 
	`out_À32
((
uöt32_t
 *)(
dma_øm
+
i
*4),
desc
[i]);

130 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
Ë, 
	`ö_À32
((uint32_t *)(dma_reg + ctrl))&~0x20);

133 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
),0xff);

136 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
ndp
Ë, 
dma_øm
);

139 
ãmp
 = 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 +
˘æ
));

140 
ãmp
 |= 0x20;

141 
ãmp
 |= 0x40;

143 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
Ë, 
ãmp
);

146 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
)) & 0x10 ) {

147 
timeout
 -- ;

148 if(
timeout
 == 0) {

149 
	`pcõ_log
(
PCIE_SENDTIMEOUT_ERR
);

155 
ãmp
 = 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
));

158 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
),0xff);

161 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
), 
	`ö_À32
((uint32_t *)(dma_reg + ctrl))&~0x20);

164 i‡((
ãmp
 & 0x10)!=0) {

165 
	`pcõ_log
(
PCIE_SENDFAIL_ERR
);

169  
˙t
;

170 
	}
}

172 
öt32_t
 
	$pcõ_ªcv
(
öt32_t
 
id
, 
uöt32_t
 
§c
, uöt32_à
d°
, uöt32_à
˙t
)

174 
uöt32_t
 
dma_ªg
,
dma_øm
,
p§c
,
pd°
;

175 
uöt32_t
 
desc
[8]= {0};

176 
uöt32_t
 
ãmp
;

177 
±rdiff_t
 
°©
 = 0,
˘æ
 = 4*4, 
ndp
 = 8*4;

178 
uöt32_t
 
timeout
 = 0x2000000;

181 i‡(
id
 == 1) {

182 
dma_ªg
 = 
FPGA_DMA1_REG_ADDR
 ;

183 
dma_øm
 = 
FPGA_DMA1_RAM_ADDR
 ;

184 i‡(!
	`pcõ_£nd_check
(
id
,
§c
,
d°
,
˙t
))

186 
pd°
 = 
PPC_PCIE_SEND1_RAM_ADDR
 + 
d°
 ;

187 
p§c
 = 
FPGA_PCIE1_BAR0_OFFSET
 + 
§c
 ;

188 } i‡(
id
 ==2 ) {

189 
dma_ªg
 = 
FPGA_DMA2_REG_ADDR
 ;

190 
dma_øm
 = 
FPGA_DMA2_RAM_ADDR
 ;

191 i‡(!
	`pcõ_£nd_check
(
id
,
§c
,
d°
,
˙t
))

193 
pd°
 = 
PPC_PCIE_SEND2_RAM_ADDR
 + 
d°
 ;

194 
p§c
 = 
FPGA_PCIE2_BAR0_OFFSET
 + 
§c
;

201 
desc
[0] = 
p§c
;

203 
desc
[2] = 
pd°
;

204 
desc
[6] = 
˙t
;

206 
desc
[7] = 
DMA_DESC_CTRL_CHANNEL
|
DMA_DESC_CTRL_OBH
;

208 
i
=0; i<=7; i++) {

209 
	`out_À32
((
uöt32_t
 *)(
dma_øm
+
i
*4),
desc
[i]);

213 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
Ë, 
	`ö_À32
((uint32_t *)(dma_reg + ctrl))&~0x20);

216 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
),0xff);

219 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
ndp
Ë, 
dma_øm
);

222 
ãmp
 = 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 +
˘æ
));

223 
ãmp
 |= 0x20;

224 
ãmp
 |= 0x40;

226 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
Ë, 
ãmp
);

229 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
)) & 0x10 ) {

230 
timeout
 -- ;

231 if(
timeout
 == 0) {

232 
	`pcõ_log
(
PCIE_RECVTIMEOUT_ERR
);

238 
ãmp
 = 
	`ö_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
));

241 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
°©
),0xff);

244 
	`out_À32
((
uöt32_t
 *)(
dma_ªg
 + 
˘æ
), 
	`ö_À32
((uint32_t *)(dma_reg + ctrl))&~0x20);

247 i‡((
ãmp
 & 0x10)!=0) {

248 
	`pcõ_log
(
PCIE_RECVFAIL_ERR
);

252  (
öt32_t
)
˙t
;

253 
	}
}

256 
	$pcõ_ªad
(
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt32_t
 
Àn
)

258 
	`mem˝y
(
d°
,
§c
+
FPGA_PCIE1_BAR0_BASE
,
Àn
);

259 
	}
}

262 
	$pcõ_wrôe
(
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt32_t
 
Àn
)

264 
	`mem˝y
(
d°
+
FPGA_PCIE1_BAR0_BASE
,
§c
,
Àn
);

265 
	}
}

267 
	$pcõ_ªad2
(
öt32_t
 
id
 , 
uöt8_t
 *
d°
 , uöt8_à*
§c
 , 
uöt32_t
 
Àn
)

269 i‡(
id
 == 1) {

270 
	`mem˝y
(
d°
,
§c
+
FPGA_PCIE1_BAR0_BASE
,
Àn
);

271 } i‡(
id
 == 2 ) {

272 
	`mem˝y
(
d°
,
§c
+
FPGA_PCIE2_BAR0_BASE
,
Àn
);

274 
	`pcõ_log
(
PCIE_PARA_ERR8
);

276 
	}
}

277 
	$pcõ_wrôe2
(
öt32_t
 
id
 , 
uöt8_t
 *
d°
 , uöt8_à*
§c
 , 
uöt32_t
 
Àn
)

279 i‡(
id
 == 1) {

280 
	`mem˝y
(
d°
+
FPGA_PCIE1_BAR0_BASE
,
§c
,
Àn
);

281 } i‡(
id
 == 2 ) {

282 
	`mem˝y
(
d°
+
FPGA_PCIE2_BAR0_BASE
,
§c
,
Àn
);

284 
	`pcõ_log
(
PCIE_PARA_ERR9
);

286 
	}
}

	@driver/device/pcie/pcie.h

28 #i‚de‡
__PCIE_H__


29 
	#__PCIE_H__


	)

31 
	~<libc/ˇgboŸ.h
>

32 
	~<logh.h
>

36 
	#FPGA_PCIE1_BAR_BASE
 0x80000000ul

	)

38 
	#FPGA_PCIE1_BAR0_OFFSET
 0x400000ul

	)

40 
	#FPGA_PCIE1_BAR2_OFFSET
 0x800000ul

	)

41 
	#FPGA_PCIE1_BAR0_BASE
 (
FPGA_PCIE1_BAR_BASE
 + 
FPGA_PCIE1_BAR0_OFFSET
)

	)

42 
	#FPGA_PCIE1_BAR2_BASE
 (
FPGA_PCIE1_BAR_BASE
 + 
FPGA_PCIE1_BAR2_OFFSET
)

	)

45 
	#FPGA_DMA1_REG_OFFSET
 0x4000ul

	)

47 
	#FPGA_DMA1_RAM_OFFSET
 0x5000ul

	)

48 
	#FPGA_DMA1_REG_ADDR
 (
FPGA_PCIE1_BAR2_BASE
 + 
FPGA_DMA1_REG_OFFSET
)

	)

49 
	#FPGA_DMA1_RAM_ADDR
 (
FPGA_PCIE1_BAR2_BASE
 + 
FPGA_DMA1_RAM_OFFSET
)

	)

52 
	#FPGA_PCIE1_BAR0_SIZE
 0x2000ul

	)

54 
	#PPC_PCIE1_BAR0_SIZE
 0x200000ul

	)

56 
	#FPGA_INBOUND1_ADDR
 0x0

	)

59 
	#PPC_PCIE_DDR1_OFFSET
 0xbf00000ul

	)

61 
	#PPC_PCIE_SEND1_RAM_ADDR
 (
PPC_PCIE_DDR1_OFFSET
 + 
PPC_PCIE1_BAR0_SIZE
/2)

	)

65 
	#FPGA_PCIE2_BAR_BASE
 0xa0000000ul

	)

67 
	#FPGA_PCIE2_BAR0_OFFSET
 0x00200000ul

	)

69 
	#FPGA_PCIE2_BAR2_OFFSET
 0x400000ul

	)

70 
	#FPGA_PCIE2_BAR0_BASE
 (
FPGA_PCIE2_BAR_BASE
 + 
FPGA_PCIE2_BAR0_OFFSET
)

	)

71 
	#FPGA_PCIE2_BAR2_BASE
 (
FPGA_PCIE2_BAR_BASE
 + 
FPGA_PCIE2_BAR2_OFFSET
)

	)

74 
	#FPGA_DMA2_REG_OFFSET
 0x4000ul

	)

76 
	#FPGA_DMA2_RAM_OFFSET
 0x5000ul

	)

77 
	#FPGA_DMA2_REG_ADDR
 (
FPGA_PCIE2_BAR2_BASE
 + 
FPGA_DMA2_REG_OFFSET
)

	)

78 
	#FPGA_DMA2_RAM_ADDR
 (
FPGA_PCIE2_BAR2_BASE
 + 
FPGA_DMA2_RAM_OFFSET
)

	)

81 
	#FPGA_PCIE2_BAR0_SIZE
 0x1000ul

	)

83 
	#PPC_PCIE2_BAR0_SIZE
 0x20000ul

	)

86 
	#FPGA_INBOUND2_ADDR
 0x300000ul

	)

88 
	#PPC_PCIE_DDR2_OFFSET
 (
PPC_PCIE_DDR1_OFFSET
 + 
PPC_PCIE1_BAR0_SIZE
)

	)

89 
	#PPC_PCIE_SEND2_RAM_ADDR
 (
PPC_PCIE_DDR2_OFFSET
 + 
PPC_PCIE2_BAR0_SIZE
/2)

	)

92 
öt32_t
 
pcõ_£nd
(öt32_à
id
, 
uöt32_t
 
§c
 , uöt32_à
d°
,uöt32_à
˙t
);

93 
öt32_t
 
pcõ_ªcv
(öt32_à
id
, 
uöt32_t
 
§c
 , uöt32_à
d°
,uöt32_à
˙t
);

94 
pcõ_ªad
(
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt32_t
 
Àn
);

95 
pcõ_wrôe
(
uöt8_t
 *
d°
, uöt8_à*
§c
, 
uöt32_t
 
Àn
);

	@driver/device/spiflash/sf.c

29 
	~"sf.h
"

30 
	~<libc/°rög.h
>

32 
	#SEND_BUF
 0x000000

	)

33 
	#RECV_BUF
 0x000000

	)

35 
	#S_WR_TO
 0x7000000

	)

36 
	#S_E_TO
 0x70000000

	)

38 
	#sf_log
(
log
)

	)

39 
	gsf2_Êash_î∫o
 = 0;

40 
UINT16
 
	$sf_gë_°©
()

42 
UINT16
 
°©
;

44 
°©
 = 
	`Âga_ªad
(
SF_REG_STAT
);

47 i‡(
°©
 & 0x8000)

50 
°©
 &= 0xff;

52 
°©
) {

61  
°©
;

62 
	}
}

64 
	$sf_£t_addr
(
UINT32
 
addr
)

66 
UINT16
 
hi
,
lo
;

67 
hi
 = (
addr
>>16) & 0xff;

68 
lo
 = 
addr
 & 0xffff;

69 
	`Âga_wrôe
(
SF_REG_ADDRH
,
hi
);

70 
	`Âga_wrôe
(
SF_REG_ADDRL
,
lo
);

71 
	}
}

73 
UINT32
 
	$sf_gë_addr
()

75 
UINT16
 
hi
,
lo
;

76 
hi
 = 
	`Âga_ªad
(
SF_REG_ADDRH
) & 0xff;

77 
lo
 = 
	`Âga_ªad
(
SF_REG_ADDRL
);

79  (
hi
<<16)|
lo
;

80 
	}
}

82 
UINT32
 
	$sf_gë_timeout
()

84 
UINT16
 
hi
,
lo
;

85 
hi
 = 
	`Âga_ªad
(
SF_REG_TOH
);

86 
lo
 = 
	`Âga_ªad
(
SF_REG_TOL
);

88  (
hi
<<16)|
lo
;

89 
	}
}

92 
	$sf_£t_timeout
(
UINT32
 
to
)

94 
UINT16
 
hi
,
lo
;

95 
hi
 = (
to
>>16);

96 
lo
 = 
to
& 0xffff;

97 
	`Âga_wrôe
(
SF_REG_TOH
,
hi
);

98 
	`Âga_wrôe
(
SF_REG_TOL
,
lo
);

99 
	}
}

101 
INT32
 
	$sf_addr_ck
(
UINT32
 
addr
,UINT32 
˙t
)

103 if((
addr
&(
SS_SIZE
-1)Ë+ 
˙t
 >= 0x800000) {

104 
	`sf_log
(
SF_PARA_ERR1
);

108 
addr
) {

110 i‡(((
addr
&(
SS_SIZE
-1))+
˙t
)>=0x800000) {

111 
	`sf_log
(
SF_PARA_ERR2
);

116 i‡((((
addr
-0x800000)&(
SS_SIZE
-1))+
˙t
)>=0x800000) {

117 
	`sf_log
(
SF_PARA_ERR3
);

122 
	`sf_log
(
SF_PARA_ERR4
);

125 
	}
}

127 
INT32
 
	$•iÊash_ªad
(
UINT32
 
addr
 , 
UINT8
 *
buf
 , UINT32 
˙t
)

129 
UINT16
 
°©
;

130 
UINT16
 
cmd
 ;

131 
UINT32
 
to
= 0x10000;

132 
UINT32
 
to2
 = 
S_WR_TO
;

133 
	`LOG_DEBUG
("%†ªadáà0x%x c¡ %d\n",
__FUNCTION__
,
addr
,
˙t
);

136 i‡((
cmd
 = 
	`sf_addr_ck
(
addr
,
˙t
))<0) {

137 
	`sf_log
(
SF_PARA_ERR5
);

142 if(
	`sf_gë_°©
() == 0xe)

145 (
	`sf_gë_°©
(Ë=0xeË&& 
to2
--) {

151 
	`sf_£t_timeout
(
to
);

152 
	`sf_£t_addr
(
addr
-
cmd
*0x800000);

153 
	`Âga_wrôe
(
SF_REG_LEN
,
˙t
);

155 i‡(
cmd
 == 1)

156 
cmd
 = 
SF_CMD_CS1
|
SF_CMD_RD
;

158 
cmd
 = 
SF_CMD_RD
;

160 
	`Âga_wrôe
(
SF_REG_CMD
 , 
cmd
);

168 
to2
 = 
S_WR_TO
;

170 
to2
--) {

171 
°©

	`sf_gë_°©
();

172 i‡(
°©
 != 0xe && stat != 0)

176 
	`Âga_wrôe
(
SF_REG_STAT
,0xffff);

178 
	`LOG_DEBUG
("°©1 %d\n",
°©
);

180 if(
to2
 =0 || 
°©
 !=1 ) {

182 
	`sf_log
(
SF_READFAIL_ERR
);

188 i‡(
	`pcõ_ªcv
(2,
RECV_BUF
,0,
˙t
)<0)

191 
	`mem˝y
(
buf
,

193 
˙t
);

196 
j
 = 0; j<20; j++)

197 
	`LOG_DEBUG
("%x ",
buf
[
j
]);

198 
	`LOG_DEBUG
("\n");

201  
˙t
;

202 
	}
}

204 
INT32
 
	$•iÊash_wrôe
(
UINT32
 
addr
 , 
UINT8
 *
buf
 , UINT32 
˙t
)

206 
UINT16
 
°©
;

207 
UINT16
 
cmd
;

208 
UINT32
 
to
= 0x10000;

209 
UINT32
 
to2
 = 
S_WR_TO
;

211 
	`LOG_DEBUG
("%†wrôê© 0x%x c¡ %d\n",
__FUNCTION__
,
addr
,
˙t
);

213 
j
 = 0; j<20; j++)

214 
	`LOG_DEBUG
("%x ",
buf
[
j
]);

215 
	`LOG_DEBUG
("\n");

218 i‡((
cmd
=
	`sf_addr_ck
(
addr
,
˙t
))<0) {

219 
	`sf_log
(
SF_PARA_ERR6
);

224 if(
	`sf_gë_°©
() == 0xe)

227 (
	`sf_gë_°©
(Ë=0xeË&& 
to2
 --) {

234 i‡(
	`pcõ_£nd
(2,0,
SEND_BUF
,
˙t
)<0)

237 
	`mem˝y
((*)0xa0200000,

238 
buf
,

239 
˙t
);

243 
	`sf_£t_timeout
(
to
);

244 
	`sf_£t_addr
(
addr
-
cmd
*0x800000);

245 
	`Âga_wrôe
(
SF_REG_LEN
,
˙t
);

247 i‡(
cmd
 == 1)

248 
cmd
 = 
SF_CMD_CS1
|
SF_CMD_WR
;

250 
cmd
 = 
SF_CMD_WR
;

252 
	`Âga_wrôe
(
SF_REG_CMD
 , 
cmd
);

258 
to2
 = 
S_WR_TO
;

259 
to2
--) {

260 
°©

	`sf_gë_°©
();

261 i‡(
°©
 != 0xe && stat != 0)

266 
	`Âga_wrôe
(
SF_REG_STAT
,0xffff);

268 
	`LOG_DEBUG
("°©2 %d\n",
°©
);

270 if(
to2
 =0 || 
°©
 != 1) {

272 
	`sf_log
(
SF_WRITEFAIL_ERR
);

276  
˙t
;

278 
	}
}

281 
INT32
 
	$•iÊash_îa£
(
INT32
 
no
 , INT32 
num
)

283 
UINT16
 
°©
;

284 
UINT16
 
cmd
;

285 
UINT32
 
to
= 0x10000;

286 
UINT32
 
to2
 = 
S_E_TO
;

288 
	`LOG_DEBUG
("%†",
__FUNCTION__
);

291 i‡((
cmd
 = 
	`sf_addr_ck
(
no
*
SS_SIZE
,
num
*SS_SIZE))<0) {

292 
	`LOG_DEBUG
("addrck faû %d %d\n",
no
,
num
);

293 
	`sf_log
(
SF_PARA_ERR7
);

298 if(
	`sf_gë_°©
() == 0xe) {

299 
	`LOG_DEBUG
("statÉrror \n");

303 (
	`sf_gë_°©
(Ë=0xeË&& 
to2
--) {

308 
	`LOG_DEBUG
("îa£ádd∏0x%x , cmd %d\n",
no
*
SS_SIZE
-
cmd
*0x800000,cmd);

311 
	`sf_£t_timeout
(
to
);

312 
	`sf_£t_addr
(
no
*
SS_SIZE
-
cmd
*0x800000);

314 
	`Âga_wrôe
(
SF_REG_LEN
,
num
);

316 i‡(
cmd
 == 1)

317 
cmd
 = 
SF_CMD_CS1
|
SF_CMD_ER
;

319 
cmd
 = 
SF_CMD_ER
;

321 
	`Âga_wrôe
(
SF_REG_CMD
 , 
cmd
);

326 
to2
=
S_E_TO
;

327 
to2
--) {

328 
°©

	`sf_gë_°©
();

329 i‡(
°©
 != 0xe && stat != 0)

333 
	`Âga_wrôe
(
SF_REG_STAT
,0xffff);

335 
	`LOG_DEBUG
("°©3 %d\n",
°©
);

337 if(
to2
 =0 || 
°©
 !=1 ) {

339 
	`sf_log
(
SF_ERASEFAIL_ERR
);

345 
	}
}

349 
INT32
 
	$•iÊash_id
()

351 
UINT16
 
°©
;

352 
UINT16
 
cmd
;

353 
UINT32
 
to

S_WR_TO
;

354 
UINT32
 
to2
 = 
S_WR_TO
;

356 
UINT8
 *
buf
=(UINT8*)0x1fa00000;

358 if(
	`sf_gë_°©
() == 0xe)

361 
	`sf_£t_timeout
(
to
);

363 
cmd
 = 
SF_CMD_ID
|
SF_CMD_CS0
;

364 
	`Âga_wrôe
(
SF_REG_CMD
 , 
cmd
);

366 
i
=0;

372 
°©

	`sf_gë_°©
();

373 i‡(
°©
 != 0xe && stat != 0)

377 
	`Âga_wrôe
(
SF_REG_STAT
,0xffff);

379 if(
to
==0 || 
°©
 !=1 ) {

380 
	`LOG_DEBUG
("-4 sèà%x\n",
°©
);

385 if–
	`pcõ_ªcv
(2,
RECV_BUF
,0,20)<20)

388 
	`mem˝y
(0x1fa00000,0xa0200000,20);

391 
	`LOG_DEBUG
("fpga spi flash id :\n");

392 
i
 =0; i<20; i++)

393 
	`LOG_DEBUG
("%x",
buf
[
i
]);

395 
	`LOG_DEBUG
("\n");

397 
	}
}

	@driver/device/spiflash/sf.h

1 #¥agm®
⁄˚


31 
	~<logh.h
>

32 
	~<c⁄fig.h
>

33 
	~<libc/ˇgboŸ.h
>

34 
	~<drv_c⁄fig.h
>

35 
	~"../Âga/Âga.h
"

36 
	~"../pcõ/pcõ.h
"

38 
	~"../../fs/sffs/sffs.h
"

40 
	#SF_CMD_CS0
 (0<<15)

	)

41 
	#SF_CMD_CS1
 (1<<15)

	)

42 
	#SF_CMD_INV
 0

	)

43 
	#SF_CMD_ID
 1

	)

44 
	#SF_CMD_ER
 2

	)

45 
	#SF_CMD_WR
 3

	)

46 
	#SF_CMD_RD
 4

	)

48 
	#SF_STAT_FIN
 (0<<15)

	)

49 
	#SF_STAT_IN
 (1<<15)

	)

50 
	#SF_STAT_RESET
 0

	)

51 
	#SF_STAT_OK
 1

	)

52 
	#SF_STAT_FAIL


	)

55 
	#SF_REG_CMD
 (0x100Ë

	)

56 
	#SF_REG_ADDRH
 (0x104Ë

	)

57 
	#SF_REG_ADDRL
 (0x102Ë

	)

58 
	#SF_REG_ADDR


59 
	#SF_REG_LEN
 (0x106Ë

	)

60 
	#SF_REG_STAT
 (0x108Ë

	)

61 
	#SF_REG_TOH
 (0x10cË

	)

62 
	#SF_REG_TOL
 (0x10aË

	)

63 
	#SF_REG_TO


64 

	)

66 
	#SF_IS_ERR
(
addr
)

	)

67 
	#SF_IS_OK
(
addr
)

	)

69 
	#SF_BASE
 0x0

	)

70 
	#SF_SIZE
 0x00800000

	)

72 
INT32
 
•iÊash_wrôe
(
UINT32
 
addr
 , 
UINT8
 *
buf
 , UINT32 
˙t
);

73 
INT32
 
•iÊash_ªad
(
UINT32
 
addr
 , 
UINT8
 *
buf
 , UINT32 
˙t
);

74 
INT32
 
•iÊash_îa£
(INT32 
no
 , INT32 
num
);

	@driver/fs/bits.c

29 
	~"bôs.h
"

30 
INT32
 
	$gë_bô_vÆ
(
UINT32
* 
§c
, 
INT16
 
£q
)

32 
INT32
 
x
;

33 
x

§c
[
£q
/
BIT_WIDTH
];

34 
x
 &1<<(
£q
%
BIT_WIDTH
);

35  (
x
 == 0)?0:1;

36 
	}
}

39 
	$£t_bô_vÆ
(
UINT32
* 
§c
, 
INT16
 
£q
)

41 
INT32
 
x
;

42 
x

§c
[
£q
/
BIT_WIDTH
];

43 
x
 |1<<(
£q
%
BIT_WIDTH
);

44 
§c
[
£q
/
BIT_WIDTH
] = 
x
;

45 
	}
}

47 
	$˛ór_bô_vÆ
(
UINT32
 *
§c
, 
INT16
 
£q
)

49 
INT32
 
x
,
y
;

50 
x
 = 
§c
[
£q
/
BIT_WIDTH
];

51 
y
 = ~(1<<(
£q
%
BIT_WIDTH
));

52 
x
 &
y
;

53 
§c
[
£q
/
BIT_WIDTH
] = 
x
;

54 
	}
}

57 
INT32
 
	$gë_Æl_⁄e
(
UINT32
 
n
)

59 
UINT32
 
c
 =0 ;

60 
c
 =0; 
n
; c++) {

62 
n
 &= (n -1) ;

64  
c
 ;

65 
	}
}

	@driver/fs/bits.h

30 #i‚de‡
__BITS_H__


31 
	#__BITS_H__


	)

32 
	~<libc/°ddef.h
>

33 
	#BIT_WIDTH
 32

	)

34 
INT32
 
gë_bô_vÆ
(
UINT32
 * 
§c
, 
INT16
 
£q
);

35 
£t_bô_vÆ
(
UINT32
 * 
§c
, 
INT16
 
£q
);

36 
˛ór_bô_vÆ
(
UINT32
 *
§c
, 
INT16
 
£q
);

37 
INT32
 
gë_Æl_⁄e
(
UINT32
 
n
);

	@driver/fs/fs_api.c

29 
	~"../devi˚/dfs/dfs.h
"

30 
	~<libc/°rög.h
>

31 
	~"sffs/sffs.h
"

34 
ötLock
();

35 
ötU∆ock
();

36 
sffs
 
sffs_¶Ÿ
[];

38 
INT32
 
	$fs_Êash_ªad
(*
fs
,
UINT32
 
ofs
,*
d©a
,UINT32 
˙t
)

40  
	`sffs_ªad_©
((
sffs
 *)
fs
,
ofs
,
d©a
,
˙t
);

41 
	}
}

53 
INT32
 
	$fs_gë_îr
(
INT32
 
fsid
)

55  
	`sffs_gë_î∫o
(
fsid
);;

56 
	}
}

67 
INT32
 
	$fs_mou¡
(
INT32
 
ty≥
)

69 
sffs
 *
fs
=&
sffs_¶Ÿ
[0];

70 
INT32
 
ªt
 = 
FS_FAIL
;

71 
INT32
 
lockî
;

72 
lockî
 = 
	`ötLock
();

73 
ªt
 = 
	`sffs_mou¡
(
fs
,
ty≥
);

74 
	`ötU∆ock
(
lockî
);

75  
ªt
;

76 
	}
}

78 #ifde‡
SFFS_MULTI_DEVICE


79 
INT32
 
	$fs_mou¡2
(
sffs
 
sfs
, 
INT32
 
ty≥
)

81 
id
 = 
	`sffs_ªgi°î
(
sfs
);

82 
	`FS_CKFSID
(
id
);

84 
sffs
 *
fs
 = 
	`sffs_gë_¶Ÿ
(
id
);

85 i‡(
fs
 =
NULL
) {

86 
	`LOG_WARN
("fs mount2 fail\n");

87  
FS_FAIL
;

89 
INT32
 
ªt
 = 
FS_FAIL
;

93 
ªt
 = 
	`sffs_mou¡
(
fs
,
ty≥
);

95 i‡(
ªt
 =
FS_OK
)

96  
id
;

98  
ªt
;

99 
	}
}

111 
INT32
 
	$fs_umou¡
(
INT32
 
fsid
)

113 #ifde‡
SFFS_MULTI_DEVICE


114 
FS_DEFI2
;

116 
FS_DEFI
;

118 
ªt
 = 
	`sffs_umou¡
(
fs
);

119 
FS_DEFO
;

120 
	}
}

122 #ifde‡
SFFS_MULTI_DEVICE


123 
INT32
 
	$fs_umou¡2
(
INT32
 
fsid
)

125 
sffs
 *
fs
=
	`sffs_gë_¶Ÿ
(
fsid
);

127 i‡(
fs
 !
NULL
)

128  
	`sffs_umou¡
(
fs
);

130  
FS_FAIL
;

131 
	}
}

145 
INT32
 
	$fs_fûe_Àn
(
INT8
 *
‚ame
)

147 
FS_DEFI
;

148 i‡((
ªt
=
	`sffs_föd_fûehdr
(
fs
, 
‚ame
)) < 0) {

149 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILENAME_NOT_EXIST_ERR4
);

150 
FS_DEFO
;

152 
ªt
 = 
fs
->
fûe
[ªt].
size
;

153 
FS_DEFO
;

154 
	}
}

156 #ifde‡
SFFS_MULTI_DEVICE


157 
INT32
 
	$fs_fûe_Àn2
(
INT8
 *
‚ame
,
INT32
 
fsid
)

159 
FS_DEFI2
;

160 i‡((
ªt
=
	`sffs_föd_fûehdr
(
fs
, 
‚ame
)) < 0) {

161 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILENAME_NOT_EXIST_ERR5
);

162 
FS_DEFO
;

164 
ªt
 = 
fs
->
fûe
[ªt].
size
;

165 
FS_DEFO
;

166 
	}
}

170 #ifde‡
SFFS_MULTI_DEVICE


171 
INT32
 
	$fs_ª«me2
(c⁄° 
INT8
 *
ﬁd_«me
, c⁄° INT8 *
√w_«me
, 
INT32
 
fsid
)

173 
FS_DEFI2
;

175 
ªt
 = 
	`sffs_ª«me
(
fs
,
ﬁd_«me
,
√w_«me
);

177 
FS_DEFO
;

178 
	}
}

181 
INT32
 
	$fs_ª«me
(c⁄° 
INT8
 *
ﬁd_«me
, c⁄° INT8 *
√w_«me
)

183 
FS_DEFI
;

185 
ªt
 = 
	`sffs_ª«me
(
fs
,
ﬁd_«me
,
√w_«me
);

187 
FS_DEFO
;

188 
	}
}

200 
INT32
 
	$fs_l£ek
(
INT32
 
fd
, INT32 
pos
, INT32 
cfg
)

202 #ifde‡
SFFS_MULTI_DEVICE


203 
INT32
 
fsid
 = (
fd
&0xffff0000)>>16 ;

204 
fd
 = 
	`sffs_gë_fsfd
(fd);

205 
FS_DEFI2
;

207 
FS_DEFI
;

210 i‡(
	`sffs_ck_fd
(
fs
,
fd
Ë< 0 || 
pos
 <0) {

211 
	`sffs_£t_î∫o
(
fs
,
SFFS_FD_ERR2
);

212 
	`LOG_WARN
("seekÖaraÉrr\n");

213 
FS_DEFO
;

216 
cfg
) {

217 
FS_SEEK_TELL
:

218 
ªt
=
fs
->
fûe
[
fd
].
ofs
;

220 
FS_SEEK_SET
:

221 
ªt
=
	`sffs_l£ek
(
fs
,
fd
,
pos
);

224 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR6
);

225 
ªt
 = 
FS_FAIL
;

228 
FS_DEFO
;

229 
	}
}

239 
INT32
 
	$fs_‰ì
()

241 
FS_DEFI
;

242 
INT32
 
i
;

243 
ªt
 = 0;

244 
i
=0; i<(
fs
->
‰ì_£
)/4; i++) {

245 
ªt
 +
	`gë_Æl_⁄e
(
fs
->
‰ì_£
[
i
]);

247 
ªt
 = 
fs
->
devi˚_size
 - (ªà+1)*fs->
£_size
;

248 
FS_DEFO
;

249 
	}
}

251 #ifde‡
SFFS_MULTI_DEVICE


252 
INT32
 
	$fs_‰ì2
(
INT32
 
fsid
)

254 
FS_DEFI2
;

255 
INT32
 
i
;

256 
ªt
 = 0;

257 
i
=0; i<(
fs
->
‰ì_£
)/4; i++) {

258 
ªt
 +
	`gë_Æl_⁄e
(
fs
->
‰ì_£
[
i
]);

260 
ªt
 = 
fs
->
devi˚_size
 - (ªà+1)*fs->
£_size
;

261 
FS_DEFO
;

262 
	}
}

273 
INT32
 
	$fs_u£d
()

275 
FS_DEFI
;

276 
INT32
 
i
;

277 
ªt
=0;

278 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

279 i‡(
fs
->
fûe
[
i
].
comt
 =
FS_COMMITED
) {

280 
ªt
+=
fs
->
fûe
[
i
].
size
;

283 
FS_DEFO
;

284 
	}
}

286 #ifde‡
SFFS_MULTI_DEVICE


287 
INT32
 
	$fs_u£d2
(
INT32
 
fsid
)

289 
FS_DEFI2
;

290 
INT32
 
i
;

291 
ªt
=0;

292 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

293 i‡(
fs
->
fûe
[
i
].
comt
 =
FS_COMMITED
) {

294 
ªt
+=
fs
->
fûe
[
i
].
size
;

297 
FS_DEFO
;

298 
	}
}

315 
INT32
 
	$fs_›í
(c⁄° 
INT8
 *
‚ame
, 
INT32
 
Êags
, INT32 
mode
)

317 #ifde‡
SFFS_MULTI_DEVICE


318 
fsid
 = 
	`FS_ID_GET
(
mode
);

319 
	`LOG_DEBUG
("fsid %d\n",
fsid
);

321 
	`FS_GET_SFFS
(
fsid
)

323 
	`FS_TRYLOCK
(
fs
);

324 
	`FS_IS_MOUNTED
(
fs
);

327 
FS_DEFI
;

330 
Êags
) {

331 
FS_OPEN_NORMAL
:

332 i‡(
	`sffs_föd_fûehdr
(
fs
,
‚ame
) <0 ) {

333 
FS_DEFO
;

336 
FS_OPEN_TRU
:

337 
	`sffs_ªmove_by«me
(
fs
,
‚ame
);

339 
FS_OPEN_CREATE
:

342 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR7
);

343 
FS_DEFO
;

345 
mode
 = mode &0xffff;

346 
ªt
 = 
	`sffs_›í
(
fs
,
‚ame
,
mode
);

347 
	`LOG_DEBUG
("opend\n");

349 #ifde‡
SFFS_MULTI_DEVICE


350 i‡(
ªt
 !
FS_FAIL
)

351 
ªt
 =Ñë|(
fsid
<<16);

352 
	`LOG_DEBUG
("›íÑë %d\n",
ªt
);

355 
FS_DEFO
;

356 
	}
}

368 #ifde‡
SFFS_MULTI_DEVICE


369 
INT32
 
	$fs_ªmove2
(c⁄° 
INT8
 *
‚ame
 ,
fsid
)

371 
	`FS_GET_SFFS
(
fsid
);

372 
	`FS_TRYLOCK
(
fs
);

373 
	`FS_IS_MOUNTED
(
fs
);

374 
ªt
 = 
	`sffs_ªmove_by«me
(
fs
,
‚ame
);

375 
FS_DEFO
;

376 
	}
}

378 
INT32
 
	$fs_ªmove
(c⁄° 
INT8
 *
‚ame
)

380 
FS_DEFI
;

381 
ªt
 = 
	`sffs_ªmove_by«me
(
fs
, 
‚ame
);

382 
FS_DEFO
;

383 
	}
}

394 
INT32
 
	$fs_ªad
(
INT32
 
fd
, *
buf
, 
UINT32
 
cou¡
)

396 #ifde‡
SFFS_MULTI_DEVICE


397 
INT32
 
fsid
 = (
fd
&0xffff0000)>>16 ;

398 
fd
 = 
	`sffs_gë_fsfd
(fd);

399 
FS_DEFI2
;

401 
FS_DEFI
;

403 
	`FS_CKADDR
(
buf
);

404 
ªt
 = 
	`sffs_ªad
(
fs
,
fd
, 
buf
,
cou¡
);

405 
FS_DEFO
;

406 
	}
}

417 
INT32
 
	$fs_wrôe
(
INT32
 
fd
, c⁄° *
buf
, 
UINT32
 
cou¡
)

419 #ifde‡
SFFS_MULTI_DEVICE


420 
INT32
 
fsid
 = (
fd
&0xffff0000)>>16 ;

421 
fd
 = 
	`sffs_gë_fsfd
(fd);

422 
FS_DEFI2
;

424 
FS_DEFI
;

427 
	`FS_CKADDR
(
buf
);

429 
ªt
 = 
	`sffs_wrôe
(
fs
, 
fd
, 
buf
, 
cou¡
);

430 
FS_DEFO
;

431 
	}
}

442 
INT32
 
	$fs_˛o£
(
INT32
 
fd
)

444 #ifde‡
SFFS_MULTI_DEVICE


445 
INT32
 
fsid
 = (
fd
&0xffff0000)>>16 ;

446 
fd
 = 
	`sffs_gë_fsfd
(fd);

447 
FS_DEFI2
;

449 
FS_DEFI
;

452 
ªt
 = 
	`sffs_˛o£
(
fs
,
fd
);

453 
FS_DEFO
;

454 
	}
}

466 
INT32
 
	$fs_f‹m©
(
INT32
 
ty≥
)

468 
FS_DEFI
;

469 
	`LOG_DEBUG
("f‹m© %d\n",
ty≥
);

470 
ªt
 = 
	`sffs_f‹m©
(
fs
,
ty≥
);

471  
ªt
;

472 
	}
}

474 #ifde‡
SFFS_MULTI_DEVICE


475 
INT32
 
	$fs_f‹m©2
(
INT32
 
fsid
,INT32 
ty≥
)

477 
FS_DEFI2
;

478 
ªt
 = 
	`sffs_f‹m©
(
fs
,
ty≥
);

479  
ªt
;

480 
	}
}

493 
INT32
 
	$fs_ls
()

495 
FS_DEFI
;

496 
sffs_íåy
 
fûes
[
FS_SS_NUM
];

497 
INT32
 
i
,
j
,
k
;

498 
INT8
 
äame
[
FNAME_LEN
+1];

500 
j
=
k
=0;

501 
	`LOG_INFO
("Êash: %s\n‚amê | sizê | hdr_s† | comà| dñed | magi¯ | of† | vÆid | fid \n",
fs
->
f¢ame
);

502 
i
=0; i<(
fs
->
£_size
/fs->
ss_size
); i++) {

504 
	`sffs_ªad_©
(
fs
,(
UINT32
)(
SFFS_SB_START
*fs->
£_size
+
i
*fs->
ss_size
Ë,&
fûes
[i],(
sffs_íåy
));

506 if(
fûes
[
i
].
magic_num
 =
SFFS_MAGIC
) {

507 i‡(
fûes
[
i
].
«me_Àn
 <=
FNAME_LEN
 ) {

508 
	`mem˝y
(
äame
,
fûes
[
i
].
«me
,fûes[i].
«me_Àn
);

509 
äame
[
fûes
[
i
].
«me_Àn
]='\0';

510 
	`¥ötf
("%8s |%8d | %3d | 0x%2x | 0x%2x |0x%8x |0x%08x | %2d | 0x%08x \n",

511 
äame
, 
fûes
[
i
].
size
, fûes[i].
hdr_ss
, fûes[i].
comt
, fûes[i].
dñed
,

512 
fûes
[
i
].
magic_num
, fûes[i].
ofs
, fûes[i].
dñed
==
FS_EMPTY
?1:0,fûes[i].
fid
);

513 if(
fûes
[
i
].
dñed
 =
FS_EMPTY
)

514 
k
++;

515 
j
++;

519 
	`¥ötf
("Êash ha†%d hd∏,%d fûê\n\n",
j
,
k
);

521 
j
=0;

522 
	`LOG_INFO
("memory:\nfname | size | hdr_ss | comt | deled | magic | ofs | stat | fid \n");

523 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

524 i‡(
fs
->
fûe
[
i
].
«me_Àn
 && fs->fûe[i].
°©
 != 0 ) {

525 
	`¥ötf
("%8s |%8d | %3d | %2d | %2d |0x%8x |0x%08x | %2d | 0x%08x \n",

526 
fs
->
fûe
[
i
].
«me
, fs->fûe[i].
size
, fs->fûe[i].
hdr_ss
, fs->fûe[i].
comt
==
FS_COMMITED
?1:0,

527 
fs
->
fûe
[
i
].
dñed
==
FS_EMPTY
?0:1, fs->fûe[i].
magic_num
, fs->fûe[i].
ofs
, fs->fûe[i].
°©
,fs->fûe[i].
fid
);

528 
j
++;

531 
	`¥ötf
("›íed %d fûes.\n",
j
);

532 
FS_DEFO
;

533 
	}
}

535 #ifde‡
SFFS_MULTI_DEVICE


536 
INT32
 
	$fs_ls2
(
INT32
 
fsid
)

538 
FS_DEFI2
;

539 
sffs_íåy
 
fûes
[
FS_SS_NUM
];

540 
INT32
 
i
,
j
,
k
;

541 
INT8
 
äame
[
FNAME_LEN
+1];

543 
j
=
k
=0;

544 
	`LOG_INFO
("Êash: %s\n‚amê | sizê | hdr_s† | comà| dñed | magi¯ | of† | vÆid | fid \n",
fs
->
f¢ame
);

545 
i
=0; i<(
fs
->
£_size
/fs->
ss_size
); i++) {

546 
	`fs_Êash_ªad
(
fs
,(
UINT32
)(
SFFS_SB_START
*fs->
£_size
+
i
*fs->
ss_size
Ë,&
fûes
[i],(
sffs_íåy
));

547 if(
fûes
[
i
].
magic_num
 =
SFFS_MAGIC
) {

548 i‡(
fûes
[
i
].
«me_Àn
 <=
FNAME_LEN
 ) {

549 
	`mem˝y
(
äame
,
fûes
[
i
].
«me
,fûes[i].
«me_Àn
);

550 
äame
[
fûes
[
i
].
«me_Àn
]='\0';

551 
	`LOG_INFO
("%8s |%8d | %3d | 0x%2x | 0x%2x |0x%8x |0x%08x | %2d | 0x%08x \n",

552 
äame
, 
fûes
[
i
].
size
, fûes[i].
hdr_ss
, fûes[i].
comt
, fûes[i].
dñed
,

553 
fûes
[
i
].
magic_num
, fûes[i].
ofs
, fûes[i].
dñed
==
FS_EMPTY
?1:0,fûes[i].
fid
);

554 if(
fûes
[
i
].
dñed
 =
FS_EMPTY
)

555 
k
++;

556 
j
++;

560 
	`LOG_INFO
("Êash ha†%d hd∏,%d fûê\n\n",
j
,
k
);

562 
j
=0;

563 
	`LOG_INFO
("memory:\nfname | size | hdr_ss | comt | deled | magic | ofs | stat | fid \n");

564 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

565 i‡(
fs
->
fûe
[
i
].
«me_Àn
 && fs->fûe[i].
°©
 != 0 ) {

566 
	`LOG_INFO
("%8s |%8d | %3d | %2d | %2d |0x%8x |0x%08x | %2d | 0x%08x \n",

567 
fs
->
fûe
[
i
].
«me
, fs->fûe[i].
size
, fs->fûe[i].
hdr_ss
, fs->fûe[i].
comt
==
FS_COMMITED
?1:0,

568 
fs
->
fûe
[
i
].
dñed
==
FS_EMPTY
?0:1, fs->fûe[i].
magic_num
, fs->fûe[i].
ofs
, fs->fûe[i].
°©
,fs->fûe[i].
fid
);

569 
j
++;

572 
	`LOG_INFO
("›íed %d fûes.\n",
j
);

573 
FS_DEFO
;

574 
	}
}

	@driver/fs/fs_api.h

2 #¥agm®
⁄˚


3 
	~<libc/ˇgboŸ.h
>

4 
	~"sffs/sffs.h
"

5 
INT32
 
fs_ª«me
(c⁄° 
INT8
 *
ﬁd_«me
,c⁄° INT8 *
√w_«me
);

6 
INT32
 
fs_f‹m©
(INT32 
ty≥
);

7 
INT32
 
fs_umou¡
(INT32 
fsid
);

8 
INT32
 
fs_mou¡2
(
sffs
 
sfs
, INT32 
ty≥
);

9 
INT32
 
fs_mou¡
(INT32 
ty≥
);

10 
INT32
 
fs_›í
(c⁄° 
INT8
 *
‚ame
, INT32 
Êags
, INT32 
mode
);

11 
INT32
 
fs_ªmove
(c⁄° 
INT8
 *
‚ame
);

12 
INT32
 
fs_˛o£
(INT32 
fd
);

13 
INT32
 
fs_wrôe
(INT32 
fd
, c⁄° *
buf
, 
UINT32
 
cou¡
);

14 
INT32
 
fs_ªad
(INT32 
fd
, *
buf
, 
UINT32
 
cou¡
);

15 
INT32
 
fs_l£ek
(INT32 
fd
, INT32 
pos
, INT32 
cfg
);

16 
INT32
 
fs_fûe_Àn
(
INT8
 *
‚ame
);

17 
INT32
 
fs_ls
();

18 
INT32
 
fs_u£d
();

19 
INT32
 
fs_‰ì
();

	@driver/fs/sffs/sffs.c

29 
	~<libc/°rög.h
>

30 
	~"sffs.h
"

31 
	~"../../devi˚/dfs/dfs.h
"

33 
ötLock
();

34 
ötU∆ock
();

37 
sffs
 
	gsffs_¶Ÿ
[
MAX_SLOT
];

39 #ifde‡
SFFS_MULTI_DEVICE


40 
INT32
 
	ghdrsSèt
[
MAX_SLOT
][
FS_SS_NUM
] = {{0}};

41 
INT32
 
	gfsSèt
[
MAX_SLOT
] = {0};

44 
INT32
 
	ghdrsSèt
[
FS_SS_NUM
] = {0};

45 
INT32
 
	gfsSèt
 = 0;

46 
INT32
 
	gsffs_îa£_time
[
FS_SE_NUM
]= {0};

49 
	$NOLOG
(c⁄° *
c
,...)

51 
	}
}

55 
INT32
 
	$sffs_lock
(
sffs
 *
fs
)

57 
INT32
 
ªt
 = 0;

58 if(
fs
->
lock
 >0) {

59 
ªt
 = 
FS_FAIL
;

60 
	`LOG_ERROR
("locked %d\n",
fs
->
lock
);

62 
fs
->
lock
=1;

63 
ªt
 = 
FS_OK
;

65  
ªt
;

66 
	}
}

69 
INT32
 
	$sffs_u∆ock
(
sffs
 *
fs
)

71 
INT32
 
ªt
 = 0;

72 if(
fs
->
lock
 >0) {

73 
fs
->
lock
=0;

74 
ªt
 = 
FS_OK
;

76 
ªt
 = 
FS_FAIL
;

77 
	`LOG_ERROR
("u∆ocked %d\n",
fs
->
lock
);

79  
ªt
;

80 
	}
}

83 
	$sffs_¥Ÿe˘
()

85 
	}
}

87 
	$sffs_u≈rŸe˘
()

89 
	}
}

91 #ifde‡
SFFS_MULTI_DEVICE


92 
INT32
 
	$sffs_gë_fsfd
(
INT32
 
fd
)

94  
fd
&0xffff;

95 
	}
}

99 
	$sffs_gë_fsid
(*
‚ame
)

101 
id
 = 0;

103  
id
;

104 
	}
}

107 
	$sffs_£t_î∫o
(
sffs
 *
fs
,
INT32
 
î∫o
)

109 
fs
->
î∫o
=errno;

110 
	`LOG_WARN
("î∏%d \n",
î∫o
);

111 
	}
}

113 
INT32
 
	$sffs_gë_î∫o
(
INT32
 
fsid
)

115 #ifde‡
SFFS_MULTI_DEVICE


116 
FS_DEFI2
;

118 
FS_DEFI
;

120 
ªt
 = 
fs
->
î∫o
;

121 
FS_DEFO
;

122 
	}
}

133 
ölöe
 
INT32
 
	$sffs_wrôe_©
(
sffs
 *
fs
, 
UINT32
 
off£t
, c⁄° *
d©a
, UINT32 
size
)

135 
INT32
 
ªt
 = 
FS_FAIL
;

136 if(
fs
->
wrôe
 !
NULL
) {

137 
ªt
 = 
fs
->
	`wrôe
(fs->
ÊashId
, 
off£t
, (
UINT8
 *)
d©a
, 
size
);

139 
INT32
 
ªt2
;

140 
UINT8
 
buf
[4096]= {0xaa};

141 
ªt2
 = 
fs
->
	`ªad
(fs->
ÊashId
, 
off£t
, 
buf
, 
size
);

142 if(
	`memcmp
((
UINT8
*)
d©a
,
buf
,
size
)) {

143 
	`¥ötf
("ªà%d %d\n",
ªt
,
ªt2
);

144 
i
=0; i<
size
; i++) {

145 if(
buf
[
i
] !*((
UINT8
 *)
d©a
+i))

146 
	`¥ötf
("%x - %d : %x : %x\n",
off£t
,
i
,
buf
[i],*((
UINT8
 *)
d©a
+i));

151  
ªt
;

152 
	}
}

155 
ölöe
 
INT32
 
	$sffs_îa£_©
(
sffs
 *
fs
, 
UINT32
 
no_‰om
, UINT32 
num
)

157 
INT32
 
ªt
 = 
FS_FAIL
;

158 
i
;

159 if(
fs
->
îa£
 !
NULL
 && 
no_‰om
 <
SS_NUM
*
SE_NUM
*2 ) {

160 
ªt
 = 
fs
->
	`îa£
(fs->
ÊashId
, 
no_‰om
,
num
);

161 i‡(
ªt
 >= 0) {

162 
i
=0; i<
num
; i++) {

163 #ifde‡
SFFS_MULTI_DEVICE


166 
sffs_îa£_time
[
no_‰om
+
i
]++;

170 
INT32
 
ªt2
;

171 
UINT8
 
buf
[4096]= {0xaa};

172 
ªt2
 = 
fs
->
	`ªad
(fs->
ÊashId
, (
no_‰om
+
i
)*4096, 
buf
, 4096);

174 
j
=0; j<4096; j++) {

175 if(
buf
[
j
] != 0xff) {

176 
	`¥ötf
("ªà%d %d\n",
ªt
,
ªt2
);

177 
	`¥ötf
("EE %d : %d- %d \n",
no_‰om
,
i
,
buf
[
j
]);

186  
ªt
;

187 
	}
}

199 
INT32
 
	$sffs_gë_£
(
sffs
 *
fs
)

201 
INT16
 
i
;

202 
INT32
 
j
,
k
;

203 
i
 = 0;

204 
j
 = 
k
 = 0;

207 
i
=
fs
->
‰ì_£_cur
;

208  
j
=0; j<
fs
->
devi˚_size
/fs->
£_size
; j++) {

209 
k
 = 
	`gë_bô_vÆ
(
fs
->
‰ì_£
,
i
);

210 i‡(
k
 == 0) {

211 
	`sffs_¥Ÿe˘
();

212 
	`£t_bô_vÆ
(
fs
->
‰ì_£
,
i
);

213 
fs
->
‰ì_£_cur
 = 
i
;

214 
	`sffs_u≈rŸe˘
();

215  
i
;

217 
i
 = (i+1)%(
INT16
)(
fs
->
devi˚_size
/fs->
£_size
);

218 
i
 = (i==0)?1:i;

220 
	`sffs_£t_î∫o
(
fs
,
SFFS_NO_FREE_SE1
);

221  
FS_FAIL
;

222 
	}
}

234 
	$sffs_£t_£bô
(
sffs
 *
fs
, 
INT16
 
£_no
)

236 
	`£t_bô_vÆ
(
fs
->
‰ì_£
, 
£_no
);

237 
	}
}

249 
	$sffs_˛ór_£bô
(
sffs
 *
fs
,
INT16
 
£_no
)

251 
	`˛ór_bô_vÆ
(
fs
->
‰ì_£
,
£_no
);

252 
	}
}

254 
UINT8
 
	$sffs_ck°©
(
sffs
 *
fs
,
INT32
 
fd
)

256  
fs
->
fûe
[
fd
].
°©
;

257 
	}
}

259 
INT32
 
	$sffs_ck_fd
(
sffs
 *
fs
, 
INT32
 
fd
)

262 i‡(0<
fd
 && fd<
SFFS_FILE_NUMBER
 && 
fs
->
fûe
[fd].
size
 >=0 ) {

263  
FS_OK
;

265  
FS_FAIL
;

267 
	}
}

270 
INT32
 
	$sffs_check_fid
(
sffs
 *
fs
,
INT32
 
fid
)

272 
INT32
 
i
=0; i < 
fs
->
fûeNum
; i++) {

273 i‡(
fs
->
fûe
[
i
].
fid
 == fid)

274  
i
;

277  
FS_FAIL
;

278 
	}
}

288 
INT32
 
	$sffs_gë_hdrss
(
sffs
 *
fs
, 
INT32
 
fd
)

290 
INT32
 
i
,
j
,
k
;

292 
k
=0;

293 if(
fs
->
fûeNum
 >
SFFS_FILE_NUMBER
) {

294 
	`sffs_£t_î∫o
(
fs
,
SFFS_NO_FREEHDRSS_ERR
);

295  
FS_FAIL
;

299 
i
=
fs
->
‰ì_ss_hdr_cur
, 
j
=0; j<(fs->
£_size
/fs->
ss_size
); j++) {

300 i‡(
i
 == -1)

301 
i
=0;

303 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

305 i‡(
fs
->
‰ì_ss_hdr
[
i
] =
FS_HDRS_EMPTY
 || fs->‰ì_ss_hdr[i] =FS_HDRS_EMPTY || fs->‰ì_ss_hdr[i] =
FS_S_UNUSED
 ) {

306 
fs
->
‰ì_ss_hdr
[
i
] = 
FS_HDRS_TMP
;

307 
fs
->
‰ì_ss_hdr_cur
 = 
i
;

308  
i
;

312 #ifde‡
SFFS_MULTI_DEVICE


313 i‡(
hdrsSèt
[
fs
->
fsid
][
i
] =
FS_HDRS_EMPTY
 && fs->
‰ì_ss_hdr
[i] == FS_HDRS_EMPTY) {

314 
hdrsSèt
[
fs
->
fsid
][
i
] = 
FS_HDRS_TMP
;

316 i‡(
hdrsSèt
[
i
] =
FS_HDRS_EMPTY
 && 
fs
->
‰ì_ss_hdr
[i] == FS_HDRS_EMPTY) {

317 
hdrsSèt
[
i
] = 
FS_HDRS_TMP
;

319 
fs
->
‰ì_ss_hdr
[
i
] = 
FS_HDRS_TMP
;

320 
fs
->
‰ì_ss_hdr_cur
 = 
i
;

321  
i
;

324 
i
=(i+1)%(
fs
->
£_size
/fs->
ss_size
);

328 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

330 
TRY_TWICE
:

331 i‡(
	`sffs_îa£_©
(
fs
, 
SFFS_SB_START
, 
ERASE_NUM_PER
)<0) {

332 i‡(
	`sffs_îa£_©
(
fs
, 
SFFS_SB_START
, 
ERASE_NUM_PER
)<0) {

333 
	`sffs_£t_î∫o
(
fs
,
SFFS_ERASE_HDRSS_ERR1
);

334  
FS_FAIL
-1;

338 
UINT32
 
ofs
;

340 #ifde‡
SFFS_MULTI_DEVICE


341 
	`mem£t
(&
hdrsSèt
[
fs
->
fsid
],
FS_HDRS_EMPTY
,
FS_SS_NUM
);

343 
	`mem£t
(
hdrsSèt
,
FS_HDRS_EMPTY
,(hdrsStat));

345 
	`mem£t
(
fs
->
‰ì_ss_hdr
,
FS_HDRS_EMPTY
,(fs->free_ss_hdr));

347 
fs
->
‰ì_ss_hdr_cur
=0;

348 
j
=0;

351 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

352 i‡(
fs
->
fûe
[
i
].
dñed
 =
FS_EMPTY
) {

353 i‡(
fs
->
fûe
[
i
].
comt
 =
FS_COMMITED
) {

355 
ofs
 = 
SFFS_SB_START
*
fs
->
£_size
 + fs->
fûe
[
i
].
hdr_ss
 * fs->
ss_size
;

357 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_USED
;

358 #ifde‡
SFFS_MULTI_DEVICE


359 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_USED
;

361 
hdrsSèt
[
fs
->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_USED
;

364 i‡–
	`sffs_wrôe_©
(
fs
,
ofs
, &(fs->
fûe
[
i
]),

365 (
UINT32
 )(&(
fs
->
fûe
[
i
].
dñed
))-(UINT32)(&(fs->file[i])))

366 < (
UINT32
 )(&(
fs
->
fûe
[
i
].
dñed
))-(UINT32)(&(fs->file[i]))) {

367 i‡(
k
<1) {

368 
	`LOG_WARN
("erase hdrándÑe-write\n");

369 
k
++;

370 
TRY_TWICE
;

372 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_BAD
;

373 #ifde‡
SFFS_MULTI_DEVICE


374 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_BAD
;

376 
hdrsSèt
[
fs
->
fûe
[
i
].
hdr_ss
] = 
FS_HDRS_BAD
;

378 
	`LOG_ERROR
("write hdrss fail\n");

380 
fs
->
fûe
[
i
].
comt
 = 
FS_FERR
;

381 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_HDRSS_ERR1
);

382 
fs
->
fûeNum
 -- ;

383  
FS_FAIL
-2;

385 
j
++;

386 } i‡(
fs
->
fûe
[
i
].
°©
 !=
FS_CLOSED
 && fs->fûe[i].
hdr_ss
 !
FS_S_UNUSED
 ) {

387 #ifde‡
SFFS_MULTI_DEVICE


388 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
i
].
hdr_ss
]=
FS_HDRS_TMP
;

390 
hdrsSèt
[
fs
->
fûe
[
i
].
hdr_ss
]=
FS_HDRS_TMP
;

392 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
i
].
hdr_ss
]=
FS_HDRS_TMP
;

393 
j
++;

398 if(
j
<
SFFS_FILE_NUMBER
) {

399 
i
=0; i<(
fs
->
£_size
/fs->
ss_size
); i++) {

400 
	`LOG_DEBUG
("iò%d %d %d\n",
i
, 
fs
->
‰ì_ss_hdr
[i] , 
hdrsSèt
[fs->
fsid
][i]);

401 #ifde‡
SFFS_MULTI_DEVICE


402 i‡(
fs
->
‰ì_ss_hdr
[
i
] =
FS_HDRS_EMPTY
 && 
hdrsSèt
[fs->
fsid
][i]==FS_HDRS_EMPTY) {

403 
fs
->
‰ì_ss_hdr_cur
 = 
i
;

404 
hdrsSèt
[
fs
->
fsid
][
i
]=
FS_HDRS_TMP
;

406 i‡(
fs
->
‰ì_ss_hdr
[
i
] =
FS_HDRS_EMPTY
 && 
hdrsSèt
[i]==FS_HDRS_EMPTY) {

407 
fs
->
‰ì_ss_hdr_cur
 = 
i
;

408 
hdrsSèt
[
i
]=
FS_HDRS_TMP
;

410 
fs
->
‰ì_ss_hdr
[
i
]=
FS_HDRS_TMP
;

411  
fs
->
‰ì_ss_hdr_cur
;

416 
fs
->
‰ì_ss_hdr_cur
 = -1;

421 
	`LOG_DEBUG
("jj %d\n",
j
);

422  
FS_FAIL
-3;

423 
	}
}

427 
ölöe
 
	$sffs_ª£t_fûehdr
(
sffs
 *
fs
, 
INT32
 
fd
)

429 
INT32
 
i
 ,
j
;

430 
i
 = 
fd
;

432 
fs
->
fûe
[
i
].
magic_num
 = 0;

433 
	`mem£t
(
fs
->
fûe
[
i
].
«me
,0x0,
FNAME_LEN
);

434 
fs
->
fûe
[
i
].
«me_Àn
 = 0;

435 
fs
->
fûe
[
i
].
size
 = -1;

436 
fs
->
fûe
[
i
].
ofs
 = -1;

439 
j
=0; j<
SFFS_BNO_LIM
 && 
fs
->
fûe
[
i
].
£_no
[j]!=
FS_S_UNUSED
; j++) {

440 
	`sffs_˛ór_£bô
(
fs
,fs->
fûe
[
i
].
£_no
[
j
]);

441 
fs
->
fûe
[
i
].
£_no
[
j
]=
FS_S_UNUSED
 ;

444 
fs
->
fûe
[
i
].
hdr_ss
 = 
FS_S_UNUSED
;

445 
fs
->
fûe
[
i
].
comt
 = 
FS_EMPTY
;

446 
fs
->
fûe
[
i
].
unu£d
 = 
FS_EMPTY
;

447 
fs
->
fûe
[
i
].
dñed
 = 
FS_EMPTY
;

448 
fs
->
fûe
[
i
].
fid
 = 0;

449 
fs
->
fûe
[
i
].
£q
 = 0;

450 
fs
->
fûe
[
i
].
°©
 = 
FS_CLOSED
;

451 
	}
}

461 
INT32
 
	$sffs_föd_fûehdr
(
sffs
 *
fs
,c⁄° 
INT8
 *
‚ame
)

463 
INT32
 
i
;

465 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

467 i‡(
fs
->
fûe
[
i
].
dñed
 !
FS_DELETED
 &&

468 
fs
->
fûe
[
i
].
«me_Àn
> 0 &&

469 
	`°æí
((*)
‚ame
Ë=
fs
->
fûe
[
i
].
«me_Àn
 &&

471 
	`°∫cmp
((*)
‚ame
, (*)
fs
->
fûe
[
i
].
«me
, fs->fûe[i].
«me_Àn
) == 0 ) {

472  
i
;

475 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILENAME_NOT_EXIST_ERR1
);

476  
FS_FAIL
;

477 
	}
}

487 
INT32
 
	$sffs_gë_fûehdr
(
sffs
 *
fs
)

489 
INT32
 
i
;

490 i‡(
fs
->
fûeNum
 >
SFFS_FILE_NUMBER
) {

492 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILE_NUM_FULL_ERR
);

493  
FS_FAIL
;

496 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

497 i‡(
fs
->
fûe
[
i
].
hdr_ss
 < 0) {

498  
i
;

501 
	`sffs_£t_î∫o
(
fs
,
SFFS_GLOBAL_ERR
);

502  
FS_FAIL
;

503 
	}
}

505 
INT32
 
	$sffs_is_mou¡ed
(
sffs
 *
fs
)

507  
fs
->
mou¡ed
;

508 
	}
}

521 
INT32
 
	$sffs_wrôe_4k
(
sffs
 *
fs
, 
INT32
 
fd
, c⁄° *
d©a
, INT32 
size
)

523 
sffs_íåy
 *
fûe
;

524 
UINT32
 
off£t
;

525 
INT32
 
£_ö_fûe
,
ss_ö_£
, 
ss_no
;

526 
INT16
 
£_no
 ;

527 
INT32
 
ªt
 ;

529 
£_no
 = 
ss_no
 = -1;

530 if(
size
 == 0)

534 
fûe
 = &(
fs
->fûe[
fd
]);

539 if(
fûe
->
size
 % 
fs
->
£_size
 == 0) {

540 
£_no
 = 
	`sffs_gë_£
(
fs
);

541 if(
£_no
 < 1) {

542 
	`LOG_WARN
("SFFS:Çÿ•a˚Üe· o¿devi˚ %d\n",
£_no
 );

543 
	`sffs_£t_î∫o
(
fs
,
SFFS_NO_FREE_SE2
);

544  
FS_FAIL
;

546 
	`LOG_DEBUG
("wrôêgŸ sê%d\n",
£_no
);

547 
fûe
->
£_no
[fûe->
size
/
fs
->
£_size
] = se_no;

549 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

551 
ªt
 = 
	`sffs_îa£_©
(
fs
,(
UINT32
)
£_no
,
ERASE_NUM_PER
);

552 i‡(
ªt
 <0) {

553 
ªt
 = 
	`sffs_îa£_©
(
fs
,
£_no
,
ERASE_NUM_PER
);

554 i‡(
ªt
 <0) {

555 
	`LOG_WARN
("îa£Çew se˘‹ faûÑë %dÇÿ%d\n",
ªt
,
£_no
);

556 
	`sffs_£t_î∫o
(
fs
,
SFFS_ERASE_DATA_ERR1
);

557  
FS_FAIL
;

561 
ss_no
 = 
£_no
*(
fs
->
£_size
/fs->
ss_size
);

562 
	`LOG_DEBUG
("wrôês†%d\n",
ss_no
);

565 if(
fûe
->
size
%
fs
->
ss_size
 != 0) {

566 
	`LOG_INFO
("wrôênŸáligöed ss_sizê%d %d\n",
fûe
->
size
,size);

567 
	`sffs_£t_î∫o
(
fs
,
SFFS_UNALIGN_WRITE_ERR
);

568  
FS_FAIL
;

570 
£_ö_fûe
 = 
fûe
->
size
 / 
fs
->
£_size
;

571 
ss_ö_£
 = 
fûe
->
size
 % 
fs
->
£_size
 / fs->
ss_size
;

572 
ss_no
 = 
fûe
->
£_no
[
£_ö_fûe
] * (
fs
->
£_size
/fs->
ss_size
)+ 
ss_ö_£
;

573 
	`LOG_DEBUG
("wrôêö s†%d\n",
ss_no
);

576 
off£t
 = 
ss_no
 * 
fs
->
ss_size
;

579 if(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

580 
	`sffs_îa£_©
(
fs
,
ss_no
,
ERASE_NUM_PER
);

583 
ªt
 = 
	`sffs_wrôe_©
(
fs
, 
off£t
, 
d©a
, 
size
);

584 if(
ªt
 =
size
) {

585 
fûe
->
size
 +
ªt
;

586 
fûe
->
ofs
 +
ªt
;

589 i‡(
ªt
 !
size
)

590 
	`LOG_INFO
("tÿ0x%xÑó»0x%x\n",
size
,
ªt
);

591  
ªt
;

592 
	}
}

603 
INT32
 
	$sffs_ªad_4k
(
sffs
 *
fs
, 
INT32
 
fd
, *
d©a
, INT32 
size
)

605 
sffs_íåy
 *
fûe
;

606 
INT32
 
off£t
, 
ss_no_ö
,
£_no_ö
,
ªt
;

608 i‡(
size
 == 0)

612 
fûe
 = &(
fs
->fûe[
fd
]);

614 if(
fûe
->
size
 ==0 || fûe->
ofs
 == file->size-1)

617 if(
fûe
->
ofs
 + 
size
 > file->size)

618 
size
 = 
fûe
->sizê- fûe->
ofs
;

621 
off£t
 = 
fûe
->
ofs
;

623 
£_no_ö
 = 
off£t
/
fs
->
£_size
;

625 
ss_no_ö
 = 
off£t
%
fs
->
£_size
/fs->
ss_size
;

627 
off£t
 = off£t%
fs
->
£_size
%fs->
ss_size
 + 
fûe
->
£_no
[
£_no_ö
]*fs->£_sizê+ 
ss_no_ö
*fs->ss_size;

629 
	`LOG_DEBUG
("wêªad sê%d s†%d of†%d\n",
fûe
->
£_no
[
£_no_ö
],
ss_no_ö
,
off£t
);

631 i‡(
off£t
 % 
fs
->
ss_size
 + 
size
 > fs->ss_size) {

632 
size
 = 
fs
->
ss_size
 - 
off£t
 % fs->ss_size;

635 
ªt
 = 
	`sffs_ªad_©
(
fs
,
off£t
,
d©a
, 
size
);

637 i‡(
ªt
 <0) {

638  
ªt
;

641 i‡(
ªt
 < 
size
) {

642 
fûe
->
ofs
 +
ªt
;

643 
	`sffs_£t_î∫o
(
fs
,
SFFS_READ_DATA_ERR1
);

644  
ªt
;

646 
fûe
->
ofs
 +
size
;

647  
ªt
;

648 
	}
}

650 
	$sffs_¶Ÿ_˛ór
()

652 
jj
=0; jj<
MAX_SLOT
; jj++) {

653 
sffs_¶Ÿ
[
jj
].
ÊashId
 = -1;

654 
sffs_¶Ÿ
[
jj
].
fsid
 = -1;

656 
	}
}

669 
INT32
 
	$sffs_°¨t
(
sffs
 *
fs
)

671 
INT32
 
i
,
j
;

673 
i
=0; i<
SFFS_FILE_NUMBER
; i++) {

674 
	`mem£t
(
fs
->
fûe
[
i
].
«me
,0x0,
FNAME_LEN
);

675 
fs
->
fûe
[
i
].
hdr_ss
 = 
FS_S_UNUSED
;

676 
fs
->
fûe
[
i
].
«me_Àn
 = 0;

677 
fs
->
fûe
[
i
].
size
 = -1;

678 
fs
->
fûe
[
i
].
ofs
 = -1;

679 
j
=0; j<
SFFS_BNO_LIM
; j++) {

680 
fs
->
fûe
[
i
].
£_no
[
j
]=
FS_S_UNUSED
;

682 
fs
->
fûe
[
i
].
magic_num
 = 0;

683 
fs
->
fûe
[
i
].
comt
 = 
FS_EMPTY
;

684 
fs
->
fûe
[
i
].
unu£d
 = 
FS_EMPTY
;

685 
fs
->
fûe
[
i
].
dñed
 = 
FS_EMPTY
;

686 
fs
->
fûe
[
i
].
unu£d2
[0] = 
FS_EMPTY
;

687 
fs
->
fûe
[
i
].
unu£d2
[1] = 
FS_EMPTY
;

690 
	`mem£t
(
fs
->
‰ì_£
,0,(fs->free_se));

692 
	`mem£t
(
fs
->
‰ì_ss_hdr
,
FS_HDRS_EMPTY
,(fs->free_ss_hdr));

694 #ifde‡
SFFS_MULTI_DEVICE


695 
	`mem£t
(&
hdrsSèt
[
fs
->
fsid
],0,
FS_SS_NUM
*(
INT32
));

697 
	`mem£t
(
hdrsSèt
,0,(hdrsStat));

701 
fs
->
‰ì_ss_hdr_cur
 = 
FS_S_UNUSED
;

702 
fs
->
‰ì_£_cur
 = 1;

703 
fs
->
magic_num
 = 
SFFS_MAGIC
;

704 
fs
->
fûeNum
 = 0;

705 
fs
->
fid˙t
 = 0;

706 
fs
->
£q˙t
= 0;

707 
fs
->
lock
 = 0;

709 
	`LOG_DEBUG
("Êash sizê%d\n",
fs
->
devi˚_size
);

710  
FS_OK
;

711 
	}
}

723 
INT32
 
	$sffs_›í
(
sffs
 *
fs
,c⁄° 
INT8
 *
‚ame
,
INT32
 
mode
)

725 
INT32
 
pos
 ;

726 
sffs_íåy
 *
fûe
;

728 i‡(
‚ame
 =
NULL
) {

729 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR1
);

730  
FS_FAIL
;

733 
pos
 = 
	`sffs_föd_fûehdr
(
fs
,
‚ame
);

735 i‡(
pos
 < 0) {

737 
pos
 = 
	`sffs_gë_fûehdr
(
fs
);

738 i‡(
pos
 =
FS_FAIL
 ) {

739 
	`LOG_ERROR
("SFFS: get free file hdr fail!\n");

740  
FS_FAIL
;

742 i‡–
	`sffs_gë_hdrss
(
fs
,
pos
Ë<=
FS_FAIL
) {

743 
	`LOG_ERROR
("SFFS: get flash hdr fail\n");

744  
FS_FAIL
;

747 
fûe
 = &(
fs
->fûe[
pos
]);

749 i‡(
	`°æí
((*)
‚ame
Ë> 
FNAME_LEN
) {

750 
fûe
->
«me_Àn
 = 
FNAME_LEN
;

751 
	`LOG_WARN
("fûê«mêtoÿl⁄g %†%d\n",
‚ame
,
fûe
->
«me_Àn
);

753 
fûe
->
«me_Àn
 = 
	`°æí
((*)
‚ame
);

756 
	`°∫˝y
((*)
fûe
->
«me
, (*)
‚ame
, fûe->
«me_Àn
);

757 
fûe
->
«me
[fûe->
«me_Àn
]='\0';

758 
fûe
->
size
 = 0;

759 
fûe
->
ofs
 = 0;

760 
fûe
->
hdr_ss
 = 
fs
->
‰ì_ss_hdr_cur
;

761 
fs
->
fûeNum
 ++;

763 
	`LOG_DEBUG
("fûê%†hd∏%dÖo†%d\n",
fûe
->
«me
,fûe->
hdr_ss
,
pos
);

764 
	`LOG_DEBUG
("›í fûê%†hd∏%d\n",
‚ame
,
fs
->
‰ì_ss_hdr_cur
);

768 
fûe
 = &(
fs
->fûe[
pos
]);

771 i‡(
mode
 =
FS_RDONLY
) {

773 
fûe
->
°©
 = 
FS_RDONLY
;

774 } i‡(
mode
 =
FS_WRONLY
) {

776 
fûe
->
°©
 = 
FS_WRONLY
;

779 
fûe
->
°©
 = 
FS_RDONLY
;

781 
	`LOG_DEBUG
("›í %†fd %d\n",
‚ame
,
pos
);

782  
pos
;

783 
	}
}

787 
INT32
 
	$sffs_˛o£
(
sffs
 *
fs
, 
INT32
 
fd
)

789 
UINT32
 
ofs
;

791 i‡(
	`sffs_ck_fd
(
fs
,
fd
) < 0) {

792 
	`sffs_£t_î∫o
(
fs
,
SFFS_FD_ERR
);

793 
	`LOG_WARN
("fdÉ∏%d\n",
fd
);

794  
FS_FAIL
;

797 if(
fs
->
fûe
[
fd
].
comt
 =
FS_COMMITED
) {

798 
fs
->
fûe
[
fd
].
ofs
 = 0;

799 
fs
->
fûe
[
fd
].
°©
 = 
FS_CLOSED
;

800 
	`LOG_INFO
("commited\n");

801  
FS_OK
;

804 
fs
->
fûe
[
fd
].
magic_num
 = fs->magic_num;

805 
fs
->
fûe
[
fd
].
ofs
 = 0;

806 
fs
->
fûe
[
fd
].
comt

FS_COMMITED
;

808 
ofs
 = 
SFFS_SB_START
 * 
fs
->
£_size
 +fs->
fûe
[
fd
].
hdr_ss
*fs->
ss_size
;

810 
	`LOG_DEBUG
("˛o£ hnÿ%d of†%d sizê%d\n",
fs
->
fûe
[
fd
].
hdr_ss
, 
ofs
, (
sffs_íåy
));

811 
	`LOG_DEBUG
("c‡%dÜí %d sèà%d\n",
fd
,
fs
->
fûe
[fd].
size
, 
	`sffs_ck°©
(fs,fd));

814 i‡(
	`sffs_ck°©
(
fs
,
fd
Ë=
FS_WRONLY
) {

816 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

818 #ifde‡
SFFS_MULTI_DEVICE


819 i‡(
fsSèt
[
fs
->
fsid
] == 1) {

821 i‡(
fsSèt
 == 1) {

823 
INT32
 
ªt
 = 0;

824 
ªt
 = 
	`sffs_îa£_©
(
fs
,
SFFS_SB_START
,
ERASE_NUM_PER
);

825 i‡(
ªt
 <0) {

826 
ªt
 = 
	`sffs_îa£_©
(
fs
,
SFFS_SB_START
,
ERASE_NUM_PER
);

827 i‡(
ªt
 <0) {

828 
	`LOG_WARN
("îa£Çew se˘‹ i¿HDRSE faûÑë %d \n",
ªt
);

829 
	`sffs_£t_î∫o
(
fs
,
SFFS_ERASE_HDRSS_ERR2
);

830  
FS_FAIL
;

833 #ifde‡
SFFS_MULTI_DEVICE


834 
fsSèt
[
fs
->
fsid
] = 2;

836 
fsSèt
 = 2;

841 
fs
->
fûe
[
fd
].
fid
 = fs->
fid˙t
;

842 
fs
->
fûe
[
fd
].
£q
 = fs->
£q˙t
;

846 if(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
)

847 
	`sffs_îa£_©
(
fs
,fs->
fûe
[
fd
].
hdr_ss
,1);

849 i‡–
	`sffs_wrôe_©
(
fs
, 
ofs
, &(fs->
fûe
[
fd
]), (
UINT32
 )(&(fs->fûe[fd].
dñed
))-(UINT32)(&(fs->file[fd])))

850 < (
INT32
)((
UINT32
 )(&(
fs
->
fûe
[
fd
].
dñed
))-(UINT32)(&(fs->file[fd])))) {

853 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

855 
	`sffs_îa£_©
(
fs
, 
SFFS_SB_START
*(fs->
£_size
 / fs->
ss_size
Ë+ fs->
fûe
[
fd
].
hdr_ss
 ,
ERASE_NUM_PER
);

856 i‡–
	`sffs_wrôe_©
(
fs
, 
ofs
, &(fs->
fûe
[
fd
]),(
UINT32
 )(&(fs->fûe[fd].
dñed
))-(UINT32)(&(fs->file[fd])))

857 < (
INT32
)((
UINT32
 )(&(
fs
->
fûe
[
fd
].
dñed
))-(UINT32)(&(fs->file[fd])))) {

859 
	`LOG_WARN
("∞˛o£ fûê%d faûÇamê%s\n",
fd
,
fs
->
fûe
[fd].
«me
);

861 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_BAD
;

863 
fs
->
fûe
[
fd
].
comt
 = 
FS_FERR
;

864 
fs
->
fûe
[
fd
].
fid
 = 0;

865 
fs
->
fûe
[
fd
].
£q
 = 0;

866 
fs
->
fûeNum
 --;

867 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_HDRSS_ERR2
);

868  
FS_FAIL
;

871 
	`LOG_WARN
("≈ clo£ fûê%d faûÇamê%s\n",
fd
,
fs
->
fûe
[fd].
«me
);

873 #ifde‡
SFFS_MULTI_DEVICE


874 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
fd
].
hdr_ss
] =
FS_HDRS_TMP
;

876 
hdrsSèt
[
fs
->
fûe
[
fd
].
hdr_ss
] =
FS_HDRS_TMP
;

878 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_TMP
;

880 
fs
->
fûe
[
fd
].
comt
=
FS_FERR
;

881 
fs
->
fûe
[
fd
].
fid
 = 0;

882 
fs
->
fûe
[
fd
].
£q
 = 0;

883 
fs
->
fûeNum
 --;

884 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_HDRSS_ERR3
);

885  
FS_FAIL
;

890 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

891 #ifde‡
SFFS_MULTI_DEVICE


892 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
fd
].
hdr_ss
] =
FS_HDRS_USED
;

894 
hdrsSèt
[
fs
->
fûe
[
fd
].
hdr_ss
] =
FS_HDRS_USED
;

896 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_USED
;

898 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_USED
;

901 
fs
->
fid˙t
 ++;

902 
fs
->
£q˙t
 ++;

903 
fs
->
fûe
[
fd
].
°©
 = 
FS_CLOSED
;

904  
FS_OK
;

905 
	}
}

915 
INT32
 
	$sffs_wrôe
(
sffs
 *
fs
, 
INT32
 
fd
, c⁄° *
d©a
, INT32 
size
)

917 
UINT8
 *
ãmp
;

918 
INT32
 
size1
;

919 
sffs_íåy
 *
fûe
;

920 
INT32
 
ofsb
=0;

922 
ãmp
 = (
UINT8
 *)
d©a
;

924 i‡(
	`sffs_ck_fd
(
fs
,
fd
Ë< 0 || 
size
 <0 || sizê> 
SFFS_MAX_FILES_SIZE
) {

925 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR2
);

926  
FS_FAIL
;

929 
fûe
 = &(
fs
->fûe[
fd
]);

930 i‡(
fûe
->
°©
 !
FS_WRONLY
) {

931 
	`LOG_WARN
("not in correct mode\n");

932 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITEMODE_ERR1
);

933  
FS_FAIL
;

935 i‡(
size
 == 0)

939 if(
fûe
->
comt
 =
FS_COMMITED
) {

940 
	`LOG_INFO
("file cannot be modify");

941 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILE_REWRITE_ERR
);

942  
FS_FAIL
;

945 
ofsb
 = 
fûe
->
ofs
;

946 if(
fûe
->
ofs
 + 
size
 > 
SFFS_MAX_FILES_SIZE
) {

947 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILE_SIZE_EXCED_ERR1
);

948 
	`LOG_DEBUG
("wrôe,Éx˚ed %x\n",
fûe
->
ofs
 + 
size
);

949  
FS_FAIL
;

954 
size1
 = 
fs
->
ss_size
 - 
fûe
->
ofs
%fs->ss_size;

956 i‡(
size1
 !
fs
->
ss_size
) {

957 i‡(
size
 < 
size1
) {

958 
size1
 =
size
;

960 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size1
) < (size1)) {

962 i‡–
fs
->
î∫o
 !
SFFS_NO_FREE_SE3
) {

963 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

964 
	`sffs_îa£_©
(
fs
,fs->
fûe
[
fd
].
ofs
/fs->
ss_size
,
ERASE_NUM_PER
);

965 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size1
) < size1) {

967 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_DATA_ERR1
);

968  
fûe
->
ofs
-
ofsb
;

971  
fûe
->
ofs
 - 
ofsb
;

974  
fûe
->
ofs
 - 
ofsb
;

977 
ãmp
 +
size1
;

978 
size
 -
size1
;

981 
size1
 = 
fs
->
ss_size
;

982 if(
size
 > 
fs
->
ss_size
) {

984 
size
 >
fs
->
ss_size
) {

985 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size1
)<size1) {

986 i‡–
fs
->
î∫o
 =
SFFS_NO_FREE_SE4
) {

987  
fûe
->
ofs
-
ofsb
;

989 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

990 
	`sffs_îa£_©
(
fs
,fs->
fûe
[
fd
].
ofs
/fs->
ss_size
,
ERASE_NUM_PER
);

991 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size1
)<size1) {

992 i‡–
fs
->
î∫o
 =
SFFS_NO_FREE_SE5
) {

993  
fûe
->
ofs
-
ofsb
;

995 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_DATA_ERR3
);

996  
fûe
->
ofs
-
ofsb
;

999 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_DATA_ERR4
);

1000  
fûe
->
ofs
-
ofsb
;

1004 
size
 -
size1
;

1005 
ãmp
 +
size1
;

1009 if(
size
 >0) {

1011 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size
) < size) {

1013 i‡–
fs
->
î∫o
 =
SFFS_NO_FREE_SE6
) {

1014  
fûe
->
ofs
-
ofsb
;

1017 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

1018 
	`sffs_îa£_©
(
fs
,fs->
fûe
[
fd
].
ofs
/fs->
ss_size
,
ERASE_NUM_PER
);

1019 i‡(
	`sffs_wrôe_4k
(
fs
,
fd
,
ãmp
,
size
) < size) {

1021 i‡–
fs
->
î∫o
 =
SFFS_NO_FREE_SE7
) {

1022  
fûe
->
ofs
-
ofsb
;

1025 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_DATA_ERR5
);

1026  
fûe
->
ofs
-
ofsb
;

1029 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_DATA_ERR2
);

1030  
fûe
->
ofs
-
ofsb
;

1034 
size
 = 0;

1036  
fûe
->
ofs
-
ofsb
;

1037 
	}
}

1047 
INT32
 
	$sffs_ªad
(
sffs
 *
fs
, 
INT32
 
fd
, *
d©a
, INT32 
size
)

1049 
sffs_íåy
 *
fûe
;

1050 
INT32
 
size1
,
ªt
;

1051 
UINT8
 *
ãmp
;

1052 
INT32
 
ofsb
;

1054 
ªt
 = 
size
;

1055 
size1
 =
size
;

1056 
ãmp
 = (
UINT8
 *)
d©a
;

1058 i‡(
	`sffs_ck_fd
(
fs
,
fd
Ë< 0 || 
size
 < 0 || sizê>
SFFS_MAX_FILES_SIZE
) {

1059 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR3
);

1060  
FS_FAIL
;

1063 i‡(
size
 == 0)

1067 
fûe
 = &(
fs
->fûe[
fd
]);

1068 i‡(
fûe
->
°©
 !
FS_RDONLY
) {

1069 
	`LOG_WARN
("not inÑead mode\n");

1070 
	`sffs_£t_î∫o
(
fs
,
SFFS_READMODE_ERROR
);

1071  
FS_FAIL
;

1073 
ofsb
 = 
fûe
->
ofs
;

1075 if(
fûe
->
ofs
 + 
size
 > file->size) {

1076 
size
 = 
fûe
->sizê- fûe->
ofs
;

1077 i‡(
size
<0) {

1078 
	`LOG_WARN
("of†ex˚ed %d \n",
fûe
->
ofs
);

1079 
	`sffs_£t_î∫o
(
fs
,
SFFS_OFFSET_ERR
);

1080  
size
;

1083 
	`LOG_WARN
("ex˚ed fûêmaxÜí %d,ˇ¿⁄lyÑód %d \n",
SFFS_MAX_FILES_SIZE
,
size
);

1084 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILE_SIZE_EXCED_ERR2
);

1087 i‡(
fûe
->
ofs
%
fs
->
ss_size
 !=0) {

1088 
size1
 = 
fs
->
ss_size
 - 
fûe
->
ofs
%fs->ss_size;

1089 i‡(
size1
 > 
size
) {

1090 
size1
 = 
size
;

1092 
ªt
 = 
	`sffs_ªad_4k
(
fs
,
fd
,
ãmp
,
size1
);

1093 i‡(
ªt
 < 
size1
) {

1094 
	`sffs_£t_î∫o
(
fs
,
SFFS_READ_DATA_ERR2
);

1095  
ªt
;

1098 
ãmp
 +
size1
;

1099 
size
 -
size1
;

1103 i‡(
size
 >
fs
->
ss_size
) {

1104 
size
 >
fs
->
ss_size
) {

1105 i‡(
	`sffs_ªad_4k
(
fs
,
fd
,
ãmp
,fs->
ss_size
) < fs->ss_size) {

1106 
	`sffs_£t_î∫o
(
fs
,
SFFS_READ_DATA_ERR3
);

1107  
fûe
->
ofs
-
ofsb
;

1110 
size
 -
fs
->
ss_size
;

1111 
ãmp
 +
fs
->
ss_size
;

1115 if(
size
 > 0) {

1116 i‡(
	`sffs_ªad_4k
(
fs
,
fd
,
ãmp
,
size
) < size) {

1117 
	`sffs_£t_î∫o
(
fs
,
SFFS_READ_DATA_ERR4
);

1118  
fûe
->
ofs
-
ofsb
;

1120 
size
 = 0;

1122  
fûe
->
ofs
-
ofsb
;

1123 
	}
}

1125 
INT32
 
	$sffs_ª«me
(
sffs
 *
fs
,c⁄° 
INT8
 *
ﬁd_«me
,c⁄° INT8 *
√w_«me
)

1127 
INT32
 
pos1
,
pos2
,
∆
,
√w_hs
,
ﬁd_hs
;

1128 
UINT32
 
ofs_√w
,
ofs_ﬁd
;

1129 
sffs_íåy
 *
fûe
;

1130 
UINT8
 
d©a
 = 
FS_DELETED
;

1133 if(
ﬁd_«me
 =
NULL
 || 
√w_«me
 == NULL) {

1134 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR4
);

1135  
FS_FAIL
;

1136 } i‡(
	`°æí
((*)
√w_«me
Ë=°æí((*)
ﬁd_«me
) &&

1137 
	`°∫cmp
((*)
ﬁd_«me
,(*)
√w_«me
,
	`°æí
((*)old_name))==0) {

1138  
FS_OK
;

1142 
pos1
 = 
	`sffs_föd_fûehdr
(
fs
,
ﬁd_«me
);

1143 i‡(
pos1
 <0) {

1144 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILENAME_NOT_EXIST_ERR2
);

1145  
FS_FAIL
;

1148 
pos2
 = 
	`sffs_föd_fûehdr
(
fs
,
√w_«me
);

1149 i‡(
pos2
 >= 0) {

1150 
	`sffs_£t_î∫o
(
fs
,
SFFS_FNAME_DUPLICATE_ERR
);

1151  
FS_FAIL
;

1155 
fûe
 = &(
fs
->fûe[
pos1
]);

1157 if((
∆
 = 
	`°æí
((*)
√w_«me
))>
FNAME_LEN
) {

1158 
∆
 = 
FNAME_LEN
;

1162 i‡(
fûe
 ->
comt
 !
FS_COMMITED
) {

1163 
	`°∫˝y
((*)
fûe
->
«me
,(*)
√w_«me
,
∆
);

1164 
fûe
->
«me_Àn
 = 
∆
;

1167 
ofs_ﬁd
=
SFFS_SB_START
*
fs
->
£_size
 + (
INT32
)(
fûe
->
hdr_ss
)*fs->
ss_size
 ;

1169 
ﬁd_hs
 = 
fûe
->
hdr_ss
;

1172 i‡–(
√w_hs
 = 
	`sffs_gë_hdrss
(
fs
,
pos1
)Ë< 
FS_OK
) {

1173 
	`LOG_ERROR
("SFFS: 2 gë fœsh hd∏Áû %d\n",
√w_hs
);

1174  
FS_FAIL
;

1177 
	`mem£t
((*)
fûe
->
«me
,0,(file->name));

1178 
	`°∫˝y
((*)
fûe
->
«me
,(*)
√w_«me
,
∆
);

1179 
fûe
->
«me
[
∆
] = '\0';

1180 
fûe
->
«me_Àn
 = (
INT16
)
∆
;

1181 
fûe
->
hdr_ss
 = (
INT16
)
√w_hs
;

1182 
fûe
->
£q
 = 
fs
->
£q˙t
;

1185 
ofs_√w
 = 
SFFS_SB_START
*
fs
->
£_size
 + 
fûe
->
hdr_ss
*fs->
ss_size
;

1190 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

1192 i‡(
	`sffs_îa£_©
(
fs
,
fûe
->
hdr_ss
,1Ë!
FS_OK
) {

1193 i‡(
	`sffs_îa£_©
(
fs
,
fûe
->
hdr_ss
,1Ë!
FS_OK
) {

1194 
Áû2
;

1199 if–
	`sffs_wrôe_©
(
fs
, 
ofs_√w
, 
fûe
, (
UINT32
 )(&(fûe->
dñed
))-(UINT32)((file))) !=

1200 (
INT32
)((
UINT32
 )(&(
fûe
->
dñed
))-(UINT32)((file))) ) {

1203 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

1205 i‡(
	`sffs_îa£_©
(
fs
,
fûe
->
hdr_ss
,1Ë=
FS_OK
) {

1206 if–
	`sffs_wrôe_©
(
fs
, 
ofs_√w
, 
fûe
, (
UINT32
 )(&(fûe->
dñed
))-(UINT32)((file))) !=

1207 (
INT32
)((
UINT32
 )(&(
fûe
->
dñed
))-(UINT32)((file))) ) {

1208 
Áû2
;

1210 
ok2
;

1213 
Áû2
;

1216 
Áû2
:

1217 
	`sffs_£t_î∫o
(
fs
,
SFFS_RENAME_FAIL1
);

1218 
fs
->
‰ì_ss_hdr
[
√w_hs
]=
FS_HDRS_BAD
;

1219 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1220 #ifde‡
SFFS_MULTI_DEVICE


1221 
hdrsSèt
[
fs
->
fsid
][
√w_hs
]=
FS_HDRS_BAD
;

1223 
hdrsSèt
[
√w_hs
]=
FS_HDRS_BAD
;

1225 
fûe
->
£q
=0;

1226  
FS_FAIL
;

1228 
ok2
:

1229 
fs
->
£q˙t
++;

1230 
fs
->
‰ì_ss_hdr
[
√w_hs
]=
FS_HDRS_USED
;

1232 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1233 #ifde‡
SFFS_MULTI_DEVICE


1234 
hdrsSèt
[
fs
->
fsid
][
√w_hs
]=
FS_HDRS_USED
;

1236 
hdrsSèt
[
√w_hs
]=
FS_HDRS_USED
;

1240 
ofs_ﬁd
 +(
UINT32
 )(&(
fûe
->
dñed
)) - (UINT32 )((file));

1241 i‡–
	`sffs_wrôe_©
(
fs
,
ofs_ﬁd
,&
d©a
, 1) != 1 ) {

1243 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

1244 
	`sffs_£t_î∫o
(
fs
,
SFFS_RENAME_FAIL2
);

1245 
fs
->
‰ì_ss_hdr
[
ﬁd_hs
]=
FS_HDRS_BAD
;

1246 #ifde‡
SFFS_MULTI_DEVICE


1247 
hdrsSèt
[
fs
->
fsid
][
ﬁd_hs
]=
FS_HDRS_BAD
;

1249 
hdrsSèt
[
ﬁd_hs
]=
FS_HDRS_BAD
;

1252 i‡(
	`sffs_îa£_©
(
fs
,
ﬁd_hs
,
ERASE_NUM_PER
)<0) {

1253 
	`sffs_£t_î∫o
(
fs
,
SFFS_RENAME_FAIL2
);

1254 
fs
->
‰ì_ss_hdr
[
ﬁd_hs
]=
FS_HDRS_BAD
;

1256 
ok1
;

1260 
fûe
->
£q
=0;

1261  
FS_FAIL
;

1263 
ok1
:

1264 
fs
->
‰ì_ss_hdr
[
ﬁd_hs
]=
FS_HDRS_TMP
;

1265 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1266 #ifde‡
SFFS_MULTI_DEVICE


1267 
hdrsSèt
[
fs
->
fsid
][
ﬁd_hs
]=
FS_HDRS_TMP
;

1269 
hdrsSèt
[
ﬁd_hs
]=
FS_HDRS_TMP
;

1272 
fs
->
‰ì_ss_hdr
[
ﬁd_hs
]=
FS_HDRS_EMPTY
;

1274  
FS_OK
;

1276 
	}
}

1278 
INT32
 
	$sffs_l£ek
(
sffs
 *
fs
, 
INT32
 
fd
, INT32 
pos
)

1280 i‡(
	`sffs_ck_fd
(
fs
,
fd
Ë< 0 || 
pos
 < 0) {

1281 
	`sffs_£t_î∫o
(
fs
,
SFFS_PARA_ERR5
);

1282  
FS_FAIL
;

1285 i‡(
	`sffs_ck°©
(
fs
,
fd
Ë=
FS_WRONLY
) {

1286 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITEMODE_ERR2
);

1287  
FS_FAIL
;

1290 i‡(
pos
 > 
fs
->
fûe
[
fd
].
size
 )

1291 
fs
->
fûe
[
fd
].
ofs
 = fs->fûe[fd].
size
 -1;

1293 
fs
->
fûe
[
fd
].
ofs
 = 
pos
;

1296  
fs
->
fûe
[
fd
].
ofs
;

1297 
	}
}

1308 
INT32
 
	$sffs_ªmove_byfd
(
sffs
 *
fs
, 
INT32
 
fd
)

1310 
UINT32
 
ofs
;

1311 
INT32
 
size
;

1312 
UINT8
 
d©a
;

1313 
INT32
 
ªt
;

1315 if(
fs
->
fûe
[
fd
].
comt
 !
FS_COMMITED
) {

1316 
	`LOG_INFO
("removeá opened file\n");

1317 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILE_NOT_COMMIT_ERR
);

1319 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_S_UNUSED
;

1320 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1321 #ifde‡
SFFS_MULTI_DEVICE


1322 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
fd
].
hdr_ss
] = 
FS_HDRS_EMPTY
;

1324 
hdrsSèt
[
fs
->
fûe
[
fd
].
hdr_ss
] = 
FS_HDRS_EMPTY
;

1326 
	`sffs_ª£t_fûehdr
(
fs
,
fd
);

1327  
FS_OK
;

1330 
d©a
 = 
FS_DELETED
;

1332 
size
 = 1;

1333 
ofs
 = (
UINT32
)(
SFFS_SB_START
*
fs
->
£_size
 + fs->
fûe
[
fd
].
hdr_ss
 * fs->
ss_size
) ;

1334 
ofs
 +(
UINT32
 )(&(
fs
->
fûe
[
fd
].
dñed
)) - (UINT32 )(&(fs->file[fd]));

1336 
	`LOG_INFO
("rmovêhd∏sizê%d ,of†%d hdr_s†%d\n",
size
,
ofs
,
fs
->
fûe
[
fd
].
hdr_ss
);

1338 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_S_UNUSED
;

1340 
ªt
 = 
	`sffs_wrôe_©
(
fs
, 
ofs
, &
d©a
,
size
);

1341 i‡(
ªt
 !
size
) {

1342 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

1344 i‡(
	`sffs_îa£_©
(
fs
,fs->
fûe
[
fd
].
hdr_ss
,
ERASE_NUM_PER
)<0) {

1345 
	`LOG_WARN
("dñëêÁû %d\n",
ªt
);

1347 
	`sffs_ª£t_fûehdr
(
fs
, 
fd
);

1348 
fs
->
fûeNum
 -- ;

1349 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_EMPTY
;

1350  
FS_OK
;

1354 #ifde‡
SFFS_MULTI_DEVICE


1355 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_TMP
;

1357 
hdrsSèt
[
fs
->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_TMP
;

1360 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_S_UNUSED
;

1361 
	`sffs_ª£t_fûehdr
(
fs
, 
fd
);

1362 
	`sffs_£t_î∫o
(
fs
,
SFFS_DEL_ERR
);

1363 
fs
->
fûeNum
 -- ;

1364  
FS_FAIL
;

1366 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

1367 #ifde‡
SFFS_MULTI_DEVICE


1368 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_TMP
;

1370 
hdrsSèt
[
fs
->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_TMP
;

1372 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_EMPTY
;

1374 
fs
->
‰ì_ss_hdr
[fs->
fûe
[
fd
].
hdr_ss
]=
FS_HDRS_EMPTY
;

1376 
	`sffs_ª£t_fûehdr
(
fs
, 
fd
);

1377 
fs
->
fûeNum
 -- ;

1378  
FS_OK
;

1379 
	}
}

1391 
INT32
 
	$sffs_ªmove_by«me
(
sffs
 *
fs
, c⁄° 
INT8
 *
‚ame
)

1393 
INT32
 
pos
 ;

1395 
pos
 = 
	`sffs_föd_fûehdr
(
fs
,
‚ame
);

1396 i‡(
pos
 < 0) {

1397 
	`LOG_INFO
("nÿfûê%s\n",
‚ame
);

1398 
	`sffs_£t_î∫o
(
fs
,
SFFS_FILENAME_NOT_EXIST_ERR3
);

1399  
FS_FAIL
;

1401  
	`sffs_ªmove_byfd
(
fs
, 
pos
);

1403 
	}
}

1406 
INT32
 
	$sffs_f‹m©
(
sffs
 *
fs
, 
INT32
 
ty≥
)

1408 
INT32
 
ªt
;

1409 
ty≥
) {

1410 
FS_FORMAT_DISK
:

1412 
FS_FORMAT_HDRS
:

1414 
ªt
 = 
	`sffs_îa£_©
(
fs
,
SFFS_SB_START
,
FORMAT_HDRSS
);

1416 if(
ªt
 <0) {

1417 
ªt
 = 
	`sffs_îa£_©
(
fs
,
SFFS_SB_START
,
FORMAT_HDRSS
);

1418 if(
ªt
 <0) {

1419 
	`sffs_£t_î∫o
(
fs
, 
SFFS_ERASE_HDRSS_ERR3
);

1420 
	`LOG_INFO
("erase hdr faile\n");

1421 
	`sffs_°¨t
(
fs
);

1422 
fs
->
‰ì_ss_hdr_cur
 = 0;

1423  
FS_FAIL
;

1426 
	`sffs_°¨t
(
fs
);

1427 
fs
->
‰ì_ss_hdr_cur
 = 0;

1429 
FS_FORMAT_ALL
:

1431 
INT32
 
i
=0; i<
fs
->
devi˚_size
/fs->
îa£_unô
; i++) {

1432 
ªt
 = 
	`sffs_îa£_©
(
fs
,
i
,
ERASE_NUM_PER
);

1433 if(
ªt
 <0) {

1434 
ªt
 = 
	`sffs_îa£_©
(
fs
,
i
,
ERASE_NUM_PER
);

1435 if(
ªt
 <0) {

1436 
	`sffs_£t_î∫o
(
fs
, 
SFFS_ERASE_DATA_ERR2
);

1437 
	`LOG_INFO
("îa£ whﬁêÊash faûê%d\n",
i
);

1438 
	`sffs_°¨t
(
fs
);

1439 
fs
->
‰ì_ss_hdr_cur
 = 0;

1440  
FS_FAIL
;

1444 
	`sffs_°¨t
(
fs
);

1445 
fs
->
‰ì_ss_hdr_cur
 = 0;

1448 
	`LOG_INFO
("parameterÉrr\n");

1451  
FS_OK
;

1452 
	}
}

1456 
INT32
 
	$sffs_umou¡
(
sffs
 *
fs
)

1458 
fs
->
mou¡ed
 = 
FS_UMOUNTED
;

1459 
	`sffs_°¨t
(
fs
);

1460  
FS_OK
;

1461 
	}
}

1463 
ölöe
 
INT32
 
	$sffs_check_sffs
(
sffs
 
fs
)

1465 
INT32
 
ªt
 = 0;

1466 i‡(
fs
.
devi˚_size
 =0 || fs.
ss_size
 ==0

1467 || 
fs
.
£_size
 == 0 ) {

1468 
ªt
 = -1;

1470  
ªt
;

1471 
	}
}

1474 
INT32
 
	$sffs_ªgi°î
(
sffs
 
fs
)

1476 i‡(
	`sffs_check_sffs
(
fs
))

1479 
i
=0; i<
MAX_SLOT
-1; i++) {

1480 if(
sffs_¶Ÿ
[
i
].
ÊashId
 == -1) {

1481 
	`mem˝y
(&
sffs_¶Ÿ
[
i
],&
fs
,(
sffs
));

1482 
sffs_¶Ÿ
[
i
].
fsid
=i;

1483  
i
;

1487 
	}
}

1489 
sffs
 *
	$sffs_gë_¶Ÿ
(
fsid
)

1491  (
fsid
>=0 && fsid <
MAX_SLOT
-1)?&
sffs_¶Ÿ
[fsid]:0;

1492 
	}
}

1501 
INT32
 
	$sffs_mou¡
(
sffs
 *
fs
, 
INT32
 
ty≥
)

1503 
UINT32
 
off£t
;

1504 
INT16
 
i
,
k
;

1506 
UINT8
 
hódî
[(
sffs_íåy
)+1];

1507 
INT32
 
ªt
;

1509 
i
 = 
k
 = 0;

1510 
off£t
 = 
SFFS_SB_START
*
fs
->
£_size
;

1512 if–
fs
->
mou¡ed
 =
FS_MOUNTED
) {

1513 
	`LOG_WARN
("f†mou¡ed %s\n",
fs
->
f¢ame
);

1514  
FS_OK
;

1517 i‡(
ty≥
 == 1) {

1519 
fs
->
mou¡ed
 = 
FS_MOUNTED
;

1520 
	`LOG_INFO
("f†mou¡Åÿîa£áŒ %s\n",
fs
->
f¢ame
);

1521  
FS_OK
;

1524 i‡(
	`sffs_°¨t
(
fs
) <0) {

1525  
FS_FAIL
;

1527 
	`FS_TRYLOCK
(
fs
);

1528 
	`LOG_DEBUG
("devi˚ sizê0x%x magi¯0x%x sb %d\n",
fs
->
devi˚_size
,fs->
magic_num
,
SFFS_SB_START
);

1530 
off£t
 < 
fs
->
£_size
+
SFFS_SB_START
*fs->se_size &&

1531 
	`sffs_ªad_©
(
fs
, 
off£t
,
hódî
, (
sffs_íåy
)) == (sffs_entry)) {

1534 i‡(
hódî
[
FF_HDR_DELED
] !
FS_EMPTY
 ||

1535 
hódî
[
FF_HDR_COMMIT
] !
FS_COMMITED
 ||

1536 *(
UINT32
 *)(
hódî
Ë!
SFFS_MAGIC
) {

1539 if(
fs
->
‰ì_ss_hdr_cur
 < 0) {

1540 
fs
->
‰ì_ss_hdr_cur
 = 
i
;

1542 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1543 #ifde‡
SFFS_MULTI_DEVICE


1544 
hdrsSèt
[
fs
->
fsid
][
i
]
FS_HDRS_TMP
;

1546 
hdrsSèt
[
i
] = 
FS_HDRS_TMP
;

1549 
i
++;

1550 
off£t
=
SFFS_SB_START
*
fs
->
£_size
 + 
i
*fs->
ss_size
;

1555 
	`mem˝y
(&(
fs
->
fûe
[fs->
fûeNum
]), 
hódî
, (
sffs_íåy
));

1558 
ªt
 = 
	`sffs_check_fid
(
fs
, fs->
fûe
[fs->
fûeNum
].
fid
);

1560 i‡(
ªt
 !
FS_FAIL
) {

1561 
INT32
 
fhdrs_t
;

1562 
UINT8
 
d©a
 = 
FS_DELETED
;

1563 
UINT32
 
ofs0
 ;

1565 if(
fs
->
fûe
[fs->
fûeNum
].
£q
 < fs->fûe[
ªt
].seq) {

1566 
	`mem˝y
(&(
fs
->
fûe
[
ªt
]), &(fs->fûe[fs->
fûeNum
]), (
sffs_íåy
));

1567 
fhdrs_t
 = 
ªt
;

1569 
fhdrs_t
 = 
fs
->
fûeNum
;

1571 
ofs0
 = (
UINT32
 )(&(
fs
->
fûe
[
fhdrs_t
].
dñed
)) - (UINT32 )(&(fs->file[fhdrs_t])) +

1572 (
UINT32
)(
fs
->
fûe
[
fhdrs_t
].
hdr_ss
*fs->
ss_size
);

1575 i‡(
	`sffs_wrôe_©
(
fs
,
ofs0
,&
d©a
,1) != 1) {

1576 i‡(
fs
->
∑geEø£
 =
SFFS_PAGE_ERASE
) {

1577 i‡(
	`sffs_wrôe_©
(
fs
,
ofs0
,&
d©a
,1) != 1) {

1578 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_HDRSS_ERR4
);

1579 
	`FS_UNLOCK
(
fs
);

1580  
FS_FAIL
;

1583 
	`sffs_£t_î∫o
(
fs
,
SFFS_WRITE_HDRSS_ERR5
);

1584 
	`FS_UNLOCK
(
fs
);

1585  
FS_FAIL
;

1588 
fs
->
fûe
[
fhdrs_t
].
°©
 = 
FS_CLOSED
;

1589 
i
++;

1590 
off£t
 = 
SFFS_SB_START
*
fs
->
£_size
 + 
i
*fs->
ss_size
;

1591 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1592 #ifde‡
SFFS_MULTI_DEVICE


1593 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[fs->
fûeNum
].
hdr_ss
]=
FS_HDRS_USED
;

1595 
hdrsSèt
[
fs
->
fûe
[fs->
fûeNum
].
hdr_ss
]=
FS_HDRS_USED
;

1600 
fs
->
fûe
[fs->
fûeNum
].
°©
 = 
FS_CLOSED
;

1602 if(
fs
->
fûe
[fs->
fûeNum
].
fid
 >fs->
fid˙t
)

1603 
fs
->
fid˙t
 = fs->
fûe
[fs->
fûeNum
].
fid
;

1605 if(
fs
->
fûe
[fs->
fûeNum
].
£q
 > fs->
£q˙t
)

1606 
fs
->
£q˙t
 = fs->
fûe
[fs->
fûeNum
].
£q
;

1608 
fs
->
‰ì_ss_hdr
[fs->
fûe
[fs->
fûeNum
].
hdr_ss
]=
FS_HDRS_USED
;

1610 i‡(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
) {

1611 #ifde‡
SFFS_MULTI_DEVICE


1612 
hdrsSèt
[
fs
->
fsid
][fs->
fûe
[fs->
fûeNum
].
hdr_ss
]=
FS_HDRS_USED
;

1614 
hdrsSèt
[
fs
->
fûe
[fs->
fûeNum
].
hdr_ss
]=
FS_HDRS_USED
;

1619 
k
=0; k<
SFFS_BNO_LIM
 && 
fs
->
fûe
[fs->
fûeNum
].
£_no
[k]>0; k++) {

1620 
	`sffs_£t_£bô
(
fs
,fs->
fûe
[fs->
fûeNum
].
£_no
[
k
]);

1622 
	`LOG_DEBUG
("gŸ fûês†%d cmà0x%x dñ 0x%x magi¯0x%x\n",
i
,
hódî
[
FF_HDR_COMMIT
],hódî[
FF_HDR_DELED
]);

1623 
	`LOG_DEBUG
("mn 0x%xÇame %s fid %dÇl %d size %d ofs 0x%x hdr %d,cmt 0x%x, del %d\n",

1624 
fs
->
fûe
[fs->
fûeNum
].
magic_num
, fs->fûe[fs->fûeNum].
«me
, fs->fûe[fs->fûeNum].
fid
,

1625 
fs
->
fûe
[fs->
fûeNum
].
«me_Àn
, fs->fûe[fs->fûeNum].
size
, fs->fûe[fs->fûeNum].
ofs
,

1626 
fs
->
fûe
[fs->
fûeNum
].
hdr_ss
, fs->fûe[fs->fûeNum].
comt
, fs->fûe[fs->fûeNum].
dñed
);

1628 
i
++;

1629 
off£t
=
SFFS_SB_START
*
fs
->
£_size
 + 
i
*fs->
ss_size
;

1630 
fs
->
fûeNum
 ++;

1632 
fs
->
fid˙t
++;

1634 i‡(
fs
->
fûeNum
<1) {

1635 
	`LOG_INFO
("empty flash \n");

1636 
fs
->
‰ì_ss_hdr_cur
 = 0;

1637 if(
fs
->
∑geEø£
 !
SFFS_PAGE_ERASE
)

1638 #ifde‡
SFFS_MULTI_DEVICE


1639 
fsSèt
[
fs
->
fsid
] = 1;

1641 
fsSèt
 = 1;

1645 i‡(
ty≥
 == 2) {

1648 
fs
->
mou¡ed
 = 
FS_MOUNTED
;

1649 
	`LOG_DEBUG
("SFFS: mounted!\n");

1650 
	`FS_UNLOCK
(
fs
);

1651  
FS_OK
;

1652 
	}
}

	@driver/fs/sffs/sffs.h

30 #i‚de‡
SFFS_MAIN_STRUCT_H__


31 
	#SFFS_MAIN_STRUCT_H__


	)

35 
	~<libc/°dio.h
>

36 
	~<c⁄fig.h
>

37 
	~<libc/°ddef.h
>

38 
	~<drv_c⁄fig.h
>

39 
	~<libc/ˇgboŸ.h
>

40 
	~"../bôs.h
"

41 
	~<logh.h
>

44 
	#FS_HDRS_EMPTY
 0

	)

45 
	#FS_HDRS_USED
 1

	)

46 
	#FS_HDRS_TMP
 2

	)

47 
	#FS_HDRS_BAD
 3

	)

49 
	#FS_S_UNUSED
 -1

	)

50 
	#FS_COMMITED
 0xc0

	)

51 
	#FS_DELETED
 0xde

	)

52 
	#FS_EMPTY
 0xff

	)

53 
	#FS_FERR
 0xì

	)

56 
	#FS_IS_LOCKED
 -1

	)

57 
	#FS_LOCK
 0

	)

60 
	#SFFS_COMMITED
 0x1

	)

65 
	#LOG_STUBS


	)

66 
	#LOG_LEVEL
 1

	)

68 
NOLOG
(c⁄° *
c
,...);

70 #ifde‡
LOG_STUBS


71 #i‡
LOG_LEVEL
 >= 4

72 
	#LOG_DEBUG
 
¥ötf


	)

74 
	#LOG_DEBUG
 
NOLOG


	)

76 #i‡
LOG_LEVEL
 >= 3

77 
	#LOG_INFO
 
¥ötf


	)

79 
	#LOG_INFO
 
NOLOG


	)

81 #i‡
LOG_LEVEL
 >= 2

82 
	#LOG_WARN
 
¥ötf


	)

84 
	#LOG_WARN
 
NOLOG


	)

86 #i‡
LOG_LEVEL
 >= 1

87 
	#LOG_ERROR
 
¥ötf


	)

89 
	#LOG_ERROR
 
NOLOG


	)

92 
	#LOG_DEBUG
 
NOLOG


	)

93 
	#LOG_INFO
 
NOLOG


	)

94 
	#LOG_WARN
 
NOLOG


	)

95 
	#LOG_ERROR
 
NOLOG


	)

99 
	#FF_HDR_MAGIC
 0

	)

101 
	#FF_HDR_NAME
 (
FF_HDR_MAGIC
+4)

	)

103 
	#FF_HDR_NAMELEN
 (
FF_HDR_NAME
+
FNAME_LEN
+1)

	)

105 
	#FF_HDR_SIZE
 (
FF_HDR_NAMELEN
+2)

	)

107 
	#FF_HDR_OFS
 (
FF_HDR_SIZE
+ 4)

	)

108 
	#FF_HDR_FID
 (
FF_HDR_OFS
 + 4)

	)

109 
	#FF_HDR_SEQ
 (
FF_HDR_FID
 + 4)

	)

111 
	#FF_HDR_BNO
 (
FF_HDR_SEQ
 + 4)

	)

112 
	#FF_HDR_HDRSS
 (
FF_HDR_BNO
 + 
SFFS_BNO_LIM
*2)

	)

114 
	#FF_HDR_COMMIT
 (
FF_HDR_HDRSS
 + 2)

	)

116 
	#FF_HDR_UNUSED1
 (
FF_HDR_COMMIT
 +1)

	)

118 
	#FF_HDR_DELED
 (
FF_HDR_UNUSED1
 + 1)

	)

119 
	#FF_HDR_STAT
 (
FF_HDR_DELED
 +1)

	)

120 
	#FF_HDR_UNUSED2
 (
FF_HDR_STAT
 + 1)

	)

122 
	#SFFS_HEADER_SIZE
 (
FF_HDR_STAT
+2)

	)

124 
	#MAX_SLOT
 2

	)

127 
	$INT32
 (*
	twrôe_func
)(
	tINT32
 
	tdid
, 
	tUINT32
 
	tofs
, 
	tUINT8
 *
	t±r
, UINT32 
	tsize
);

128 
	$INT32
 (*
	tªad_func
)(
	tINT32
 
	tdid
, 
	tUINT32
 
	tofs
, 
	tUINT8
 *
	t±r
, UINT32 
	tsize
);

129 
	$INT32
 (*
	t£ek_func
)(
	tINT32
 
	tdid
, INT32 
	toff£t
, INT32 
	twhí˚
);

130 
	$INT32
 (*
	tîa£_func
)(
	tINT32
 
	tdid
, 
	tUINT32
 
	tno
, UINT32 
	tnum
);

133 
	ssffs_íåy
 {

134 
UINT32
 
magic_num
;

135 
INT8
 
«me
[
FNAME_LEN
+1];

136 
INT16
 
«me_Àn
;

138 
INT32
 
size
;

139 
INT32
 
ofs
;

140 
UINT32
 
fid
;

141 
UINT32
 
£q
;

142 
INT16
 
£_no
[
SFFS_BNO_LIM
];

143 
INT16
 
hdr_ss
;

144 
UINT8
 
comt
;

145 
UINT8
 
unu£d
;

147 
UINT8
 
dñed
;

149 
UINT8
 
°©
;

150 
UINT8
 
unu£d2
[2];

153 
	ssffs
 {

155 
INT32
 
devi˚_size
;

157 
sffs_íåy
 
fûe
[
SFFS_FILE_NUMBER
];

159 
UINT32
 
‰ì_£
[
SE_NUM
/
FREE_SIZEOF
];

160 
INT8
 
‰ì_ss_hdr
[
SFFS_FHDR_NUM
];

162 
INT16
 
‰ì_£_cur
;

164 
INT16
 
‰ì_ss_hdr_cur
;

167 
INT32
 
fûeNum
;

169 
INT32
 
mou¡ed
;

171 
INT32
 
î∫o
;

173 
UINT32
 
fid˙t
;

174 
UINT32
 
£q˙t
;

175 
UINT32
 
ÊashId
;

176 
UINT32
 
fsid
;

177 
INT8
 
lock
;

179 
UINT8
 
∑geEø£
;

180 
INT8
 
f¢ame
[16];

182 
UINT32
 
magic_num
;

184 
INT32
 
ss_size
;

186 
INT32
 
£_size
;

187 
INT32
 
îa£_unô
;

191 
îa£_func
 
îa£
;

192 
wrôe_func
 
wrôe
;

193 
ªad_func
 
ªad
;

194 
£ek_func
 
£ek
;

201 
	#SFFS_ERASE_HDRSS_ERR
 -4

	)

202 
	#SFFS_WRITE_HDRSS_ERR
 -10

	)

203 
	#SFFS_HDRSS_FULL_ERR
 -7

	)

205 
	#SFFS_NO_FREEHDRSS_ERR
 -5

	)

206 
	#SFFS_NO_FREEHDRSS_ERR1
 -31

	)

208 
	#SFFS_FILE_NUM_FULL_ERR
 -6

	)

210 
	#SFFS_PARA_ERR
 -1

	)

212 
	#SFFS_FILENAME_NOT_EXIST_ERR1
 -38

	)

213 
	#SFFS_FILENAME_NOT_EXIST_ERR2
 -39

	)

214 
	#SFFS_FILENAME_NOT_EXIST_ERR3
 -40

	)

215 
	#SFFS_FILENAME_NOT_EXIST_ERR4
 -41

	)

216 
	#SFFS_FILENAME_NOT_EXIST_ERR5
 -42

	)

217 
	#SFFS_FD_ERR
 -9

	)

218 
	#SFFS_WRONLY_ERR
 -15

	)

219 
	#SFFS_READMODE_ERROR
 -18

	)

220 
	#SFFS_WRITEMODE_ERR
 -19

	)

221 
	#SFFS_FILE_REWRITE_ERR
 -12

	)

222 
	#SFFS_UNALIGN_WRITE_ERR
 -14

	)

223 
	#SFFS_DEL_ERR
 -21

	)

224 
	#SFFS_FILE_LOCKED_ERR
 -2

	)

225 
	#SFFS_FILE_NOT_COMMIT_ERR
 -20

	)

226 
	#SFFS_FILE_SIZE_EXCED_ERR
 -16

	)

227 
	#SFFS_INIT_ERR
 -22

	)

228 
	#SFFS_NOT_NOT_MOUNTED
 -23

	)

229 
	#SFFS_MODE_ERR
 -29

	)

231 
	#SFFS_NO_FREE_SE
 -3

	)

232 
	#SFFS_READ_DATA_ERR
 -11

	)

233 
	#SFFS_ERASE_DATA_ERR
 -13

	)

234 
	#SFFS_WRITE_DATA_ERR1
 -32

	)

235 
	#SFFS_WRITE_DATA_ERR2
 -33

	)

236 
	#SFFS_WRITE_DATA_ERR3
 -34

	)

237 
	#SFFS_WRITE_DATA_ERR4
 -35

	)

238 
	#SFFS_WRITE_DATA_ERR5
 -36

	)

239 
	#SFFS_WRITE_DATA_ERR6
 -37

	)

240 
	#SFFS_OFFSET_ERR
 -30

	)

242 
	#SFFS_GLOBAL_ERR
 -24

243 
	#SFFS_BUF_ERR
 -25

	)

244 
	#SFFS_FNAME_DUPLICATE_ERR
 -26

	)

245 
	#SFFS_RENAME_FAIL1
 -27

	)

246 
	#SFFS_RENAME_FAIL2
 -28

	)

250 
	#FS_CLOSED
 0

	)

251 
	#FS_RDONLY
 1

	)

252 
	#FS_WRONLY
 2

	)

255 
	#FS_UMOUNTED
 0

	)

256 
	#FS_MOUNTED
 1

	)

259 
	#FS_OPEN_NORMAL
 0

260 
	#FS_OPEN_TRU
 1

261 
	#FS_OPEN_CREATE
 2

262 

	)

263 
	#FS_ID_POS
(
id
Ë((id==0)?0:(1<<(16-1+id)))

	)

264 
	#FS_ID_GET
(
id
Ë(
	`__buûtö_ffs
((id&0xffff0000)>>16))

	)

267 
	#FS_SEEK_SET
 0

	)

268 
	#FS_SEEK_TELL
 1

	)

271 
	#FS_OK
 0

	)

272 
	#FS_FAIL
 -1

	)

274 
	#FS_FORMAT_HDRS
 0

	)

275 
	#FS_FORMAT_ALL
 1

	)

276 
	#FS_FORMAT_DISK
 2

	)

280 
	`sffs_£t_î∫o
(
sffs
 *
fs
,
INT32
 
î∫o
);

281 
INT32
 
	`sffs_is_mou¡ed
(
sffs
 *
fs
);

282 
INT32
 
	`sffs_mou¡
(
sffs
 *
fs
, INT32 
ty≥
);

284 
	#ERASE_NUM_PER
 1

	)

290 
	#FS_IS_MOUNTED
(
fs
Ëi‡(!
	`sffs_is_mou¡ed
(fs)) { \

291 
	`sffs_£t_î∫o
(
fs
,
SFFS_NOT_NOT_MOUNTED
); \

292 
	`LOG_DEBUG
("NOT mountedn\n"); \

293 
	`sffs_u∆ock
(
fs
); \

294  
FS_FAIL
; \

295 
	}

	)
}

297 
	#FS_UNLOCK
(
fs
Ë
	`sffs_u∆ock
(fs);

	)

299 
	#FS_TRYLOCK
(
fs
Ëi‡(
	`sffs_lock
(fs)!=
FS_OK
) { \

300 
	`sffs_£t_î∫o
(
fs
, 
SFFS_FILE_LOCKED_ERR
); \

301 
	`LOG_DEBUG
("LOCK ERRORn\n"); \

302  
FS_FAIL
; \

303 }

	)

305 
	#FS_DEFI2
 
sffs
 *
fs
; \

306 
INT32
 
ªt
 = 
FS_FAIL
; \

307 
	`FS_CKFSID
(
fsid
); \

308 
fs
 = &
sffs_¶Ÿ
[
fsid
]; \

309 
	`FS_TRYLOCK
(
fs
); \

310 
	`FS_IS_MOUNTED
(
fs
);

	)

311 
	#FS_DEFI
 
sffs
 *
fs
=&
sffs_¶Ÿ
[0]; \

312 
INT32
 
ªt
 = 
FS_FAIL
; \

313 
	`FS_TRYLOCK
(
fs
); \

314 
	`FS_IS_MOUNTED
(
fs
);

	)

316 
	#FS_DEFO
 
	`FS_UNLOCK
(
fs
); \

317  
ªt
;

	)

319 
	#FS_CKADDR
(
buf
Ëif–bu‡=
NULL
) { \

320 
	`sffs_£t_î∫o
(
fs
,
SFFS_BUF_ERR
); \

321 
	`LOG_DEBUG
("EMPTY POINTER\n"); \

322 
FS_DEFO
; \

323 }

	)

326 
	#FS_CKFSID
(
fsid
Ëif(fsid < 0 || fsid >
MAX_SLOT
 || 
sffs_¶Ÿ
[fsid].
ÊashId
 == -1) { \

327 
	`sffs_£t_î∫o
(&
sffs_¶Ÿ
[
MAX_SLOT
-1], 
SFFS_PARA_ERR
); \

328 
	`LOG_DEBUG
("fs idÉrr\n"); \

329  
FS_FAIL
; \

330 }

	)

332 
	#FS_GET_SFFS
(
fsid
Ë
sffs
 *
fs
; \

333 
ªt
 = 
FS_FAIL
; \

334 
	`FS_CKFSID
(
fsid
); \

335 
fs
 =&
sffs_¶Ÿ
[
fsid
];

	)

339 
INT32
 
sffs_lock
(
sffs
 *
fs
);

340 
INT32
 
sffs_u∆ock
(
sffs
 *
fs
);

341 
sffs
 *
sffs_gë_¶Ÿ
(
fsid
);

342 
INT32
 
sffs_ªgi°î
(
sffs
 
fs
);

343 
sffs_£t_î∫o
(
sffs
 *
fs
,
INT32
 
î∫o
);

344 
INT32
 
sffs_umou¡
(
sffs
 *
fs
);

345 
INT32
 
sffs_föd_fûehdr
(
sffs
 *
fs
,c⁄° 
INT8
 *
‚ame
);

346 
INT32
 
sffs_ª«me
(
sffs
 *
fs
,c⁄° 
INT8
 *
ﬁd_«me
,c⁄° INT8 *
√w_«me
);

347 
INT32
 
sffs_gë_fsfd
(INT32 
fd
);

348 
INT32
 
sffs_ck_fd
(
sffs
 *
fs
, INT32 
fd
);

349 
INT32
 
sffs_l£ek
(
sffs
 *
fs
, INT32 
fd
, INT32 
pos
);

350 
INT32
 
sffs_ªmove_by«me
(
sffs
 *
fs
, c⁄° 
INT8
 *
‚ame
);

351 
INT32
 
sffs_›í
(
sffs
 *
fs
,c⁄° 
INT8
 *
‚ame
,INT32 
mode
);

352 
INT32
 
sffs_˛o£
(
sffs
 *
fs
, INT32 
fd
);

353 
INT32
 
sffs_wrôe
(
sffs
 *
fs
, INT32 
fd
, c⁄° *
d©a
, INT32 
size
);

354 
INT32
 
sffs_ªad
(
sffs
 *
fs
, INT32 
fd
, *
d©a
, INT32 
size
);

355 
INT32
 
sffs_f‹m©
(
sffs
 *
fs
, INT32 
ty≥
);

356 
INT32
 
sffs_gë_î∫o
(INT32 
fsid
) ;

359 
__ölöe__
 
INT32
 
	$sffs_ªad_©
(
sffs
 *
fs
, 
UINT32
 
off£t
, *
d©a
,UINT32 
size
)

361 
INT32
 
ªt
 = 
FS_FAIL
;

362 if(
fs
->
ªad
 !
NULL
) {

363 
ªt
 = 
fs
->
	`ªad
(fs->
ÊashId
, 
off£t
, (
UINT8
 *)
d©a
, 
size
);

364 
	`LOG_DEBUG
("sffs_ªad_© 0x%x sizê%dÇamê%s\n",
off£t
,
size
,
fs
->
f¢ame
);

365 
	`LOG_DEBUG
("%x %x\n",*(
UINT32
 *)
d©a
,*((UINT32 *)data+1));

367  
ªt
;

368 
	}
}

371 
INT32
 
fs_ª«me
(c⁄° 
INT8
 *
ﬁd_«me
,c⁄° INT8 *
√w_«me
);

372 
INT32
 
fs_f‹m©
(INT32 
ty≥
);

373 
INT32
 
fs_umou¡
(INT32 
fsid
);

374 
INT32
 
fs_mou¡
(INT32 
ty≥
);

375 
INT32
 
fs_›í
(c⁄° 
INT8
 *
‚ame
, INT32 
Êags
, INT32 
mode
);

376 
INT32
 
fs_ªmove
(c⁄° 
INT8
 *
‚ame
);

377 
INT32
 
fs_˛o£
(INT32 
fd
);

378 
INT32
 
fs_wrôe
(INT32 
fd
, c⁄° *
buf
, 
UINT32
 
cou¡
);

379 
INT32
 
fs_ªad
(INT32 
fd
, *
buf
, 
UINT32
 
cou¡
);

380 
INT32
 
fs_l£ek
(INT32 
fd
, INT32 
pos
, INT32 
cfg
);

381 
INT32
 
fs_fûe_Àn
(
INT8
 *
‚ame
);

382 
INT32
 
fs_ls
();

383 
INT32
 
fs_u£d
();

384 
INT32
 
fs_‰ì
();

	@driver/hw_init.c

1 
	~<drv_c⁄fig.h
>

2 
	~<libc/°rög.h
>

3 
	~<libc/ønd.h
>

4 
	~<libc/ønd.h
>

5 
	~"../drivî/devi˚/dfs/dfs.h
"

6 
	~<logh.h
>

8 #ifde‡
CONFIG_NOR_FLASH


9 
	~"../drivî/devi˚/n‹Êash/Œd.h
"

12 #ifde‡
CONFIG_FS


13 
	~"../drivî/fs/fs_≠i.h
"

14 
sffs
 
sffs_¶Ÿ
[];

18 #ifde‡
FSL_BOARD


20 #ifde‡
CONFIG_IIC


21 
	~"../drivî/devi˚/iic/iic.h
"

24 #ifde‡
CONFIG_SPI


25 
	~"../drivî/devi˚/•i/devi˚_defs.h
"

26 
	~"../drivî/devi˚/•i/•i.h
"

29 
f¶_i2c_öô
(
id
, 
•ìd
, 
¶avódd
);

30 
sf_id
();

33 
	gsf_Êash_î∫o
;

36 
dfs_›s
 
	gπcOps
 = {

37 .
wrôe
 = 
πc_wrôe
,

38 .
	gªad
 = 
πc_ªad
,

39 .
	gsize
 = 32,

40 .
	g°¨t
 = 0,

41 .
	gíd
 = 31,

42 .
	gba£_addr
 = 0,

46 
Êash_°ru˘
 
	gs25Ê128sSt
 = {

47 .
£Size
 = 
BYTES_PER_SECTOR
,

48 .
	g£Num
 = 256,

49 .
	gssSize
 = 
BYTES_PER_PAGE
,

50 .
	gssNum
 = 256,

51 .
	gtŸÆSize
 = 16*1024*1024,

54 
dfs_›s
 
	gs25Ê128sOps
 = {

55 .
d«me
 = (
UINT8
 *)"s25fl128s\n",

56 .
	gwrôe
 = 
sf_wrôe
,

57 .
	gªad
 = 
sf_ªad
,

58 .
	gîa£
 = 
sf_îa£
,

59 .
	gba£_addr
 = 0,

60 .
	g°¨t
 = 0,

61 .
	gsize
 = 16*1024*1024,

62 .
	gíd
 = 0 + 16*1024*1024,

63 .
	gd©a
 = (
Êash_°ru˘
 *)&
s25Ê128sSt
,

67 
	gsfDid
 = 0;

68 
	gπcId
;

82 #i‡
deföed
(
CONFIG_IIC
)

83 
	$iic_öô
()

85 
	`f¶_i2c_öô
(0,
CONFIG_SYS_FSL_I2C_SPEED
,
CONFIG_SYS_FSL_I2C_SLAVE
);

87 
	`mem£t
(&
πcOps
,0,(rtcOps));

89 
πcId
 = 
	`dfs_ªgi°î
(&
πcOps
);

92 
	}
}

95 #i‡
deföed
(
CONFIG_SPI
)

96 
	$•i_öô
()

98 
	`mem£t
(&
s25Ê128sOps
,0,(s25fl128sOps));

99 
	`mem£t
(&
s25Ê128sSt
,0,(s25fl128sSt));

101 
sfDid
 = 
	`dfs_ªgi°î
(&
s25Ê128sOps
);

102 i‡(
sfDid
<0) {

103 
	`¥ötf
("s‡›†ªgi°î faû %d\n",
sfDid
);

107 
	`sf_id
();

109 
	}
}

114 #ifde‡
SFFS_FPGA_SPI


116 
	~"devi˚/•iÊash/sf.h
"

120 
UINT32
 
fs_gë_îr
(
fsid
);

123 
n‹_Êash_î∫o
;

124 
dfs_›s
 
	gs29gl512pOps
;

125 
Êash_°ru˘
 
	gs29gl512pSt
;

126 #ifde‡
SFFS_MULTI_DEVICE


127 
dfs_›s
 
	gs29gl512pOps2
;

128 
Êash_°ru˘
 
	gs29gl512pSt2
;

130 
	gdfd
= -1;

131 
	gdfd2
= -1;

132 
	gsffs_idx
;

133 
	gsffs_idx2
;

136 
sf2_Êash_î∫o
;

137 
Êash_°ru˘
 
	gÂgaÊashSt
;

138 
dfs_›s
 
	gÂgaÊashOps
;

139 
dfs_›s
 
	gÂgaÊashOps2
;

140 
	gsffs_idx3
;

141 
	gdfd3
= -1;

145 
Êash_°ru˘
 
	gÊash_°ru˘
[3] = {

146 #ifde‡
CONFIG_NOR_FLASH


148 .
£Size
 = 
SE_SIZE
,

149 .
	g£Num
 = 
SE_NUM
,

150 .
	gssSize
 = 
SS_SIZE
,

151 .
	gssNum
 = 
SS_NUM
,

152 .
	gtŸÆSize
 = 
DEVICE_SIZE
,

156 .
	g£Size
 = 0,

157 .
	g£Num
 = 0,

158 .
	gssSize
 = 0,

159 .
	gssNum
 = 0,

160 .
	gtŸÆSize
 = 0,

163 #ifde‡
SFFS_FPGA_SPI


165 .
	g£Size
 = 
SE_SIZE
,

166 .
	g£Num
 = 
SE_NUM
*2,

167 .
	gssSize
 = 
SS_SIZE
,

168 .
	gssNum
 = 
SS_NUM
,

169 .
	gtŸÆSize
 = 
DEVICE_SIZE
,

173 .
	g£Size
 = 0,

174 .
	g£Num
 = 0,

175 .
	gssSize
 = 0,

176 .
	gssNum
 = 0,

177 .
	gtŸÆSize
 = 0,

185 
dfs_›s
 
	gÊash_›s
[] = {

186 #ifde‡
CONFIG_NOR_FLASH


188 .
d«me
 = (*)"nor-flash\0",

189 .
	gwrôe
 = 
Œd_wrôe
,

190 .
	gªad
 = 
Œd_ªad
,

191 .
	gîa£
 = 
Œd_îa£
,

192 .
	gba£_addr
 = 
FLASH_BASE_ADDR
,

193 .
	gsize
 = 21*1024*1024,

194 .
	g°¨t
 = 30*1024*1024,

195 .
	gíd
 = 30*1024*1024+21*1024*1024,

196 .
	gî∫o
 = &
n‹_Êash_î∫o
,

197 .
	gd©a
 = &
Êash_°ru˘
[0],

198 .
	gîa£Unô
 = 
SE_SIZE
,

201 .
	gd«me
 = (*)"nor-flash-2\0",

202 .
	gwrôe
 = 
Œd_wrôe
,

203 .
	gªad
 = 
Œd_ªad
,

204 .
	gîa£
 = 
Œd_îa£
,

205 .
	gba£_addr
 = 
FLASH_BASE_ADDR
,

206 .
	gsize
 = 20*1024*1024,

207 .
	g°¨t
 = 10*1024*1024,

208 .
	gíd
 = 20*1024*1024+10*1024*1024,

209 .
	gî∫o
 = &
n‹_Êash_î∫o
,

210 .
	gd©a
 = &
Êash_°ru˘
[0],

211 .
	gîa£Unô
 = 
SE_SIZE
,

215 .
	gd«me
 = 0,

216 .
	gwrôe
 = 0,

217 .
	gªad
 = 0,

218 .
	gîa£
 = 0,

219 .
	gba£_addr
 = 0,

220 .
	gsize
 = 0,

221 .
	g°¨t
 = 0,

222 .
	gíd
 = 0,

223 .
	gî∫o
 = 0,

224 .
	gd©a
 = 0,

225 .
	gîa£Unô
 = 0,

228 .
	gd«me
 = 0,

229 .
	gwrôe
 = 0,

230 .
	gªad
 = 0,

231 .
	gîa£
 = 0,

232 .
	gba£_addr
 = 0,

233 .
	gsize
 = 0,

234 .
	g°¨t
 = 0,

235 .
	gíd
 = 0,

236 .
	gî∫o
 = 0,

237 .
	gd©a
 = 0,

238 .
	gîa£Unô
 = 0,

241 #i‡
deföed
(
FSL_BOARD
Ë&& deföed(
CONFIG_SPI
)

243 .
	gd«me
 = (*)"sf-flash\0",

244 .
	gwrôe
 = 
sf_wrôe
,

245 .
	gªad
 = 
sf_ªad
,

246 .
	gîa£
 = 
sf_îa£
,

247 .
	gba£_addr
 = 0,

248 .
	gsize
 = 0,

249 .
	g°¨t
 = 0,

250 .
	gíd
 = 0,

251 .
	gî∫o
 = &
sf_Êash_î∫o
,

252 .
	gd©a
 = 
NULL
,

253 .
	gîa£Unô
 = 
SS_SIZE
,

257 .
	gd«me
 = 0,

258 .
	gwrôe
 = 0,

259 .
	gªad
 = 0,

260 .
	gîa£
 = 0,

261 .
	gba£_addr
 = 0,

262 .
	gsize
 = 0,

263 .
	g°¨t
 = 0,

264 .
	gíd
 = 0,

265 .
	gî∫o
 = 0,

266 .
	gd©a
 = 0,

267 .
	gîa£Unô
 = 0,

270 #ifde‡
SFFS_FPGA_SPI


272 .
	gd«me
 = (*)"spifpgaflash\0",

273 .
	gwrôe
 = 
•iÊash_wrôe
,

274 .
	gªad
 = 
•iÊash_ªad
,

275 .
	gîa£
 = 
•iÊash_îa£
,

276 .
	gba£_addr
 = 0,

277 .
	gsize
 = 0x1000000,

278 .
	g°¨t
 = 0,

279 .
	gíd
 = 0x1000000,

280 .
	gî∫o
 = &
sf2_Êash_î∫o
,

281 .
	gd©a
 = &
Êash_°ru˘
[1],

282 .
	gîa£Unô
 = 
SS_SIZE
,

287 .
	gd«me
 = (*)"spi-fpga-flash-0",

288 .
	gwrôe
 = 
Œd_wrôe
,

289 .
	gªad
 = 
Œd_ªad
,

290 .
	gîa£
 = 
Œd_îa£
,

291 .
	gba£_addr
 = 
FLASH_BASE_ADDR
,

292 .
	gsize
 = 0x800000,

293 .
	g°¨t
 = 0,

294 .
	gíd
 = 0x800000,

295 .
	gî∫o
 = &
sf2_Êash_î∫o
,

296 .
	gd©a
 = &
Êash_°ru˘
[1],

297 .
	gîa£Unô
 = 
SE_SIZE
,

301 .
	gd«me
 = (*)"spi-fpga-flash-1",

302 .
	gwrôe
 = 
Œd_wrôe
,

303 .
	gªad
 = 
Œd_ªad
,

304 .
	gîa£
 = 
Œd_îa£
,

305 .
	gba£_addr
 = 
FLASH_BASE_ADDR
,

306 .
	gsize
 = 0x800000,

307 .
	g°¨t
 = 0x800000,

308 .
	gíd
 = 0x1000000,

309 .
	gî∫o
 = &
sf2_Êash_î∫o
,

310 .
	gd©a
 = &
Êash_°ru˘
[1],

311 .
	gîa£Unô
 = 
SE_SIZE
,

317 .
	gd«me
 = 0,

318 .
	gwrôe
 = 0,

319 .
	gªad
 = 0,

320 .
	gîa£
 = 0,

321 .
	gba£_addr
 = 0,

322 .
	gsize
 = 0,

323 .
	g°¨t
 = 0,

324 .
	gíd
 = 0,

325 .
	gî∫o
 = 0,

326 .
	gd©a
 = 0,

327 .
	gîa£Unô
 = 0,

330 .
	gd«me
 = 0,

331 .
	gwrôe
 = 0,

332 .
	gªad
 = 0,

333 .
	gîa£
 = 0,

334 .
	gba£_addr
 = 0,

335 .
	gsize
 = 0,

336 .
	g°¨t
 = 0,

337 .
	gíd
 = 0,

338 .
	gî∫o
 = 0,

339 .
	gd©a
 = 0,

340 .
	gîa£Unô
 = 0,

349 #i‡
deföed
(
CONFIG_FS
)

351 #ifde‡
SFFS_MULTI_DEVICE


352 
sffs
 
sffs_¶Ÿ
[];

356 
	#NOR_FLASH_ID
 0

	)

357 
	#SF_FLASH_ID
 1

	)

358 
sffs_¶Ÿ_˛ór
();

360 
	#hwi_log
(
log
)

	)

366 
uöt8_t
 
	gföôed
 = 0;

367 
öt32_t
 
	$fs_öô
(
öt32_t
 
Êash
, i¡32_à
dfsid
, i¡32_à
fs
)

369 
öt32_t
 
ªt
 = 0, 
cur
;

370 
öt32_t
 
∑gìø£
 ;

371 
sffs
 
ãmp
;

374 
Êash
) {

375 
NOR_FLASH_ID
:

376 
∑gìø£
 = 0;

378 
SF_FLASH_ID
:

379 
∑gìø£
 = 1;

382 
ªt
 = -3;

383 
	`hwi_log
(
HWI_PARA_ERR1
);

387 i‡(
ªt
 <0)

388  
ªt
;

391 i‡(
fs
 == 0) {

393 
dfs_›s
 *
dev
 ;

395 
dev
 = 
	`gë_dfs
(
dfsid
);

396 if(
dev
 =
NULL
) {

397 
	`¥ötf
("dfs idÉrror(no dfs)\n");

398 
	`hwi_log
(
HWI_GETDFS_ERR
);

405 i‡–!
	`°∫cmp
((*)
dev
->
d«me
,(*)"•i-Âga-Êash",
	`°æí
("spi-fpga-flash"))) {

406 
	`¥ötf
("fpga flash\n");

407 
ãmp
.
wrôe
 = 
uni⁄_wrôe
;

408 
ãmp
.
ªad
 = 
uni⁄_ªad
;

409 
ãmp
.
£ek
 = 
NULL
;

410 
ãmp
.
îa£
 = 
uni⁄_îa£
;

411 
ãmp
.
magic_num
 = 
SFFS_MAGIC
;

412 
ãmp
.
ss_size
 = ((
Êash_°ru˘
 *)(
dev
->
d©a
))->
ssSize
;

413 
ãmp
.
£_size
 = ((
Êash_°ru˘
 *)(
dev
->
d©a
))->
£Size
;

414 
ãmp
.
devi˚_size

dev
->
size
;

415 
ãmp
.
ÊashId
 = 
dfsid
;

416 
ãmp
.
∑geEø£
 = 
∑gìø£
;

417 
ãmp
.
îa£_unô
 = 
dev
->
îa£Unô
;

421 
ãmp
.
wrôe
 = 
dfs_wrôe
;

422 
ãmp
.
ªad
 = 
dfs_ªad
;

423 
ãmp
.
£ek
 = 
NULL
;

424 
ãmp
.
îa£
 = 
dfs_îa£
;

425 
ãmp
.
magic_num
 = 
SFFS_MAGIC
;

426 
ãmp
.
ss_size
 = ((
Êash_°ru˘
 *)(
dev
->
d©a
))->
ssSize
;

427 
ãmp
.
£_size
 = ((
Êash_°ru˘
 *)(
dev
->
d©a
))->
£Size
;

428 
ãmp
.
devi˚_size

dev
->
size
;

429 
ãmp
.
ÊashId
 = 
dfsid
;

430 
ãmp
.
∑geEø£
 = 
∑gìø£
;

431 
ãmp
.
îa£_unô
 = 
dev
->
îa£Unô
;

433 
	`°∫˝y
((*)
ãmp
.
f¢ame
,(*)(
dev
->
d«me
),()(
	`°æí
((*)(dev->dname))+1));

435 #ifde‡
SFFS_MULTI_DEVICE


436 i‡(
föôed
 ==0 ) {

437 
	`sffs_¶Ÿ_˛ór
();

438 
föôed
 = 1;

441 
cur
 = 
	`fs_mou¡2
(
ãmp
,0);

444 
cur
 = 
	`fs_mou¡
(0);

447 i‡(
cur
 == -1) {

448 
	`¥ötf
("sff†öô faû: %x\n",
cur
);

449 
	`hwi_log
(
HWI_INITFAIL_ERR1
);

455 
	`¥ötf
("unsupported filesystem\n");

456 
ªt
 = -3;

457 
	`hwi_log
(
HWI_INITFAIL_ERR2
);

459  
ªt
 ;

460 
	}
}

464 #i‡
deföed
(
CONFIG_NOR_FLASH
)

465 
	$n‹_öô
()

467 
	`¥ötf
("helloÇor flash\n");

470 
wbuf
[1024*1024];

472 
	`mem£t
(
wbuf
,0xca,(wbuf));

474 
	`Œd_InôCmd
((
UINT16
 *)0xec000000);

476 
vîs
[100]= {};

477 
	`Œd_GëVîsi⁄
(
vîs
);

478 
vîs
[99]='\0';

479 
°©
 = 
	`Œd_RódC⁄figRegCmd
((
UINT16
 *)
_CAG_CONFIG_FLASH_BASE_ADRS
,0);

480 
	`¥ötf
("cfg 0x%x\n",
°©
);

481 
	`¥ötf
("vî†%s\n",
vîs
);

485 
s29gl512pSt
 = 
Êash_°ru˘
[0];

487 
s29gl512pOps
 = 
Êash_›s
[0];

489 
dfd
 = 
	`dfs_ªgi°î
(&
s29gl512pOps
);

490 i‡(
dfd
 <0 ) {

491 
	`¥ötf
("n‹ fœsh op†ªgi°î faû %d \n",
dfd
);

492 
	`hwi_log
(
HWI_REGDFS_ERR1
);

494 
	`¥ötf
("did %d\n",
dfd
);

498 #ifde‡
SFFS_MULTI_DEVICE


499 
s29gl512pSt2
 = 
Êash_°ru˘
[0];

501 
s29gl512pOps2
 = 
Êash_›s
[1];

503 
dfd2
 = 
	`dfs_ªgi°î
(&
s29gl512pOps2
);

504 i‡(
dfd2
 <0 ) {

505 
	`¥ötf
("n‹ fœsh op†ªgi°î faû %d \n",
dfd2
);

506 
	`hwi_log
(
HWI_REGDFS_ERR2
);

508 
	`¥ötf
("did %d\n",
dfd2
);

510 
	}
}

513 #i‡
deföed
(
CONFIG_FPGA_FLASH
)

514 
	$Âga_Êash_öô
()

517 
	`¥ötf
("fpga spi flash init\n");

521 
ÂgaÊashSt
 = 
Êash_°ru˘
[1];

523 
ÂgaÊashOps
 = 
Êash_›s
[3];

525 
dfd3
 = 
	`dfs_ªgi°î
(&
ÂgaÊashOps
);

526 if(
dfd3
 <0) {

527 
	`¥ötf
("Âg®Êash op†ªgi°î faû %d\n",
dfd3
);

528 
	`hwi_log
(
HWI_REGDFS_ERR3
);

530 
	`¥ötf
("did %d\n",
dfd3
);

536 
ÂgaÊashOps2
 = 
Êash_›s
[4];

538 
dfd4
 = 
	`dfs_ªgi°î
(&
ÂgaÊashOps2
);

539 if(
dfd4
 <0) {

540 
	`¥ötf
("Âg®Êash op†ªgi°î faû %d\n",
dfd4
);

542 
	`¥ötf
("did %d\n",
dfd4
);

543 
	`ufs_ªgi°î
(
dfs_wrôe
,
dfs_ªad
,
dfs_îa£
,
dfd4
);

545 
	}
}

549 
UINT32
 
	glog_ödex
=0;

551 
	$ªc‹d_log
(
UINT32
 
logn
)

553 *((
UINT32
 *)
_CAG_CONFIG_SRAM_ADDR
 +
log_ödex
)=
logn
;

554 
log_ödex
++;

555 if(
log_ödex
 == 0x10000)

556 
log_ödex
=0;

557 
	}
}

559 
UINT32
 
	$echo_log
(
UINT32
 
ödex
)

561  *((
UINT32
 *)
_CAG_CONFIG_SRAM_ADDR
+
ödex
);

562 
	}
}

	@driver/libc/stdio/ns16550.c

30 
	~<libc/ˇgboŸ.h
>

31 
	~<libc/°dio.h
>

32 
	~<libc/ac˚ss.h
>

33 
	~<c⁄fig.h
>

35 #i‡!
deföed
(
_CAG_CONFIG_SIO_BASE
)

39 #i‡!
deföed
(
_CAG_CONFIG_SIO_REG_INTERVAL
)

43 
	#SIO_READ
(
a
Ë
	`öb
◊)

	)

44 
	#SIO_WRITE
(
a
, 
v
Ë
	`outb
◊, v)

	)

46 
	#NS16550
(
x
) \

47 
x
; \

48 
__∑d__
##
x
 [
_CAG_CONFIG_SIO_REG_INTERVAL
 - 1];

	)

50 
	sns16550_dev
 {

51 
NS16550
(
rhr
)

52 
NS16550
(
õr
)

53 
NS16550
(
iú
)

54 
NS16550
(
l¸
)

55 
NS16550
(
m¸
)

56 
NS16550
(
l§
)

57 
NS16550
(
m§
)

58 
NS16550
(
•r
)

59 
NS16550
(
mdr1
)

61 
	#thr
 
rhr


	)

62 
	#rbr
 
rhr


	)

63 
	#dŒ
 
rhr


	)

64 
	#dlm
 
õr


	)

65 
	#f¸
 
iú


	)

66 
	#t¸
 
m§


	)

67 
	#ér
 
•r


	)

69 
	#BAUD_LO
(
˛k
, 
baud
Ë((˛k / (16 * baud)Ë& 0xff)

	)

70 
	#BAUD_HI
(
˛k
, 
baud
Ë(((˛k / (16 * baud)Ë& 0xff00Ë>> 8)

	)

74 
	#CHAR_LEN_5
 0x00

	)

75 
	#CHAR_LEN_6
 0x01

	)

76 
	#CHAR_LEN_7
 0x02

	)

77 
	#CHAR_LEN_8
 0x03

	)

78 
	#LCR_STB
 0x04

	)

79 
	#ONE_STOP
 0x00

	)

80 
	#LCR_PEN
 0x08

	)

81 
	#PARITY_NONE
 0x00

	)

82 
	#LCR_EPS
 0x10

	)

83 
	#LCR_SP
 0x20

	)

84 
	#LCR_SBRK
 0x40

	)

85 
	#LCR_DLAB
 0x80

	)

86 
	#DLAB
 
LCR_DLAB


	)

90 
	#LSR_DR
 0x01

	)

91 
	#RxCHAR_AVAIL
 
LSR_DR


	)

92 
	#LSR_OE
 0x02

	)

93 
	#LSR_PE
 0x04

	)

94 
	#LSR_FE
 0x08

	)

95 
	#LSR_BI
 0x10

	)

96 
	#LSR_THRE
 0x20

	)

97 
	#LSR_TEMT
 0x40

	)

98 
	#LSR_FERR
 0x80

	)

102 
	#IIR_IP
 0x01

	)

103 
	#IIR_ID
 0x0e

	)

104 
	#IIR_RLS
 0x06

	)

105 
	#Rx_INT
 
IIR_RLS


	)

106 
	#IIR_RDA
 0x04

	)

107 
	#RxFIFO_INT
 
IIR_RDA


	)

108 
	#IIR_THRE
 0x02

	)

109 
	#TxFIFO_INT
 
IIR_THRE


	)

110 
	#IIR_MSTAT
 0x00

	)

111 
	#IIR_TIMEOUT
 0x0¯

	)

115 
	#IER_ERDAI
 0x01

	)

116 
	#RxFIFO_BIT
 
IER_ERDAI


	)

117 
	#IER_ETHREI
 0x02

	)

118 
	#TxFIFO_BIT
 
IER_ETHREI


	)

119 
	#IER_ELSI
 0x04

	)

120 
	#Rx_BIT
 
IER_ELSI


	)

121 
	#IER_EMSI
 0x08

	)

125 
	#MCR_DTR
 0x01

	)

126 
	#DTR
 
MCR_DTR


	)

127 
	#MCR_RTS
 0x02

	)

128 
	#MCR_OUT1
 0x04

	)

129 
	#MCR_OUT2
 0x08

	)

130 
	#MCR_LOOP
 0x10

	)

134 
	#MSR_DCTS
 0x01

	)

135 
	#MSR_DDSR
 0x02

	)

136 
	#MSR_TERI
 0x04

	)

137 
	#MSR_DDCD
 0x08

	)

138 
	#MSR_CTS
 0x10

	)

139 
	#MSR_DSR
 0x20

	)

140 
	#MSR_RI
 0x40

	)

141 
	#MSR_DCD
 0x80

	)

145 
	#FCR_EN
 0x01

	)

146 
	#FIFO_ENABLE
 
FCR_EN


	)

147 
	#FCR_RXCLR
 0x02

	)

148 
	#RxCLEAR
 
FCR_RXCLR


	)

149 
	#FCR_TXCLR
 0x04

	)

150 
	#TxCLEAR
 
FCR_TXCLR


	)

151 
	#FCR_DMA
 0x08

	)

152 
	#FCR_RXTRIG_L
 0x40

	)

153 
	#FCR_RXTRIG_H
 0x80

	)

154 
	#RTL_14
 0xc0

	)

158 
ns16550OuçutCh¨
 (
c
);

159 
ns16550I≈utCh¨
 ();

160 
ns16550_dev
 *
	gsiodev
;

164 
UINT32
 
sysU¨tClkR©eGë
();

179 
	gns16550OuçutCh¨


181 
	gc


184 (
SIO_READ
(&
siodev
->
l§
Ë& 
	gLSR_THRE
) == 0)

186 
SIO_WRITE
(&
siodev
->
thr
, 
c
);

202 
	$ns16550I≈utCh¨
 ()

204 
c
;

206 (
	`SIO_READ
(&
siodev
->
l§
Ë& 
LSR_DR
) == 0)

208 
c
 = 
	`SIO_READ
(&
siodev
->
rbr
);

210  
c
;

211 
	}
}

226 
	$ns16550DevInô
()

228 
UINT32
 
u¨tClk
 = 
	`sysU¨tClkR©eGë
();

230 
siodev
 = (
ns16550_dev
 *)
_CAG_CONFIG_SIO_BASE
;

232 
	`SIO_WRITE
 (&
siodev
->
õr
, 0x0);

234 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
 | 
LCR_DLAB
);

235 
	`SIO_WRITE
 (&
siodev
->
dŒ
, 0x0);

236 
	`SIO_WRITE
 (&
siodev
->
dlm
, 0x0);

237 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
);

238 
	`SIO_WRITE
 (&
siodev
->
f¸
, 
RxCLEAR
 | 
TxCLEAR
 | 
FIFO_ENABLE
 | \

239 
FCR_RXTRIG_L
 | 
FCR_RXTRIG_H
);

240 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
 | 
LCR_DLAB
);

241 
	`SIO_WRITE
 (&
siodev
->
dŒ
, 
	`BAUD_LO
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

242 
	`SIO_WRITE
 (&
siodev
->
dlm
, 
	`BAUD_HI
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

243 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
);

245 
	}
}

260 
	$ns16550SioInô
()

262 
	`ns16550DevInô
();

263 
	}
}

265 
	$ns16550DevInô2
()

267 
UINT32
 
u¨tClk
 = 
	`sysU¨tClkR©eGë
();

269 
siodev
 = (
ns16550_dev
 *)(
_CAG_CONFIG_SIO_BASE
+0x100);

271 
	`SIO_WRITE
 (&
siodev
->
õr
, 0x0);

273 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
 | 
LCR_DLAB
);

274 
	`SIO_WRITE
 (&
siodev
->
dŒ
, 0x0);

275 
	`SIO_WRITE
 (&
siodev
->
dlm
, 0x0);

276 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
);

277 
	`SIO_WRITE
 (&
siodev
->
f¸
, 
RxCLEAR
 | 
TxCLEAR
 | 
FIFO_ENABLE
 | \

278 
FCR_RXTRIG_L
 | 
FCR_RXTRIG_H
);

279 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
 | 
LCR_DLAB
);

280 
	`SIO_WRITE
 (&
siodev
->
dŒ
, 
	`BAUD_LO
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

281 
	`SIO_WRITE
 (&
siodev
->
dlm
, 
	`BAUD_HI
(
u¨tClk
, 
_CAG_CONFIG_SIO_BAUDRATE
));

282 
	`SIO_WRITE
 (&
siodev
->
l¸
, 
CHAR_LEN_8
 | 
ONE_STOP
);

284 
	}
}

	@driver/libc/stdio/printk.c

30 
	~<c⁄fig.h
>

31 
	~<libc/¥ötk.h
>

33 
ns16550OuçutCh¨
 (
c
);

35 sig√d 
	$°∫Àn
 (c⁄° * 
s
, sig√d 
cou¡
)

37 c⁄° *
sc
;

39 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc) {

42  
sc
 - 
s
;

43 
	}
}

45 
	$skù_©oi
 (c⁄° **
s
)

47 
i
 = 0;

49 
	`isdigô
(**
s
) != 0) {

50 
i
 = i * 10 + *((*
s
)++) - '0';

52  
i
;

53 
	}
}

55 * 
	$numbî
 (* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
)

57 
c
 = 0;

58 
sign
 = 0;

59 
tmp
[66] = {0};

60 
i
 = 0;

61 c⁄° *
digôs
 = "0123456789abcdefghijklmnopqrstuvwxyz";

63 i‡((
ty≥
 & 
LARGE
) != 0) {

64 
digôs
 = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

66 i‡((
ty≥
 & 
LEFT
) != 0) {

67 
ty≥
 &~
ZEROPAD
;

69 i‡((
ba£
 < 2) || (base > 36)) {

73 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

74 
sign
 = 0;

76 i‡((
ty≥
 & 
SIGN
) != 0) {

77 i‡(
num
 < 0) {

78 
sign
 = '-';

79 
num
 = -num;

80 
size
--;

81 } i‡((
ty≥
 & 
PLUS
) != 0) {

82 
sign
 = '+';

83 
size
--;

84 } i‡((
ty≥
 & 
SPACE
) != 0) {

85 
sign
 = ' ';

86 
size
--;

89 i‡((
ty≥
 & 
SPECIAL
) != 0) {

90 i‡(16 =
ba£
) {

91 
size
 -= 2;

92 } i‡(8 =
ba£
) {

93 
size
--;

96 
i
 = 0;

97 i‡(0 =
num
) {

98 
tmp
[
i
++] = '0';

100 
num
 != 0) {

101 
tmp
[
i
++] = 
digôs
[
	`do_div
(
num
,
ba£
)];

104 i‡(
i
 > 
¥ecisi⁄
) {

105 
¥ecisi⁄
 = 
i
;

107 
size
 -
¥ecisi⁄
;

108 i‡(0 =(
ty≥
 & (
ZEROPAD
 + 
LEFT
))) {

109 
size
-- > 0) {

110 *
°r
++ = ' ';

113 i‡(
sign
 != 0) {

114 *
°r
++ = 
sign
;

116 i‡((
ty≥
 & 
SPECIAL
) != 0) {

117 i‡(8 =
ba£
) {

118 *
°r
++ = '0';

119 } i‡(16 =
ba£
) {

120 *
°r
++ = '0';

121 *
°r
++ = 
digôs
[33];

124 i‡(0 =(
ty≥
 & 
LEFT
)) {

125 
size
-- > 0) {

126 *
°r
++ = 
c
;

129 
i
 < 
¥ecisi⁄
--) {

130 *
°r
++ = '0';

132 
i
-- > 0) {

133 *
°r
++ = 
tmp
[
i
];

135 
size
-- > 0) {

136 *
°r
++ = ' ';

139  
°r
;

140 
	}
}

156 
	$v•rötf
 (*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

158 
Àn
;

159 
i
;

160 
Êags
;

161 
ba£
;

162 
fõld_width
;

163 
¥ecisi⁄
;

164 
quÆifõr
;

165 * 
°r
;

166 c⁄° *
s
;

167 
num
;

169 
°r
 = 
buf
; *
fmt
; ++fmt) {

170 i‡(*
fmt
 != '%') {

171 *
°r
++ = *
fmt
;

175 
Êags
 = 0;

177 
ª≥©
:

178 ++
fmt
;

179 *
fmt
) {

181 
Êags
 |
LEFT
;

182 
ª≥©
;

184 
Êags
 |
PLUS
;

185 
ª≥©
;

187 
Êags
 |
SPACE
;

188 
ª≥©
;

190 
Êags
 |
SPECIAL
;

191 
ª≥©
;

193 
Êags
 |
ZEROPAD
;

194 
ª≥©
;

197 
fõld_width
 = -1;

198 i‡(
	`isdigô
(*
fmt
) != 0) {

200 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

201 } i‡('*' =*
fmt
) {

202 ++
fmt
;

203 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

204 i‡(
fõld_width
 < 0) {

205 
fõld_width
 = -field_width;

206 
Êags
 |
LEFT
;

210 
¥ecisi⁄
 = -1;

211 i‡('.' =*
fmt
) {

212 ++
fmt
;

213 i‡(
	`isdigô
(*
fmt
)) {

214 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

215 } i‡('*' =*
fmt
) {

216 ++
fmt
;

217 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

219 i‡(
¥ecisi⁄
 < 0) {

220 
¥ecisi⁄
 = 0;

224 
quÆifõr
 = -1;

225 i‡(('h' =*
fmt
) || ('l' == *fmt) || ('q' == *fmt)) {

226 
quÆifõr
 = *
fmt
;

227 ++
fmt
;

230 
ba£
 = 10;

231 *
fmt
) {

233 i‡(0 =(
Êags
 & 
LEFT
)) {

234 --
fõld_width
 > 0) {

235 *
°r
++ = ' ';

238 *
°r
++ = (Ë
	`va_¨g
(
¨gs
, );

239 --
fõld_width
 > 0) {

240 *
°r
++ = ' ';

245 
s
 = 
	`va_¨g
(
¨gs
, *);

246 i‡(!
s
) {

247 
s
 = "<NULL>";

249 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

250 i‡(0 =(
Êags
 & 
LEFT
)) {

251 
Àn
 < 
fõld_width
--) {

252 *
°r
++ = ' ';

255 
i
 = 0; i < 
Àn
; ++i) {

256 *
°r
++ = *
s
++;

258 
Àn
 < 
fõld_width
--) {

259 *
°r
++ = ' ';

264 i‡(-1 =
fõld_width
) {

265 
fõld_width
 = 2 * (*);

266 
Êags
 |
ZEROPAD
;

268 
°r
 = 
	`numbî
(°r, ()
	`va_¨g
(
¨gs
, *), 16, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

272 i‡('l' =
quÆifõr
) {

273 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

274 *
ù
 = (
°r
 - 
buf
);

276 * 
ù
 = 
	`va_¨g
(
¨gs
, *);

277 *
ù
 = (
°r
 - 
buf
);

282 *
°r
++ = '%';

287 
ba£
 = 8;

292 
Êags
 |
LARGE
;

295 
ba£
 = 16;

300 
Êags
 |
SIGN
;

306 *
°r
++ = '%';

307 i‡(0 =*
fmt
) {

308 *
°r
++ = *
fmt
;

310 --
fmt
;

316 #ifde‡
CFG_64BIT_VSPRINTF


317 i‡('q' =
quÆifõr
) {

318 
num
 = 
	`va_¨g
(
¨gs
, );

323 i‡('l' =
quÆifõr
) {

324 
num
 = 
	`va_¨g
(
¨gs
, );

325 } i‡('h' =
quÆifõr
) {

326 
num
 = (Ë
	`va_¨g
(
¨gs
, );

327 i‡(0 =(
Êags
 & 
SIGN
)) {

328 
num
 = ()Çum;

330 } i‡(0 =(
Êags
 & 
SIGN
)) {

331 
num
 = 
	`va_¨g
(
¨gs
, );

333 
num
 = 
	`va_¨g
(
¨gs
, );

336 
°r
 = 
	`numbî
(°r, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

339 *
°r
 = '\0';

341  
°r
-
buf
;

342 
	}
}

344 
	$•rötf
 (* 
buf
,c⁄° *
fmt
,...)

346 
va_li°
 
¨gs
;

347 
¥ötbuf„r
[
CFG_PBSIZE
];

349 
	`va_°¨t
(
¨gs
, 
fmt
);

350 
	`v•rötf
(
¥ötbuf„r
, 
fmt
, 
¨gs
);

351 
	`va_íd
(
¨gs
);

353 
	`°r˝y
(
buf
,
¥ötbuf„r
);

354 
	}
}

356 
	$°∫icmp
(c⁄° *
s1
, c⁄° *
s2
, 
Àn
)

358 
c1
 = 0;

359 
c2
 = 0;

360 
ªt
 = 0;

362 i‡((
NULL
 =
s1
Ë|| (NULL =
s2
)) {

363 
	`¥ötf
("¨g i†NULLÉº‹:%s\n",
__FUNCTION__
);

364 
ªt
 = -1;

366 
c1
 = 
c2
 = 0;

367 i‡(
Àn
 != 0) {

369 
c1
 = *
s1
;

370 
c2
 = *
s2
;

371 
s1
++;

372 
s2
++;

373 i‡(0 =
c1
) {

376 i‡(0 =
c2
) {

379 i‡(
c1
 =
c2
) {

382 
c1
 = 
	`tﬁowî
(c1);

383 
c2
 = 
	`tﬁowî
(c2);

384 i‡(
c1
 !
c2
) {

387 } --
Àn
);

390 
ªt
 = ()
c1
 - ()
c2
;

393  
ªt
;

394 
	}
}

396 
	$putc
 (c⁄° 
c
)

398 i‡(
c
 == '\n')

399 
	`ns16550OuçutCh¨
('\r');

400 
	`ns16550OuçutCh¨
 (
c
);

402 
	}
}

404 
	$puts
 (c⁄° *
s
)

406 *
s
) {

407 
	`putc
 (*
s
++);

410 
	}
}

412 
	$¥ötf
 (c⁄° *
fmt
,...)

414 
va_li°
 
¨gs
;

415 
¥ötbuf„r
[
CFG_PBSIZE
];

417 
	`va_°¨t
(
¨gs
, 
fmt
);

418 
	`v•rötf
(
¥ötbuf„r
, 
fmt
, 
¨gs
);

419 
	`va_íd
(
¨gs
);

421 
	`puts
((c⁄° *)
¥ötbuf„r
);

422 
	}
}

	@driver/libc/stdio/vsprintf.c

14 
	~<c⁄fig.h
>

15 
	~<libc/¥ötk.h
>

16 
	~<libc/ˇgboŸ.h
>

19 
	#INT_MAX
 (()(~0U>>1))

	)

21 c⁄° 
	ghex_asc
[] = "0123456789abcdef";

22 
	#hex_asc_lo
(
x
Ë
hex_asc
[((xË& 0x0f)]

	)

23 
	#hex_asc_hi
(
x
Ë
hex_asc
[((xË& 0xf0Ë>> 4]

	)

25 
ölöe
 *
	$∑ck_hex_byã
(*
buf
, 
UINT8
 
byã
)

27 *
buf
++ = 
	`hex_asc_hi
(
byã
);

28 *
buf
++ = 
	`hex_asc_lo
(
byã
);

29  
buf
;

30 
	}
}

33 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
,

34 
ba£
)

36 
ªsu…
 = 0;

37 
vÆue
;

39 i‡(*
˝
 == '0') {

40 
˝
++;

41 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

42 
ba£
 = 16;

43 
˝
++;

46 i‡(!
ba£
)

47 
ba£
 = 8;

50 i‡(!
ba£
)

51 
ba£
 = 10;

53 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*˝Ë? *˝-'0' : (
	`i¶owî
(*cp)

54 ? 
	`touµî
(*
˝
Ë: *˝)-'A'+10Ë< 
ba£
) {

55 
ªsu…
 =Ñesu…*
ba£
 + 
vÆue
;

56 
˝
++;

59 i‡(
ídp
)

60 *
ídp
 = (*)
˝
;

62  
ªsu…
;

63 
	}
}

65 
	$°ri˘_°πoul
(c⁄° *
˝
, 
ba£
, *
ªs
)

67 *
èû
;

68 
vÆ
;

69 
size_t
 
Àn
;

71 *
ªs
 = 0;

72 
Àn
 = 
	`°æí
(
˝
);

73 i‡(
Àn
 == 0)

74  -
EINVAL
;

76 
vÆ
 = 
	`sim∂e_°πoul
(
˝
, &
èû
, 
ba£
);

77 i‡(
èû
 =
˝
)

78  -
EINVAL
;

80 i‡((*
èû
 == '\0') ||

81 ((
Àn
 =(
size_t
)(
èû
 - 
˝
) + 1) && (*tail == '\n'))) {

82 *
ªs
 = 
vÆ
;

86  -
EINVAL
;

87 
	}
}

89 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

91 i‡(*
˝
 == '-')

92  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

94  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

95 
	}
}

97 
	$u°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

99 
ªsu…
 = 
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

100 **
ídp
) {

102 
ªsu…
 *= 1024;

105 
ªsu…
 *= 1024;

109 
ªsu…
 *= 1024;

110 i‡((*
ídp
)[1] == 'i') {

111 i‡((*
ídp
)[2] == 'B')

112 (*
ídp
) += 3;

114 (*
ídp
) += 2;

117  
ªsu…
;

118 
	}
}

120 
	$u°πouŒ
(c⁄° *
˝
, **
ídp
, 
ba£
)

122 
ªsu…
 = 
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

123 **
ídp
) {

125 
ªsu…
 *= 1024;

128 
ªsu…
 *= 1024;

132 
ªsu…
 *= 1024;

133 i‡((*
ídp
)[1] == 'i') {

134 i‡((*
ídp
)[2] == 'B')

135 (*
ídp
) += 3;

137 (*
ídp
) += 2;

140  
ªsu…
;

141 
	}
}

143 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
,

144 
ba£
)

146 
ªsu…
 = 0, 
vÆue
;

148 i‡(*
˝
 == '0') {

149 
˝
++;

150 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1])) {

151 
ba£
 = 16;

152 
˝
++;

155 i‡(!
ba£
)

156 
ba£
 = 8;

159 i‡(!
ba£
)

160 
ba£
 = 10;

162 
	`isxdigô
(*
˝
Ë&& (
vÆue
 = 
	`isdigô
(*cp) ? *cp - '0'

163 : (
	`i¶owî
(*
˝
Ë? 
	`touµî
(*˝Ë: *˝Ë- 'A' + 10Ë< 
ba£
) {

164 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

165 
˝
++;

168 i‡(
ídp
)

169 *
ídp
 = (*Ë
˝
;

171  
ªsu…
;

172 
	}
}

176 
	#is_digô
(
c
Ë((cË>'0' && (cË<'9')

	)

178 
	$skù_©oi
(c⁄° **
s
)

180 
i
 = 0;

182 
	`is_digô
(**
s
))

183 
i
 = i * 10 + *((*
s
)++) - '0';

185  
i
;

186 
	}
}

198 *
	$put_dec_åunc
(*
buf
, 
q
)

200 
d3
, 
d2
, 
d1
, 
d0
;

201 
d1
 = (
q
>>4) & 0xf;

202 
d2
 = (
q
>>8) & 0xf;

203 
d3
 = (
q
>>12);

205 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

206 
q
 = (
d0
 * 0xcd) >> 11;

207 
d0
 = d0 - 10*
q
;

208 *
buf
++ = 
d0
 + '0';

209 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

210 i‡(
d1
 != 0) {

211 
q
 = (
d1
 * 0xcd) >> 11;

212 
d1
 = d1 - 10*
q
;

213 *
buf
++ = 
d1
 + '0';

215 
d2
 = 
q
 + 2*d2;

216 i‡((
d2
 !0Ë|| (
d3
 != 0)) {

217 
q
 = (
d2
 * 0xd) >> 7;

218 
d2
 = d2 - 10*
q
;

219 *
buf
++ = 
d2
 + '0';

221 
d3
 = 
q
 + 4*d3;

222 i‡(
d3
 != 0) {

223 
q
 = (
d3
 * 0xcd) >> 11;

224 
d3
 = d3 - 10*
q
;

225 *
buf
++ = 
d3
 + '0';

226 i‡(
q
 != 0)

227 *
buf
++ = 
q
 + '0';

231  
buf
;

232 
	}
}

234 *
	$put_dec_fuŒ
(*
buf
, 
q
)

238 
d3
, 
d2
, 
d1
, 
d0
;

239 
d1
 = (
q
>>4) & 0xf;

240 
d2
 = (
q
>>8) & 0xf;

241 
d3
 = (
q
>>12);

253 
d0
 = 6*(
d3
 + 
d2
 + 
d1
Ë+ (
q
 & 0xf);

254 
q
 = (
d0
 * 0xcd) >> 11;

255 
d0
 = d0 - 10*
q
;

256 *
buf
++ = 
d0
 + '0';

257 
d1
 = 
q
 + 9*
d3
 + 5*
d2
 + d1;

258 
q
 = (
d1
 * 0xcd) >> 11;

259 
d1
 = d1 - 10*
q
;

260 *
buf
++ = 
d1
 + '0';

262 
d2
 = 
q
 + 2*d2;

263 
q
 = (
d2
 * 0xd) >> 7;

264 
d2
 = d2 - 10*
q
;

265 *
buf
++ = 
d2
 + '0';

267 
d3
 = 
q
 + 4*d3;

268 
q
 = (
d3
 * 0xcd) >> 11;

270 
d3
 = d3 - 10*
q
;

271 *
buf
++ = 
d3
 + '0';

272 *
buf
++ = 
q
 + '0';

273  
buf
;

274 
	}
}

276 *
	$put_dec
(*
buf
, 
UINT64
 
num
)

279 
ªm
;

280 i‡(
num
 < 100000)

281  
	`put_dec_åunc
(
buf
, 
num
);

282 
ªm
 = 
	`do_div
(
num
, 100000);

283 
buf
 = 
	`put_dec_fuŒ
(buf, 
ªm
);

285 
	}
}

287 
	#ZEROPAD
 1

	)

288 
	#SIGN
 2

	)

289 
	#PLUS
 4

	)

290 
	#SPACE
 8

	)

291 
	#LEFT
 16

	)

292 
	#SMALL
 32

	)

293 
	#SPECIAL
 64

	)

295 #ifde‡
CONFIG_SYS_VSNPRINTF


300 
	#ADDCH
(
°r
, 
ch
) do { \

301 i‡((
°r
Ë< 
íd
) \

302 *(
°r
Ë(
ch
); \

303 ++
°r
; \

304 } 0)

	)

306 
	#ADDCH
(
°r
, 
ch
Ë(*(°r)++ = (ch))

	)

309 *
	$numbî2
(*
buf
, *
íd
, 
UINT64
 
num
,

310 
ba£
, 
size
, 
¥ecisi⁄
, 
ty≥
)

313 c⁄° 
digôs
[16] = "0123456789ABCDEF";

315 
tmp
[66];

316 
sign
;

317 
loˇ£
;

318 
√ed_pfx
 = ((
ty≥
 & 
SPECIAL
Ë&& 
ba£
 != 10);

319 
i
;

323 
loˇ£
 = (
ty≥
 & 
SMALL
);

324 i‡(
ty≥
 & 
LEFT
)

325 
ty≥
 &~
ZEROPAD
;

326 
sign
 = 0;

327 i‡(
ty≥
 & 
SIGN
) {

328 i‡((
INT64
Ë
num
 < 0) {

329 
sign
 = '-';

330 
num
 = -(
INT64
)Çum;

331 
size
--;

332 } i‡(
ty≥
 & 
PLUS
) {

333 
sign
 = '+';

334 
size
--;

335 } i‡(
ty≥
 & 
SPACE
) {

336 
sign
 = ' ';

337 
size
--;

340 i‡(
√ed_pfx
) {

341 
size
--;

342 i‡(
ba£
 == 16)

343 
size
--;

347 
i
 = 0;

348 i‡(
num
 == 0)

349 
tmp
[
i
++] = '0';

355 i‡(
ba£
 != 10) {

356 
mask
 = 
ba£
 - 1;

357 
shi·
 = 3;

359 i‡(
ba£
 == 16)

360 
shi·
 = 4;

363 
tmp
[
i
++] = (
digôs
[(()
num
Ë& 
mask
]

364 | 
loˇ£
);

365 
num
 >>
shi·
;

366 } 
num
);

368 
i
 = 
	`put_dec
(
tmp
, 
num
) -Åmp;

372 i‡(
i
 > 
¥ecisi⁄
)

373 
¥ecisi⁄
 = 
i
;

375 
size
 -
¥ecisi⁄
;

376 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
))) {

377 --
size
 >= 0)

378 
	`ADDCH
(
buf
, ' ');

381 i‡(
sign
)

382 
	`ADDCH
(
buf
, 
sign
);

384 i‡(
√ed_pfx
) {

385 
	`ADDCH
(
buf
, '0');

386 i‡(
ba£
 == 16)

387 
	`ADDCH
(
buf
, 'X' | 
loˇ£
);

390 i‡(!(
ty≥
 & 
LEFT
)) {

391 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

393 --
size
 >= 0)

394 
	`ADDCH
(
buf
, 
c
);

397 
i
 <--
¥ecisi⁄
)

398 
	`ADDCH
(
buf
, '0');

400 --
i
 >= 0)

401 
	`ADDCH
(
buf
, 
tmp
[
i
]);

403 --
size
 >= 0)

404 
	`ADDCH
(
buf
, ' ');

405  
buf
;

406 
	}
}

408 *
	$°rög
(*
buf
, *
íd
, *
s
, 
fõld_width
,

409 
¥ecisi⁄
, 
Êags
)

411 
Àn
, 
i
;

413 i‡(
s
 =
NULL
)

414 
s
 = "<NULL>";

416 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

418 i‡(!(
Êags
 & 
LEFT
))

419 
Àn
 < 
fõld_width
--)

420 
	`ADDCH
(
buf
, ' ');

421 
i
 = 0; i < 
Àn
; ++i)

422 
	`ADDCH
(
buf
, *
s
++);

423 
Àn
 < 
fõld_width
--)

424 
	`ADDCH
(
buf
, ' ');

425  
buf
;

426 
	}
}

447 *
	$poöãr
(c⁄° *
fmt
, *
buf
, *
íd
, *
±r
,

448 
fõld_width
, 
¥ecisi⁄
, 
Êags
)

455 i‡(!
±r
)

456  
	`°rög
(
buf
, 
íd
, "“uŒ)", 
fõld_width
, 
¥ecisi⁄
,

457 
Êags
);

460 #ifde‡
CONFIG_CMD_NET


461 *
fmt
) {

463 
Êags
 |
SPECIAL
;

466  
	`mac_addªss_°rög
(
buf
, 
íd
, 
±r
, 
fõld_width
,

467 
¥ecisi⁄
, 
Êags
);

469 
Êags
 |
SPECIAL
;

472 i‡(
fmt
[1] == '6')

473  
	`ù6_addr_°rög
(
buf
, 
íd
, 
±r
, 
fõld_width
,

474 
¥ecisi⁄
, 
Êags
);

475 i‡(
fmt
[1] == '4')

476  
	`ù4_addr_°rög
(
buf
, 
íd
, 
±r
, 
fõld_width
,

477 
¥ecisi⁄
, 
Êags
);

478 
Êags
 &~
SPECIAL
;

482 
Êags
 |
SMALL
;

483 i‡(
fõld_width
 == -1) {

484 
fõld_width
 = 2*(*);

485 
Êags
 |
ZEROPAD
;

487  
	`numbî2
(
buf
, 
íd
, ()
±r
, 16, 
fõld_width
,

488 
¥ecisi⁄
, 
Êags
);

489 
	}
}

491 
	$v¢¥ötf_öã∫Æ
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
,

492 
va_li°
 
¨gs
)

494 
UINT64
 
num
;

495 
ba£
;

496 *
°r
;

498 
Êags
;

500 
fõld_width
;

501 
¥ecisi⁄
;

503 
quÆifõr
;

507 *
íd
 = 
buf
 + 
size
;

509 #ifde‡
CONFIG_SYS_VSNPRINTF


511 i‡(
íd
 < 
buf
) {

512 
íd
 = ((*)-1);

513 
size
 = 
íd
 - 
buf
;

516 
°r
 = 
buf
;

518 ; *
fmt
 ; ++fmt) {

519 i‡(*
fmt
 != '%') {

520 
	`ADDCH
(
°r
, *
fmt
);

525 
Êags
 = 0;

526 
ª≥©
:

527 ++
fmt
;

528 *
fmt
) {

530 
Êags
 |
LEFT
;

531 
ª≥©
;

533 
Êags
 |
PLUS
;

534 
ª≥©
;

536 
Êags
 |
SPACE
;

537 
ª≥©
;

539 
Êags
 |
SPECIAL
;

540 
ª≥©
;

542 
Êags
 |
ZEROPAD
;

543 
ª≥©
;

547 
fõld_width
 = -1;

548 i‡(
	`is_digô
(*
fmt
))

549 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

550 i‡(*
fmt
 == '*') {

551 ++
fmt
;

553 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

554 i‡(
fõld_width
 < 0) {

555 
fõld_width
 = -field_width;

556 
Êags
 |
LEFT
;

561 
¥ecisi⁄
 = -1;

562 i‡(*
fmt
 == '.') {

563 ++
fmt
;

564 i‡(
	`is_digô
(*
fmt
))

565 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

566 i‡(*
fmt
 == '*') {

567 ++
fmt
;

569 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

571 i‡(
¥ecisi⁄
 < 0)

572 
¥ecisi⁄
 = 0;

576 
quÆifõr
 = -1;

577 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' ||

578 *
fmt
 == 'Z' || *fmt == 'z' || *fmt == 't') {

579 
quÆifõr
 = *
fmt
;

580 ++
fmt
;

581 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l') {

582 
quÆifõr
 = 'L';

583 ++
fmt
;

588 
ba£
 = 10;

590 *
fmt
) {

592 i‡(!(
Êags
 & 
LEFT
)) {

593 --
fõld_width
 > 0)

594 
	`ADDCH
(
°r
, ' ');

596 
	`ADDCH
(
°r
, (Ë
	`va_¨g
(
¨gs
, ));

597 --
fõld_width
 > 0)

598 
	`ADDCH
(
°r
, ' ');

602 
°r
 = 
	`°rög
(°r, 
íd
, 
	`va_¨g
(
¨gs
, *),

603 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

607 
°r
 = 
	`poöãr
(
fmt
 + 1, så, 
íd
,

608 
	`va_¨g
(
¨gs
, *),

609 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

611 
	`iß um
(
fmt
[1]))

612 
fmt
++;

616 i‡(
quÆifõr
 == 'l') {

617 *
ù
 = 
	`va_¨g
(
¨gs
, *);

618 *
ù
 = (
°r
 - 
buf
);

620 *
ù
 = 
	`va_¨g
(
¨gs
, *);

621 *
ù
 = (
°r
 - 
buf
);

626 
	`ADDCH
(
°r
, '%');

631 
ba£
 = 8;

635 
Êags
 |
SMALL
;

637 
ba£
 = 16;

642 
Êags
 |
SIGN
;

647 
	`ADDCH
(
°r
, '%');

648 i‡(*
fmt
)

649 
	`ADDCH
(
°r
, *
fmt
);

651 --
fmt
;

654 i‡(
quÆifõr
 == 'L')

655 
num
 = 
	`va_¨g
(
¨gs
, );

656 i‡(
quÆifõr
 == 'l') {

657 
num
 = 
	`va_¨g
(
¨gs
, );

658 i‡(
Êags
 & 
SIGN
)

659 
num
 = (signed )Çum;

660 } i‡(
quÆifõr
 == 'Z' || qualifier == 'z') {

661 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

662 } i‡(
quÆifõr
 == 't') {

663 
num
 = 
	`va_¨g
(
¨gs
, 
±rdiff_t
);

664 } i‡(
quÆifõr
 == 'h') {

665 
num
 = (Ë
	`va_¨g
(
¨gs
, );

666 i‡(
Êags
 & 
SIGN
)

667 
num
 = (signed )Çum;

669 
num
 = 
	`va_¨g
(
¨gs
, );

670 i‡(
Êags
 & 
SIGN
)

671 
num
 = (signed )Çum;

673 
°r
 = 
	`numbî2
(°r, 
íd
, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
,

674 
Êags
);

677 #ifde‡
CONFIG_SYS_VSNPRINTF


678 i‡(
size
 > 0) {

679 
	`ADDCH
(
°r
, '\0');

680 i‡(
°r
 > 
íd
)

681 
íd
[-1] = '\0';

682 --
°r
;

685 *
°r
 = '\0';

688  
°r
 - 
buf
;

689 
	}
}

705 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

707  
	`v¢¥ötf_öã∫Æ
(
buf
, 
INT_MAX
, 
fmt
, 
¨gs
);

708 
	}
}

710 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

712 
va_li°
 
¨gs
;

713 
i
;

715 
	`va_°¨t
(
¨gs
, 
fmt
);

716 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

717 
	`va_íd
(
¨gs
);

718  
i
;

719 
	}
}

721 
	$∑nic
(c⁄° *
fmt
, ...)

723 
va_li°
 
¨gs
;

724 
	`va_°¨t
(
¨gs
, 
fmt
);

725 
	`v¥ötf
(
fmt
, 
¨gs
);

726 
	`putc
('\n');

727 
	`va_íd
(
¨gs
);

728 #i‡
	`deföed
(
CONFIG_PANIC_HANG
)

729 
	`h™g
();

731 
	`udñay
(100000);

732 
	`do_ª£t
(
NULL
, 0, 0, NULL);

736 
	}
}

738 
	$__as£π_Áû
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
,

739 c⁄° *
fun˘i⁄
)

742 
	`∑nic
("%s:%u: %s: As£πi⁄ `%s' faûed.", 
fûe
, 
löe
, 
fun˘i⁄
,

743 
as£πi⁄
);

744 
	}
}

746 *
	$sim∂e_ôﬂ
(
ul⁄g
 
i
)

749 
loˇl
[22];

750 *
p
 = &
loˇl
[21];

752 *
p
-- = '\0';

754 *
p
-- = '0' + 
i
 % 10;

755 
i
 /= 10;

756 } 
i
 > 0);

757  
p
 + 1;

758 
	}
}

761 
	$¥öt_grou≥d_uŒ
(
öt_vÆ
, 
digôs
)

763 
°r
[21], *
s
;

764 
gøb
 = 3;

766 
digôs
 = (digits + 2) / 3;

767 
	`•rötf
(
°r
, "%*Œu", 
digôs
 * 3, 
öt_vÆ
);

768 
s
 = 
°r
; *s; s +
gøb
) {

769 i‡(
s
 !
°r
)

770 
	`putc
(
s
[-1] != ' ' ? ',' : ' ');

771 
	`¥ötf
("%.*s", 
gøb
, 
s
);

772 
gøb
 = 3;

774 
	}
}

	@driver/libc/stdlib/abort.c

30 
	$ab‹t
 ()

32 
	`¥ötf
("Shuàdow¿hîe,%s\n",
__FUNCTION__
);

33 
	}
}

	@driver/libc/stdlib/abs.c

30 
	$abs
(
j
)

32 (
j
 < 0 ? -j : j);

33 
	}
}

	@driver/libc/stdlib/atof.c

29 
	~<libc/°ddef.h
>

31 
°πod
(const *, **);

33 
	$©of
(c⁄° *
ascii
)

35  (
	`°πod
(
ascii
, 
NULL
));

36 
	}
}

	@driver/libc/stdlib/atoi.c

30 
	~<libc/°ddef.h
>

32 
°πﬁ
(const *, **, );

34 
	$©oi
(c⁄° *
°r
)

36 (()
	`°πﬁ
(
°r
, (**)
NULL
, 10));

37 
	}
}

	@driver/libc/stdlib/atol.c

30 
	~<libc/°ddef.h
>

32 
°πﬁ
(const *, **, );

34 
	$©ﬁ
(c⁄° *
°r
)

36 (
	`°πﬁ
(
°r
, (**)
NULL
, 10));

37 
	}
}

	@driver/libc/stdlib/heap.c

37 
	~<c⁄fig.h
>

38 
	~<libc/ˇgboŸ.h
>

39 
	~<libc/°dio.h
>

40 
	~<libc/°ddef.h
>

41 
	~<libc/as£π.h
>

42 
	~<kî√l/sysOs.h
>

45 
	#Hóp_BLOCK_SIZE
 ( ( 
size_t
 ) ( 
HópSåu˘Size
 * 2 ) )

	)

48 
	#hópBITS_PER_BYTE
 ( ( 
size_t
 ) 8 )

	)

49 
	#TOTAL_HEAP_SIZE
 ( ( 
size_t
 ) ( 1024 * 1024 ) )

	)

50 
	#BYTE_ALIGNMENT_MASK
 ( 0x0007 )

	)

51 
	#BYTE_ALIGNMENT
 8

	)

54 #if–
APPLICATION_ALLOCATED_HEAP
 == 1 )

57 
UINT8
 
mHóp
[ 
TOTAL_HEAP_SIZE
 ];

59 
UINT8
 
	gmHóp
[ 
TOTAL_HEAP_SIZE
 ];

64 
	sA_BLOCK_LINK
 {

65 
A_BLOCK_LINK
 *
	mpNextFªeBlock
;

66 
size_t
 
	mBlockSize
;

67 } 
	tBlockLök_t
;

77 
¥vtBlockFªeLi°
–
BlockLök_t
 *
pBlockToIn£π
 );

83 
HópInô
( );

89 c⁄° 
size_t
 
	gHópSåu˘Size
 = ( ( –
BlockLök_t
 ) + ( ( ( size_àË
BYTE_ALIGNMENT_MASK
 ) - ( size_t ) 1 ) ) & ~( ( size_t ) BYTE_ALIGNMENT_MASK ) );

92 
BlockLök_t
 
	gxSèπ
, *
	gpxEnd
 = 
NULL
;

96 
size_t
 
	gFªeByãsRemaöög
 = 0U;

97 
size_t
 
	gMöimumEvîFªeByãsRemaöög
 = 0U;

103 
size_t
 
	gBlockAŒoˇãdBô
 = 0;

107 *
	$bmÆloc
–
size_t
 
W™ãdSize
 )

109 
BlockLök_t
 *
pBlock
, *
pPªviousBlock
, *
pNewBlockLök
;

110 *
pvRëu∫
 = 
NULL
;

111 
OS_ERR
 
îr
;

113 
	`OSSchedLock
 (&
îr
);

117 if–
pxEnd
 =
NULL
 ) {

118 
	`HópInô
();

126 if––
W™ãdSize
 & 
BlockAŒoˇãdBô
 ) == 0 ) {

129 if–
W™ãdSize
 > 0 ) {

130 
W™ãdSize
 +
HópSåu˘Size
;

134 if––
W™ãdSize
 & 
BYTE_ALIGNMENT_MASK
 ) != 0x00 ) {

136 
W™ãdSize
 +–
BYTE_ALIGNMENT
 - ( W™ãdSizê& 
BYTE_ALIGNMENT_MASK
 ) );

137 
	`as£π
 ( 
W™ãdSize
 & 
BYTE_ALIGNMENT_MASK
 );

143 if––
W™ãdSize
 > 0 ) && ( W™ãdSizê<
FªeByãsRemaöög
 ) ) {

146 
pPªviousBlock
 = &
xSèπ
;

147 
pBlock
 = 
xSèπ
.
pNextFªeBlock
;

148  ( 
pBlock
->
BlockSize
 < 
W™ãdSize
 ) && (ÖBlock->
pNextFªeBlock
 !
NULL
 ) ) {

149 
pPªviousBlock
 = 
pBlock
;

150 
pBlock
 =ÖBlock->
pNextFªeBlock
;

155 if–
pBlock
 !
pxEnd
 ) {

158 
pvRëu∫
 = ( * ) ( ( ( 
UINT8
 * ) 
pPªviousBlock
->
pNextFªeBlock
 ) + 
HópSåu˘Size
 );

162 
pPªviousBlock
->
pNextFªeBlock
 = 
pBlock
->pNextFreeBlock;

166 if––
pBlock
->
BlockSize
 - 
W™ãdSize
 ) > 
Hóp_BLOCK_SIZE
 ) {

171 
pNewBlockLök
 = ( * ) ( ( ( 
UINT8
 * ) 
pBlock
 ) + 
W™ãdSize
 );

172 
	`as£π
 ( ( ( 
UINT32
 ) 
pNewBlockLök
 ) & 
BYTE_ALIGNMENT_MASK
 ) ;

176 
pNewBlockLök
->
BlockSize
 = 
pBlock
->BlockSizê- 
W™ãdSize
;

177 
pBlock
->
BlockSize
 = 
W™ãdSize
;

180 
	`¥vtBlockFªeLi°
––
pNewBlockLök
 ) );

184 
FªeByãsRemaöög
 -
pBlock
->
BlockSize
;

186 if–
FªeByãsRemaöög
 < 
MöimumEvîFªeByãsRemaöög
 ) {

187 
MöimumEvîFªeByãsRemaöög
 = 
FªeByãsRemaöög
;

193 
pBlock
->
BlockSize
 |
BlockAŒoˇãdBô
;

194 
pBlock
->
pNextFªeBlock
 = 
NULL
;

203 
	`OSSchedU∆ock
 (&
îr
);

205 #if–
c⁄figUSE_MALLOC_FAILED_HOOK
 == 1 )

207 if–
pvRëu∫
 =
NULL
 ) {

208 
	`vAµliˇti⁄MÆlocFaûedHook
( );

209 
	`vAµliˇti⁄MÆlocFaûedHook
();

215 
	`as£π
 ( ( ( 
UINT32
 ) 
pvRëu∫
 ) & 
BYTE_ALIGNMENT_MASK
 );

216  
pvRëu∫
;

217 
	}
}

220 
	$b‰ì
–*
pv
 )

222 
UINT8
 *
puc
 = ( UINT8 * ) 
pv
;

223 
BlockLök_t
 *
pLök
;

224 
OS_ERR
 
îr
;

227 if–
pv
 !
NULL
 ) {

230 
puc
 -
HópSåu˘Size
;

233 
pLök
 = ( * ) 
puc
;

236 
	`as£π
 ( 
pLök
->
BlockSize
 & 
BlockAŒoˇãdBô
 );

237 
	`as£π
–
pLök
->
pNextFªeBlock
 );

239 if––
pLök
->
BlockSize
 & 
BlockAŒoˇãdBô
 ) != 0 ) {

240 if–
pLök
->
pNextFªeBlock
 =
NULL
 ) {

243 
pLök
->
BlockSize
 &~
BlockAŒoˇãdBô
;

245 
	`OSSchedLock
 (&
îr
);

248 
FªeByãsRemaöög
 +
pLök
->
BlockSize
;

249 
	`¥vtBlockFªeLi°
–––
BlockLök_t
 * ) 
pLök
 ) );

251 
	`OSSchedU∆ock
 (&
îr
);

257 
	}
}

260 
size_t
 
	$xP‹tGëFªeHópSize
( )

262  
FªeByãsRemaöög
;

263 
	}
}

266 
size_t
 
	$xP‹tGëMöimumEvîFªeHópSize
( )

268  
MöimumEvîFªeByãsRemaöög
;

269 
	}
}

272 
	$vP‹tInôüli£Blocks
( )

275 
	}
}

278 
	$HópInô
( )

280 
BlockLök_t
 *
pFú°FªeBlock
;

281 
UINT8
 *
pucAlig√dHóp
;

282 
UINT32
 
uAddªss
;

283 
size_t
 
xTŸÆHópSize
 = 
TOTAL_HEAP_SIZE
;

286 
uAddªss
 = ( 
UINT32
 ) 
mHóp
;

288 if––
uAddªss
 & 
BYTE_ALIGNMENT_MASK
 ) != 0 ) {

289 
uAddªss
 +–
BYTE_ALIGNMENT
 - 1 );

290 
uAddªss
 &~––
UINT32
 ) 
BYTE_ALIGNMENT_MASK
 );

291 
xTŸÆHópSize
 -
uAddªss
 - ( 
UINT32
 ) 
mHóp
;

294 
pucAlig√dHóp
 = ( 
UINT8
 * ) 
uAddªss
;

298 
xSèπ
.
pNextFªeBlock
 = ( * ) 
pucAlig√dHóp
;

299 
xSèπ
.
BlockSize
 = ( 
size_t
 ) 0;

303 
uAddªss
 = ( ( 
UINT32
 ) 
pucAlig√dHóp
 ) + 
xTŸÆHópSize
;

304 
uAddªss
 -
HópSåu˘Size
;

305 
uAddªss
 &~––
UINT32
 ) 
BYTE_ALIGNMENT_MASK
 );

306 
pxEnd
 = ( * ) 
uAddªss
;

307 
pxEnd
->
BlockSize
 = 0;

308 
pxEnd
->
pNextFªeBlock
 = 
NULL
;

312 
pFú°FªeBlock
 = ( * ) 
pucAlig√dHóp
;

313 
pFú°FªeBlock
->
BlockSize
 = 
uAddªss
 - ( 
UINT32
 )ÖFirstFreeBlock;

314 
pFú°FªeBlock
->
pNextFªeBlock
 = 
pxEnd
;

317 
MöimumEvîFªeByãsRemaöög
 = 
pFú°FªeBlock
->
BlockSize
;

318 
FªeByãsRemaöög
 = 
pFú°FªeBlock
->
BlockSize
;

321 
BlockAŒoˇãdBô
 = ( ( 
size_t
 ) 1 ) << ( ( –size_àË* 
hópBITS_PER_BYTE
 ) - 1 );

322 
	}
}

325 
	$¥vtBlockFªeLi°
–
BlockLök_t
 *
pBlockToIn£π
 )

327 
BlockLök_t
 *
pIãøt‹
;

328 
UINT8
 *
puc
;

332  
pIãøt‹
 = &
xSèπ
;ÖIãøt‹->
pNextFªeBlock
 < 
pBlockToIn£π
;ÖIterator =ÖIterator->pNextFreeBlock ) {

338 
puc
 = ( 
UINT8
 * ) 
pIãøt‹
;

339 if––
puc
 + 
pIãøt‹
->
BlockSize
 ) =–
UINT8
 * ) 
pBlockToIn£π
 ) {

340 
pIãøt‹
->
BlockSize
 +
pBlockToIn£π
->BlockSize;

341 
pBlockToIn£π
 = 
pIãøt‹
;

347 
puc
 = ( 
UINT8
 * ) 
pBlockToIn£π
;

348 if––
puc
 + 
pBlockToIn£π
->
BlockSize
 ) =–
UINT8
 * ) 
pIãøt‹
->
pNextFªeBlock
 ) {

349 if–
pIãøt‹
->
pNextFªeBlock
 !
pxEnd
 ) {

351 
pBlockToIn£π
->
BlockSize
 +
pIãøt‹
->
pNextFªeBlock
->BlockSize;

352 
pBlockToIn£π
->
pNextFªeBlock
 = 
pIãøt‹
->pNextFreeBlock->pNextFreeBlock;

354 
pBlockToIn£π
->
pNextFªeBlock
 = 
pxEnd
;

357 
pBlockToIn£π
->
pNextFªeBlock
 = 
pIãøt‹
->pNextFreeBlock;

364 if–
pIãøt‹
 !
pBlockToIn£π
 ) {

365 
pIãøt‹
->
pNextFªeBlock
 = 
pBlockToIn£π
;

368 
	}
}

	@driver/libc/stdlib/qsort.c

30 
	~<libc/as£π.h
>

32 
__ölöe
 *
med3
(*, *, *,

34 
__ölöe
 
	`sw≠func
(*, *, 
size_t
, );

36 
	#mö
(
a
, 
b
Ë◊Ë< (bË?á : 
	)
b

41 
	#sw≠code
(
TYPE
, 
∑rmi
, 
∑rmj
, 
n
) { \

42 
size_t
 
i
 = (
n
Ë/  (
TYPE
); \

43 
TYPE
 *
pi
 = (TYPE *)(*)(
∑rmi
); \

44 
TYPE
 *
pj
 = (TYPE *)(*)(
∑rmj
); \

46 
TYPE
 
t
 = *
pi
; \

47 *
pi
++ = *
pj
; \

48 *
pj
++ = 
t
; \

49 } --
i
 > 0); \

50 
	}

	)
}

52 
	#SWAPINIT
(
a
, 
es
Ë
sw≠ty≥
 = ((*)a - (*)0) % () || \

53 
es
 % (Ë? 2 :É†=()? 0 : 1;

	)

55 
__ölöe
 
	$sw≠func
(*
a
, *
b
, 
size_t
 
n
, 
sw≠ty≥
)

57 i‡(
sw≠ty≥
 <= 1)

58 
	`sw≠code
(, 
a
, 
b
, 
n
)

60 
	`sw≠code
(, 
a
, 
b
, 
n
)

61 
	}
}

63 
	#sw≠
(
a
, 
b
) \

64 i‡(
sw≠ty≥
 == 0) { \

65 
t
 = *(*)(*)(
a
); \

66 *(*)(*)(
a
Ë*(*)(*)(
b
); \

67 *(*)(*)(
b
Ë
t
; \

69 
	`sw≠func
(
a
, 
b
, 
es
, 
sw≠ty≥
)

	)

71 
	#vecsw≠
(
a
, 
b
, 
n
Ëi‡(“Ë> 0Ë
	`sw≠func
(◊), (b), (
size_t
)“), 
sw≠ty≥
)

	)

73 
__ölöe
 *

74 
med3
(*
a
, *
b
, *
c
, (*
cmp
)(const *, const *))

76  
	`cmp
(
a
, 
b
) < 0 ?

77 (
	`cmp
(
b
, 
c
Ë< 0 ? b : (cmp(
a
, c) < 0 ? c :á ))

78 :(
	`cmp
(
b
, 
c
Ë> 0 ? b : (cmp(
a
, c) < 0 ?á : c ));

79 
	}
}

81 
qs‹t
(*
a
, 
size_t
 
n
, size_à
es
, (*
cmp
)(const *, const *))

83 *
∑
, *
pb
, *
pc
, *
pd
, *
∂
, *
pm
, *
≤
;

84 
d
, 
r
, 
sw≠ty≥
, 
sw≠_˙t
;

86 
lo›
:

87 
	`SWAPINIT
(
a
, 
es
);

88 
sw≠_˙t
 = 0;

89 i‡(
n
 < 7) {

90 
pm
 = (*Ë
a
 + 
es
;Öm < (*Ë®+ 
n
 *És;Öm +=És)

91 
∂
 = 
pm
;Ö»> (*Ë
a
 && 
	`cmp
’»- 
es
,Öl) > 0;

92 
∂
 -
es
)

93 
	`sw≠
(
∂
,Ö»- 
es
);

96 
pm
 = (*Ë
a
 + (
n
 / 2Ë* 
es
;

97 i‡(
n
 > 7) {

98 
∂
 = (*Ë
a
;

99 
≤
 = (*Ë
a
 + (
n
 - 1Ë* 
es
;

100 i‡(
n
 > 40) {

101 
d
 = (
n
 / 8Ë* 
es
;

102 
∂
 = 
	`med3
’l,Ö»+ 
d
,Ö»+ 2 * d, 
cmp
);

103 
pm
 = 
	`med3
’m - 
d
,Öm,Öm + d, 
cmp
);

104 
≤
 = 
	`med3
’¿- 2 * 
d
,Ö¿- d,Ön, 
cmp
);

106 
pm
 = 
	`med3
(
∂
,Öm, 
≤
, 
cmp
);

108 
	`sw≠
(
a
, 
pm
);

109 
∑
 = 
pb
 = (*Ë
a
 + 
es
;

111 
pc
 = 
pd
 = (*Ë
a
 + (
n
 - 1Ë* 
es
;

113 
pb
 <
pc
 && (
r
 = 
	`cmp
’b, 
a
)) <= 0) {

114 i‡(
r
 == 0) {

115 
sw≠_˙t
 = 1;

116 
	`sw≠
(
∑
, 
pb
);

117 
∑
 +
es
;

119 
pb
 +
es
;

121 
pb
 <
pc
 && (
r
 = 
	`cmp
’c, 
a
)) >= 0) {

122 i‡(
r
 == 0) {

123 
sw≠_˙t
 = 1;

124 
	`sw≠
(
pc
, 
pd
);

125 
pd
 -
es
;

127 
pc
 -
es
;

129 i‡(
pb
 > 
pc
)

131 
	`sw≠
(
pb
, 
pc
);

132 
sw≠_˙t
 = 1;

133 
pb
 +
es
;

134 
pc
 -
es
;

136 i‡(
sw≠_˙t
 == 0) {

137 
pm
 = (*Ë
a
 + 
es
;Öm < (*Ë®+ 
n
 *És;Öm +=És)

138 
∂
 = 
pm
;Ö»> (*Ë
a
 && 
	`cmp
’»- 
es
,Öl) > 0;

139 
∂
 -
es
)

140 
	`sw≠
(
∂
,Ö»- 
es
);

143 
≤
 = (*Ë
a
 + 
n
 * 
es
;

144 
r
 = 
	`mö
(
∑
 - (*Ë
a
, 
pb
 -Öa);

145 
	`vecsw≠
(
a
, 
pb
 - 
r
,Ñ);

146 
r
 = 
	`mö
(
pd
 - 
pc
, 
≤
 -Öd - 
es
);

147 
	`vecsw≠
(
pb
, 
≤
 - 
r
,Ñ);

148 i‡((
r
 = 
pb
 - 
∑
Ë> 
es
)

149 
	`qs‹t
(
a
, 
r
 / 
es
,És, 
cmp
);

150 i‡((
r
 = 
pd
 - 
pc
Ë> 
es
) {

152 
a
 = 
≤
 - 
r
;

153 
n
 = 
r
 / 
es
;

154 
lo›
;

157 
	}
}

	@driver/libc/stdlib/rand.c

19 
	~<libc/ønd.h
>

23 
	$ønd
 ()

25  (Ë
	`__øndom
 ();

26 
	}
}

	@driver/libc/stdlib/rand.h

1 #i‚de‡
_RAND_H__


2 
	#_RAND_H__


	)

4 
	töt32_t
;

5 
	#NULL
 0

	)

6 
	søndom_d©a
 {

7 
öt32_t
 *
	mÂå
;

8 
öt32_t
 *
	mΩå
;

9 
öt32_t
 *
	m°©e
;

10 
	mønd_ty≥
;

11 
	mønd_deg
;

12 
	mønd_£p
;

13 
öt32_t
 *
	míd_±r
;

17 
__øndom
 ();

18 
__øndom_r
 (
øndom_d©a
 *
__buf
, 
öt32_t
 *
__ªsu…
);

20 
ønd
();

	@driver/libc/stdlib/random.c

4 
	~<libc/ønd.h
>

7 
	#TYPE_0
 0

	)

8 
	#BREAK_0
 8

	)

9 
	#DEG_0
 0

	)

10 
	#SEP_0
 0

	)

13 
	#TYPE_1
 1

	)

14 
	#BREAK_1
 32

	)

15 
	#DEG_1
 7

	)

16 
	#SEP_1
 3

	)

19 
	#TYPE_2
 2

	)

20 
	#BREAK_2
 64

	)

21 
	#DEG_2
 15

	)

22 
	#SEP_2
 1

	)

25 
	#TYPE_3
 3

	)

26 
	#BREAK_3
 128

	)

27 
	#DEG_3
 31

	)

28 
	#SEP_3
 3

	)

31 
	#TYPE_4
 4

	)

32 
	#BREAK_4
 256

	)

33 
	#DEG_4
 63

	)

34 
	#SEP_4
 1

	)

40 
	#MAX_TYPES
 5

	)

43 
öt32_t
 
	gøndtbl
[
DEG_3
 + 1] = {

44 
TYPE_3
,

58 
øndom_d©a
 
	gunß„_°©e
 = {

60 .
Âå
 = &
øndtbl
[
SEP_3
 + 1],

61 .
	gΩå
 = &
øndtbl
[1],

62 .
	g°©e
 = &
øndtbl
[1],

63 .
	gønd_ty≥
 = 
TYPE_3
,

64 .
	gønd_deg
 = 
DEG_3
,

65 .
	gønd_£p
 = 
SEP_3
,

67 .
	gíd_±r
 = &
øndtbl
[ (randtbl) /  (randtbl[0])]

72 
	$__øndom
 ()

74 
öt32_t
 
ªtvÆ
;

76 (Ë
	`__øndom_r
 (&
unß„_°©e
, &
ªtvÆ
);

78  
ªtvÆ
;

79 
	}
}

	@driver/libc/stdlib/random_r.c

6 
	~<libc/ønd.h
>

8 
¥ötf
(*
s
,...);

10 
	#TYPE_0
 0

	)

11 
	#BREAK_0
 8

	)

12 
	#DEG_0
 0

	)

13 
	#SEP_0
 0

	)

16 
	#TYPE_1
 1

	)

17 
	#BREAK_1
 32

	)

18 
	#DEG_1
 7

	)

19 
	#SEP_1
 3

	)

22 
	#TYPE_2
 2

	)

23 
	#BREAK_2
 64

	)

24 
	#DEG_2
 15

	)

25 
	#SEP_2
 1

	)

28 
	#TYPE_3
 3

	)

29 
	#BREAK_3
 128

	)

30 
	#DEG_3
 31

	)

31 
	#SEP_3
 3

	)

34 
	#TYPE_4
 4

	)

35 
	#BREAK_4
 256

	)

36 
	#DEG_4
 63

	)

37 
	#SEP_4
 1

	)

42 
	#MAX_TYPES
 5

	)

44 
¥ötf
(*
f
 ,...);

46 
	$__øndom_r
 (
buf
, 
ªsu…
)

47 
øndom_d©a
 *
buf
;

48 
öt32_t
 *
ªsu…
;

50 
öt32_t
 *
°©e
;

52 i‡(
buf
 =
NULL
 || 
ªsu…
 == NULL) {

53 
	`¥ötf
("thîêi†®¨gÉº‹:%s\n",
__FUNCTION__
);

57 
°©e
 = 
buf
->state;

59 i‡(
buf
->
ønd_ty≥
 =
TYPE_0
) {

60 
öt32_t
 
vÆ
 = 
°©e
[0];

61 
vÆ
 = ((
°©e
[0] * 1103515245) + 12345) & 0x7fffffff;

62 
°©e
[0] = 
vÆ
;

63 *
ªsu…
 = 
vÆ
;

65 
öt32_t
 *
Âå
 = 
buf
->fptr;

66 
öt32_t
 *
Ωå
 = 
buf
->rptr;

67 
öt32_t
 *
íd_±r
 = 
buf
->end_ptr;

68 
öt32_t
 
vÆ
;

70 
vÆ
 = *
Âå
 +*
Ωå
;

72 *
ªsu…
 = (
vÆ
 >> 1) & 0x7fffffff;

73 ++
Âå
;

74 i‡(
Âå
 >
íd_±r
) {

75 
Âå
 = 
°©e
;

76 ++
Ωå
;

78 ++
Ωå
;

79 i‡(
Ωå
 >
íd_±r
)

80 
Ωå
 = 
°©e
;

82 
buf
->
Âå
 = fptr;

83 
buf
->
Ωå
 =Ñptr;

90 
	}
}

	@driver/libc/stdlib/strtod.c

40 
	~<libc/˘y≥.h
>

41 
	~<libc/°ddef.h
>

52 #i‡!
deföed
(
__DBL_MIN_EXP__
Ë|| !deföed(
__DBL_MAX_EXP__
)

53 #ifde‡
CONFIG_CPP_HAVE_WARNING


56 #unde‡
__DBL_MIN_EXP__


57 
	#__DBL_MIN_EXP__
 (-1021)

	)

58 #unde‡
__DBL_MAX_EXP__


59 
	#__DBL_MAX_EXP__
 (1024)

	)

66 
ölöe
 
	$is_ªÆ
(
x
)

68 c⁄° 
doubÀ_t
 
öföôe
 = 1.0/0.0;

69  (
x
 < 
öföôe
) && (x >= -infinite);

70 
	}
}

84 
doubÀ_t
 
	$°πod
(c⁄° *
°r
, **
íd±r
)

86 
doubÀ_t
 
numbî
;

87 
exp⁄ít
;

88 
√g©ive
;

89 *
p
 = (*Ë
°r
;

90 
p10
;

91 
n
;

92 
num_digôs
;

93 
num_decimÆs
;

94 c⁄° 
doubÀ_t
 
öföôe
 = 1.0/0.0;

98 
	`is•a˚
(*
p
)) {

99 
p
++;

104 
√g©ive
 = 0;

105 *
p
) {

107 
√g©ive
 = 1;

109 
p
++;

112 
numbî
 = 0.;

113 
exp⁄ít
 = 0;

114 
num_digôs
 = 0;

115 
num_decimÆs
 = 0;

119 
	`isdigô
(*
p
)) {

120 
numbî
 =Çumbî * 10. + (*
p
 - '0');

121 
p
++;

122 
num_digôs
++;

127 i‡(*
p
 == '.') {

128 
p
++;

130 
	`isdigô
(*
p
)) {

131 
numbî
 =Çumbî * 10. + (*
p
 - '0');

132 
p
++;

133 
num_digôs
++;

134 
num_decimÆs
++;

137 
exp⁄ít
 -
num_decimÆs
;

140 i‡(
num_digôs
 == 0) {

146 i‡(
√g©ive
) {

147 
numbî
 = -number;

152 i‡(*
p
 == 'e' || *p == 'E') {

155 
√g©ive
 = 0;

156 *++
p
) {

158 
√g©ive
 = 1;

160 
p
++;

165 
n
 = 0;

166 
	`isdigô
(*
p
)) {

167 
n
 =Ç * 10 + (*
p
 - '0');

168 
p
++;

171 i‡(
√g©ive
) {

172 
exp⁄ít
 -
n
;

174 
exp⁄ít
 +
n
;

178 i‡(
exp⁄ít
 < 
__DBL_MIN_EXP__
 ||

179 
exp⁄ít
 > 
__DBL_MAX_EXP__
) {

180  
öföôe
;

185 
p10
 = 10.;

186 
n
 = 
exp⁄ít
;

187 i‡(
n
 < 0)Ç = -n;

188 
n
) {

189 i‡(
n
 & 1) {

190 i‡(
exp⁄ít
 < 0) {

191 
numbî
 /
p10
;

193 
numbî
 *
p10
;

196 
n
 >>= 1;

197 
p10
 *=Ö10;

200 i‡(!
	`is_ªÆ
(
numbî
)) {

203 i‡(
íd±r
) {

204 *
íd±r
 = 
p
;

207  
numbî
;

208 
	}
}

	@driver/libc/stdlib/strtol.c

30 
	~<libc/˘y≥.h
>

31 
	~<libc/°ddef.h
>

39 
	$°πﬁ
(c⁄° *
≈å
, **
íd±r
, 
ba£
)

41 c⁄° *
s
;

42 
acc
, 
cutoff
;

43 
c
;

44 
√g
, 
™y
, 
cuéim
;

51 
s
 = 
≈å
;

53 
c
 = (Ë*
s
++;

54 } 
	`is•a˚
(
c
));

55 i‡(
c
 == '-') {

56 
√g
 = 1;

57 
c
 = *
s
++;

59 
√g
 = 0;

60 i‡(
c
 == '+')

61 
c
 = *
s
++;

64 i‡((
ba£
 == 0 || base == 16) &&

65 
c
 ='0' && (*
s
 == 'x' || *s == 'X')) {

66 
c
 = 
s
[1];

67 
s
 += 2;

68 
ba£
 = 16;

70 i‡(
ba£
 == 0)

71 
ba£
 = 
c
 == '0' ? 8 : 10;

90 
cutoff
 = 
√g
 ? 
LONG_MIN
 : 
LONG_MAX
;

91 
cuéim
 = ()(
cutoff
 % 
ba£
);

92 
cutoff
 /
ba£
;

93 i‡(
√g
) {

95 i‡(
cuéim
 > 0) {

96 
cuéim
 -
ba£
;

97 
cutoff
 += 1;

100 
cuéim
 = -cutlim;

102 
acc
 = 0, 
™y
 = 0;; 
c
 = (Ë*
s
++) {

103 i‡(
	`isdigô
(
c
))

104 
c
 -= '0';

105 i‡(
	`ißÕha
(
c
))

106 
c
 -
	`isuµî
(c) ? 'A' - 10 : 'a' - 10;

109 i‡(
c
 >
ba£
)

111 i‡(
™y
 < 0)

113 i‡(
√g
) {

114 i‡(
acc
 < 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
)) {

115 
™y
 = -1;

116 
acc
 = 
LONG_MIN
;

118 
™y
 = 1;

119 
acc
 *
ba£
;

120 
acc
 -
c
;

123 i‡(
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
)) {

124 
™y
 = -1;

125 
acc
 = 
LONG_MAX
;

127 
™y
 = 1;

128 
acc
 *
ba£
;

129 
acc
 +
c
;

133 i‡(
íd±r
 != 0)

135 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

136  (
acc
);

137 
	}
}

	@driver/libc/stdlib/strtoul.c

30 
	~<libc/°ddef.h
>

31 
	~<libc/˘y≥.h
>

39 
	$°πoul
(c⁄° *
≈å
, **
íd±r
, 
ba£
)

41 c⁄° *
s
;

42 
acc
, 
cutoff
;

43 
c
;

44 
√g
, 
™y
, 
cuéim
;

49 
s
 = 
≈å
;

51 
c
 = (Ë*
s
++;

52 } 
	`is•a˚
(
c
));

53 i‡(
c
 == '-') {

54 
√g
 = 1;

55 
c
 = *
s
++;

57 
√g
 = 0;

58 i‡(
c
 == '+')

59 
c
 = *
s
++;

61 i‡((
ba£
 == 0 || base == 16) &&

62 
c
 ='0' && (*
s
 == 'x' || *s == 'X')) {

63 
c
 = 
s
[1];

64 
s
 += 2;

65 
ba£
 = 16;

67 i‡(
ba£
 == 0)

68 
ba£
 = 
c
 == '0' ? 8 : 10;

70 
cutoff
 = 
ULONG_MAX
 / ()
ba£
;

71 
cuéim
 = ()(
ULONG_MAX
 % ()
ba£
);

72 
acc
 = 0, 
™y
 = 0;; 
c
 = (Ë*
s
++) {

73 i‡(
	`isdigô
(
c
))

74 
c
 -= '0';

75 i‡(
	`ißÕha
(
c
))

76 
c
 -
	`isuµî
(c) ? 'A' - 10 : 'a' - 10;

79 i‡(
c
 >
ba£
)

81 i‡(
™y
 < 0)

83 i‡(
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
)) {

84 
™y
 = -1;

85 
acc
 = 
ULONG_MAX
;

87 
™y
 = 1;

88 
acc
 *()
ba£
;

89 
acc
 +
c
;

92 i‡(
√g
 && 
™y
 > 0)

93 
acc
 = -acc;

94 i‡(
íd±r
 != 0)

96 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

97  (
acc
);

98 
	}
}

	@driver/libc/string/bLib.c

44 
	~<libc/°rög.h
>

45 
	~<libc/°ddef.h
>

46 
	~<libc/sy°em.h
>

48 
	#_CAG_PORTABLE_bLib


	)

49 
	#_CAG_PORTABLE_swab


	)

51 #unde‡
bcmp


71 
	gbcmp


73 c⁄° * 
	gbuf1
,

74 c⁄° * 
	gbuf2
,

75 
size_t
 
	gnbyãs


78 c⁄° *
	gp1
 = (c⁄° *)
buf1
;

79 c⁄° *
	gp2
 = (c⁄° *)
buf2
;

83 i‡(
	gnbyãs
 == 0)

86 *
	gp1
++ =*
p2
++) {

87 i‡(--
nbyãs
 == 0)

91  ((*--
	gp1
Ë- (*--
	gp2
));

106 
	gbövît


108 * 
	gbuf
,

109 
size_t
 
	gnbyãs


112 * 
	gbufc
 = (*Ë
buf
;

113 * 
	gbuf_íd
 = 
bufc
 + 
nbyãs
 - 1;

114 
	gãmp
;

116 
	gbufc
 < 
	gbuf_íd
) {

117 
	gãmp
 = *
bufc
;

118 *
	gbufc
 = *
buf_íd
;

119 *
	gbuf_íd
 = 
ãmp
;

121 
	gbuf_íd
--;

122 
	gbufc
++;

137 
	gbsw≠


139 * 
	gbuf1
,

140 * 
	gbuf2
,

141 
size_t
 
	gnbyãs


144 * 
	gbuf„r1
 = (*Ë
buf1
;

145 * 
	gbuf„r2
 = (*Ë
buf2
;

146 
	gãmp
;

148 
	gnbyãs
 >= 1) {

149 
ãmp
 = *
buf„r1
;

150 *
	gbuf„r1
++ = *
buf„r2
;

151 *
	gbuf„r2
++ = 
ãmp
;

152 
	gnbyãs
--;

156 #ifdef 
_CAG_PORTABLE_swab


181 
	gswab


183 c⁄° * 
	gsour˚
,

184 * 
	gde°ö©i⁄
,

185 
size_t
 
	gnbyãs


188 
FAST
 *
	g§c
 = (*Ë
sour˚
;

189 
FAST
 *
	gd°
 = (*Ë
de°ö©i⁄
;

190 #i‡
deföed
(
_CAG_IMPROVED_PORTABLE_SWAB
)

196 
FAST
 *
	gd°_íd
 =

197 (*Ë((*Ë
de°ö©i⁄
 + 
nbyãs
);

199 
FAST
 *
	gd°_íd
 = 
d°
 + (
nbyãs
 / ( ()));

202 ; 
	gd°
 < 
	gd°_íd
; d°++, 
	g§c
++) {

203 *
	gd°
 = ()(((*
§c
 & 0x00ff) << 8) | ((*src & 0xff00) >> 8));

228 
	guswab


230 c⁄° * 
	gsour˚
,

231 * 
	gde°ö©i⁄
,

232 
size_t
 
	gnbyãs


235 * 
	g§c
 = (*Ë
sour˚
;

236 * 
	gd°
 = (*Ë
de°ö©i⁄
;

237 * 
	gd°_íd
 = 
d°
 + 
nbyãs
;

238 
	gbyã1
;

239 
	gbyã2
;

241 
	gd°
 < 
	gd°_íd
) {

242 
	gbyã1
 = *
§c
++;

243 
	gbyã2
 = *
§c
++;

244 *
	gd°
++ = 
byã2
;

245 *
	gd°
++ = 
byã1
;

261 
	gbzîo


263 * 
	gbuf„r
,

264 
size_t
 
	gnbyãs


267 
bfûl
 (
buf„r
, 
nbyãs
, 0);

270 #ifde‡
_CAG_PORTABLE_bLib


290 
	gbc›y


292 c⁄° * 
	gsour˚
,

293 * 
	gde°ö©i⁄
,

294 
size_t
 
	gnbyãs


297 * 
	g§c
 = (*Ë
sour˚
;

298 * 
	gd°
 = (*Ë
de°ö©i⁄
;

299 * 
	gd°íd
;

300 * 
	g§˛
;

301 * 
	gd°l
;

302 * 
	gd°tmp
;

331 i‡((
	gsize_t
)(
	gd°
 - 
	g§c
Ë>
nbyãs
) {

334 
d°íd
 = 
d°
 + 
nbyãs
;

341 i‡(
	gnbyãs
 < (2 *  () - 1) ||

342 ((()
	gd°
 ^ ()
	g§c
) & ( () - 1)))

343 
	gbyã_c›y_fwd
;

347 ()
	gd°
 & ( () - 1))

348 *
	gd°
++ = *
§c
++;

350 
	g§˛
 = (*Ë
§c
;

351 
	gd°l
 = (*Ë
d°
;

358 
	gd°tmp
 = (*)((
size_t
)
d°íd
 & ~(() - 1));

361 *
	gd°l
++ = *
§˛
++;

362 } (*)
	gd°l
 !
d°tmp
);

364 
	gd°
 = (*)
d°l
;

365 
	g§c
 = (*)
§˛
;

367 
	gbyã_c›y_fwd
:

368 
d°
 !
d°íd
)

369 *
d°
++ = *
§c
++;

373 
	gd°íd
 = 
d°
;

374 
	gd°
 +
nbyãs
;

375 
	g§c
 +
nbyãs
;

379 i‡(
	gnbyãs
 < (2 * () - 1) ||

380 ((()
	gd°
 ^ ()
	g§c
) & (() - 1)))

381 
	gbyã_c›y_bwd
;

385 ()
	gd°
 & (() - 1))

386 *--
	gd°
 = *--
§c
;

388 
	g§˛
 = (*Ë
§c
;

389 
	gd°l
 = (*Ë
d°
;

396 
	gd°tmp
 = (*)(((
size_t
)
d°íd
 + () - 1) &

399 *--
	gd°l
 = *--
§˛
;

400 } (*)
	gd°l
 !
d°tmp
);

402 
	gd°
 = (*)
d°l
;

403 
	g§c
 = (*)
§˛
;

405 
	gbyã_c›y_bwd
:

406 
d°
 !
d°íd
)

407 *--
d°
 = *--
§c
;

427 
	gbc›yByãs


429 c⁄° * 
	gsour˚
,

430 * 
	gde°ö©i⁄
,

431 
size_t
 
	gnbyãs


434 * 
	g§c
 = (*Ë
sour˚
;

435 * 
	gd°
 = (*Ë
de°ö©i⁄
;

436 * 
	gd°íd
;

437 
size_t
 
	goff£t
 = (size_t)(
d°
 - 
§c
);

439 i‡(
	goff£t
 == 0)

442 i‡(
	goff£t
 >
nbyãs
) {

445 
d°íd
 = 
d°
 + 
nbyãs
;

447 
	gd°
 !
d°íd
)

448 *
d°
++ = *
§c
++;

452 
	gd°íd
 = 
d°
;

453 
	gd°
 +
nbyãs
;

454 
	g§c
 +
nbyãs
;

456 
	gd°
 !
d°íd
)

457 *--
d°
 = *--
§c
;

477 
	gbc›yW‹ds


479 c⁄° * 
	gsour˚
,

480 * 
	gde°ö©i⁄
,

481 
size_t
 
	gnw‹ds


484 *
	gd°íd
;

485 *
	g§c
 = (*Ë
sour˚
;

486 *
	gd°
 = (*Ë
de°ö©i⁄
;

487 
size_t
 
	gnbyãs
 = 
nw‹ds
 << 1;

488 
size_t
 
	goff£t
 = (size_t)
de°ö©i⁄
 - (size_t)
sour˚
;

490 i‡(
	goff£t
 == 0)

493 i‡(
	goff£t
 >
nbyãs
) {

495 
d°íd
 = 
d°
 + 
nw‹ds
;

496 
	gd°
 !
d°íd
)

497 *
d°
++ = *
§c
++;

500 
	gd°íd
 = 
d°
;

501 
	gd°
 +
nw‹ds
;

502 
	g§c
 +
nw‹ds
;

503 
	gd°
 !
d°íd
)

504 *--
d°
 = *--
§c
;

530 
	gbc›yL⁄gs


532 c⁄° * 
	gsour˚
,

533 * 
	gde°ö©i⁄
,

534 
size_t
 
	g∆⁄gs


537 
UINT32
 *
	gd°íd
;

538 
UINT32
 *
	g§c
 = (UINT32 *Ë
sour˚
;

539 
UINT32
 *
	gd°
 = (UINT32 *Ë
de°ö©i⁄
;

540 
size_t
 
	gnbyãs
 = 
∆⁄gs
 * (
UINT32
);

541 
size_t
 
	goff£t
 = (size_t)
de°ö©i⁄
 - (size_t)
sour˚
;

543 i‡(
	goff£t
 == 0)

546 i‡(
	goff£t
 >
nbyãs
) {

548 
d°íd
 = 
d°
 + 
∆⁄gs
;

549 
	gd°
 !
d°íd
)

550 *
d°
++ = *
§c
++;

553 
	gd°íd
 = 
d°
;

554 
	gd°
 +
∆⁄gs
;

555 
	g§c
 +
∆⁄gs
;

556 
	gd°
 !
d°íd
)

557 *--
d°
 = *--
§c
;

578 
	gbc›yQuads


580 c⁄° * 
	gsour˚
,

581 * 
	gde°ö©i⁄
,

582 
size_t
 
	gnquads


585 
UINT64
 *
	gd°íd
;

586 
UINT64
 *
	g§c
 = (UINT64 *Ë
sour˚
;

587 
UINT64
 *
	gd°
 = (UINT64 *Ë
de°ö©i⁄
;

588 
size_t
 
	gnbyãs
 = 
nquads
 * (
UINT64
);

589 
size_t
 
	goff£t
 = (size_t)(
d°
 - 
§c
 );

591 i‡(
	goff£t
 == 0)

594 i‡(
	goff£t
 >
nbyãs
) {

596 
d°íd
 = 
d°
 + 
nquads
;

597 
	gd°
 !
d°íd
)

598 *
d°
++ = *
§c
++;

601 
	gd°íd
 = 
d°
;

602 
	gd°
 +
nquads
;

603 
	g§c
 +
nquads
;

604 
	gd°
 !
d°íd
)

605 *--
d°
 = *--
§c
;

609 #unde‡
bfûl


628 
	gbfûl


630 * 
	gbuf
,

631 
size_t
 
	gnbyãs
,

632 
	gch


635 * 
	gbufc
 = (*Ë
buf
;

636 * 
	gpBuf
;

637 * 
	gbu„nd
 = 
bufc
 + 
nbyãs
;

638 * 
	gbu·mp
;

639 
	gvÆ
;

641 i‡(
	gnbyãs
 < 2 * () - 1)

642 
	gbyã_fûl
;

649 ()
	gbufc
 & (() - 1)) {

650 *
	gbufc
++ = (Ë
ch
;

654 
	gvÆ
 = ()
ch
;

655 
	gvÆ
 |(
vÆ
 << 8);

656 
	gvÆ
 |(
vÆ
 << 16);

659 
	gbu·mp
 = (*)(()
bu„nd
 & ~(() - 1));

661 
	gpBuf
 = (*)
bufc
;

668 *
	gpBuf
++ = 
vÆ
;

669 } (*)
	gpBuf
 !
bu·mp
);

671 
	gbufc
 = (*)
pBuf
;

675 
	gbyã_fûl
:

676 
bufc
 !
bu„nd
) {

677 *
bufc
++ = (Ë
ch
;

697 
	gbfûlByãs


699 * 
	gbuf
,

700 
size_t
 
	gnbyãs
,

701 
	gch


704 * 
	gbufc
 = (*Ë
buf
;

705 * 
	gbu„nd
 = 
bufc
 + 
nbyãs
;

707 
	gbufc
 !
bu„nd
)

708 *
bufc
++ = (Ë
ch
;

712 #unde‡
ödex


729 *
	gödex


731 c⁄° * 
	gs
,

732 
	gc


735 
	gch
;

737 ((
	gch
 = *(
s
++)Ë!
c
Ë&& (
ch
 !
EOS
))

740  (((
	gch
 =
EOS
Ë&& 
c
 !EOSË? 
NULL
 : (*Ë--
s
);

743 #unde‡
rödex


758 *
	grödex


760 c⁄° * 
	gs
,

761 
	gc


764 
	gi
;

766 
	gi
 = (Ë
°æí
 (
s
);

768 
	gi
 >= 0) {

769 i‡(
s
 [
i
] =
c
)

770  ((*Ë&
s
 [
i
]);

772 
	gi
--;

775  ((*Ë
	gNULL
);

	@driver/libc/string/memchr.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

38 * 
	gmemchr


40 c⁄° * 
	gm
,

41 
	gc
,

42 
size_t
 
	gn


45 
uch¨_t
 *
	gp
 = (uch¨_à*Ë
CHAR_FROM_CONST
(
m
);

47 i‡(
	gn
 != 0)

49 i‡(*
p
++ =(Ë
c
)

50  (
VOID_FROM_CONST
(
p
 - 1));

52 } --
	gn
 != 0);

54  (
	gNULL
);

	@driver/libc/string/memcmp.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

40 
	gmemcmp


42 c⁄° * 
	gs1
,

43 c⁄° * 
	gs2
,

44 
size_t
 
	gn


47 c⁄° *
	gp1
;

48 c⁄° *
	gp2
;

52 i‡(
	gn
 == 0)

57 
	gp1
 = 
s1
;

58 
	gp2
 = 
s2
;

60 *
	gp1
++ =*
p2
++) {

61 i‡(--
n
 == 0)

65  ((*--
	gp1
Ë- (*--
	gp2
));

	@driver/libc/string/memcpy.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

37 * 
	gmem˝y


39 * 
	gde°ö©i⁄
,

40 c⁄° * 
	gsour˚
,

41 
size_t
 
	gsize


44 
bc›y
 ((*Ë
sour˚
, (*Ë
de°ö©i⁄
, (
size_t
Ë
size
);

45  (
	gde°ö©i⁄
);

	@driver/libc/string/memmove.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

37 * 
	gmemmove


39 * 
	gde°ö©i⁄
,

40 c⁄° * 
	gsour˚
,

41 
size_t
 
	gsize


44 
bc›y
 ((*)
sour˚
, (*)
de°ö©i⁄
, 
size
);

45  (
	gde°ö©i⁄
);

	@driver/libc/string/memset.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

36 * 
	gmem£t


38 * 
	gm
,

39 
	gc
,

40 
size_t
 
	gsize


43 
bfûl
 ((*Ë
m
, 
size
, 
c
);

44  (
	gm
);

	@driver/libc/string/puts.c

11 
	~<libc/°dio.h
>

26 
	gputs


28 c⁄° *
	gs


31 c⁄° *
	gt
 = 
s
;

32 *
	gt
 != '\0') {

33 ()
putch¨
(*
t
);

34 
	gt
++;

	@driver/libc/string/strcat.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

36 * 
	g°rˇt


38 * 
	gde°ö©i⁄
,

39 c⁄° * 
	g≠≥nd


42 *
	gßve
 = 
de°ö©i⁄
;

44 *
	gde°ö©i⁄
++ != '\0')

47 
	gde°ö©i⁄
--;

49 (*
	gde°ö©i⁄
++ = *
≠≥nd
++) != '\0')

52  (
	gßve
);

	@driver/libc/string/strchr.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

37 * 
	g°rchr


39 c⁄° * 
	gs
,

40 
	gc


43 *
	gr
 = 
CHAR_FROM_CONST
(
s
);

45 *
	gr
 !(Ë
c
) {

46 i‡(*
r
++ =
EOS
)

47  (
NULL
);

50  (
	gr
);

	@driver/libc/string/strcmp.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

37 
	g°rcmp


39 c⁄° * 
	gs1
,

40 c⁄° * 
	gs2


43 *
	gs1
++ =*
s2
++)

44 i‡(
s1
 [-1] =
EOS
)

47  (()(()
	gs1
 [-1] - ()
	gs2
 [-1]));

	@driver/libc/string/strcpy.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

35 * 
	g°r˝y


37 * 
	gs1
,

38 c⁄° * 
	gs2


41 *
	gßve
 = 
s1
;

43 (*
	gs1
++ = *
s2
++Ë!
EOS
)

46  (
	gßve
);

	@driver/libc/string/strlcat.c

29 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

30 *
	grcsid
 = "$OpenBSD: strlcat.c,v 1.11 2003/06/17 21:56:24 millert Exp $";

48 
	~<libc/sy°em.h
>

49 
	~<libc/°rög.h
>

51 
size_t
 
	g°æˇt


53 * 
	gd°
,

54 c⁄° * 
	g§c
,

55 
size_t
 
	gsiz


58 *
	gd
 = 
d°
;

59 c⁄° *
	gs
 = 
§c
;

60 
size_t
 
	gn
 = 
siz
;

61 
size_t
 
	gdÀn
;

65 
	gn
-- !0 && *
d
 != '\0')

66 
d
++;

68 
	gdÀn
 = 
d
 - 
d°
;

69 
	gn
 = 
siz
 - 
dÀn
;

71 i‡(
	gn
 == 0)

72  (
dÀn
 + 
°æí
 (
s
));

74 *
	gs
 != '\0') {

75 i‡(
n
 != 1) {

76 *
d
++ = *
s
;

77 
	gn
--;

79 
	gs
++;

82 *
	gd
 = '\0';

84  (
	gdÀn
 + (
	gs
 - 
	g§c
));

	@driver/libc/string/strlcpy.c

29 #i‡
deföed
(
LIBC_SCCS
Ë&& !deföed(
löt
)

30 *
	grcsid
 = "$OpenBSD: strlcpy.c,v 1.8 2003/06/17 21:56:24 millert Exp $";

33 
	~<libc/sy°em.h
>

34 
	~<libc/°rög.h
>

49 
size_t
 
	g°æ˝y


51 * 
	gd°
,

52 c⁄° * 
	g§c
,

53 
size_t
 
	gsiz


56 *
	gd
 = 
d°
;

57 c⁄° *
	gs
 = 
§c
;

58 
size_t
 
	gn
 = 
siz
;

62 i‡(
	gn
 !0 && --
n
 != 0) {

64 i‡((*
d
++ = *
s
++) == 0)

66 } --
	gn
 != 0);

71 i‡(
	gn
 == 0) {

72 i‡(
siz
 != 0)

73 *
d
 = '\0';

74 *
	gs
++)

78  (
	gs
 - 
	g§c
 - 1);

	@driver/libc/string/strlen.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

35 
size_t
 
	g°æí


37 c⁄° * 
	gs


40 c⁄° *
	gßve
 = 
s
 + 1;

42 *
	gs
++ !
EOS
)

45  (
	gs
 - 
	gßve
);

	@driver/libc/string/strncat.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

36 * 
	g°∫ˇt


38 * 
	gd°
,

39 c⁄° * 
	g§c
,

40 
size_t
 
	gn


43 i‡(
	gn
 != 0) {

44 *
d
 = 
d°
;

46 *
	gd
++ !
EOS
)

49 
	gd
--;

51 ((*
	gd
++ = *
§c
++Ë!
EOS
Ë&& (--
n
 > 0))

54 i‡(
	gn
 == 0)

55 *
d
 = 
EOS
;

58  (
	gd°
);

	@driver/libc/string/strncmp.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

39 
	g°∫cmp


41 c⁄° * 
	gs1
,

42 c⁄° * 
	gs2
,

43 
size_t
 
	gn


46 i‡(
	gn
 == 0)

49 *
	gs1
++ =*
s2
++) {

50 i‡((
s1
 [-1] =
EOS
Ë|| (--
n
 == 0))

54  (()(()
	gs1
 [-1] - ()
	gs2
 [-1]));

	@driver/libc/string/strncpy.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

38 *
	g°∫˝y


40 * 
	gs1
,

41 c⁄° *
	gs2
,

42 
size_t
 
	gn


45 
FAST
 *
	gd
 = 
s1
;

47 i‡(
	gn
 != 0) {

48 (*
d
++ = *
s2
++) != 0) {

49 i‡(--
n
 == 0)

50  (
s1
);

53 --
	gn
 > 0)

54 *
	gd
++ = 
EOS
;

57  (
	gs1
);

	@driver/libc/string/strpbrk.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

40 * 
	g°Ωbrk


42 c⁄° * 
	gs1
,

43 c⁄° * 
	gs2


46 *
	gsˇ≈
;

47 
	gc
;

48 
	gsc
;

50 (
	gc
 = *
s1
++) != 0) {

53 
sˇ≈
 = 
CHAR_FROM_CONST
(
s2
); (
	gsc
 = *scanp++) != 0;) {

54 i‡(
	gsc
 =
c
)

55  (
CHAR_FROM_CONST
(
s1
 - 1));

59  (
	gNULL
);

	@driver/libc/string/strspn.c

20 
	~<libc/sy°em.h
>

21 
	~<libc/°rög.h
>

38 
size_t
 
	g°r•n


40 c⁄° * 
	gs
,

41 c⁄° * 
	g£p


44 c⁄° *
	gßve
;

45 c⁄° *
	gp
;

46 
	gc1
;

47 
	gc2
;

49 
	gßve
 = 
s
 + 1; (
	gc1
 = *s++Ë!
EOS
; )

50 
	gp
 = 
£p
; (
	gc2
 = *
p
++Ë!
c1
; ) {

51 i‡(
	gc2
 =
EOS
)

52  (
s
 - 
ßve
);

55  (
	gs
 - 
	gßve
);

	@driver/libc/string/strtok.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

68 * 
	g°πok


70 * 
	g°rög
,

71 c⁄° * 
	g£∑øt‹


74 *
	gœ°
 = 
NULL
;

76  (
°πok_r
 (
°rög
, 
£∑øt‹
, &
œ°
));

	@driver/libc/string/strtok_r.c

21 
	~<libc/sy°em.h
>

22 
	~<libc/°rög.h
>

23 
	~<logh.h
>

60 * 
	g°πok_r


62 * 
	g°rög
,

63 c⁄° * 
	g£∑øt‹s
,

64 ** 
	gµLa°


67 i‡((
	g°rög
 =
NULL
Ë&& ((
°rög
 = *
µLa°
) == NULL)){

68 
libc_log
(
STR_NULLP_ERR
);

69  (
	gNULL
);

72 i‡(*(
	g°rög
 +
°r•n
 (
°rög
, 
£∑øt‹s
)Ë=
EOS
)

73  (*
µLa°
 = 
NULL
);

75 i‡((*
	gµLa°
 = 
°Ωbrk
 (
°rög
, 
£∑øt‹s
)Ë!
NULL
)

76 *(*
µLa°
)++ = 
EOS
;

78  (
	g°rög
);

	@driver/update/device_defs.h

29 #i‡!
deföed
(
__DEVICE_DEFS__
)

30 
	#__DEVICE_DEFS__


	)

32 
	#SPI_FLASH
 1

	)

33 
	#S25FL128P
 1

	)

35 
	#ESPIBASE
 0xe0007000

	)

37 
	#BYTES_PER_SECTOR
 0x00010000

	)

38 
	#BYTES_PER_PAGE
 0x00000100

	)

40 
	#NUM_OF_PAGES
 256

	)

42 
	#MAX_SECTOR
 256

	)

44 
	#GET_SECTOR_ADDRESS
(
x
Ë((xË<< 16)

	)

45 
	#GET_SECTOR_NUMBER
(
x
Ë((xË>> 16)

	)

47 
	#BLOCKLOCKMASK
 0x3c

	)

48 
	#ALL_SECTORS
 (1 << 3)

	)

50 
	#MAX_WAIT_COMMAND
 0x00200000

51 
	#MAX_ERASE_TIME
 0x100

	)

53 
	#MAX_PROG_TIME
 0x00010000

	)

55 
	#WREN
 0x06

	)

56 
	#RDID
 0x9F

	)

57 
	#RDSR
 0x05

	)

58 
	#WRSR
 0x01

	)

59 
	#READ
 0x03

	)

60 
	#FREAD
 0x0B

	)

61 
	#PP
 0x02

	)

62 
	#SE
 0xD8

	)

63 
	#BE
 0xC7

	)

64 
	#RES
 0xAB

	)

66 
	#WEL
 (1 << 1Ë

	)

67 
	#WIP
 (1 << 0Ë

	)

70 
	#CMD
(
x
Ë((xË<< 24)

	)

72 
	#NO_SECT_IN_U8
 32

	)

77 
	#GET_INDEX_AREA
(
x
Ë(((xË& 
BLOCKLOCKMASK
Ë>> 2)

	)

78 
	#BLANK_CHAR
 0xff

	)

79 
	#MASK_3B
 0x07

	)

88 
	#SIZE_OF_DIAGNOSE_BUFF
 29

	)

89 
	#FULL_DIAGNOSE_OFFSET
 21

	)

90 
	#PROTECTED_AREA_OFFSET
 13

	)

92 
	#LOG8
 3

	)

93 
	#INVALID
 0xffffffff

	)

94 
	#MASK_16B
 0x0000ffff

	)

95 
	#MASK_8B
 0x000000ff

	)

97 
	#PROTECTED_AREA_NO
 8

	)

98 
	#AREA
(
x
Ë((1Ë<< (x))

	)

	@driver/update/spi.c

30 
	~<p1020rdb.h
>

31 
	~<c⁄fig.h
>

32 
	~"•i.h
"

34 
	#TIMEOUT_SPI
 300

	)

35 
sysUsDñay
 (
dñay
);

37 
	$•i_dñay
()

39 
	`sysUsDñay
(20);

40 
	}
}

53 
	$•i_›î©i⁄
(* 
ö
,
ösize
, * 
out
, 
outsize
)

55 
evít
, 
tmpout
, 
tmpö
;

56 
Àn
 = 
ösize
 + 
outsize
;

57 
numBlks
 = 
Àn
 / 4 + (len % 4 ? 1 : 0);

58 
ch¨size
 = 4;

59 
comm™d
 = 0;

61 
Spi_t
* 
pSpi
 = (Spi_t*)(
SPI_REG_BASE
);

63 
comm™d
 |
	`COM_CS
(
CS
);

64 
comm™d
 |
ösize
 + 
outsize
 -1 ;

66 i‡–
outsize
 == 0 )

67 
comm™d
 |
COM_TO
;

69 
comm™d
 &~
COM_TO
;

70 
comm™d
 |
	`COM_RXSKIP
(
ösize
);

73 
pSpi
->
m_com
 = 
comm™d
;

76 
pSpi
->
m_evít
 = 0xFFFFFFFF;

78 
numBlks
--) {

79 
ch¨size
 = (
Àn
 >=4 ? 4:Üen);

81 
evít
 = 
pSpi
->
m_evít
;

82 i‡(
evít
 & 
EVENT_TNF
) {

84 
tmpö
 = *(*)
ö
;

86 i‡(
Àn
 > 4) {

87 
Àn
 -= 4;

88 
ö
 += 1;

90 
pSpi
->
m_tx
 = 
tmpö
;

91 
pSpi
->
m_evít
 |
EVENT_TNF
;

95 
	`•i_dñay
();

97 
evít
 = 
pSpi
->
m_evít
;

98 i‡(
evít
 & 
EVENT_RNE
) {

100 
tmpout
 = 
pSpi
->
m_rx
;

101 *(*Ë
out
 = 
tmpout
;

102 i‡(
ch¨size
 == 4 ) {

103 
out
 += 1;

105 
pSpi
->
m_evít
 |=
EVENT_RNE
;

109 
pSpi
->
m_mode
 &~
MODE_EN
;

110 
pSpi
->
m_mode
 |
MODE_EN
;

111 
	}
}

122 
	$sf_ªad
(
adrInFœsh
, * 
pBuf
, 
size
)

124 
cmd
[4];

125 
	`•i_›î©i⁄
((*)
cmd
,0,(*)
pBuf
,
size
);

126  
size
;

127 
	}
}

137 
	$sf_wrôe
(
addªssInFœsh
, * 
pBuf
,
size
)

140 
	`•i_›î©i⁄
((*)
pBuf
,
size
,0,0);

141  
size
;

142 
	}
}

	@driver/update/spi.h

29 
	~"devi˚_defs.h
"

30 
	~<libc/°dio.h
>

32 
	#MAX_TRANSFER_SIZE
 0xFFFF

	)

34 
	#EVENT_RNE
 1<<9

	)

35 
	#EVENT_TNF
 1<<8

	)

36 
	#MODE_EN
 1<<31

	)

37 
	#COM_CS
(
x
Ë((xË<< 30)

	)

38 
	#COM_TO
 (1 << 27)

	)

39 
	#COM_RXSKIP
(
x
Ë((xË<< 16)

	)

40 
	#CS
 0

	)

43 
	mm_mode
;

44 
	mm_evít
;

45 
	mm_mask
;

46 
	mm_com
;

47 
	mm_tx
;

48 
	mm_rx
;

49 
	mm_unu£d
[2];

50 
	mm_modex
[4];

51 } 
	tSpi_t
;

54 
•i_dñay
();

55 
•i_›î©i⁄
(* 
ö
,
ösize
, * 
out
, 
outsize
);

57 
sf_îa£
(
no
,
num
);

59 
sf_îa£_chù
();

60 
sf_îa£_£˘‹
(
iSe˘‹
);

61 
sf_wrôe
(
addªssInFœsh
, * 
pBuf
,
size
);

62 
sf_ªad
(
adrInFœsh
, * 
pBuf
, 
size
);

	@driver/update/update.c

30 
	~<p1020rdb.h
>

31 
	~<c⁄fig.h
>

32 
	~"upd©e.h
"

33 
	~<libc/gpio.h
>

35 
	#NULL
 0

	)

36 
	#OK
 0

	)

37 
	#ERROR
 -1

	)

41 
	#SPI_REG_READ_32
(
addr
Ë*((
VUINT32
 *)(
SPI_REG_BASE
 +áddr))

	)

42 
	#SPI_REG_WRITE_32
(
addr
, 
d©a
Ë*((
VUINT32
 *)(
SPI_REG_BASE
 +áddr)Ë
	)
d©a

44 
	#EIEIO_SYNC
 
__asm__
 
	`__vﬁ©ûe__
 ("Éõio; sync")

	)

46 
	#TIMEOUT_SPI
 300

	)

48 
	#ESPI_MAX_CS_NUM
 4

	)

49 
	#ESPI_FIFO_WIDTH_BIT
 32

	)

51 
	#ESPI_EV_RNE
 (1 << 9)

	)

52 
	#ESPI_EV_TNF
 (1 << 8)

	)

53 
	#ESPI_EV_DON
 (1 << 14)

	)

54 
	#ESPI_EV_TXE
 (1 << 15)

	)

55 
	#ESPI_EV_RFCNT_SHIFT
 24

	)

56 
	#ESPI_EV_RFCNT_MASK
 (0x3‡<< 
ESPI_EV_RFCNT_SHIFT
)

	)

58 
	#ESPI_MODE_EN
 (1 << 31Ë

	)

59 
	#ESPI_MODE_TXTHR
(
x
Ë((xË<< 8Ë

	)

60 
	#ESPI_MODE_RXTHR
(
x
Ë((xË<< 0Ë

	)

62 
	#ESPI_COM_CS
(
x
Ë((xË<< 30)

	)

63 
	#ESPI_COM_TRANLEN
(
x
Ë((xË<< 0)

	)

65 
	#ESPI_CSMODE_CI_INACTIVEHIGH
 (1 << 31)

	)

66 
	#ESPI_CSMODE_CP_BEGIN_EDGCLK
 (1 << 30)

	)

67 
	#ESPI_CSMODE_REV_MSB_FIRST
 (1 << 29)

	)

68 
	#ESPI_CSMODE_REV_LSB_FIRST
 (0 << 29)

	)

69 
	#ESPI_CSMODE_DIV16
 (1 << 28)

	)

70 
	#ESPI_CSMODE_PM
(
x
Ë((xË<< 24)

	)

71 
	#ESPI_CSMODE_POL_ASSERTED_LOW
 (1 << 20)

	)

72 
	#ESPI_CSMODE_LEN
(
x
Ë((xË<< 16)

	)

73 
	#ESPI_CSMODE_CSBEF
(
x
Ë((xË<< 12)

	)

74 
	#ESPI_CSMODE_CSAFT
(
x
Ë((xË<< 8)

	)

75 
	#ESPI_CSMODE_CSCG
(
x
Ë((xË<< 3)

	)

77 
	#ESPI_CSMODE_INIT_VAL
 (
ESPI_CSMODE_POL_ASSERTED_LOW
 | \

78 
	`ESPI_CSMODE_CSBEF
(0Ë| 
	`ESPI_CSMODE_CSAFT
(0) | \

79 
	`ESPI_CSMODE_CSCG
(1))

	)

81 
	#ESPI_MAX_DATA_TRANSFER_LEN
 0xFFF0

	)

82 
	#READ_MAX_LEN
 0xfff8

	)

83 
	#mö
(
a
, 
b
Ë((◊Ë< (b)Ë? (aË: (b))

	)

85 
sysUsDñay
 (
dñay
);

87 
	$•i_dñay
()

89 
	`sysUsDñay
(20);

90 
	}
}

97 
	$sysCy˛⁄eInô
()

99 
UINT32
 
˛k
 = 0;

100 
UINT32
 
ãmp
 = 0;

101 
UINT32
 
˛kFªq
;

102 
UINT16
 
divideR©io
 = 0;

103 
UINT8
 
pm
 = 0;

104 
BOOL
 
div16
 = 
FALSE
;

105 
UINT32
 
‰eq
 = 0;

107 
UINT32
 
•mode0
 = 0x2F170008;

108 
	`¥ötf
("SPMODE0:%x,¥am:%x\n", 
•mode0
, ~(
	`ESPI_CSMODE_PM
(0xFË| 
ESPI_CSMODE_DIV16
 | 
ESPI_CSMODE_POL_ASSERTED_LOW
 \

109 | 
ESPI_CSMODE_CI_INACTIVEHIGH
 | 
ESPI_CSMODE_CP_BEGIN_EDGCLK
 \

110 | 
ESPI_CSMODE_REV_MSB_FIRST
 | 
	`ESPI_CSMODE_LEN
(0xF)));

111 
	`SPI_REG_WRITE_32
 (
SPMODE0
, 
•mode0
 & ~
ESPI_CSMODE_REV_MSB_FIRST
);

112 
	`¥ötf
("SPMODE0:%x\n",
	`SPI_REG_READ_32
(
SPMODE0
));

113 
	`sysGpioLöeC⁄fig
 (
GPIO_11
, 
GPIO_IN
);

114 
	`sysGpioLöeC⁄fig
 (
GPIO_12
, 
GPIO_IN
);

115 
	`sysGpioLöeC⁄fig
 (
GPIO_13
, 
GPIO_OUT
);

116 
	`sysGpioLöeSë
 (
GPIO_13
, 
GPIO_HIGH
);

117 
	`sysUsDñay
 (100000);

118 
	}
}

130 
INT32
 
	gsysSpiRódD©a


132 
UINT32
 
	gd©Æí
,

133 
UINT8
 * 
	gd©a


136 
VUINT32
 
	gªadD©a
;

137 
UINT8
 * 
	gpoöãr
 = 
NULL
;

139 
UINT32
 
	gnumCou¡
 = (
d©Æí
 / 4 + ((datalen % 4 != 0) ? 1 : 0));

140 
UINT32
 
	gnumCh¨s
 = 
d©Æí
 % 4;

141 
UINT32
 
	gi
;

142 
UINT32
 
	gcomm™d
;

143 
UINT32
 
	gmode
 = 0;

145 i‡(
	gd©Æí
 > 0xffff) {

146  
	gERROR
;

151 
	gi
 = 
numCou¡
; i > 0; i--) {

155 
	gªadD©a
 = 
SPI_REG_READ_32
 (
SPIRF
);

159 i‡(
	gnumCou¡
 =0 && 
numCh¨s
 != 0) {

162 
poöãr
 = (
UINT8
 *Ë&
ªadD©a
;

164 *(
	gUINT8
 *Ë
	gd©a
++ = *
poöãr
++;

165 } 
	gnumCh¨s
--);

170 *(
	gUINT32
 *Ë
	gd©a
 = 
ªadD©a
;

171 
	gd©a
 += 4;

180 
sysUsDñay
 (2);

181 
	gEIEIO_SYNC
;

186 
SPI_REG_WRITE_32
 (
SPMODE
, 
SPI_REG_READ_32
 (SPMODEË& (~
SPI_EN
));

187 
SPI_REG_WRITE_32
 (
SPMODE
, 
SPI_REG_READ_32
 (SPMODEË| (
SPI_EN
));

188  
	gOK
;

201 
UINT32
 
	gk
 = 0;

203 
INT32
 
	gsysSpiWrôeD©a


205 
UINT32
 
	gcs
,

206 
UINT32
 
	gcmdÀn
,

207 
UINT32
 
	gd©Æí
,

208 
UINT8
 * 
	gcmd
,

209 
UINT8
 * 
	gd©a
,

210 
UINT32
 
	gmode


213 
UINT32
 
	gcomm™d
 = 0;

214 
UINT32
 
	ggpioSètus
;

215 
UINT32
 
	gd©aCou¡
 = 0;

216 
UINT32
 
	gt
 = 0;

218 
UINT32
 
	gcmdCou¡
 = (
cmdÀn
 / 4 + ((cmdlen % 4 != 0) ? 1 : 0));

220 i‡(
	gd©a
 !
NULL
) {

221 
d©aCou¡
 = (
d©Æí
 / 4 + ((datalen % 4 != 0) ? 1 : 0));

224 
	gcomm™d
 = 
SPCOM_CS
 (
cs
Ë| (
cmdÀn
 + 
d©Æí
 - 1) ;

234 
	gcomm™d
 |
SPCOM_TO
 (
mode
);

238 i‡(
	gd©a
 =
NULL
) {

239 
comm™d
 |
SPCOM_RxSKIP
 (
cmdÀn
);

242 
SPI_REG_WRITE_32
 (
SPCOM
, 
comm™d
);

243 
	gk
++;

244 if–
	gk
 > 1061000)

246 
¥ötf
(" %08x ",*(vﬁ©ûê*Ë
d©a
);

247 if(
	gk
 % 8 == 0x0)

248 
¥ötf
("\n");

251 
	gd©aCou¡
--) {

252 
SPI_REG_WRITE_32
 (
SPITF
, *(
VUINT32
 *Ë
d©a
);

253 
	gd©a
 += 4;

259 
sysUsDñay
 (10);

260 
	gEIEIO_SYNC
;

262  
	gOK
;

274 
STATUS
 
	gcy˛⁄eFpgaRx


276 
UINT8
 
	gchùSñe˘
,

277 
UINT32
 
	g°¨tAddr
,

278 
UINT32
 
	gd©aLí
,

279 
UINT8
 * 
	gde°


282 
UINT32
 
	gcmd32
;

283 
UINT32
 
	gÀn
 = 0;

284 
UINT32
 
	gcou¡
 = 
d©aLí
 / 
READ_MAX_LEN
 + (dataLen % READ_MAX_LEN ? 1 : 0);

286 
¥ötf
("cou¡:%x\n",
cou¡
);

287 
	gcou¡
 --) {

291 
	gÀn
 = 
mö
 (
d©aLí
, 
READ_MAX_LEN
);

293 
	gcmd32
 = (
°¨tAddr
 & 0xffffff);

297 i‡(
sysSpiWrôeD©a
 (
chùSñe˘
, 0, 
Àn
, (
UINT8
*)&
cmd32
,

298 
NULL
, 
NORMAL
Ë!
OK
)

299  
ERROR
;

301 i‡(
sysSpiRódD©a
 (
Àn
, 
de°
Ë!
OK
)

302  
ERROR
;

304 
	g°¨tAddr
 +
Àn
;

305 
	gde°
 +
Àn
;

306 
	gd©aLí
 -
Àn
;

309  
	gOK
;

319 
INT32
 
	gcy˛⁄eFpgaTx


321 
UINT8
 
	gchùSñe˘
,

322 
UINT32
 
	g°¨tAddr
,

323 
UINT32
 
	gÀn
,

324 
UINT8
 * 
	gbuf


327 
UINT32
 
	gcmd32
;

328 
UINT32
 
	gd©aLí
 = 0;

329 
UINT32
 
	goff£t
 = 0;

332 
	goff£t
 < 
	gÀn
) {

334 
	gd©aLí
 = 
mö
 (
Àn
 - 
off£t
, 4);

335 
	gcmd32
 = (
off£t
 + 
°¨tAddr
) & 0xffffff;

336 i‡(
sysSpiWrôeD©a
 (
chùSñe˘
, 0, 
d©aLí
, (
UINT8
*)&
cmd32
,

337 
buf
 + 
off£t
, 
TRANSONLY
Ë!
OK
)

338  
ERROR
;

339 
sysUsDñay
(10);

340 
	goff£t
 +
d©aLí
;

343  
	gOK
;

346 
UINT32
 
	grbf
[1024];

348 
	$sysCy˛⁄eFlush
()

350 
UINT32
 
chùSñe˘
 = 0;

351 
UINT32
 
i
, 
j
;

352 
UINT32
 
BöSize
 = 0x40c540;

353 
UINT8
 * 
pSrc
 =
CYCLONE_BIN_RAM_HIGH
;

354 
UINT8
 * 
pDe°
 =
CYCLONE_BIN_RAM_HIGH
 + 0x400000;

355 
UINT32
 
gpioSètus
;

356 
UINT32
 * 
aSrc
 = 
pSrc
;

357 
UINT32
 * 
aD°
 = 
pDe°
;

358 
UINT32
 * 
§bf
 = 
rbf
;

360 
i
=0;i<1024;i++)

362 *(
UINT32
 *Ë
§bf
 = 0x021bee01;

363 
§bf
++;

366 
TryAgaö
:

367 
	`sysCy˛⁄eInô
();

369 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_12
);

370 
	`¥ötf
("gpioSètus:%x,%d\n",
gpioSètus
,
__LINE__
);

371 
	`sysGpioLöeSë
 (
GPIO_13
, 
GPIO_LOW
);

372 
	`sysUsDñay
(10000);

373 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_12
);

374 
	`¥ötf
("gpioSètus:%x,%d\n",
gpioSètus
,
__LINE__
);

375 if(
gpioSètus
 == 0x1)

376 
TryAgaö
;

377 
	`sysGpioLöeSë
 (
GPIO_13
, 
GPIO_HIGH
);

378 
	`sysUsDñay
(10000);

379 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_12
);

380 
	`¥ötf
("gpioSètus:%x,%d\n",
gpioSètus
,
__LINE__
);

381 if(
gpioSètus
 == 0x0)

382 
TryAgaö
;

384 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_11
);

385 
	`¥ötf
("gpioC⁄figD⁄e:%x,%d\n",
gpioSètus
,
__LINE__
);

388 
UINT32
 *
¥eg
 = 0xffe07000;

389 
i
=0;i<8;i++)

391 
	`¥ötf
(" %x :-> %x \n", 
¥eg
,*(
UINT32
 *)preg);

392 
¥eg
++;

394 
TryTx
:

396 i‡(
	`cy˛⁄eFpgaTx
(
chùSñe˘
, 0, 
BöSize
, 
pSrc
Ë!
OK
) {

397 
	`¥ötf
 ("ERROR: spiFlashÖrogram failure. \r\n");

399 
	`sysUsDñay
(10000000);

400 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_12
);

401 
	`¥ötf
("gpioSètus:%x,%d\n",
gpioSètus
,
__LINE__
);

402 
	`sysGpioLöeGë
 (&
gpioSètus
, 
GPIO_11
);

403 
	`¥ötf
("gpioC⁄figD⁄e:%x,%d\n",
gpioSètus
,
__LINE__
);

405 if(
gpioSètus
 == 0x0)

406 
TryAgaö
;

408 
	}
}

	@driver/update/update.h

18 #i‚de‡
__INCsysf¶Spih


19 
	#__INCsysf¶Spih


	)

21 #ifde‡
__˝lu•lus


26 
	#NORMAL
 0

	)

27 
	#TRANSONLY
 1

	)

31 
	#SPMODE
 0x00

	)

32 
	#SPIE
 0x04

	)

33 
	#SPIM
 0x08

	)

34 
	#SPCOM
 0x0C

	)

35 
	#SPITF
 0x10

	)

36 
	#SPIRF
 0x14

	)

37 
	#SPMODE0
 0x20

	)

38 
	#SPMODE1
 0x24

	)

39 
	#SPMODE2
 0x28

	)

40 
	#SPMODE3
 0x2C

	)

44 
	#SPI_EN_BIT
 0

	)

45 
	#SPI_EN
 ((
UINT32
)0x01 << (31 - 
SPI_EN_BIT
))

	)

46 
	#SPI_TXTHR_BIT
 23

	)

47 
	#SPI_TXTHR_LEN
 (0x3 << (31 - 
SPI_TXTHR_BIT
))

	)

48 
	#SPI_RXTHR_BIT
 31

	)

49 
	#SPI_RXTHR_LEN
 (0x4 << (31 - 
SPI_RXTHR_BIT
))

	)

51 
	#SPI_CSMODE_CSnCG
 (0x01 << 3)

	)

52 
	#SPI_CSMODE_LENn
 (0x07 << 16)

	)

53 
	#SPI_CSMODE_POLn_LOW
 (0x01 << 20)

	)

54 
	#SPI_CSMODE_DIV16n
 (0x01 << 28)

	)

55 
	#SPI_CSMODE_PMn
(
x
Ë–(xË<< 24)

	)

56 
	#SPI_CSMODE_REVn_MSB
 (0x01 << 29)

	)

60 
	#SPIMODE_PM_MASK
 0xE07FFFFF

	)

61 
	#SPIMODE_CS_MASK
 0x3FFFFFFF

	)

62 
	#SPIMODE_CICP_MASK
 0x3FFFFFFF

	)

64 
	#SPICSMODE_DIV16
 0x10000000

	)

65 
	#SPICSMODE_ODD
 0x00800000

	)

69 
	#SPI_EVENT_CLR
 0xFFFFFFFF

	)

73 
	#SPCOM_CS
(
x
Ë((xË<< 30)

	)

74 
	#SPCOM_RxSKIP
(
x
Ë((xË<< 16)

	)

75 
	#SPCOM_TO
(
x
Ë((xË<< 27)

	)

77 #ifde‡
__˝lu•lus


	@drv_config.h

30 #i‚de‡
__FLASH_SPEC_H__


31 
	#__FLASH_SPEC_H__


	)

32 
	~<c⁄fig.h
>

37 #i‡
deföed
(
CONFIG_IIC
)

38 
	#CONFIG_IIC_0


	)

43 #i‡
deföed
(
SFFS_NOR
Ë|| deföed(
CONFIG_NOR_FLASH
)

45 
	#SS_SIZE
 (4*1024)

	)

47 
	#SS_NUM
 (32)

	)

49 
	#SE_SIZE
 (
SS_SIZE
 * 
SS_NUM
)

	)

51 
	#SE_NUM
 (512)

	)

53 
	#DEVICE_SIZE
 (
SE_SIZE
 * 
SE_NUM
)

	)

55 #ñi‡
deföed
(
SFFS_SPI
Ë|| deföed(
CONFIG_SPI_FLASH
)

57 
	#SS_SIZE
 (256)

	)

59 
	#SS_NUM
 (256)

	)

61 
	#SE_SIZE
 (
SS_SIZE
 * 
SS_NUM
)

	)

63 
	#SE_NUM
 (256)

	)

65 
	#DEVICE_SIZE
 (
SE_SIZE
 * 
SE_NUM
)

	)

67 #ñi‡
deföed
 (
SFFS_FPGA_SPI
Ë|| deföed(
CONFIG_FPGA_FLASH
)

69 
	#SS_SIZE
 (4*1024)

	)

71 
	#SS_NUM
 (32)

	)

73 
	#SE_SIZE
 (
SS_SIZE
 * 
SS_NUM
)

	)

75 
	#SE_NUM
 (128)

	)

77 
	#DEVICE_SIZE
 (
SE_SIZE
 * 
SE_NUM
)

	)

81 
	#DFS_NUM
 8

	)

83 #i‡
PAGE_ERASE
 == 1

84 
	#FLASH_ERASE_UNIT
 
SS_SIZE


	)

85 #ñi‡
PAGE_ERASE
 == 0

86 
	#FLASH_ERASE_UNIT
 
SE_SIZE


	)

92 
	#SFFS_PAGE_ERASE
 1

	)

93 
	#FNAME_LEN
 17

	)

94 
	#SFFS_MAGIC
 0xCA905001

	)

95 
	#SFFS_SB_START
 0

96 
	#FREE_SIZEOF
 32

	)

97 
	#FS_SE_NUM
 (240)

	)

98 
	#FS_SS_NUM
 
SS_NUM


	)

99 
	#FS_SS_SIZE
 
SS_SIZE


	)

102 
	#SFFS_MAX_FILES_SIZE
 (2*1024*1024)

	)

104 
	#SFFS_BNO_LIM
 16

	)

105 
	#SFFS_FILE_NUMBER
 32

	)

106 
	#SFFS_FHDR_NUM
 
SS_NUM


	)

107 
	#FORMAT_HDRSS
 32

	)

	@include/kernel/sysApi.h

1 #i‚de‡
__OS_TASK_H__


2 
	#__OS_TASK_H__


	)

31 *
os_vîsi⁄
();

33 
INT32
 
os_¸óã_èsk
(*
≤ame
, *
±ask
, *
∑rg
, INT32 
¥io
,
UINT32
 
tq
, UINT32 *
îr
);

34 
INT32
 
os_dñ_èsk
(INT32 
id
, 
UINT32
 *
îr
);

35 
INT32
 
os_ªsume_èsk
(INT32 
id
, 
UINT32
 *
îr
);

36 
INT32
 
os_su•íd_èsk
(INT32 
id
, 
UINT32
 *
îr
);

37 
INT32
 
os_èsk_£t_ts
(INT32 
id
,
UINT32
 
time_¶i˚
, UINT32 *
îr
);

38 
os_dñay_èsk
(
INT32
 
ticks
, 
UINT32
 *
îr
);

39 
udñay
(
INT32
 
us
);

42 
INT32
 
os_èsk_£m_≥nd
(INT32 
timeout
, 
UINT16
 
›t
,
UINT32
 *
îr
);

43 
INT32
 
os_èsk_£m_po°
(INT32 
id
, 
UINT16
 
›t
, 
UINT32
 *
îr
);

44 
INT32
 
os_èsk_£m_£t
(INT32 
id
,
UINT32
 
˙t
, UINT32 *
îr
);

47 
INT32
 
os_queue_¸óã
(*
q«me
,INT32 
qsize
, 
UINT32
 *
îr
);

48 
INT32
 
os_queue_dñ
(INT32 
qnum
,INT32 
›t
, 
UINT32
 *
îr
);

49 
INT32
 
os_queue_po°
(INT32 
qnum
,*
buf
,INT32 
size
,INT32 
›t
, 
UINT32
 *
îr
);

50 
INT32
 
os_queue_gë
(INT32 
qnum
,*
buf
,
UINT16
 *
size
,INT32 
›t
,INT32 
timeout
, 
UINT32
 *
îr
);

52 
INT32
 
os_£m_¸óã
(*
¢ame
, 
UINT32
 
˙t
,UINT32 *
îr
);

53 
INT32
 
os_£m_dñ
(INT32 
sid
,
UINT16
 
›t
,
UINT32
 *
îr
);

54 
UINT32
 
os_£m_≥nd
(
INT32
 
sid
,UINT32 
timeout
,
UINT16
 
›t
,UINT32 *
îr
);

55 
UINT32
 
os_£m_po°
(
INT32
 
sid
, 
UINT16
 
›t
, UINT32 *
îr
);

57 
INT32
 
os_muãx_¸óã
(*
m«me
,
UINT32
 *
îr
);

58 
INT32
 
os_muãx_dñ
(INT32 
mid
, 
UINT16
 
›t
,
UINT32
 *
îr
);

59 
INT32
 
os_muãx_≥nd
(INT32 
mid
,
UINT32
 
timeout
,
UINT16
 
›t
,UINT32 *
îr
);

60 
INT32
 
os_muãx_po°
(INT32 
mid
,
UINT16
 
›t
,
UINT32
 *
îr
);

62 
os_c›y_d©a
(
UINT32
 
‰om
, 
INT32
 
size
);

63 
os_˛ór_d©a
(
UINT32
 
‰om
, 
INT32
 
size
);

	@include/kernel/sysCore.h

28 #i‚de‡ 
CPU_CORE_MODULE_PRESENT


29 
	#CPU_CORE_MODULE_PRESENT


	)

72 #i‡ (
CPU_CFG_ENDIAN_TYPE
 =
CPU_ENDIAN_TYPE_BIG
)

73 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

74 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

75 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

76 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
))))

	)

80 #i‡ ((
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_64
) || \

81 (
	gCPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_32
))

82 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(char_1))) | \

83 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

84 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

85 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)))

	)

88 #ñi‡ (
CPU_CFG_DATA_SIZE
 =
CPU_WORD_SIZE_16
)

89 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

90 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

91 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
))) | \

92 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)))

	)

95 
	#CPU_TYPE_CREATE
(
ch¨_1
, 
ch¨_2
, 
ch¨_3
, 
ch¨_4
Ë(((
CPU_INT32U
)((
CPU_INT08U
)(ch¨_1)Ë<< (3u * 
DEF_OCTET_NBR_BITS
)) | \

96 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_2
)Ë<< (2u * 
DEF_OCTET_NBR_BITS
)) | \

97 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_3
)Ë<< (1u * 
DEF_OCTET_NBR_BITS
)) | \

98 ((
CPU_INT32U
)((
CPU_INT08U
)(
ch¨_4
))))

	)

102 
CPU_DATA
 
CPU_C¡LódZîos
 (CPU_DATA 
vÆ
);

103 
CPU_DATA
 
CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
);

	@include/kernel/sysCpu.h

79 #i‚de‡ 
CAG_CPU_H


80 
	#CAG_CPU_H


	)

82 #ifde‡
__˝lu•lus


115 
	tCPU_VOID
;

116 
	tCPU_CHAR
;

117 
	tCPU_BOOLEAN
;

118 
	tCPU_INT08U
;

119 sig√d 
	tCPU_INT08S
;

120 
	tCPU_INT16U
;

121 sig√d 
	tCPU_INT16S
;

122 
	tCPU_INT32U
;

123 sig√d 
	tCPU_INT32S
;

124 
	tCPU_INT64U
;

125 sig√d 
	tCPU_INT64S
;

127 
	tCPU_FP32
;

128 
	tCPU_FP64
;

131 vﬁ©ûê
	tCPU_INT08U
 
	tCPU_REG08
;

132 vﬁ©ûê
	tCPU_INT16U
 
	tCPU_REG16
;

133 vﬁ©ûê
	tCPU_INT32U
 
	tCPU_REG32
;

134 vﬁ©ûê
	tCPU_INT64U
 
	tCPU_REG64
;

137 (*
CPU_FNCT_VOID
)();

138 (*
CPU_FNCT_PTR
 )(*
	tp_obj
);

163 
	#CPU_CFG_ADDR_SIZE
 
CPU_WORD_SIZE_32


	)

164 
	#CPU_CFG_DATA_SIZE
 
CPU_WORD_SIZE_32


	)

165 
	#CPU_CFG_DATA_SIZE_MAX
 
CPU_WORD_SIZE_64


	)

167 
	#CPU_CFG_ENDIAN_TYPE
 
CPU_ENDIAN_TYPE_BIG


	)

177 
CPU_INT32U
 
	tCPU_ADDR
;

180 
CPU_INT32U
 
	tCPU_DATA
;

182 
CPU_DATA
 
	tCPU_ALIGN
;

183 
CPU_ADDR
 
	tCPU_SIZE_T
;

204 
	#CPU_CFG_STK_GROWTH
 
CPU_STK_GROWTH_HI_TO_LO


	)

206 
	#CPU_CFG_STK_ALIGN_BYTES
 (16uË

	)

208 
CPU_INT32U
 
	tCPU_STK
;

209 
CPU_ADDR
 
	tCPU_STK_SIZE
;

284 
	#CPU_CFG_CRITICAL_METHOD
 
CPU_CRITICAL_METHOD_STATUS_LOCAL


	)

286 
CPU_INT32U
 
	tCPU_SR
;

289 #i‡ (
CPU_CFG_CRITICAL_METHOD
 =
CPU_CRITICAL_METHOD_STATUS_LOCAL
)

290 
	#CPU_SR_ALLOC
(Ë
CPU_SR
 
˝u_§
 = (CPU_SR)0

	)

292 
	#CPU_SR_ALLOC
()

	)

296 
powîpcI¡DißbÀ
();

297 
powîpcI¡E«bÀ
();

299 
	#CPU_INT_DIS
(Ë
	`powîpcI¡DißbÀ
(Ë

	)

300 
	#CPU_INT_EN
(Ë
	`powîpcI¡E«bÀ
(Ë

	)

302 
	#CPU_CRITICAL_ENTER
(Ëdÿ{ 
	`CPU_INT_DIS
(); } 0Ë

	)

303 
	#CPU_CRITICAL_EXIT
(Ëdÿ{ 
	`CPU_INT_EN
(); } 0Ë

	)

313 
CPU_I¡Dis
 ();

314 
CPU_I¡En
 ();

316 
CPU_SR
 
CPU_SR_Save
 ();

317 
CPU_SR_Re°‹e
 (
CPU_SR
 
˝u_§
);

325 #i‚de‡ 
CPU_CFG_ADDR_SIZE


332 #ñi‡ ((
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_08
) && \

333 (
	gCPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_16
) && \

334 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_32
) && \

335 (
CPU_CFG_ADDR_SIZE
 !
CPU_WORD_SIZE_64
))

344 #i‚de‡ 
CPU_CFG_DATA_SIZE


351 #ñi‡ ((
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_08
) && \

352 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_16
) && \

353 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_32
) && \

354 (
CPU_CFG_DATA_SIZE
 !
CPU_WORD_SIZE_64
))

363 #i‚de‡ 
CPU_CFG_DATA_SIZE_MAX


370 #ñi‡ ((
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_08
) && \

371 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_16
) && \

372 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_32
) && \

373 (
CPU_CFG_DATA_SIZE_MAX
 !
CPU_WORD_SIZE_64
))

382 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 < 
CPU_CFG_DATA_SIZE
)

390 #i‚de‡ 
CPU_CFG_ENDIAN_TYPE


395 #ñi‡ ((
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_BIG
 ) && \

396 (
CPU_CFG_ENDIAN_TYPE
 !
CPU_ENDIAN_TYPE_LITTLE
))

403 #i‚de‡ 
CPU_CFG_STK_GROWTH


408 #ñi‡ ((
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_LO_TO_HI
) && \

409 (
CPU_CFG_STK_GROWTH
 !
CPU_STK_GROWTH_HI_TO_LO
))

415 #i‚de‡ 
CPU_CFG_CRITICAL_METHOD


421 #ñi‡ ((
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_INT_DIS_EN
 ) && \

422 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_STK
 ) && \

423 (
CPU_CFG_CRITICAL_METHOD
 !
CPU_CRITICAL_METHOD_STATUS_LOCAL
))

439 #ifde‡
__˝lu•lus


	@include/kernel/sysDef.h

37 #i‚de‡ 
CPU_DEF_MODULE_PRESENT


38 
	#CPU_DEF_MODULE_PRESENT


	)

61 
	#CPU_WORD_SIZE_08
 1u

	)

62 
	#CPU_WORD_SIZE_16
 2u

	)

63 
	#CPU_WORD_SIZE_32
 4u

	)

64 
	#CPU_WORD_SIZE_64
 8u

	)

68 
	#CPU_ENDIAN_TYPE_NONE
 0u

	)

69 
	#CPU_ENDIAN_TYPE_BIG
 1u

	)

70 
	#CPU_ENDIAN_TYPE_LITTLE
 2u

	)

87 
	#CPU_STK_GROWTH_NONE
 0u

	)

88 
	#CPU_STK_GROWTH_LO_TO_HI
 1u

	)

89 
	#CPU_STK_GROWTH_HI_TO_LO
 2u

	)

166 
	#CPU_CRITICAL_METHOD_NONE
 0u

	)

167 
	#CPU_CRITICAL_METHOD_INT_DIS_EN
 1u

	)

168 
	#CPU_CRITICAL_METHOD_STATUS_STK
 2u

	)

169 
	#CPU_CRITICAL_METHOD_STATUS_LOCAL
 3u

	)

177 
	#DEF_NULL
 0

	)

181 
	#DEF_FALSE
 0u

	)

182 
	#DEF_TRUE
 1u

	)

184 
	#DEF_NO
 0u

	)

185 
	#DEF_YES
 1u

	)

187 
	#DEF_DISABLED
 0u

	)

188 
	#DEF_ENABLED
 1u

	)

190 
	#DEF_INACTIVE
 0u

	)

191 
	#DEF_ACTIVE
 1u

	)

193 
	#DEF_INVALID
 0u

	)

194 
	#DEF_VALID
 1u

	)

196 
	#DEF_OFF
 0u

	)

197 
	#DEF_ON
 1u

	)

199 
	#DEF_CLR
 0u

	)

200 
	#DEF_SET
 1u

	)

202 
	#DEF_FAIL
 0u

	)

203 
	#DEF_OK
 1u

	)

207 
	#DEF_BIT_NONE
 0x00u

	)

209 
	#DEF_BIT_00
 0x01u

	)

210 
	#DEF_BIT_01
 0x02u

	)

211 
	#DEF_BIT_02
 0x04u

	)

212 
	#DEF_BIT_03
 0x08u

	)

213 
	#DEF_BIT_04
 0x10u

	)

214 
	#DEF_BIT_05
 0x20u

	)

215 
	#DEF_BIT_06
 0x40u

	)

216 
	#DEF_BIT_07
 0x80u

	)

218 
	#DEF_BIT_08
 0x0100u

	)

219 
	#DEF_BIT_09
 0x0200u

	)

220 
	#DEF_BIT_10
 0x0400u

	)

221 
	#DEF_BIT_11
 0x0800u

	)

222 
	#DEF_BIT_12
 0x1000u

	)

223 
	#DEF_BIT_13
 0x2000u

	)

224 
	#DEF_BIT_14
 0x4000u

	)

225 
	#DEF_BIT_15
 0x8000u

	)

227 
	#DEF_BIT_16
 0x00010000u

	)

228 
	#DEF_BIT_17
 0x00020000u

	)

229 
	#DEF_BIT_18
 0x00040000u

	)

230 
	#DEF_BIT_19
 0x00080000u

	)

231 
	#DEF_BIT_20
 0x00100000u

	)

232 
	#DEF_BIT_21
 0x00200000u

	)

233 
	#DEF_BIT_22
 0x00400000u

	)

234 
	#DEF_BIT_23
 0x00800000u

	)

236 
	#DEF_BIT_24
 0x01000000u

	)

237 
	#DEF_BIT_25
 0x02000000u

	)

238 
	#DEF_BIT_26
 0x04000000u

	)

239 
	#DEF_BIT_27
 0x08000000u

	)

240 
	#DEF_BIT_28
 0x10000000u

	)

241 
	#DEF_BIT_29
 0x20000000u

	)

242 
	#DEF_BIT_30
 0x40000000u

	)

243 
	#DEF_BIT_31
 0x80000000u

	)

244 
	#DEF_BIT_32
 0x0000000100000000u

	)

245 
	#DEF_BIT_33
 0x0000000200000000u

	)

246 
	#DEF_BIT_34
 0x0000000400000000u

	)

247 
	#DEF_BIT_35
 0x0000000800000000u

	)

248 
	#DEF_BIT_36
 0x0000001000000000u

	)

249 
	#DEF_BIT_37
 0x0000002000000000u

	)

250 
	#DEF_BIT_38
 0x0000004000000000u

	)

251 
	#DEF_BIT_39
 0x0000008000000000u

	)

253 
	#DEF_BIT_40
 0x0000010000000000u

	)

254 
	#DEF_BIT_41
 0x0000020000000000u

	)

255 
	#DEF_BIT_42
 0x0000040000000000u

	)

256 
	#DEF_BIT_43
 0x0000080000000000u

	)

257 
	#DEF_BIT_44
 0x0000100000000000u

	)

258 
	#DEF_BIT_45
 0x0000200000000000u

	)

259 
	#DEF_BIT_46
 0x0000400000000000u

	)

260 
	#DEF_BIT_47
 0x0000800000000000u

	)

262 
	#DEF_BIT_48
 0x0001000000000000u

	)

263 
	#DEF_BIT_49
 0x0002000000000000u

	)

264 
	#DEF_BIT_50
 0x0004000000000000u

	)

265 
	#DEF_BIT_51
 0x0008000000000000u

	)

266 
	#DEF_BIT_52
 0x0010000000000000u

	)

267 
	#DEF_BIT_53
 0x0020000000000000u

	)

268 
	#DEF_BIT_54
 0x0040000000000000u

	)

269 
	#DEF_BIT_55
 0x0080000000000000u

	)

271 
	#DEF_BIT_56
 0x0100000000000000u

	)

272 
	#DEF_BIT_57
 0x0200000000000000u

	)

273 
	#DEF_BIT_58
 0x0400000000000000u

	)

274 
	#DEF_BIT_59
 0x0800000000000000u

	)

275 
	#DEF_BIT_60
 0x1000000000000000u

	)

276 
	#DEF_BIT_61
 0x2000000000000000u

	)

277 
	#DEF_BIT_62
 0x4000000000000000u

	)

278 
	#DEF_BIT_63
 0x8000000000000000u

	)

282 
	#DEF_ALIGN_MAX_NBR_OCTETS
 4096u

	)

286 
	#DEF_OCTET_NBR_BITS
 8u

	)

287 
	#DEF_OCTET_MASK
 0xFFu

	)

289 
	#DEF_OCTET_TO_BIT_NBR_BITS
 3u

	)

290 
	#DEF_OCTET_TO_BIT_SHIFT
 
DEF_OCTET_TO_BIT_NBR_BITS


	)

291 
	#DEF_OCTET_TO_BIT_MASK
 0x07u

	)

294 
	#DEF_NIBBLE_NBR_BITS
 4u

	)

295 
	#DEF_NIBBLE_MASK
 0x0Fu

	)

299 
	#DEF_NBR_BASE_BIN
 2u

	)

300 
	#DEF_NBR_BASE_OCT
 8u

	)

301 
	#DEF_NBR_BASE_DEC
 10u

	)

302 
	#DEF_NBR_BASE_HEX
 16u

	)

306 
	#DEF_INT_08_NBR_BITS
 8u

	)

307 
	#DEF_INT_08_MASK
 0xFFu

	)

309 
	#DEF_INT_08U_MIN_VAL
 0u

	)

310 
	#DEF_INT_08U_MAX_VAL
 255u

	)

312 
	#DEF_INT_08S_MIN_VAL_ONES_CPL
 (-127)

	)

313 
	#DEF_INT_08S_MAX_VAL_ONES_CPL
 127

	)

315 
	#DEF_INT_08S_MIN_VAL
 (
DEF_INT_08S_MIN_VAL_ONES_CPL
 - 1)

	)

316 
	#DEF_INT_08S_MAX_VAL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

318 
	#DEF_INT_08U_NBR_DIG_MIN
 1u

	)

319 
	#DEF_INT_08U_NBR_DIG_MAX
 3u

	)

321 
	#DEF_INT_08S_NBR_DIG_MIN
 3u

	)

322 
	#DEF_INT_08S_NBR_DIG_MAX
 3u

	)

326 
	#DEF_INT_16_NBR_BITS
 16u

	)

327 
	#DEF_INT_16_MASK
 0xFFFFu

	)

329 
	#DEF_INT_16U_MIN_VAL
 0u

	)

330 
	#DEF_INT_16U_MAX_VAL
 65535u

	)

332 
	#DEF_INT_16S_MIN_VAL_ONES_CPL
 (-32767)

	)

333 
	#DEF_INT_16S_MAX_VAL_ONES_CPL
 32767

	)

335 
	#DEF_INT_16S_MIN_VAL
 (
DEF_INT_16S_MIN_VAL_ONES_CPL
 - 1)

	)

336 
	#DEF_INT_16S_MAX_VAL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

338 
	#DEF_INT_16U_NBR_DIG_MIN
 1u

	)

339 
	#DEF_INT_16U_NBR_DIG_MAX
 5u

	)

341 
	#DEF_INT_16S_NBR_DIG_MIN
 5u

	)

342 
	#DEF_INT_16S_NBR_DIG_MAX
 5u

	)

346 
	#DEF_INT_32_NBR_BITS
 32u

	)

347 
	#DEF_INT_32_MASK
 0xFFFFFFFFu

	)

349 
	#DEF_INT_32U_MIN_VAL
 0u

	)

350 
	#DEF_INT_32U_MAX_VAL
 4294967295u

	)

352 
	#DEF_INT_32S_MIN_VAL_ONES_CPL
 (-2147483647)

	)

353 
	#DEF_INT_32S_MAX_VAL_ONES_CPL
 2147483647

	)

355 
	#DEF_INT_32S_MIN_VAL
 (
DEF_INT_32S_MIN_VAL_ONES_CPL
 - 1)

	)

356 
	#DEF_INT_32S_MAX_VAL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

358 
	#DEF_INT_32U_NBR_DIG_MIN
 1u

	)

359 
	#DEF_INT_32U_NBR_DIG_MAX
 10u

	)

361 
	#DEF_INT_32S_NBR_DIG_MIN
 10u

	)

362 
	#DEF_INT_32S_NBR_DIG_MAX
 10u

	)

366 
	#DEF_INT_64_NBR_BITS
 64u

	)

367 
	#DEF_INT_64_MASK
 0xFFFFFFFFFFFFFFFFu

	)

369 
	#DEF_INT_64U_MIN_VAL
 0u

	)

370 
	#DEF_INT_64U_MAX_VAL
 18446744073709551615u

	)

372 
	#DEF_INT_64S_MIN_VAL_ONES_CPL
 (-9223372036854775807)

	)

373 
	#DEF_INT_64S_MAX_VAL_ONES_CPL
 9223372036854775807

	)

375 
	#DEF_INT_64S_MIN_VAL
 (
DEF_INT_64S_MIN_VAL_ONES_CPL
 - 1)

	)

376 
	#DEF_INT_64S_MAX_VAL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

378 
	#DEF_INT_64U_NBR_DIG_MIN
 1u

	)

379 
	#DEF_INT_64U_NBR_DIG_MAX
 20u

	)

381 
	#DEF_INT_64S_NBR_DIG_MIN
 19u

	)

382 
	#DEF_INT_64S_NBR_DIG_MAX
 19u

	)

386 
	#DEF_INT_CPU_NBR_BITS
 (
CPU_CFG_DATA_SIZE
 * 
DEF_OCTET_NBR_BITS
)

	)

387 
	#DEF_INT_CPU_NBR_BITS_MAX
 (
CPU_CFG_DATA_SIZE_MAX
 * 
DEF_OCTET_NBR_BITS
)

	)

391 #i‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_08_NBR_BITS
)

394 
	#DEF_INT_CPU_MASK
 
DEF_INT_08_MASK


	)

396 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_08U_MIN_VAL


	)

397 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_08U_MAX_VAL


	)

399 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_08S_MIN_VAL


	)

400 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_08S_MAX_VAL


	)

402 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_08S_MIN_VAL_ONES_CPL


	)

403 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_08S_MAX_VAL_ONES_CPL


	)

407 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_16_NBR_BITS
)

410 
	#DEF_INT_CPU_MASK
 
DEF_INT_16_MASK


	)

412 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_16U_MIN_VAL


	)

413 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_16U_MAX_VAL


	)

415 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_16S_MIN_VAL


	)

416 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_16S_MAX_VAL


	)

418 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_16S_MIN_VAL_ONES_CPL


	)

419 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_16S_MAX_VAL_ONES_CPL


	)

423 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_32_NBR_BITS
)

426 
	#DEF_INT_CPU_MASK
 
DEF_INT_32_MASK


	)

428 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_32U_MIN_VAL


	)

429 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_32U_MAX_VAL


	)

431 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_32S_MIN_VAL


	)

432 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_32S_MAX_VAL


	)

434 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_32S_MIN_VAL_ONES_CPL


	)

435 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_32S_MAX_VAL_ONES_CPL


	)

439 #ñi‡ (
DEF_INT_CPU_NBR_BITS
 =
DEF_INT_64_NBR_BITS
)

442 
	#DEF_INT_CPU_MASK
 
DEF_INT_64_MASK


	)

444 
	#DEF_INT_CPU_U_MIN_VAL
 
DEF_INT_64U_MIN_VAL


	)

445 
	#DEF_INT_CPU_U_MAX_VAL
 
DEF_INT_64U_MAX_VAL


	)

447 
	#DEF_INT_CPU_S_MIN_VAL
 
DEF_INT_64S_MIN_VAL


	)

448 
	#DEF_INT_CPU_S_MAX_VAL
 
DEF_INT_64S_MAX_VAL


	)

450 
	#DEF_INT_CPU_S_MIN_VAL_ONES_CPL
 
DEF_INT_64S_MIN_VAL_ONES_CPL


	)

451 
	#DEF_INT_CPU_S_MAX_VAL_ONES_CPL
 
DEF_INT_64S_MAX_VAL_ONES_CPL


	)

487 
	#DEF_BIT
(
bô
Ë(1u << (bô))

	)

515 
	#DEF_BIT08
(
bô
Ë((
CPU_INT08U
)((CPU_INT08U)1u << (bô)))

	)

517 
	#DEF_BIT16
(
bô
Ë((
CPU_INT16U
)((CPU_INT16U)1u << (bô)))

	)

519 
	#DEF_BIT32
(
bô
Ë((
CPU_INT32U
)((CPU_INT32U)1u << (bô)))

	)

521 
	#DEF_BIT64
(
bô
Ë((
CPU_INT64U
)((CPU_INT64U)1u << (bô)))

	)

547 
	#DEF_BIT_MASK
(
bô_mask
, 
bô_shi·
Ë((bô_maskË<< (bô_shi·))

	)

573 
	#DEF_BIT_MASK_08
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT08U
)((CPU_INT08U)(bô_maskË<< (bô_shi·)))

	)

575 
	#DEF_BIT_MASK_16
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT16U
)((CPU_INT16U)(bô_maskË<< (bô_shi·)))

	)

577 
	#DEF_BIT_MASK_32
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT32U
)((CPU_INT32U)(bô_maskË<< (bô_shi·)))

	)

579 
	#DEF_BIT_MASK_64
(
bô_mask
, 
bô_shi·
Ë((
CPU_INT64U
)((CPU_INT64U)(bô_maskË<< (bô_shi·)))

	)

615 
	#DEF_BIT_FIELD
(
bô_fõld
, 
bô_shi·
Ë((((bô_fõldË>
DEF_INT_CPU_NBR_BITS
Ë? (
DEF_INT_CPU_U_MAX_VAL
) \

616 : (
	`DEF_BIT
(
bô_fõld
) - 1uL)) \

617 << (
bô_shi·
))

	)

644 
	#DEF_BIT_FIELD_08
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT08U
)((((CPU_INT08U)(bô_fõldË>(CPU_INT08U)
DEF_INT_08_NBR_BITS
Ë? (CPU_INT08U)(
DEF_INT_08U_MAX_VAL
) \

645 : (
CPU_INT08U
)(
	`DEF_BIT08
(
bô_fõld
) - (CPU_INT08U)1u)) \

646 << (
bô_shi·
)))

	)

648 
	#DEF_BIT_FIELD_16
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT16U
)((((CPU_INT16U)(bô_fõldË>(CPU_INT16U)
DEF_INT_16_NBR_BITS
Ë? (CPU_INT16U)(
DEF_INT_16U_MAX_VAL
) \

649 : (
CPU_INT16U
)(
	`DEF_BIT16
(
bô_fõld
) - (CPU_INT16U)1u)) \

650 << (
bô_shi·
)))

	)

652 
	#DEF_BIT_FIELD_32
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT32U
)((((CPU_INT32U)(bô_fõldË>(CPU_INT32U)
DEF_INT_32_NBR_BITS
Ë? (CPU_INT32U)(
DEF_INT_32U_MAX_VAL
) \

653 : (
CPU_INT32U
)(
	`DEF_BIT32
(
bô_fõld
) - (CPU_INT32U)1u)) \

654 << (
bô_shi·
)))

	)

656 
	#DEF_BIT_FIELD_64
(
bô_fõld
, 
bô_shi·
Ë((
CPU_INT64U
)((((CPU_INT64U)(bô_fõldË>(CPU_INT64U)
DEF_INT_64_NBR_BITS
Ë? (CPU_INT64U)(
DEF_INT_64U_MAX_VAL
) \

657 : (
CPU_INT64U
)(
	`DEF_BIT64
(
bô_fõld
) - (CPU_INT64U)1u)) \

658 << (
bô_shi·
)))

	)

679 
	#DEF_BIT_SET
(
vÆ
, 
mask
Ë((vÆË((vÆË| (mask)))

	)

702 
	#DEF_BIT_SET_08
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

704 
	#DEF_BIT_SET_16
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

706 
	#DEF_BIT_SET_32
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

708 
	#DEF_BIT_SET_64
(
vÆ
, 
mask
Ë
	`DEF_BIT_SET
((vÆ), (mask))

	)

729 #i‡(
CPU_CFG_DATA_SIZE
 > 
CPU_WORD_SIZE_08
)

730 
	#DEF_BIT_CLR_08
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~(mask))))

	)

732 
	#DEF_BIT_CLR_08
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~((
CPU_INT08U
)mask))))

	)

735 #i‡(
CPU_CFG_DATA_SIZE
 > 
CPU_WORD_SIZE_16
)

736 
	#DEF_BIT_CLR_16
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~(mask))))

	)

738 
	#DEF_BIT_CLR_16
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~((
CPU_INT16U
)mask))))

	)

741 #i‡(
CPU_CFG_DATA_SIZE
 > 
CPU_WORD_SIZE_32
)

742 
	#DEF_BIT_CLR_32
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~(mask))))

	)

744 
	#DEF_BIT_CLR_32
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~((
CPU_INT32U
)mask))))

	)

747 
	#DEF_BIT_CLR_64
(
vÆ
, 
mask
Ë((vÆË((vÆË& (~((
CPU_INT64U
)mask))))

	)

768 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_08
)

770 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë(((vÆË=
CPU_WORD_SIZE_08
Ë? 
	`DEF_BIT_CLR_08
(vÆ, maskË: 0)

	)

773 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_16
)

775 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë(((vÆË=
CPU_WORD_SIZE_08
Ë? 
	`DEF_BIT_CLR_08
(val, mask) : \

776 (((
vÆ
Ë=
CPU_WORD_SIZE_16
Ë? 
	`DEF_BIT_CLR_16
(vÆ, 
mask
Ë: 0))

	)

779 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_32
)

781 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë(((vÆË=
CPU_WORD_SIZE_08
Ë? 
	`DEF_BIT_CLR_08
(val, mask) : \

782 (((
vÆ
Ë=
CPU_WORD_SIZE_16
Ë? 
	`DEF_BIT_CLR_16
(vÆ, 
mask
) : \

783 (((
vÆ
Ë=
CPU_WORD_SIZE_32
Ë? 
	`DEF_BIT_CLR_32
(vÆ, 
mask
Ë: 0)))

	)

786 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_64
)

788 
	#DEF_BIT_CLR
(
vÆ
, 
mask
Ë(((vÆË=
CPU_WORD_SIZE_08
Ë? 
	`DEF_BIT_CLR_08
(val, mask) : \

789 (((
vÆ
Ë=
CPU_WORD_SIZE_16
Ë? 
	`DEF_BIT_CLR_16
(vÆ, 
mask
) : \

790 (((
vÆ
Ë=
CPU_WORD_SIZE_32
Ë? 
	`DEF_BIT_CLR_32
(vÆ, 
mask
) : \

791 (((
vÆ
Ë=
CPU_WORD_SIZE_64
Ë? 
	`DEF_BIT_CLR_64
(vÆ, 
mask
Ë: 0))))

	)

819 
	#DEF_BIT_TOGGLE
(
vÆ
, 
mask
Ë((vÆË^(mask))

	)

844 
	#DEF_BIT_FIELD_RD
(
vÆ
, 
fõld_mask
Ë(((vÆË& (fõld_mask)Ë/ ((fõld_maskË& ~((fõld_maskË<< 1u)))

	)

867 
	#DEF_BIT_FIELD_ENC
(
fõld_vÆ
, 
fõld_mask
Ë(((fõld_vÆË* ((fõld_maskË& ~((fõld_maskË<< 1u))Ë& (fõld_mask))

	)

892 
	#DEF_BIT_FIELD_WR
(
v¨
, 
fõld_vÆ
, 
fõld_mask
Ë(v¨Ë(((v¨Ë& ~(fõld_mask)Ë| 
	`DEF_BIT_FIELD_ENC
((fõld_vÆ), (fõld_mask)))

	)

917 
	#DEF_BIT_IS_SET
(
vÆ
, 
mask
) (((((val) & (mask)) == (mask)) && \

918 ((
mask
Ë!0u)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

943 
	#DEF_BIT_IS_CLR
(
vÆ
, 
mask
) (((((val) & (mask)) == 0u) && \

944 ((
mask
Ë!0u)Ë? (
DEF_YES
Ë: (
DEF_NO
))

	)

969 
	#DEF_BIT_IS_SET_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=0uË? (
DEF_NO
 ) : (
DEF_YES
))

	)

992 
	#DEF_BIT_IS_CLR_ANY
(
vÆ
, 
mask
Ë((((vÆË& (mask)Ë=(mask)Ë? (
DEF_NO
 ) : (
DEF_YES
))

	)

1045 
	#DEF_CHK_VAL_MIN
(
vÆ
, 
vÆ_mö
) (((!(((val) >= 1) && ((val_min) < 1))) && \

1046 ((((
vÆ_mö
Ë>1Ë&& ((
vÆ
) < 1)) || \

1047 ((
vÆ
Ë< (
vÆ_mö
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1094 
	#DEF_CHK_VAL_MAX
(
vÆ
, 
vÆ_max
) (((!(((val_max) >= 1) && ((val) < 1))) && \

1095 ((((
vÆ
Ë>1Ë&& ((
vÆ_max
) < 1)) || \

1096 ((
vÆ
Ë> (
vÆ_max
)))Ë? 
DEF_FAIL
 : 
DEF_OK
)

	)

1147 
	#DEF_CHK_VAL
(
vÆ
, 
vÆ_mö
, 
vÆ_max
Ë(((
	`DEF_CHK_VAL_MIN
((vÆ), (vÆ_mö)Ë=
DEF_FAIL
) || \

1148 (
	`DEF_CHK_VAL_MAX
((
vÆ
), (
vÆ_max
)Ë=
DEF_FAIL
)Ë? DEF_FAIL : 
DEF_OK
)

	)

1171 #i‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_08
)

1173 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : 0)

	)

1176 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_16
)

1178 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1179 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : 0))

	)

1182 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_32
)

1184 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1185 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1186 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : 0)))

	)

1189 #ñi‡ (
CPU_CFG_DATA_SIZE_MAX
 =
CPU_WORD_SIZE_64
)

1191 
	#DEF_GET_U_MAX_VAL
(
obj
Ë(((objË=
CPU_WORD_SIZE_08
Ë? 
DEF_INT_08U_MAX_VAL
 : \

1192 (((
obj
Ë=
CPU_WORD_SIZE_16
Ë? 
DEF_INT_16U_MAX_VAL
 : \

1193 (((
obj
Ë=
CPU_WORD_SIZE_32
Ë? 
DEF_INT_32U_MAX_VAL
 : \

1194 (((
obj
Ë=
CPU_WORD_SIZE_64
Ë? 
DEF_INT_64U_MAX_VAL
 : 0))))

	)

	@include/kernel/sysHook.h

28 #i‚de‡ 
OS_APP_HOOKS_H


29 
	#OS_APP_HOOKS_H


	)

32 #ifde‡ 
OS_APP_HOOKS_H_GLOBALS


33 
	#OS_APP_HOOKS_H_EXT


	)

35 
	#OS_APP_HOOKS_H_EXT
 

	)

44 
	~"sysOs.h
"

52 
Aµ_OS_SëAŒHooks
 ();

53 
Aµ_OS_CÃAŒHooks
 ();

57 
Aµ_OS_TaskCª©eHook
(
OS_TCB
 *
p_tcb
);

58 
Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
);

59 
Aµ_OS_TaskRëu∫Hook
(
OS_TCB
 *
p_tcb
);

61 
Aµ_OS_IdÀTaskHook
 ();

62 
Aµ_OS_InôHook
 ();

63 
Aµ_OS_SètTaskHook
 ();

64 
Aµ_OS_TaskSwHook
 ();

65 
Aµ_OS_TimeTickHook
 ();

	@include/kernel/sysMap.h

28 #i‚de‡
__CONFIG_H__


29 
	#__CONFIG_H__


	)

30 
	~<c⁄fig.h
>

32 
	#CLOCK_CFG_TASK_START_PRIO
 0

	)

35 
	#OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
 10u

	)

37 
	#OS_CFG_MSG_POOL_SIZE
 100u

	)

38 
	#TASK_STACK_MASK
 (
TASK_STACK_SIZE
-1)

	)

39 
	#TASK_STACK_0
 (
TASK_STACK_HIGH
-(0*
TASK_STACK_SIZE
))

	)

40 
	#TASK_STACK_1
 (
TASK_STACK_HIGH
-(1*
TASK_STACK_SIZE
))

	)

41 
	#TASK_STACK_2
 (
TASK_STACK_HIGH
-(2*
TASK_STACK_SIZE
Ë)

	)

42 
	#TASK_STACK_3
 (
TASK_STACK_HIGH
-(3*
TASK_STACK_SIZE
Ë)

	)

43 
	#TASK_STACK_4
 (
TASK_STACK_HIGH
-(4*
TASK_STACK_SIZE
Ë)

	)

44 
	#TASK_STACK_5
 (
TASK_STACK_HIGH
-(5*
TASK_STACK_SIZE
Ë)

	)

47 
	#TASK_SPESTACK_0
 (
TASK_SPESTACK_HIGH
-(0*
TASK_SPESTACK_SIZE
))

	)

48 
	#TASK_SPESTACK_1
 (
TASK_SPESTACK_HIGH
-(1*
TASK_SPESTACK_SIZE
))

	)

49 
	#TASK_SPESTACK_2
 (
TASK_SPESTACK_HIGH
-(2*
TASK_SPESTACK_SIZE
))

	)

50 
	#TASK_SPESTACK_3
 (
TASK_SPESTACK_HIGH
-(3*
TASK_SPESTACK_SIZE
))

	)

51 
	#TASK_SPESTACK_4
 (
TASK_SPESTACK_HIGH
-(4*
TASK_SPESTACK_SIZE
))

	)

52 
	#TASK_SPESTACK_5
 (
TASK_SPESTACK_HIGH
-(5*
TASK_SPESTACK_SIZE
))

	)

	@include/kernel/sysOs.h

28 #i‚de‡ 
OS_H


29 
	#OS_H


	)

31 
	~"sysCpu.h
"

32 
	~"sysDef.h
"

33 
	~"sysOsC⁄f.h
"

34 
	~"sysOsTy≥.h
"

35 
	~"sysC‹e.h
"

43 
	#OS_VERSION
 30404u

	)

51 
	#OS_TASK_SW
(Ë
	`OSCtxSw
()

	)

52 
	#OS_TASK_SW_SYNC
(Ë
__asm__
 
	`__vﬁ©ûe__
 ("sync" : : : "mem‹y")

	)

54 #i‡ 
OS_CFG_TS_EN
 == 1u

55 
	#OS_TS_GET
(Ë(
CPU_TS
)
	`gëTblms
()

	)

57 
	#OS_TS_GET
(Ë(
CPU_TS
)0u

	)

66 
	#OS_SCHED_LOCK_TIME_MEAS_START
()

	)

68 
	#OS_SCHED_LOCK_TIME_MEAS_STOP
()

	)

70 
	#OS_CRITICAL_ENTER
(Ë
	`CPU_CRITICAL_ENTER
()

	)

72 
	#OS_CRITICAL_ENTER_CPU_EXIT
()

	)

74 
	#OS_CRITICAL_EXIT
(Ë
	`CPU_CRITICAL_EXIT
()

	)

76 
	#OS_CRITICAL_EXIT_NO_SCHED
(Ë
	`CPU_CRITICAL_EXIT
()

	)

84 
	#OS_EXT


	)

86 
	#OS_PRIO_TBL_SIZE
 ((
OS_CFG_PRIO_MAX
 - 1uË/ (
DEF_INT_CPU_NBR_BITS
Ë+ 1u)

	)

88 
	#OS_MSG_EN
 (((
OS_CFG_TASK_Q_EN
 > 0uË|| (
OS_CFG_Q_EN
 > 0u)Ë? 1u : 0u)

	)

90 
	#OS_OBJ_TYPE_REQ
 1u

	)

106 
	#OS_STATE_OS_STOPPED
 (
OS_STATE
)(0u)

	)

107 
	#OS_STATE_OS_RUNNING
 (
OS_STATE
)(1u)

	)

109 
	#OS_STATE_NOT_RDY
 (
CPU_BOOLEAN
)(0u)

	)

110 
	#OS_STATE_RDY
 (
CPU_BOOLEAN
)(1u)

	)

114 
	#OS_TASK_STATE_BIT_DLY
 (
OS_STATE
)(0x01uË

	)

116 
	#OS_TASK_STATE_BIT_PEND
 (
OS_STATE
)(0x02uË

	)

118 
	#OS_TASK_STATE_BIT_SUSPENDED
 (
OS_STATE
)(0x04uË

	)

122 
	#OS_TASK_STATE_RDY
 (
OS_STATE
)–0uË

	)

123 
	#OS_TASK_STATE_DLY
 (
OS_STATE
)–1uË

	)

124 
	#OS_TASK_STATE_PEND
 (
OS_STATE
)–2uË

	)

125 
	#OS_TASK_STATE_PEND_TIMEOUT
 (
OS_STATE
)–3uË

	)

126 
	#OS_TASK_STATE_SUSPENDED
 (
OS_STATE
)–4uË

	)

127 
	#OS_TASK_STATE_DLY_SUSPENDED
 (
OS_STATE
)–5uË

	)

128 
	#OS_TASK_STATE_PEND_SUSPENDED
 (
OS_STATE
)–6uË

	)

129 
	#OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
 (
OS_STATE
)–7uË

	)

130 
	#OS_TASK_STATE_DEL
 (
OS_STATE
)(255u)

	)

133 
	#OS_TASK_PEND_ON_NOTHING
 (
OS_STATE
)–0uË

	)

134 
	#OS_TASK_PEND_ON_FLAG
 (
OS_STATE
)–1uË

	)

135 
	#OS_TASK_PEND_ON_TASK_Q
 (
OS_STATE
)–2uË

	)

136 
	#OS_TASK_PEND_ON_MULTI
 (
OS_STATE
)–3uË

	)

137 
	#OS_TASK_PEND_ON_MUTEX
 (
OS_STATE
)–4uË

	)

138 
	#OS_TASK_PEND_ON_Q
 (
OS_STATE
)–5uË

	)

139 
	#OS_TASK_PEND_ON_SEM
 (
OS_STATE
)–6uË

	)

140 
	#OS_TASK_PEND_ON_TASK_SEM
 (
OS_STATE
)–7uË

	)

149 
	#OS_STATUS_PEND_OK
 (
OS_STATUS
)–0uË

	)

150 
	#OS_STATUS_PEND_ABORT
 (
OS_STATUS
)–1uË

	)

151 
	#OS_STATUS_PEND_DEL
 (
OS_STATUS
)–2uË

	)

152 
	#OS_STATUS_PEND_TIMEOUT
 (
OS_STATUS
)–3uË

	)

164 
	#OS_OBJ_TYPE_NONE
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('N', 'O', 'N', 'E')

	)

165 
	#OS_OBJ_TYPE_FLAG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('F', 'L', 'A', 'G')

	)

166 
	#OS_OBJ_TYPE_MEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'E', 'M', ' ')

	)

167 
	#OS_OBJ_TYPE_MUTEX
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('M', 'U', 'T', 'X')

	)

168 
	#OS_OBJ_TYPE_Q
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('Q', 'U', 'E', 'U')

	)

169 
	#OS_OBJ_TYPE_SEM
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('S', 'E', 'M', 'A')

	)

170 
	#OS_OBJ_TYPE_TASK_MSG
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'S', 'G')

	)

171 
	#OS_OBJ_TYPE_TASK_RESUME
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'R', 'E', 'S')

	)

172 
	#OS_OBJ_TYPE_TASK_SIGNAL
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'I', 'G')

	)

173 
	#OS_OBJ_TYPE_TASK_SUSPEND
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'S', 'U', 'S')

	)

174 
	#OS_OBJ_TYPE_TICK
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'I', 'C', 'K')

	)

175 
	#OS_OBJ_TYPE_TMR
 (
OS_OBJ_TYPE
)
	`CPU_TYPE_CREATE
('T', 'M', 'R', ' ')

	)

183 
	#OS_OPT_NONE
 (
OS_OPT
)(0x0000u)

	)

191 
	#OS_OPT_DEL_NO_PEND
 (
OS_OPT
)(0x0000u)

	)

192 
	#OS_OPT_DEL_ALWAYS
 (
OS_OPT
)(0x0001u)

	)

200 
	#OS_OPT_PEND_FLAG_MASK
 (
OS_OPT
)(0x000Fu)

	)

201 
	#OS_OPT_PEND_FLAG_CLR_ALL
 (
OS_OPT
)(0x0001uË

	)

202 
	#OS_OPT_PEND_FLAG_CLR_AND
 (
OS_OPT
)(0x0001u)

	)

204 
	#OS_OPT_PEND_FLAG_CLR_ANY
 (
OS_OPT
)(0x0002uË

	)

205 
	#OS_OPT_PEND_FLAG_CLR_OR
 (
OS_OPT
)(0x0002u)

	)

207 
	#OS_OPT_PEND_FLAG_SET_ALL
 (
OS_OPT
)(0x0004uË

	)

208 
	#OS_OPT_PEND_FLAG_SET_AND
 (
OS_OPT
)(0x0004u)

	)

210 
	#OS_OPT_PEND_FLAG_SET_ANY
 (
OS_OPT
)(0x0008uË

	)

211 
	#OS_OPT_PEND_FLAG_SET_OR
 (
OS_OPT
)(0x0008u)

	)

213 
	#OS_OPT_PEND_FLAG_CONSUME
 (
OS_OPT
)(0x0100uË

	)

216 
	#OS_OPT_PEND_BLOCKING
 (
OS_OPT
)(0x0000u)

	)

217 
	#OS_OPT_PEND_NON_BLOCKING
 (
OS_OPT
)(0x8000u)

	)

225 
	#OS_OPT_PEND_ABORT_1
 (
OS_OPT
)(0x0000uË

	)

226 
	#OS_OPT_PEND_ABORT_ALL
 (
OS_OPT
)(0x0100uË

	)

235 
	#OS_OPT_POST_NONE
 (
OS_OPT
)(0x0000u)

	)

237 
	#OS_OPT_POST_FLAG_SET
 (
OS_OPT
)(0x0000u)

	)

238 
	#OS_OPT_POST_FLAG_CLR
 (
OS_OPT
)(0x0001u)

	)

240 
	#OS_OPT_POST_FIFO
 (
OS_OPT
)(0x0000uË

	)

241 
	#OS_OPT_POST_LIFO
 (
OS_OPT
)(0x0010uË

	)

242 
	#OS_OPT_POST_1
 (
OS_OPT
)(0x0000uË

	)

243 
	#OS_OPT_POST_ALL
 (
OS_OPT
)(0x0200uË

	)

245 
	#OS_OPT_POST_NO_SCHED
 (
OS_OPT
)(0x8000uË

	)

253 
	#OS_OPT_TASK_NONE
 (
OS_OPT
)(0x0000uË

	)

254 
	#OS_OPT_TASK_STK_CHK
 (
OS_OPT
)(0x0001uË

	)

255 
	#OS_OPT_TASK_STK_CLR
 (
OS_OPT
)(0x0002uË

	)

256 
	#OS_OPT_TASK_SAVE_FP
 (
OS_OPT
)(0x0004uË

	)

257 
	#OS_OPT_TASK_NO_TLS
 (
OS_OPT
)(0x0008uË

	)

265 
	#OS_OPT_TIME_DLY
 
DEF_BIT_NONE


	)

266 
	#OS_OPT_TIME_TIMEOUT
 ((
OS_OPT
)
DEF_BIT_01
)

	)

267 
	#OS_OPT_TIME_MATCH
 ((
OS_OPT
)
DEF_BIT_02
)

	)

268 
	#OS_OPT_TIME_PERIODIC
 ((
OS_OPT
)
DEF_BIT_03
)

	)

270 
	#OS_OPT_TIME_HMSM_STRICT
 ((
OS_OPT
)
DEF_BIT_NONE
)

	)

271 
	#OS_OPT_TIME_HMSM_NON_STRICT
 ((
OS_OPT
)
DEF_BIT_04
)

	)

273 
	#OS_OPT_TIME_MASK
 ((
OS_OPT
)(
OS_OPT_TIME_DLY
 | \

274 
OS_OPT_TIME_TIMEOUT
 | \

275 
OS_OPT_TIME_PERIODIC
 | \

276 
OS_OPT_TIME_MATCH
))

	)

278 
	#OS_OPT_TIME_OPTS_MASK
 (
OS_OPT_TIME_DLY
 | \

279 
OS_OPT_TIME_TIMEOUT
 | \

280 
OS_OPT_TIME_PERIODIC
 | \

281 
OS_OPT_TIME_MATCH
 | \

282 
OS_OPT_TIME_HMSM_NON_STRICT
)

	)

290 
	#OS_OPT_TMR_NONE
 (
OS_OPT
)(0uË

	)

292 
	#OS_OPT_TMR_ONE_SHOT
 (
OS_OPT
)(1uË

	)

293 
	#OS_OPT_TMR_PERIODIC
 (
OS_OPT
)(2uË

	)

295 
	#OS_OPT_TMR_CALLBACK
 (
OS_OPT
)(3uË

	)

296 
	#OS_OPT_TMR_CALLBACK_ARG
 (
OS_OPT
)(4uË

	)

304 
	#OS_TMR_STATE_UNUSED
 (
OS_STATE
)(0u)

	)

305 
	#OS_TMR_STATE_STOPPED
 (
OS_STATE
)(1u)

	)

306 
	#OS_TMR_STATE_RUNNING
 (
OS_STATE
)(2u)

	)

307 
	#OS_TMR_STATE_COMPLETED
 (
OS_STATE
)(3u)

	)

315 
	#OS_PRIO_INIT
 (
OS_PRIO
)(
OS_CFG_PRIO_MAX
)

	)

323 
	#OS_TICK_TH_INIT
 (
OS_TICK
)(
	`DEF_BIT
 (((OS_TICKË* 
DEF_OCTET_NBR_BITS
Ë- 1u))

	)

326 
	#OS_TICK_TH_RDY
 (
OS_TICK
)(
	`DEF_BIT_FIELD
((((OS_TICKË* 
DEF_OCTET_NBR_BITS
) / 2u), \

327 (((
OS_TICK
Ë* 
DEF_OCTET_NBR_BITS
Ë/ 2u)))

	)

344 
	eos_îr
 {

345 
	mOS_ERR_NONE
 = 0u,

347 
	mOS_ERR_A
 = 10000u,

348 
	mOS_ERR_ACCEPT_ISR
 = 10001u,

350 
	mOS_ERR_B
 = 11000u,

352 
	mOS_ERR_C
 = 12000u,

353 
	mOS_ERR_CREATE_ISR
 = 12001u,

355 
	mOS_ERR_D
 = 13000u,

356 
	mOS_ERR_DEL_ISR
 = 13001u,

358 
	mOS_ERR_E
 = 14000u,

360 
	mOS_ERR_F
 = 15000u,

361 
	mOS_ERR_FATAL_RETURN
 = 15001u,

363 
	mOS_ERR_FLAG_GRP_DEPLETED
 = 15101u,

364 
	mOS_ERR_FLAG_NOT_RDY
 = 15102u,

365 
	mOS_ERR_FLAG_PEND_OPT
 = 15103u,

366 
	mOS_ERR_FLUSH_ISR
 = 15104u,

368 
	mOS_ERR_G
 = 16000u,

370 
	mOS_ERR_H
 = 17000u,

372 
	mOS_ERR_I
 = 18000u,

373 
	mOS_ERR_ILLEGAL_CREATE_RUN_TIME
 = 18001u,

374 
	mOS_ERR_INT_Q
 = 18002u,

375 
	mOS_ERR_INT_Q_FULL
 = 18003u,

376 
	mOS_ERR_INT_Q_SIZE
 = 18004u,

377 
	mOS_ERR_INT_Q_STK_INVALID
 = 18005u,

378 
	mOS_ERR_INT_Q_STK_SIZE_INVALID
 = 18006u,

380 
	mOS_ERR_J
 = 19000u,

382 
	mOS_ERR_K
 = 20000u,

384 
	mOS_ERR_L
 = 21000u,

385 
	mOS_ERR_LOCK_NESTING_OVF
 = 21001u,

387 
	mOS_ERR_M
 = 22000u,

389 
	mOS_ERR_MEM_CREATE_ISR
 = 22201u,

390 
	mOS_ERR_MEM_FULL
 = 22202u,

391 
	mOS_ERR_MEM_INVALID_P_ADDR
 = 22203u,

392 
	mOS_ERR_MEM_INVALID_BLKS
 = 22204u,

393 
	mOS_ERR_MEM_INVALID_PART
 = 22205u,

394 
	mOS_ERR_MEM_INVALID_P_BLK
 = 22206u,

395 
	mOS_ERR_MEM_INVALID_P_MEM
 = 22207u,

396 
	mOS_ERR_MEM_INVALID_P_DATA
 = 22208u,

397 
	mOS_ERR_MEM_INVALID_SIZE
 = 22209u,

398 
	mOS_ERR_MEM_NO_FREE_BLKS
 = 22210u,

400 
	mOS_ERR_MSG_POOL_EMPTY
 = 22301u,

401 
	mOS_ERR_MSG_POOL_NULL_PTR
 = 22302u,

403 
	mOS_ERR_MUTEX_NOT_OWNER
 = 22401u,

404 
	mOS_ERR_MUTEX_OWNER
 = 22402u,

405 
	mOS_ERR_MUTEX_NESTING
 = 22403u,

407 
	mOS_ERR_N
 = 23000u,

408 
	mOS_ERR_NAME
 = 23001u,

409 
	mOS_ERR_NO_MORE_ID_AVAIL
 = 23002u,

411 
	mOS_ERR_O
 = 24000u,

412 
	mOS_ERR_OBJ_CREATED
 = 24001u,

413 
	mOS_ERR_OBJ_DEL
 = 24002u,

414 
	mOS_ERR_OBJ_PTR_NULL
 = 24003u,

415 
	mOS_ERR_OBJ_TYPE
 = 24004u,

417 
	mOS_ERR_OPT_INVALID
 = 24101u,

419 
	mOS_ERR_OS_NOT_RUNNING
 = 24201u,

420 
	mOS_ERR_OS_RUNNING
 = 24202u,

422 
	mOS_ERR_P
 = 25000u,

423 
	mOS_ERR_PEND_ABORT
 = 25001u,

424 
	mOS_ERR_PEND_ABORT_ISR
 = 25002u,

425 
	mOS_ERR_PEND_ABORT_NONE
 = 25003u,

426 
	mOS_ERR_PEND_ABORT_SELF
 = 25004u,

427 
	mOS_ERR_PEND_DEL
 = 25005u,

428 
	mOS_ERR_PEND_ISR
 = 25006u,

429 
	mOS_ERR_PEND_LOCKED
 = 25007u,

430 
	mOS_ERR_PEND_WOULD_BLOCK
 = 25008u,

432 
	mOS_ERR_POST_NULL_PTR
 = 25101u,

433 
	mOS_ERR_POST_ISR
 = 25102u,

435 
	mOS_ERR_PRIO_EXIST
 = 25201u,

436 
	mOS_ERR_PRIO
 = 25202u,

437 
	mOS_ERR_PRIO_INVALID
 = 25203u,

439 
	mOS_ERR_PTR_INVALID
 = 25301u,

441 
	mOS_ERR_Q
 = 26000u,

442 
	mOS_ERR_Q_FULL
 = 26001u,

443 
	mOS_ERR_Q_EMPTY
 = 26002u,

444 
	mOS_ERR_Q_MAX
 = 26003u,

445 
	mOS_ERR_Q_SIZE
 = 26004u,

447 
	mOS_ERR_R
 = 27000u,

448 
	mOS_ERR_REG_ID_INVALID
 = 27001u,

449 
	mOS_ERR_ROUND_ROBIN_1
 = 27002u,

450 
	mOS_ERR_ROUND_ROBIN_DISABLED
 = 27003u,

452 
	mOS_ERR_S
 = 28000u,

453 
	mOS_ERR_SCHED_INVALID_TIME_SLICE
 = 28001u,

454 
	mOS_ERR_SCHED_LOCK_ISR
 = 28002u,

455 
	mOS_ERR_SCHED_LOCKED
 = 28003u,

456 
	mOS_ERR_SCHED_NOT_LOCKED
 = 28004u,

457 
	mOS_ERR_SCHED_UNLOCK_ISR
 = 28005u,

459 
	mOS_ERR_SEM_OVF
 = 28101u,

460 
	mOS_ERR_SET_ISR
 = 28102u,

462 
	mOS_ERR_STAT_RESET_ISR
 = 28201u,

463 
	mOS_ERR_STAT_PRIO_INVALID
 = 28202u,

464 
	mOS_ERR_STAT_STK_INVALID
 = 28203u,

465 
	mOS_ERR_STAT_STK_SIZE_INVALID
 = 28204u,

466 
	mOS_ERR_STATE_INVALID
 = 28205u,

467 
	mOS_ERR_STATUS_INVALID
 = 28206u,

468 
	mOS_ERR_STK_INVALID
 = 28207u,

469 
	mOS_ERR_STK_SIZE_INVALID
 = 28208u,

470 
	mOS_ERR_STK_LIMIT_INVALID
 = 28209u,

472 
	mOS_ERR_T
 = 29000u,

473 
	mOS_ERR_TASK_CHANGE_PRIO_ISR
 = 29001u,

474 
	mOS_ERR_TASK_CREATE_ISR
 = 29002u,

475 
	mOS_ERR_TASK_DEL
 = 29003u,

476 
	mOS_ERR_TASK_DEL_IDLE
 = 29004u,

477 
	mOS_ERR_TASK_DEL_INVALID
 = 29005u,

478 
	mOS_ERR_TASK_DEL_ISR
 = 29006u,

479 
	mOS_ERR_TASK_INVALID
 = 29007u,

480 
	mOS_ERR_TASK_NO_MORE_TCB
 = 29008u,

481 
	mOS_ERR_TASK_NOT_DLY
 = 29009u,

482 
	mOS_ERR_TASK_NOT_EXIST
 = 29010u,

483 
	mOS_ERR_TASK_NOT_SUSPENDED
 = 29011u,

484 
	mOS_ERR_TASK_OPT
 = 29012u,

485 
	mOS_ERR_TASK_RESUME_ISR
 = 29013u,

486 
	mOS_ERR_TASK_RESUME_PRIO
 = 29014u,

487 
	mOS_ERR_TASK_RESUME_SELF
 = 29015u,

488 
	mOS_ERR_TASK_RUNNING
 = 29016u,

489 
	mOS_ERR_TASK_STK_CHK_ISR
 = 29017u,

490 
	mOS_ERR_TASK_SUSPENDED
 = 29018u,

491 
	mOS_ERR_TASK_SUSPEND_IDLE
 = 29019u,

492 
	mOS_ERR_TASK_SUSPEND_INT_HANDLER
 = 29020u,

493 
	mOS_ERR_TASK_SUSPEND_ISR
 = 29021u,

494 
	mOS_ERR_TASK_SUSPEND_PRIO
 = 29022u,

495 
	mOS_ERR_TASK_WAITING
 = 29023u,

497 
	mOS_ERR_TCB_INVALID
 = 29101u,

499 
	mOS_ERR_TLS_ID_INVALID
 = 29120u,

500 
	mOS_ERR_TLS_ISR
 = 29121u,

501 
	mOS_ERR_TLS_NO_MORE_AVAIL
 = 29122u,

502 
	mOS_ERR_TLS_NOT_EN
 = 29123u,

503 
	mOS_ERR_TLS_DESTRUCT_ASSIGNED
 = 29124u,

505 
	mOS_ERR_TICK_PRIO_INVALID
 = 29201u,

506 
	mOS_ERR_TICK_STK_INVALID
 = 29202u,

507 
	mOS_ERR_TICK_STK_SIZE_INVALID
 = 29203u,

508 
	mOS_ERR_TICK_WHEEL_SIZE
 = 29204u,

510 
	mOS_ERR_TIME_DLY_ISR
 = 29301u,

511 
	mOS_ERR_TIME_DLY_RESUME_ISR
 = 29302u,

512 
	mOS_ERR_TIME_GET_ISR
 = 29303u,

513 
	mOS_ERR_TIME_INVALID_HOURS
 = 29304u,

514 
	mOS_ERR_TIME_INVALID_MINUTES
 = 29305u,

515 
	mOS_ERR_TIME_INVALID_SECONDS
 = 29306u,

516 
	mOS_ERR_TIME_INVALID_MILLISECONDS
 = 29307u,

517 
	mOS_ERR_TIME_NOT_DLY
 = 29308u,

518 
	mOS_ERR_TIME_SET_ISR
 = 29309u,

519 
	mOS_ERR_TIME_ZERO_DLY
 = 29310u,

521 
	mOS_ERR_TIMEOUT
 = 29401u,

523 
	mOS_ERR_TMR_INACTIVE
 = 29501u,

524 
	mOS_ERR_TMR_INVALID_DEST
 = 29502u,

525 
	mOS_ERR_TMR_INVALID_DLY
 = 29503u,

526 
	mOS_ERR_TMR_INVALID_PERIOD
 = 29504u,

527 
	mOS_ERR_TMR_INVALID_STATE
 = 29505u,

528 
	mOS_ERR_TMR_INVALID
 = 29506u,

529 
	mOS_ERR_TMR_ISR
 = 29507u,

530 
	mOS_ERR_TMR_NO_CALLBACK
 = 29508u,

531 
	mOS_ERR_TMR_NON_AVAIL
 = 29509u,

532 
	mOS_ERR_TMR_PRIO_INVALID
 = 29510u,

533 
	mOS_ERR_TMR_STK_INVALID
 = 29511u,

534 
	mOS_ERR_TMR_STK_SIZE_INVALID
 = 29512u,

535 
	mOS_ERR_TMR_STOPPED
 = 29513u,

537 
	mOS_ERR_U
 = 30000u,

539 
	mOS_ERR_V
 = 31000u,

541 
	mOS_ERR_W
 = 32000u,

543 
	mOS_ERR_X
 = 33000u,

545 
	mOS_ERR_Y
 = 34000u,

546 
	mOS_ERR_YIELD_ISR
 = 34001u,

548 
	mOS_ERR_Z
 = 35000u

549 } 
	tOS_ERR
;

560 
os_muãx
 
	tOS_MUTEX
;

562 
os_msg
 
	tOS_MSG
;

564 
os_msg_poﬁ
 
	tOS_MSG_POOL
;

566 
os_msg_q
 
	tOS_MSG_Q
;

568 
os_q
 
	tOS_Q
;

570 
os_£m
 
	tOS_SEM
;

572 (*
	tOS_TASK_PTR
)(*
	tp_¨g
);

574 
os_tcb
 
	tOS_TCB
;

576 
os_rdy_li°
 
	tOS_RDY_LIST
;

578 
os_tick_li°
 
	tOS_TICK_LIST
;

580 (*
	tOS_TMR_CALLBACK_PTR
)(*
	tp_tmr
, *
	tp_¨g
);

581 
os_tmr
 
	tOS_TMR
;

583 
os_≥nd_d©a
 
	tOS_PEND_DATA
;

584 
os_≥nd_li°
 
	tOS_PEND_LIST
;

585 
os_≥nd_obj
 
	tOS_PEND_OBJ
;

587 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

588 (*
	tOS_APP_HOOK_VOID
)();

589 (*
	tOS_APP_HOOK_TCB
)(
	tOS_TCB
 *
	tp_tcb
);

613 
	sos_rdy_li°
 {

614 
OS_TCB
 *
HódPå
;

615 
OS_TCB
 *
TaûPå
;

616 
OS_OBJ_QTY
 
NbrE¡rõs
;

626 
	sos_≥nd_d©a
 {

627 
OS_PEND_DATA
 *
PªvPå
;

628 
OS_PEND_DATA
 *
NextPå
;

629 
OS_TCB
 *
TCBPå
;

630 
OS_PEND_OBJ
 *
PídObjPå
;

631 
OS_PEND_OBJ
 *
RdyObjPå
;

632 *
RdyMsgPå
;

633 
OS_MSG_SIZE
 
RdyMsgSize
;

634 
CPU_TS
 
RdyTS
;

638 
	sos_≥nd_li°
 {

639 
OS_PEND_DATA
 *
HódPå
;

640 
OS_PEND_DATA
 *
TaûPå
;

641 
OS_OBJ_QTY
 
NbrE¡rõs
;

660 
	sos_≥nd_obj
 {

661 #i‡
OS_OBJ_TYPE_REQ
 > 0u

662 
OS_OBJ_TYPE
 
Ty≥
;

664 
OS_PEND_LIST
 
PídLi°
;

696 
	sos_msg
 {

697 
OS_MSG
 *
NextPå
;

698 *
MsgPå
;

699 
OS_MSG_SIZE
 
MsgSize
;

700 
CPU_TS
 
MsgTS
;

703 
	sos_msg_poﬁ
 {

704 
OS_MSG
 *
NextPå
;

705 
OS_MSG_QTY
 
NbrFªe
;

706 
OS_MSG_QTY
 
NbrU£d
;

709 
	sos_msg_q
 {

710 
OS_MSG
 *
InPå
;

711 
OS_MSG
 *
OutPå
;

712 
OS_MSG_QTY
 
NbrE¡rõsSize
;

713 
OS_MSG_QTY
 
NbrE¡rõs
;

724 
	sos_muãx
 {

726 #i‡
OS_OBJ_TYPE_REQ
 > 0u

727 
OS_OBJ_TYPE
 
Ty≥
;

729 
OS_PEND_LIST
 
PídLi°
;

731 
OS_MUTEX
 *
MuãxGΩNextPå
;

732 
OS_TCB
 *
Ow√rTCBPå
;

733 
OS_NESTING_CTR
 
Ow√rNe°ögCå
;

734 
CPU_TS
 
TS
;

746 #i‡
OS_CFG_Q_EN
 > 0u

748 
	`OSQCª©e
 (
OS_Q
 *
p_q
,

749 
CPU_CHAR
 *
p_«me
,

750 
OS_MSG_QTY
 
max_qty
,

751 
OS_ERR
 *
p_îr
);

753 #i‡
OS_CFG_Q_DEL_EN
 > 0u

754 
OS_OBJ_QTY
 
	`OSQDñ
 (
OS_Q
 *
p_q
,

755 
OS_OPT
 
›t
,

756 
OS_ERR
 *
p_îr
);

759 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

760 
OS_MSG_QTY
 
	`OSQFlush
 (
OS_Q
 *
p_q
,

761 
OS_ERR
 *
p_îr
);

764 *
	`OSQPíd
 (
OS_Q
 *
p_q
,

765 
OS_TICK
 
timeout
,

766 
OS_OPT
 
›t
,

767 
OS_MSG_SIZE
 *
p_msg_size
,

768 
CPU_TS
 *
p_ts
,

769 
OS_ERR
 *
p_îr
);

771 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

772 
OS_OBJ_QTY
 
	`OSQPídAb‹t
 (
OS_Q
 *
p_q
,

773 
OS_OPT
 
›t
,

774 
OS_ERR
 *
p_îr
);

777 
	`OSQPo°
 (
OS_Q
 *
p_q
,

778 *
p_void
,

779 
OS_MSG_SIZE
 
msg_size
,

780 
OS_OPT
 
›t
,

781 
OS_ERR
 *
p_îr
);

785 
	`OS_QCÃ
 (
OS_Q
 *
p_q
);

787 #i‡
OS_CFG_DBG_EN
 > 0u

788 
	`OS_QDbgLi°Add
 (
OS_Q
 *
p_q
);

790 
	`OS_QDbgLi°Remove
 (
OS_Q
 *
p_q
);

793 
	`OS_QInô
 (
OS_ERR
 *
p_îr
);

795 
	`OS_QPo°
 (
OS_Q
 *
p_q
,

796 *
p_void
,

797 
OS_MSG_SIZE
 
msg_size
,

798 
OS_OPT
 
›t
,

799 
CPU_TS
 
ts
,

800 
OS_ERR
 *
p_îr
);

811 
	sos_q
 {

813 #i‡
OS_OBJ_TYPE_REQ
 > 0u

814 
OS_OBJ_TYPE
 
Ty≥
;

816 
OS_PEND_LIST
 
PídLi°
;

818 
OS_MSG_Q
 
MsgQ
;

829 
	sos_£m
 {

831 #i‡
OS_OBJ_TYPE_REQ
 > 0u

832 
OS_OBJ_TYPE
 
Ty≥
;

834 
OS_PEND_LIST
 
PídLi°
;

836 
OS_SEM_CTR
 
Cå
;

837 
CPU_TS
 
TS
;

847 
	sos_tcb
 {

848 
CPU_STK
 *
StkPå
;

850 *
ExtPå
;

852 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

853 
CPU_STK
 *
StkLimôPå
;

856 
OS_TCB
 *
NextPå
;

857 
OS_TCB
 *
PªvPå
;

859 
OS_TCB
 *
TickNextPå
;

860 
OS_TCB
 *
TickPªvPå
;

862 
OS_TICK_LIST
 *
TickLi°På
;

864 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

865 
CPU_STK
 *
StkBa£På
;

868 
OS_PEND_DATA
 *
PídD©aTblPå
;

869 
OS_STATE
 
PídOn
;

870 
OS_STATUS
 
PídSètus
;

872 
OS_STATE
 
TaskSèã
;

873 
OS_PRIO
 
Prio
;

874 #i‡
OS_CFG_MUTEX_EN
 > 0u

875 
OS_PRIO
 
Ba£Prio
;

876 
OS_MUTEX
 *
MuãxGΩHódPå
;

879 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

880 
CPU_STK_SIZE
 
StkSize
;

882 
OS_OPT
 
O±
;

884 
OS_OBJ_QTY
 
PídD©aTblE¡rõs
;

886 
CPU_TS
 
TS
;

887 
OS_SEM_CTR
 
SemCå
;

890 
OS_TICK
 
TickRemaö
;

891 
OS_TICK
 
TickCåPªv
;

893 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

894 
OS_TICK
 
TimeQu™è
;

895 
OS_TICK
 
TimeQu™èCå
;

898 #i‡
OS_MSG_EN
 > 0u

899 *
MsgPå
;

900 
OS_MSG_SIZE
 
MsgSize
;

903 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

904 
OS_REG
 
RegTbl
[
OS_CFG_TASK_REG_TBL_SIZE
];

907 #i‡
OS_CFG_FLAG_EN
 > 0u

908 
OS_FLAGS
 
FœgsPíd
;

909 
OS_FLAGS
 
FœgsRdy
;

910 
OS_OPT
 
FœgsO±
;

913 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

914 
OS_NESTING_CTR
 
Su•ídCå
;

917 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

918 
OS_CPU_USAGE
 
CPUUßge
;

919 
OS_CPU_USAGE
 
CPUUßgeMax
;

920 
OS_CTX_SW_CTR
 
CtxSwCå
;

921 
CPU_TS
 
Cy˛esDñè
;

922 
CPU_TS
 
Cy˛esSèπ
;

923 
OS_CYCLES
 
Cy˛esTŸÆ
;

924 
OS_CYCLES
 
Cy˛esTŸÆPªv
;

926 
CPU_TS
 
SemPídTime
;

927 
CPU_TS
 
SemPídTimeMax
;

930 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

931 
CPU_STK_SIZE
 
StkU£d
;

932 
CPU_STK_SIZE
 
StkFªe
;

934 
CPU_INT32U
 
Tc⁄sumög
;

935 
CPU_CHAR
 *
t_«me
;

945 
	sos_tick_li°
 {

946 
OS_TCB
 *
TCB_På
;

965 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

966 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskCª©eHookPå
;

967 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskDñHookPå
;

968 
OS_EXT
 
OS_APP_HOOK_TCB
 
OS_AµTaskRëu∫HookPå
;

970 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµIdÀTaskHookPå
;

971 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµSètTaskHookPå
;

972 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµTaskSwHookPå
;

973 
OS_EXT
 
OS_APP_HOOK_VOID
 
OS_AµTimeTickHookPå
;

977 
OS_EXT
 
OS_IDLE_CTR
 
OSIdÀTaskCå
;

978 
OS_EXT
 
OS_TCB
 
OSIdÀTaskTCB
;

981 
OS_EXT
 
OS_NESTING_CTR
 
OSI¡Ne°ögCå
;

983 
OS_EXT
 
OS_STATE
 
OSRu¬ög
;

987 #i‡
OS_MSG_EN
 > 0u

988 
OS_EXT
 
OS_MSG_POOL
 
OSMsgPoﬁ
;

991 #i‡
OS_CFG_MUTEX_EN
 > 0u

992 
OS_EXT
 
OS_OBJ_QTY
 
OSMuãxQty
;

996 
OS_EXT
 
OS_PRIO
 
OSPrioCur
;

997 
OS_EXT
 
OS_PRIO
 
OSPrioHighRdy
;

998 
OS_EXT
 
OS_PRIO
 
OSPrioSaved
;

999 
CPU_DATA
 
OSPrioTbl
[
OS_PRIO_TBL_SIZE
];

1002 #i‡
OS_CFG_Q_EN
 > 0u

1003 #i‡
OS_CFG_DBG_EN
 > 0u

1004 
OS_EXT
 
OS_Q
 *
OSQDbgLi°På
;

1006 
OS_EXT
 
OS_OBJ_QTY
 
OSQQty
;

1009 
OS_EXT
 
OS_RDY_LIST
 
OSRdyLi°
[
OS_CFG_PRIO_MAX
];

1014 
OS_EXT
 
OS_NESTING_CTR
 
OSSchedLockNe°ögCå
;

1015 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1016 
OS_EXT
 
OS_TICK
 
OSSchedRoundRoböDÊtTimeQu™è
;

1017 
OS_EXT
 
CPU_BOOLEAN
 
OSSchedRoundRoböEn
;

1020 #i‡
OS_CFG_SEM_EN
 > 0u

1021 
OS_EXT
 
OS_OBJ_QTY
 
OSSemQty
;

1025 
OS_EXT
 
OS_CTX_SW_CTR
 
OSTaskCtxSwCå
;

1026 
OS_EXT
 
OS_OBJ_QTY
 
OSTaskQty
;

1028 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1029 
OS_EXT
 
OS_REG_ID
 
OSTaskRegNextAvaûID
;

1033 
OS_EXT
 
OS_TICK
 
OSTickCå
;

1034 
OS_EXT
 
CPU_TS
 
OSTickTaskTimeMax
;

1035 
OS_EXT
 
OS_TICK_LIST
 
OSTickLi°Dly
;

1036 
OS_EXT
 
OS_TICK_LIST
 
OSTickLi°Timeout
;

1040 
OS_EXT
 
OS_TCB
 *
OSTCBCurPå
;

1041 
OS_EXT
 
OS_TCB
 *
OSTCBHighRdyPå
;

1052 
CPU_STK
 * c⁄° 
OSCfg_IdÀTaskStkBa£På
;

1053 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkLimô
;

1054 
CPU_STK_SIZE
 c⁄° 
OSCfg_IdÀTaskStkSize
;

1055 
CPU_INT32U
 c⁄° 
OSCfg_IdÀTaskStkSizeRAM
;

1057 
OS_OBJ_QTY
 c⁄° 
OSCfg_I¡QSize
;

1058 
CPU_INT32U
 c⁄° 
OSCfg_I¡QSizeRAM
;

1059 
CPU_STK
 * c⁄° 
OSCfg_I¡QTaskStkBa£På
;

1060 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkLimô
;

1061 
CPU_STK_SIZE
 c⁄° 
OSCfg_I¡QTaskStkSize
;

1062 
CPU_INT32U
 c⁄° 
OSCfg_I¡QTaskStkSizeRAM
;

1064 
OS_MSG_SIZE
 c⁄° 
OSCfg_MsgPoﬁSize
;

1065 
CPU_INT32U
 c⁄° 
OSCfg_MsgPoﬁSizeRAM
;

1066 
OS_MSG
 * c⁄° 
OSCfg_MsgPoﬁBa£På
;

1068 
OS_PRIO
 c⁄° 
OSCfg_SètTaskPrio
;

1069 
OS_RATE_HZ
 c⁄° 
OSCfg_SètTaskR©e_Hz
;

1070 
CPU_STK
 * c⁄° 
OSCfg_SètTaskStkBa£På
;

1071 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkLimô
;

1072 
CPU_STK_SIZE
 c⁄° 
OSCfg_SètTaskStkSize
;

1073 
CPU_INT32U
 c⁄° 
OSCfg_SètTaskStkSizeRAM
;

1075 
CPU_STK_SIZE
 c⁄° 
OSCfg_StkSizeMö
;

1077 
OS_RATE_HZ
 c⁄° 
OSCfg_TickR©e_Hz
;

1079 
CPU_STK
 
OSCfg_IdÀTaskStk
[];

1081 
CPU_STK
 
OSCfg_ISRStk
[];

1083 #i‡(
OS_MSG_EN
 > 0u)

1084 
OS_MSG
 
OSCfg_MsgPoﬁ
[];

1109 #i‡
OS_CFG_MUTEX_EN
 > 0u

1111 
	`OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

1112 
CPU_CHAR
 *
p_«me
,

1113 
OS_ERR
 *
p_îr
);

1115 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

1116 
OS_OBJ_QTY
 
	`OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

1117 
OS_OPT
 
›t
,

1118 
OS_ERR
 *
p_îr
);

1121 
	`OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

1122 
OS_TICK
 
timeout
,

1123 
OS_OPT
 
›t
,

1124 
CPU_TS
 *
p_ts
,

1125 
OS_ERR
 *
p_îr
);

1127 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

1128 
OS_OBJ_QTY
 
	`OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

1129 
OS_OPT
 
›t
,

1130 
OS_ERR
 *
p_îr
);

1133 
	`OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

1134 
OS_OPT
 
›t
,

1135 
OS_ERR
 *
p_îr
);

1140 
	`OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
);

1142 
	`OS_MuãxInô
 (
OS_ERR
 *
p_îr
);

1145 
	`OS_MuãxGΩAdd
 (
OS_TCB
 *
p_tcb
,

1146 
OS_MUTEX
 *
p_muãx
);

1148 
	`OS_MuãxGΩRemove
 (
OS_TCB
 *
p_tcb
,

1149 
OS_MUTEX
 *
p_muãx
);

1151 
OS_PRIO
 
	`OS_MuãxGΩPrioFödHighe°
(
OS_TCB
 *
p_tcb
);

1153 
	`OS_MuãxGΩPo°AŒ
 (
OS_TCB
 *
p_tcb
);

1168 #i‡
OS_CFG_SEM_EN
 > 0u

1170 
	`OSSemCª©e
 (
OS_SEM
 *
p_£m
,

1171 
CPU_CHAR
 *
p_«me
,

1172 
OS_SEM_CTR
 
˙t
,

1173 
OS_ERR
 *
p_îr
);

1175 #i‡
OS_CFG_SEM_DEL_EN
 > 0u

1176 
OS_OBJ_QTY
 
	`OSSemDñ
 (
OS_SEM
 *
p_£m
,

1177 
OS_OPT
 
›t
,

1178 
OS_ERR
 *
p_îr
);

1181 
OS_SEM_CTR
 
	`OSSemPíd
 (
OS_SEM
 *
p_£m
,

1182 
OS_TICK
 
timeout
,

1183 
OS_OPT
 
›t
,

1184 
CPU_TS
 *
p_ts
,

1185 
OS_ERR
 *
p_îr
);

1187 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

1188 
OS_OBJ_QTY
 
	`OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

1189 
OS_OPT
 
›t
,

1190 
OS_ERR
 *
p_îr
);

1193 
OS_SEM_CTR
 
	`OSSemPo°
 (
OS_SEM
 *
p_£m
,

1194 
OS_OPT
 
›t
,

1195 
OS_ERR
 *
p_îr
);

1197 #i‡
OS_CFG_SEM_SET_EN
 > 0u

1198 
	`OSSemSë
 (
OS_SEM
 *
p_£m
,

1199 
OS_SEM_CTR
 
˙t
,

1200 
OS_ERR
 *
p_îr
);

1205 
	`OS_SemCÃ
 (
OS_SEM
 *
p_£m
);

1207 
	`OS_SemInô
 (
OS_ERR
 *
p_îr
);

1209 
OS_SEM_CTR
 
	`OS_SemPo°
 (
OS_SEM
 *
p_£m
,

1210 
OS_OPT
 
›t
,

1211 
CPU_TS
 
ts
,

1212 
OS_ERR
 *
p_îr
);

1220 #i‡
OS_CFG_TASK_CHANGE_PRIO_EN
 > 0u

1221 
	`OSTaskCh™gePrio
 (
OS_TCB
 *
p_tcb
,

1222 
OS_PRIO
 
¥io_√w
,

1223 
OS_ERR
 *
p_îr
);

1226 
	`OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

1227 
CPU_CHAR
 *
p_«me
,

1228 
OS_TASK_PTR
 
p_èsk
,

1229 *
p_¨g
,

1230 
OS_PRIO
 
¥io
,

1231 
CPU_STK
 *
p_°k_ba£
,

1232 
CPU_STK_SIZE
 
°k_limô
,

1233 
CPU_STK_SIZE
 
°k_size
,

1234 
OS_MSG_QTY
 
q_size
,

1235 
OS_TICK
 
time_qu™è
,

1236 *
p_ext
,

1237 
OS_OPT
 
›t
,

1238 
OS_ERR
 *
p_îr
);

1240 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

1241 
	`OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

1242 
OS_ERR
 *
p_îr
);

1246 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1247 
OS_REG
 
	`OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

1248 
OS_REG_ID
 
id
,

1249 
OS_ERR
 *
p_îr
);

1251 
OS_REG_ID
 
	`OSTaskRegGëID
 (
OS_ERR
 *
p_îr
);

1253 
	`OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

1254 
OS_REG_ID
 
id
,

1255 
OS_REG
 
vÆue
,

1256 
OS_ERR
 *
p_îr
);

1259 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1260 
	`OSTaskResume
 (
OS_TCB
 *
p_tcb
,

1261 
OS_ERR
 *
p_îr
);

1263 
	`OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1264 
OS_ERR
 *
p_îr
);

1267 
OS_SEM_CTR
 
	`OSTaskSemPíd
 (
OS_TICK
 
timeout
,

1268 
OS_OPT
 
›t
,

1269 
CPU_TS
 *
p_ts
,

1270 
OS_ERR
 *
p_îr
);

1272 #i‡(
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u)

1273 
CPU_BOOLEAN
 
	`OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

1274 
OS_OPT
 
›t
,

1275 
OS_ERR
 *
p_îr
);

1278 
OS_SEM_CTR
 
	`OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1279 
OS_OPT
 
›t
,

1280 
OS_ERR
 *
p_îr
);

1282 
OS_SEM_CTR
 
	`OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1283 
OS_SEM_CTR
 
˙t
,

1284 
OS_ERR
 *
p_îr
);

1286 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1287 
	`OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1288 
CPU_STK_SIZE
 *
p_‰ì
,

1289 
CPU_STK_SIZE
 *
p_u£d
,

1290 
OS_ERR
 *
p_îr
);

1293 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1294 
	`OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1295 
OS_TICK
 
time_qu™è
,

1296 
OS_ERR
 *
p_îr
);

1301 
	`OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

1302 
OS_TICK
 
timeout
);

1304 
	`OS_TaskInô
 (
OS_ERR
 *
p_îr
);

1306 
	`OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
);

1308 
	`OS_TaskQPo°
 (
OS_TCB
 *
p_tcb
,

1309 *
p_void
,

1310 
OS_MSG_SIZE
 
msg_size
,

1311 
OS_OPT
 
›t
,

1312 
CPU_TS
 
ts
,

1313 
OS_ERR
 *
p_îr
);

1315 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1316 
	`OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

1317 
OS_ERR
 *
p_îr
);

1320 
	`OS_TaskRëu∫
 ();

1322 
OS_SEM_CTR
 
	`OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1323 
OS_OPT
 
›t
,

1324 
CPU_TS
 
ts
,

1325 
OS_ERR
 *
p_îr
);

1327 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1328 
	`OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1329 
OS_ERR
 *
p_îr
);

1332 
	`OS_TaskCh™gePrio
–
OS_TCB
 *
p_tcb
,

1333 
OS_PRIO
 
¥io_√w
);

1343 
	`OSTimeDly
 (
OS_TICK
 
dly
,

1344 
OS_OPT
 
›t
,

1345 
OS_ERR
 *
p_îr
);

1347 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

1348 
	`OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

1349 
OS_ERR
 *
p_îr
);

1352 
OS_TICK
 
	`OSTimeGë
 (
OS_ERR
 *
p_îr
);

1354 
	`OSTimeSë
 (
OS_TICK
 
ticks
,

1355 
OS_ERR
 *
p_îr
);

1357 
	`OSTimeTick
 ();

1368 
	`OSInô
 (
OS_ERR
 *
p_îr
);

1370 
	`OSI¡E¡î
 ();

1371 
	`OSI¡Exô
 ();

1373 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1374 
	`OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

1375 
OS_TICK
 
dÊt_time_qu™è
,

1376 
OS_ERR
 *
p_îr
);

1378 
	`OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
);

1382 
	`OSSched
 ();

1384 
	`OSSchedLock
 (
OS_ERR
 *
p_îr
);

1385 
	`OSSchedU∆ock
 (
OS_ERR
 *
p_îr
);

1387 
	`OSSèπ
 (
OS_ERR
 *
p_îr
);

1389 
	`OSCtxSw
 ();

1390 
	`OSI¡CtxSw
 ();

1391 
	`OSSèπHighRdy
 ();

1393 
CPU_INT16U
 
	`OSVîsi⁄
 (
OS_ERR
 *
p_îr
);

1397 
	`OS_IdÀTask
 (*
p_¨g
);

1399 
	`OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
);

1409 #ifde‡
__˝lu•lus


1413 
	`OSInôHook
 ();

1415 
	`OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
);

1416 
	`OSTaskDñHook
 (
OS_TCB
 *
p_tcb
);

1418 
	`OSIdÀTaskHook
 ();

1420 
	`OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
);

1422 
	`OSSètTaskHook
 ();

1424 
CPU_STK
 *
	`OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

1425 *
p_¨g
,

1426 
CPU_STK
 *
p_°k_ba£
,

1427 
CPU_STK
 *
p_°k_limô
,

1428 
CPU_STK_SIZE
 
°k_size
,

1429 
OS_OPT
 
›t
);

1431 
	`OSTaskSwHook
 ();

1433 
	`OSTimeTickHook
 ();

1435 #ifde‡
__˝lu•lus


1436 
	}
}

1448 
OSCfg_Inô
 ();

1452 
OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
);

1454 
OS_MSG_QTY
 
OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
);

1456 *
OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

1457 
OS_MSG_SIZE
 *
p_msg_size
,

1458 
CPU_TS
 *
p_ts
,

1459 
OS_ERR
 *
p_îr
);

1461 
OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

1462 
OS_MSG_QTY
 
size
);

1464 
OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

1465 *
p_void
,

1466 
OS_MSG_SIZE
 
msg_size
,

1467 
OS_OPT
 
›t
,

1468 
CPU_TS
 
ts
,

1469 
OS_ERR
 *
p_îr
);

1473 
OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

1474 
OS_PEND_OBJ
 *
p_obj
,

1475 
OS_STATE
 
≥ndög_⁄
,

1476 
OS_TICK
 
timeout
);

1478 
OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

1479 
OS_TCB
 *
p_tcb
,

1480 
CPU_TS
 
ts
);

1482 
OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

1483 
OS_TCB
 *
p_tcb
,

1484 
CPU_TS
 
ts
);

1486 
OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

1487 
OS_TCB
 *
p_tcb
,

1488 
CPU_TS
 
ts
);

1490 
OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

1491 
OS_TCB
 *
p_tcb
,

1492 
CPU_TS
 
ts
);

1494 
OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

1495 
OS_TCB
 *
p_tcb
,

1496 *
p_void
,

1497 
OS_MSG_SIZE
 
msg_size
,

1498 
CPU_TS
 
ts
);

1500 
OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

1501 
OS_TCB
 *
p_tcb
,

1502 *
p_void
,

1503 
OS_MSG_SIZE
 
msg_size
,

1504 
CPU_TS
 
ts
);

1508 
OS_PrioInô
 ();

1510 
OS_PrioIn£π
 (
OS_PRIO
 
¥io
);

1512 
OS_PrioRemove
 (
OS_PRIO
 
¥io
);

1514 
OS_PRIO
 
OS_PrioGëHighe°
 ();

1518 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1519 
OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
);

1524 
OS_RdyLi°Inô
 ();

1526 
OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
);

1528 
OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
);

1530 
OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
);

1532 
OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
);

1534 
OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
);

1538 
OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

1539 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

1540 
OS_OBJ_QTY
 
tbl_size
);

1542 
OS_PEND_LIST
 *
OS_PídLi°GëPå
 (
OS_PEND_OBJ
 *
p_obj
);

1544 
OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
);

1546 
OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1547 
OS_PEND_DATA
 *
p_≥nd_d©a
);

1549 
OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1550 
OS_PEND_DATA
 *
p_≥nd_d©a
);

1552 
OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
);

1554 
OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
);

1556 
OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1557 
OS_PEND_DATA
 *
p_≥nd_d©a
);

1561 
OS_TickLi°In£π
 (
OS_TICK_LIST
 *
p_li°
,

1562 
OS_TCB
 *
p_tcb
,

1563 
OS_TICK
 
time
);

1565 
OS_TickLi°In£πDly
 (
OS_TCB
 *
p_tcb
,

1566 
OS_TICK
 
time
,

1567 
OS_OPT
 
›t
,

1568 
OS_ERR
 *
p_îr
);

1570 
OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
);

1572 
OS_TickLi°Re£tPók
 ();

1593 #i‚de‡
OS_CFG_APP_HOOKS_EN


1598 #i‚de‡
OS_CFG_ARG_CHK_EN


1602 #i‚de‡
OS_CFG_CALLED_FROM_ISR_CHK_EN


1607 #i‚de‡
OS_CFG_OBJ_TYPE_CHK_EN


1611 #i‡ 
OS_CFG_PRIO_MAX
 < 8u

1616 #i‚de‡
OS_CFG_SCHED_LOCK_TIME_MEAS_EN


1619 #i‡ (
OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 > 0u) && \

1620 (
	gOS_CFG_TS_EN
 < 1u)

1626 #i‚de‡
OS_CFG_SCHED_ROUND_ROBIN_EN


1631 #i‚de‡
OS_CFG_STK_SIZE_MIN


1641 #i‚de‡
OS_CFG_MUTEX_EN


1644 #i‚de‡
OS_CFG_MUTEX_DEL_EN


1648 #i‚de‡
OS_CFG_MUTEX_PEND_ABORT_EN


1659 #i‚de‡
OS_CFG_Q_EN


1662 #i‚de‡
OS_CFG_Q_DEL_EN


1666 #i‚de‡
OS_CFG_Q_FLUSH_EN


1670 #i‚de‡
OS_CFG_Q_PEND_ABORT_EN


1682 #i‚de‡
OS_CFG_SEM_EN


1685 #i‚de‡
OS_CFG_SEM_DEL_EN


1689 #i‚de‡
OS_CFG_SEM_PEND_ABORT_EN


1693 #i‚de‡
OS_CFG_SEM_SET_EN


1704 #i‚de‡
OS_CFG_STAT_TASK_STK_CHK_EN


1708 #i‚de‡
OS_CFG_TASK_DEL_EN


1712 #i‚de‡
OS_CFG_TASK_Q_EN


1716 #i‚de‡
OS_CFG_TASK_Q_PEND_ABORT_EN


1720 #i‚de‡
OS_CFG_TASK_PROFILE_EN


1724 #i‚de‡
OS_CFG_TASK_REG_TBL_SIZE


1728 #i‚de‡
OS_CFG_TASK_SEM_PEND_ABORT_EN


1732 #i‚de‡
OS_CFG_TASK_SUSPEND_EN


1742 #i‚de‡
OS_CFG_TIME_DLY_RESUME_EN


	@include/kernel/sysOsConf.h

28 #i‚de‡
OS_CFG_H


29 
	#OS_CFG_H


	)

31 
	#OS_CFG_APP_HOOKS_EN
 1u

	)

32 
	#OS_CFG_ARG_CHK_EN
 1u

	)

33 
	#OS_CFG_CALLED_FROM_ISR_CHK_EN
 1u

	)

34 
	#OS_CFG_DBG_EN
 0u

	)

35 
	#OS_CFG_ISR_POST_DEFERRED_EN
 0u

	)

36 
	#OS_CFG_OBJ_TYPE_CHK_EN
 0u

	)

37 
	#OS_CFG_TS_EN
 1u

	)

39 
	#OS_CFG_PRIO_MAX
 8

	)

41 
	#OS_CFG_SCHED_LOCK_TIME_MEAS_EN
 1u

	)

42 
	#OS_CFG_SCHED_ROUND_ROBIN_EN
 1u

	)

43 
	#OS_CFG_STK_SIZE_MIN
 64u

	)

44 
	#OS_CFG_SCHED_STRENGTHEN_EN
 0u

	)

47 
	#OS_CFG_MUTEX_EN
 1u

	)

48 
	#OS_CFG_MUTEX_DEL_EN
 1u

	)

49 
	#OS_CFG_MUTEX_PEND_ABORT_EN
 1u

	)

52 
	#OS_CFG_Q_EN
 1u

	)

53 
	#OS_CFG_Q_DEL_EN
 1u

	)

54 
	#OS_CFG_Q_FLUSH_EN
 1u

	)

55 
	#OS_CFG_Q_PEND_ABORT_EN
 1u

	)

58 
	#OS_CFG_SEM_EN
 1u

	)

59 
	#OS_CFG_SEM_DEL_EN
 1u

	)

60 
	#OS_CFG_SEM_PEND_ABORT_EN
 1u

	)

61 
	#OS_CFG_SEM_SET_EN
 1u

	)

64 
	#OS_CFG_STAT_TASK_STK_CHK_EN
 1u

	)

66 
	#OS_CFG_TASK_DEL_EN
 1u

	)

67 
	#OS_CFG_TASK_Q_EN
 0u

	)

68 
	#OS_CFG_TASK_Q_PEND_ABORT_EN
 0u

	)

69 
	#OS_CFG_TASK_PROFILE_EN
 1u

	)

70 
	#OS_CFG_TASK_REG_TBL_SIZE
 0u

	)

71 
	#OS_CFG_TASK_SEM_PEND_ABORT_EN
 1u

	)

72 
	#OS_CFG_TASK_SUSPEND_EN
 1u

	)

75 
	#OS_CFG_TIME_DLY_HMSM_EN
 0u

	)

76 
	#OS_CFG_TIME_DLY_RESUME_EN
 1u

	)

	@include/kernel/sysOsTimer.h

28 #i‚de‡
__INCsysbM85xxTimîh


29 
	#__INCsysbM85xxTimîh


	)

31 #ifde‡
__˝lu•lus


36 
	~<libc/ˇgboŸ.h
>

37 
	~<µc/toﬁPpc.h
>

38 
	~<µc/excPpcLib.h
>

39 
	~<µc/µc85xx.h
>

43 
	#DEFAULT_DEC_TICKS_PER_SECOND
 1000

	)

44 
	#M85XX_MAX_COUNT_VALUE
 0xffffffff

	)

46 
	#TCR_DIE
 (
_PPC_TCR_DIE
)

	)

47 
	#TCR_ARE
 (
_PPC_TCR_ARE_U
 << 16)

	)

48 
	#TSR_DIS
 (
_PPC_TSR_DIS
)

	)

49 
	#TCR_FP
 (
_PPC_TCR_FP_U
 << 16)

	)

50 
	#TCR_FP_EXT
 (0x0001e000)

	)

51 
	#TCR_FIE
 (
_PPC_TCR_FIE_U
 << 16)

	)

52 
	#TSR_FIS
 (
_PPC_TSR_FIS_U
 << 16)

	)

53 
	#TCR_WIE
 (
_PPC_TCR_WIE_U
 << 16)

	)

54 
	#TSR_WIS
 (
_PPC_TSR_WIS_U
 << 16)

	)

55 
	#TCR_WP
 (
_PPC_TCR_WP_U
 << 16)

	)

56 
	#TCR_WP_EXT
 (0x001ê<< 16)

	)

60 
UINT32
 
sysT¸Gë
 ();

61 
sysT¸Së
 (
UINT32
);

62 
UINT32
 
sysT§Gë
 ();

63 
sysT§Së
 (
UINT32
);

64 
sysDecI¡Ack
 ();

65 
sysFôI¡Ack
 ();

66 
sysDecSë
 (
UINT32
);

67 
sysDeˇrSë
 (
UINT32
);

68 
sysM§Së
 (
UINT32
);

70 #ifde‡
__˝lu•lus


	@include/kernel/sysOsType.h

28 #i‚de‡ 
OS_TYPE_H


29 
	#OS_TYPE_H


	)

41 
CPU_INT16U
 
	tOS_CPU_USAGE
;

43 
CPU_INT32U
 
	tOS_CTR
;

45 
CPU_INT32U
 
	tCPU_TS
;

47 
CPU_INT32U
 
	tOS_CTX_SW_CTR
;

49 
CPU_INT32U
 
	tOS_CYCLES
;

51 
CPU_INT32U
 
	tOS_FLAGS
;

53 
CPU_INT32U
 
	tOS_IDLE_CTR
;

55 
CPU_INT16U
 
	tOS_MEM_QTY
;

56 
CPU_INT16U
 
	tOS_MEM_SIZE
;

58 
CPU_INT16U
 
	tOS_MSG_QTY
;

59 
CPU_INT16U
 
	tOS_MSG_SIZE
;

61 
CPU_INT08U
 
	tOS_NESTING_CTR
;

63 
CPU_INT16U
 
	tOS_OBJ_QTY
;

64 
CPU_INT32U
 
	tOS_OBJ_TYPE
;

66 
CPU_INT16U
 
	tOS_OPT
;

68 
CPU_INT08U
 
	tOS_PRIO
;

70 
CPU_INT16U
 
	tOS_QTY
;

72 
CPU_INT32U
 
	tOS_RATE_HZ
;

74 
CPU_INT32U
 
	tOS_REG
;

75 
CPU_INT08U
 
	tOS_REG_ID
;

77 
CPU_INT32U
 
	tOS_SEM_CTR
;

79 
CPU_INT08U
 
	tOS_STATE
;

81 
CPU_INT08U
 
	tOS_STATUS
;

83 
CPU_INT32U
 
	tOS_TICK
;

	@include/kernel/sysPic.h

28 #i‚def 
__INCSysEpich


29 
	#__INCSysEpich


	)

31 #ifde‡
__˝lu•lus


37 
	#INT_BANK_DESC_NUM
 10

	)

38 
	#REG_ADRS_MASK
 0x00ffffff

	)

39 
	#REG_TYPE_MASK
 0xff000000

	)

40 
	#REG_TYPE_SHIFT
 24

	)

45 
	#EPIC_BIT
(
x
Ë((
UINT32
)(1 << (x)))

	)

48 
	#EPIC_BITS_M2N
(
x
, 
y
Ë(–1 << ((y)-(x)+1ËË- 1Ë<< (x)

	)

51 
	#EPIC_BITS
(
x
, 
y
Ë
	`EPIC_BITS_M2N
(x-y+1, x)

	)

53 
	#EPIC_CCSROFF
 0x40000

	)

57 #i‚de‡
EPIC_EX_DFT_SENSE


61 
	#EPIC_EX_DFT_SENSE
 
EPIC_SENSE_EDG


	)

64 #i‚de‡
EPIC_EX_DFT_POLAR


65 
	#EPIC_EX_DFT_POLAR
 
EPIC_INT_ACT_HIGH


	)

68 #i‚de‡
EPIC_IN_DFT_POLAR


69 
	#EPIC_IN_DFT_POLAR
 
EPIC_INT_ACT_HIGH


	)

73 
	#EPIC_BRR1
 (
EPIC_CCSROFF
 + 0x00)

	)

74 
	#EPIC_BRR2
 (
EPIC_CCSROFF
 + 0x10)

	)

77 
	#EPIC_IPI_DPATCH_REG0
 (
EPIC_CCSROFF
 + 0x00040)

	)

78 
	#EPIC_IPI_DPATCH_REG1
 (
EPIC_CCSROFF
 + 0x00050)

	)

79 
	#EPIC_IPI_DPATCH_REG2
 (
EPIC_CCSROFF
 + 0x00060)

	)

80 
	#EPIC_IPI_DPATCH_REG3
 (
EPIC_CCSROFF
 + 0x00070)

	)

81 
	#EPIC_CTASK_PRI_REG
 (
EPIC_CCSROFF
 + 0x00080)

	)

82 
	#EPIC_WHO_AM_I_REG
 (
EPIC_CCSROFF
 + 0x00090)

	)

83 
	#EPIC_INT_ACK_REG
 (
EPIC_CCSROFF
 + 0x000a0)

	)

84 
	#EPIC_EOI_REG
 (
EPIC_CCSROFF
 + 0x000b0)

	)

87 
	#EPIC_FEATURES_REG
 (
EPIC_CCSROFF
 + 0x01000)

	)

88 
	#EPIC_GLOBAL_REG
 (
EPIC_CCSROFF
 + 0x01020)

	)

89 
	#EPIC_VENDOR_ID_REG
 (
EPIC_CCSROFF
 + 0x01080)

	)

90 
	#EPIC_PROC_INIT_REG
 (
EPIC_CCSROFF
 + 0x01090)

	)

91 
	#EPIC_IPI_0_VEC_REG
 (
EPIC_CCSROFF
 + 0x010a0)

	)

92 
	#EPIC_IPI_1_VEC_REG
 (
EPIC_CCSROFF
 + 0x010b0)

	)

93 
	#EPIC_IPI_2_VEC_REG
 (
EPIC_CCSROFF
 + 0x010c0)

	)

94 
	#EPIC_IPI_3_VEC_REG
 (
EPIC_CCSROFF
 + 0x010d0)

	)

95 
	#EPIC_SPUR_VEC_REG
 (
EPIC_CCSROFF
 + 0x010e0)

	)

99 
	#EPIC_TM_A_FREQ_REG
 (
EPIC_CCSROFF
 + 0x010f0)

	)

101 
	#EPIC_TM_A0_VEC_REG
 (
EPIC_CCSROFF
 + 0x01120)

	)

102 
	#EPIC_TM_A0_DES_REG
 (
EPIC_CCSROFF
 + 0x01130)

	)

103 
	#EPIC_TM_A1_VEC_REG
 (
EPIC_CCSROFF
 + 0x01160)

	)

104 
	#EPIC_TM_A1_DES_REG
 (
EPIC_CCSROFF
 + 0x01170)

	)

105 
	#EPIC_TM_A2_VEC_REG
 (
EPIC_CCSROFF
 + 0x011a0)

	)

106 
	#EPIC_TM_A2_DES_REG
 (
EPIC_CCSROFF
 + 0x011b0)

	)

107 
	#EPIC_TM_A3_VEC_REG
 (
EPIC_CCSROFF
 + 0x011e0)

	)

108 
	#EPIC_TM_A3_DES_REG
 (
EPIC_CCSROFF
 + 0x011f0)

	)

110 
	#EPIC_IRQ_SUMM_REG0
 (
EPIC_CCSROFF
 + 0x01310)

	)

111 
	#EPIC_IRQ_SUMM_REG1
 (
EPIC_CCSROFF
 + 0x01320)

	)

112 
	#EPIC_CRIT_SUMM_REG0
 (
EPIC_CCSROFF
 + 0x01330)

	)

113 
	#EPIC_CRIT_SUMM_REG1
 (
EPIC_CCSROFF
 + 0x01340)

	)

114 
	#EPIC_PERFMON_0_MSK_REG0
 (
EPIC_CCSROFF
 + 0x01350)

	)

115 
	#EPIC_PERFMON_0_MSK_REG1
 (
EPIC_CCSROFF
 + 0x01360)

	)

116 
	#EPIC_PERFMON_1_MSK_REG0
 (
EPIC_CCSROFF
 + 0x01370)

	)

117 
	#EPIC_PERFMON_1_MSK_REG1
 (
EPIC_CCSROFF
 + 0x01380)

	)

118 
	#EPIC_PERFMON_2_MSK_REG0
 (
EPIC_CCSROFF
 + 0x01390)

	)

119 
	#EPIC_PERFMON_2_MSK_REG1
 (
EPIC_CCSROFF
 + 0x013a0)

	)

120 
	#EPIC_PERFMON_3_MSK_REG0
 (
EPIC_CCSROFF
 + 0x013b0)

	)

121 
	#EPIC_PERFMON_3_MSK_REG1
 (
EPIC_CCSROFF
 + 0x013c0)

	)

122 
	#EPIC_MSG_REG0
 (
EPIC_CCSROFF
 + 0x01400)

	)

123 
	#EPIC_MSG_REG1
 (
EPIC_CCSROFF
 + 0x01410)

	)

124 
	#EPIC_MSG_REG2
 (
EPIC_CCSROFF
 + 0x01420)

	)

125 
	#EPIC_MSG_REG3
 (
EPIC_CCSROFF
 + 0x01430)

	)

126 
	#EPIC_MSG_EN_REG_A
 (
EPIC_CCSROFF
 + 0x01500)

	)

127 
	#EPIC_MSG_EN_REG_B
 (
EPIC_CCSROFF
 + 0x02500)

	)

128 
	#EPIC_MSG_STATE_REG
 (
EPIC_CCSROFF
 + 0x01510)

	)

132 
	#EPIC_TM_B_FREQ_REG
 (
EPIC_CCSROFF
 + 0x020f0)

	)

134 
	#EPIC_TM_B0_VEC_REG
 (
EPIC_CCSROFF
 + 0x02120)

	)

135 
	#EPIC_TM_B0_DES_REG
 (
EPIC_CCSROFF
 + 0x02130)

	)

136 
	#EPIC_TM_B1_VEC_REG
 (
EPIC_CCSROFF
 + 0x02160)

	)

137 
	#EPIC_TM_B1_DES_REG
 (
EPIC_CCSROFF
 + 0x02170)

	)

138 
	#EPIC_TM_B2_VEC_REG
 (
EPIC_CCSROFF
 + 0x021a0)

	)

139 
	#EPIC_TM_B2_DES_REG
 (
EPIC_CCSROFF
 + 0x021b0)

	)

140 
	#EPIC_TM_B3_VEC_REG
 (
EPIC_CCSROFF
 + 0x021e0)

	)

141 
	#EPIC_TM_B3_DES_REG
 (
EPIC_CCSROFF
 + 0x021f0)

	)

144 
	#EPIC_EX_INT0_VEC_REG
 (
EPIC_CCSROFF
 + 0x10000)

	)

145 
	#EPIC_EX_INT0_DES_REG
 (
EPIC_CCSROFF
 + 0x10010)

	)

146 
	#EPIC_EX_INT1_VEC_REG
 (
EPIC_CCSROFF
 + 0x10020)

	)

147 
	#EPIC_EX_INT1_DES_REG
 (
EPIC_CCSROFF
 + 0x10030)

	)

148 
	#EPIC_EX_INT2_VEC_REG
 (
EPIC_CCSROFF
 + 0x10040)

	)

149 
	#EPIC_EX_INT2_DES_REG
 (
EPIC_CCSROFF
 + 0x10050)

	)

150 
	#EPIC_EX_INT3_VEC_REG
 (
EPIC_CCSROFF
 + 0x10060)

	)

151 
	#EPIC_EX_INT3_DES_REG
 (
EPIC_CCSROFF
 + 0x10070)

	)

152 
	#EPIC_EX_INT4_VEC_REG
 (
EPIC_CCSROFF
 + 0x10080)

	)

153 
	#EPIC_EX_INT4_DES_REG
 (
EPIC_CCSROFF
 + 0x10090)

	)

154 
	#EPIC_EX_INT5_VEC_REG
 (
EPIC_CCSROFF
 + 0x100a0)

	)

155 
	#EPIC_EX_INT5_DES_REG
 (
EPIC_CCSROFF
 + 0x100b0)

	)

156 
	#EPIC_EX_INT6_VEC_REG
 (
EPIC_CCSROFF
 + 0x100c0)

	)

157 
	#EPIC_EX_INT6_DES_REG
 (
EPIC_CCSROFF
 + 0x100d0)

	)

158 
	#EPIC_EX_INT7_VEC_REG
 (
EPIC_CCSROFF
 + 0x100e0)

	)

159 
	#EPIC_EX_INT7_DES_REG
 (
EPIC_CCSROFF
 + 0x100f0)

	)

160 
	#EPIC_EX_INT8_VEC_REG
 (
EPIC_CCSROFF
 + 0x10100)

	)

161 
	#EPIC_EX_INT8_DES_REG
 (
EPIC_CCSROFF
 + 0x10110)

	)

162 
	#EPIC_EX_INT9_VEC_REG
 (
EPIC_CCSROFF
 + 0x10120)

	)

163 
	#EPIC_EX_INT9_DES_REG
 (
EPIC_CCSROFF
 + 0x10130)

	)

164 
	#EPIC_EX_INT10_VEC_REG
 (
EPIC_CCSROFF
 + 0x10140)

	)

165 
	#EPIC_EX_INT10_DES_REG
 (
EPIC_CCSROFF
 + 0x10150)

	)

166 
	#EPIC_EX_INT11_VEC_REG
 (
EPIC_CCSROFF
 + 0x10160)

	)

167 
	#EPIC_EX_INT11_DES_REG
 (
EPIC_CCSROFF
 + 0x10170)

	)

169 
	#EPIC_IN_INT0_VEC_REG
 (
EPIC_CCSROFF
 + 0x10200)

	)

170 
	#EPIC_IN_INT0_DES_REG
 (
EPIC_CCSROFF
 + 0x10210)

	)

171 
	#EPIC_IN_INT1_VEC_REG
 (
EPIC_CCSROFF
 + 0x10220)

	)

172 
	#EPIC_IN_INT1_DES_REG
 (
EPIC_CCSROFF
 + 0x10230)

	)

173 
	#EPIC_IN_INT2_VEC_REG
 (
EPIC_CCSROFF
 + 0x10240)

	)

174 
	#EPIC_IN_INT2_DES_REG
 (
EPIC_CCSROFF
 + 0x10250)

	)

175 
	#EPIC_IN_INT3_VEC_REG
 (
EPIC_CCSROFF
 + 0x10260)

	)

176 
	#EPIC_IN_INT3_DES_REG
 (
EPIC_CCSROFF
 + 0x10270)

	)

177 
	#EPIC_IN_INT4_VEC_REG
 (
EPIC_CCSROFF
 + 0x10280)

	)

178 
	#EPIC_IN_INT4_DES_REG
 (
EPIC_CCSROFF
 + 0x10290)

	)

179 
	#EPIC_IN_INT5_VEC_REG
 (
EPIC_CCSROFF
 + 0x102a0)

	)

180 
	#EPIC_IN_INT5_DES_REG
 (
EPIC_CCSROFF
 + 0x102b0)

	)

181 
	#EPIC_IN_INT6_VEC_REG
 (
EPIC_CCSROFF
 + 0x102c0)

	)

182 
	#EPIC_IN_INT6_DES_REG
 (
EPIC_CCSROFF
 + 0x102d0)

	)

183 
	#EPIC_IN_INT7_VEC_REG
 (
EPIC_CCSROFF
 + 0x102e0)

	)

184 
	#EPIC_IN_INT7_DES_REG
 (
EPIC_CCSROFF
 + 0x102f0)

	)

185 
	#EPIC_IN_INT8_VEC_REG
 (
EPIC_CCSROFF
 + 0x10300)

	)

186 
	#EPIC_IN_INT8_DES_REG
 (
EPIC_CCSROFF
 + 0x10310)

	)

187 
	#EPIC_IN_INT9_VEC_REG
 (
EPIC_CCSROFF
 + 0x10320)

	)

188 
	#EPIC_IN_INT9_DES_REG
 (
EPIC_CCSROFF
 + 0x10330)

	)

189 
	#EPIC_IN_INT10_VEC_REG
 (
EPIC_CCSROFF
 + 0x10340)

	)

190 
	#EPIC_IN_INT10_DES_REG
 (
EPIC_CCSROFF
 + 0x10350)

	)

191 
	#EPIC_IN_INT11_VEC_REG
 (
EPIC_CCSROFF
 + 0x10360)

	)

192 
	#EPIC_IN_INT11_DES_REG
 (
EPIC_CCSROFF
 + 0x10370)

	)

193 
	#EPIC_IN_INT12_VEC_REG
 (
EPIC_CCSROFF
 + 0x10380)

	)

194 
	#EPIC_IN_INT12_DES_REG
 (
EPIC_CCSROFF
 + 0x10390)

	)

195 
	#EPIC_IN_INT13_VEC_REG
 (
EPIC_CCSROFF
 + 0x103a0)

	)

196 
	#EPIC_IN_INT13_DES_REG
 (
EPIC_CCSROFF
 + 0x103b0)

	)

197 
	#EPIC_IN_INT14_VEC_REG
 (
EPIC_CCSROFF
 + 0x103c0)

	)

198 
	#EPIC_IN_INT14_DES_REG
 (
EPIC_CCSROFF
 + 0x103d0)

	)

199 
	#EPIC_IN_INT15_VEC_REG
 (
EPIC_CCSROFF
 + 0x103e0)

	)

200 
	#EPIC_IN_INT15_DES_REG
 (
EPIC_CCSROFF
 + 0x103f0)

	)

201 
	#EPIC_IN_INT16_VEC_REG
 (
EPIC_CCSROFF
 + 0x10400)

	)

202 
	#EPIC_IN_INT16_DES_REG
 (
EPIC_CCSROFF
 + 0x10410)

	)

203 
	#EPIC_IN_INT17_VEC_REG
 (
EPIC_CCSROFF
 + 0x10420)

	)

204 
	#EPIC_IN_INT17_DES_REG
 (
EPIC_CCSROFF
 + 0x10430)

	)

205 
	#EPIC_IN_INT18_VEC_REG
 (
EPIC_CCSROFF
 + 0x10440)

	)

206 
	#EPIC_IN_INT18_DES_REG
 (
EPIC_CCSROFF
 + 0x10450)

	)

207 
	#EPIC_IN_INT19_VEC_REG
 (
EPIC_CCSROFF
 + 0x10460)

	)

208 
	#EPIC_IN_INT19_DES_REG
 (
EPIC_CCSROFF
 + 0x10470)

	)

209 
	#EPIC_IN_INT20_VEC_REG
 (
EPIC_CCSROFF
 + 0x10480)

	)

210 
	#EPIC_IN_INT20_DES_REG
 (
EPIC_CCSROFF
 + 0x10490)

	)

211 
	#EPIC_IN_INT21_VEC_REG
 (
EPIC_CCSROFF
 + 0x104a0)

	)

212 
	#EPIC_IN_INT21_DES_REG
 (
EPIC_CCSROFF
 + 0x104b0)

	)

213 
	#EPIC_IN_INT22_VEC_REG
 (
EPIC_CCSROFF
 + 0x104c0)

	)

214 
	#EPIC_IN_INT22_DES_REG
 (
EPIC_CCSROFF
 + 0x104d0)

	)

215 
	#EPIC_IN_INT23_VEC_REG
 (
EPIC_CCSROFF
 + 0x104e0)

	)

216 
	#EPIC_IN_INT23_DES_REG
 (
EPIC_CCSROFF
 + 0x104f0)

	)

217 
	#EPIC_IN_INT24_VEC_REG
 (
EPIC_CCSROFF
 + 0x10500)

	)

218 
	#EPIC_IN_INT24_DES_REG
 (
EPIC_CCSROFF
 + 0x10510)

	)

219 
	#EPIC_IN_INT25_VEC_REG
 (
EPIC_CCSROFF
 + 0x10520)

	)

220 
	#EPIC_IN_INT25_DES_REG
 (
EPIC_CCSROFF
 + 0x10530)

	)

221 
	#EPIC_IN_INT26_VEC_REG
 (
EPIC_CCSROFF
 + 0x10540)

	)

222 
	#EPIC_IN_INT26_DES_REG
 (
EPIC_CCSROFF
 + 0x10550)

	)

223 
	#EPIC_IN_INT27_VEC_REG
 (
EPIC_CCSROFF
 + 0x10560)

	)

224 
	#EPIC_IN_INT27_DES_REG
 (
EPIC_CCSROFF
 + 0x10570)

	)

225 
	#EPIC_IN_INT28_VEC_REG
 (
EPIC_CCSROFF
 + 0x10580)

	)

226 
	#EPIC_IN_INT28_DES_REG
 (
EPIC_CCSROFF
 + 0x10590)

	)

227 
	#EPIC_IN_INT29_VEC_REG
 (
EPIC_CCSROFF
 + 0x105a0)

	)

228 
	#EPIC_IN_INT29_DES_REG
 (
EPIC_CCSROFF
 + 0x105b0)

	)

229 
	#EPIC_IN_INT30_VEC_REG
 (
EPIC_CCSROFF
 + 0x105c0)

	)

230 
	#EPIC_IN_INT30_DES_REG
 (
EPIC_CCSROFF
 + 0x105d0)

	)

231 
	#EPIC_IN_INT31_VEC_REG
 (
EPIC_CCSROFF
 + 0x105e0)

	)

232 
	#EPIC_IN_INT31_DES_REG
 (
EPIC_CCSROFF
 + 0x105f0)

	)

233 
	#EPIC_IN_INT32_VEC_REG
 (
EPIC_CCSROFF
 + 0x10600)

	)

234 
	#EPIC_IN_INT32_DES_REG
 (
EPIC_CCSROFF
 + 0x10610)

	)

235 
	#EPIC_IN_INT33_VEC_REG
 (
EPIC_CCSROFF
 + 0x10620)

	)

236 
	#EPIC_IN_INT33_DES_REG
 (
EPIC_CCSROFF
 + 0x10630)

	)

237 
	#EPIC_IN_INT34_VEC_REG
 (
EPIC_CCSROFF
 + 0x10640)

	)

238 
	#EPIC_IN_INT34_DES_REG
 (
EPIC_CCSROFF
 + 0x10650)

	)

239 
	#EPIC_IN_INT35_VEC_REG
 (
EPIC_CCSROFF
 + 0x10660)

	)

240 
	#EPIC_IN_INT35_DES_REG
 (
EPIC_CCSROFF
 + 0x10670)

	)

241 
	#EPIC_IN_INT36_VEC_REG
 (
EPIC_CCSROFF
 + 0x10680)

	)

242 
	#EPIC_IN_INT36_DES_REG
 (
EPIC_CCSROFF
 + 0x10690)

	)

243 
	#EPIC_IN_INT37_VEC_REG
 (
EPIC_CCSROFF
 + 0x106a0)

	)

244 
	#EPIC_IN_INT37_DES_REG
 (
EPIC_CCSROFF
 + 0x106b0)

	)

245 
	#EPIC_IN_INT38_VEC_REG
 (
EPIC_CCSROFF
 + 0x106c0)

	)

246 
	#EPIC_IN_INT38_DES_REG
 (
EPIC_CCSROFF
 + 0x106d0)

	)

247 
	#EPIC_IN_INT39_VEC_REG
 (
EPIC_CCSROFF
 + 0x106e0)

	)

248 
	#EPIC_IN_INT39_DES_REG
 (
EPIC_CCSROFF
 + 0x106f0)

	)

249 
	#EPIC_IN_INT40_VEC_REG
 (
EPIC_CCSROFF
 + 0x10700)

	)

250 
	#EPIC_IN_INT40_DES_REG
 (
EPIC_CCSROFF
 + 0x10710)

	)

251 
	#EPIC_IN_INT41_VEC_REG
 (
EPIC_CCSROFF
 + 0x10720)

	)

252 
	#EPIC_IN_INT41_DES_REG
 (
EPIC_CCSROFF
 + 0x10730)

	)

253 
	#EPIC_IN_INT42_VEC_REG
 (
EPIC_CCSROFF
 + 0x10740)

	)

254 
	#EPIC_IN_INT42_DES_REG
 (
EPIC_CCSROFF
 + 0x10750)

	)

255 
	#EPIC_IN_INT43_VEC_REG
 (
EPIC_CCSROFF
 + 0x10760)

	)

256 
	#EPIC_IN_INT43_DES_REG
 (
EPIC_CCSROFF
 + 0x10770)

	)

257 
	#EPIC_IN_INT44_VEC_REG
 (
EPIC_CCSROFF
 + 0x10780)

	)

258 
	#EPIC_IN_INT44_DES_REG
 (
EPIC_CCSROFF
 + 0x10790)

	)

259 
	#EPIC_IN_INT45_VEC_REG
 (
EPIC_CCSROFF
 + 0x107a0)

	)

260 
	#EPIC_IN_INT45_DES_REG
 (
EPIC_CCSROFF
 + 0x107b0)

	)

261 
	#EPIC_IN_INT46_VEC_REG
 (
EPIC_CCSROFF
 + 0x107c0)

	)

262 
	#EPIC_IN_INT46_DES_REG
 (
EPIC_CCSROFF
 + 0x107d0)

	)

263 
	#EPIC_IN_INT47_VEC_REG
 (
EPIC_CCSROFF
 + 0x107e0)

	)

264 
	#EPIC_IN_INT47_DES_REG
 (
EPIC_CCSROFF
 + 0x107f0)

	)

266 
	#EPIC_MSG_INT0_VEC_REG
 (
EPIC_CCSROFF
 + 0x11600)

	)

267 
	#EPIC_MSG_INT0_DES_REG
 (
EPIC_CCSROFF
 + 0x11610)

	)

268 
	#EPIC_MSG_INT1_VEC_REG
 (
EPIC_CCSROFF
 + 0x11620)

	)

269 
	#EPIC_MSG_INT1_DES_REG
 (
EPIC_CCSROFF
 + 0x11630)

	)

270 
	#EPIC_MSG_INT2_VEC_REG
 (
EPIC_CCSROFF
 + 0x11640)

	)

271 
	#EPIC_MSG_INT2_DES_REG
 (
EPIC_CCSROFF
 + 0x11650)

	)

272 
	#EPIC_MSG_INT3_VEC_REG
 (
EPIC_CCSROFF
 + 0x11660)

	)

273 
	#EPIC_MSG_INT3_DES_REG
 (
EPIC_CCSROFF
 + 0x11670)

	)

275 
	#EPIC_SMSG_INT0_VEC_REG
 (
EPIC_CCSROFF
 + 0x11c00)

	)

276 
	#EPIC_SMSG_INT0_DES_REG
 (
EPIC_CCSROFF
 + 0x11c10)

	)

277 
	#EPIC_SMSG_INT1_VEC_REG
 (
EPIC_CCSROFF
 + 0x11c20)

	)

278 
	#EPIC_SMSG_INT1_DES_REG
 (
EPIC_CCSROFF
 + 0x11c30)

	)

279 
	#EPIC_SMSG_INT2_VEC_REG
 (
EPIC_CCSROFF
 + 0x11c40)

	)

280 
	#EPIC_SMSG_INT2_DES_REG
 (
EPIC_CCSROFF
 + 0x11c50)

	)

281 
	#EPIC_SMSG_INT3_VEC_REG
 (
EPIC_CCSROFF
 + 0x11c60)

	)

282 
	#EPIC_SMSG_INT3_DES_REG
 (
EPIC_CCSROFF
 + 0x11c70)

	)

284 
	#EPIC_SMSG_INT4_VEC_REG
 (
EPIC_CCSROFF
 + 0x11c80)

	)

285 
	#EPIC_SMSG_INT4_DES_REG
 (
EPIC_CCSROFF
 + 0x11c90)

	)

286 
	#EPIC_SMSG_INT5_VEC_REG
 (
EPIC_CCSROFF
 + 0x11ˇ0)

	)

287 
	#EPIC_SMSG_INT5_DES_REG
 (
EPIC_CCSROFF
 + 0x11cb0)

	)

288 
	#EPIC_SMSG_INT6_VEC_REG
 (
EPIC_CCSROFF
 + 0x11cc0)

	)

289 
	#EPIC_SMSG_INT6_DES_REG
 (
EPIC_CCSROFF
 + 0x11cd0)

	)

290 
	#EPIC_SMSG_INT7_VEC_REG
 (
EPIC_CCSROFF
 + 0x11˚0)

	)

291 
	#EPIC_SMSG_INT7_DES_REG
 (
EPIC_CCSROFF
 + 0x11cf0)

	)

294 
	#EPIC_IPI_DPATCH0_REG0
 (
EPIC_CCSROFF
 + 0x20040)

	)

295 
	#EPIC_IPI_DPATCH0_REG1
 (
EPIC_CCSROFF
 + 0x20050)

	)

296 
	#EPIC_IPI_DPATCH0_REG2
 (
EPIC_CCSROFF
 + 0x20060)

	)

297 
	#EPIC_IPI_DPATCH0_REG3
 (
EPIC_CCSROFF
 + 0x20070)

	)

298 
	#EPIC_CTASK_PRI0_REG
 (
EPIC_CCSROFF
 + 0x20080)

	)

299 
	#EPIC_WHO_AM_I0_REG
 (
EPIC_CCSROFF
 + 0x20090)

	)

300 
	#EPIC_INT_ACK0_REG
 (
EPIC_CCSROFF
 + 0x200a0)

	)

301 
	#EPIC_EOI0_REG
 (
EPIC_CCSROFF
 + 0x200b0)

	)

304 
	#EPIC_IPI_DPATCH1_REG0
 (
EPIC_CCSROFF
 + 0x21040)

	)

305 
	#EPIC_IPI_DPATCH1_REG1
 (
EPIC_CCSROFF
 + 0x21050)

	)

306 
	#EPIC_IPI_DPATCH1_REG2
 (
EPIC_CCSROFF
 + 0x21060)

	)

307 
	#EPIC_IPI_DPATCH1_REG3
 (
EPIC_CCSROFF
 + 0x21070)

	)

308 
	#EPIC_CTASK_PRI1_REG
 (
EPIC_CCSROFF
 + 0x21080)

	)

309 
	#EPIC_WHO_AM_I1_REG
 (
EPIC_CCSROFF
 + 0x21090)

	)

310 
	#EPIC_INT_ACK1_REG
 (
EPIC_CCSROFF
 + 0x210a0)

	)

311 
	#EPIC_EOI1_REG
 (
EPIC_CCSROFF
 + 0x210b0)

	)

313 
	#EPIC_EX_VEC_REG_INTERVAL
 0x20

	)

314 
	#EPIC_IN_VEC_REG_INTERVAL
 0x20

	)

315 
	#EPIC_GT_VEC_REG_INTERVAL
 0x40

	)

316 
	#EPIC_MSG_VEC_REG_INTERVAL
 0x20

	)

317 
	#EPIC_SMSG_VEC_REG_INTERVAL
 0x20

	)

318 
	#EPIC_IPI_VEC_REG_INTERVAL
 0x10

	)

320 
	#EPIC_EX_DEST_REG_VECREGOFF
 0x10

	)

321 
	#EPIC_IN_DEST_REG_VECREGOFF
 0x10

	)

322 
	#EPIC_MSG_DEST_REG_VECREGOFF
 0x10

	)

323 
	#EPIC_SMSG_DEST_REG_VECREGOFF
 0x10

	)

324 
	#EPIC_IILR_REG_DESTREGOFF
 0x08

	)

326 
	#EPIC_EX_VEC_REG
(
úq
Ë(
EPIC_EX_INT0_VEC_REG
 + \

327 ((
úq
Ë* 
EPIC_EX_VEC_REG_INTERVAL
))

	)

329 
	#EPIC_IN_VEC_REG
(
úq
Ë(
EPIC_IN_INT0_VEC_REG
 + \

330 ((
úq
Ë* 
EPIC_IN_VEC_REG_INTERVAL
))

	)

332 
	#EPIC_GT_A_VEC_REG
(
úq
Ë(
EPIC_TM_A0_VEC_REG
 + \

333 ((
úq
Ë* 
EPIC_GT_VEC_REG_INTERVAL
))

	)

335 
	#EPIC_GT_B_VEC_REG
(
úq
Ë(
EPIC_TM_B0_VEC_REG
 + \

336 ((
úq
Ë* 
EPIC_GT_VEC_REG_INTERVAL
))

	)

338 
	#EPIC_MSG_VEC_REG
(
úq
Ë(
EPIC_MSG_INT0_VEC_REG
 + \

339 ((
úq
Ë* 
EPIC_MSG_VEC_REG_INTERVAL
))

	)

340 
	#EPIC_SMSG_VEC_REG
(
úq
Ë(
EPIC_SMSG_INT0_VEC_REG
 + \

341 ((
úq
Ë* 
EPIC_SMSG_VEC_REG_INTERVAL
))

	)

343 
	#EPIC_IPI_VEC_REG
(
úq
Ë(
EPIC_IPI_0_VEC_REG
 + \

344 ((
úq
Ë* 
EPIC_IPI_VEC_REG_INTERVAL
))

	)

346 
	#EPIC_EX_DEST_REG
(
úq
Ë(
	`EPIC_EX_VEC_REG
(irq) + \

347 
EPIC_EX_DEST_REG_VECREGOFF
)

	)

348 
	#EPIC_IN_DEST_REG
(
úq
Ë(
	`EPIC_IN_VEC_REG
(irq) + \

349 
EPIC_IN_DEST_REG_VECREGOFF
)

	)

350 
	#EPIC_MSG_DEST_REG
(
úq
Ë(
	`EPIC_MSG_VEC_REG
(irq) + \

351 
EPIC_MSG_DEST_REG_VECREGOFF
)

	)

353 
	#EPIC_SMSG_DEST_REG
(
úq
Ë(
	`EPIC_SMSG_VEC_REG
(irq) + \

354 
EPIC_SMSG_DEST_REG_VECREGOFF
)

	)

356 
	#EPIC_IILR_REG
(
de°
Ë((de°Ë+ 
EPIC_IILR_REG_DESTREGOFF
)

	)

358 
	#EPIC_CTASK_PRIn_REG
(
˝u
Ë(
EPIC_CTASK_PRI0_REG
 + (0x1000 * cpu))

	)

362 
	#EPIC_GCR_RESET
 
	`EPIC_BIT
(31)

	)

363 
	#EPIC_GCR_MODE_MIXED
 
	`EPIC_BIT
(29)

	)

364 
	#EPIC_GCR_MODE_EPF
 (
	`EPIC_BIT
(29Ë| EPIC_BIT(30))

	)

368 
	#EPIC_GTVPR_INTR_MSK
 
	`EPIC_BIT
(31)

	)

369 
	#EPIC_GTVPR_INTR_ACTIVE
 
	`EPIC_BIT
(30)

	)

370 
	#EPIC_GTVPR_PRIORITY_MSK
 (
	`EPIC_BIT
(19Ë| EPIC_BIT(18Ë| EPIC_BIT(17Ë| EPIC_BIT(16))

	)

371 
	#EPIC_GTVPR_PRIORITY
(
p
Ë((’Ë<< 16Ë& 
EPIC_GTVPR_PRIORITY_MSK
)

	)

372 
	#EPIC_GTVPR_VECTOR_MSK
 (0xffff)

	)

373 
	#EPIC_GTVPR_VECTOR
(
vec
Ë((vecË& 
EPIC_GTVPR_VECTOR_MSK
)

	)

377 
	#EPIC_IRQSR0_MSG_INT_MSK
 0xf000

	)

378 
	#EPIC_IRQSR0_MSG_INT
(
n
Ë(
	`EPIC_BIT
(15-“)Ë& 
EPIC_IRQSR0_MSG_INT_MSK
)

	)

379 
	#EPIC_IRQSR0_EX_INT_MSK
 0xfff

	)

380 
	#EPIC_IRQSR0_EX_INT
(
n
Ë(
	`EPIC_BIT
(11-“)Ë& 
EPIC_IRQSR0_EX_INT_MSK
)

	)

381 
	#EPIC_IRQSR1_IN_INT
(
n
Ë
	`EPIC_BIT
(31-“))

	)

382 
	#EPIC_CISR0_MSG_INT_MSK
 0xf000

	)

383 
	#EPIC_CISR0_MSG_INT
(
n
Ë(
	`EPIC_BIT
(15-“)Ë& 
EPIC_CISR0_MSG_INT_MSK
)

	)

384 
	#EPIC_CISR0_EX_INT_MSK
 0xfff

	)

385 
	#EPIC_CISR0_EX_INT
(
n
Ë(
	`EPIC_BIT
(11-“)Ë& 
EPIC_CISR0_EX_INT_MSK
)

	)

386 
	#EPIC_CISR1_IN_INT
(
n
Ë
	`EPIC_BIT
(31-“))

	)

390 
	#EPIC_EIVPR_INTR_MSK
 
	`EPIC_BIT
(31)

	)

391 
	#EPIC_EIVPR_INTR_ACTIVE
 
	`EPIC_BIT
(30)

	)

392 
	#EPIC_EIVPR_INTR_POLARITY
 
	`EPIC_BIT
(23)

	)

393 
	#EPIC_EIVPR_INTR_SENSE
 
	`EPIC_BIT
(22)

	)

394 
	#EPIC_EIVPR_POLARITY
(
p
Ë(’Ë<< 23)

	)

395 
	#EPIC_EIVPR_SENS
(
s
Ë((sË<< 22)

	)

396 
	#EPIC_EIVPR_PRIORITY_MSK
 (
	`EPIC_BIT
(19Ë| EPIC_BIT(18Ë| EPIC_BIT(17Ë| EPIC_BIT(16))

	)

397 
	#EPIC_EIVPR_PRIORITY
(
p
Ë((’Ë<< 16Ë& 
EPIC_EIVPR_PRIORITY_MSK
)

	)

398 
	#EPIC_EIVPR_VECTOR_MSK
 (0xffff)

	)

399 
	#EPIC_EIVPR_VECTOR
(
vec
Ë((vecË& 
EPIC_EIVPR_VECTOR_MSK
)

	)

400 
	#EPIC_INT_ACT_LOW
 0

	)

401 
	#EPIC_INT_ACT_HIGH
 1

	)

402 
	#EPIC_INT_EDG_NEG
 0

	)

403 
	#EPIC_INT_EDG_POS
 1

	)

404 
	#EPIC_SENSE_LVL
 1

	)

405 
	#EPIC_SENSE_EDG
 0

	)

409 
	#EPIC_EIDR_EX_PIN
 
	`EPIC_BIT
(31)

	)

410 
	#EPIC_EIDR_CRIT_INT
 
	`EPIC_BIT
(30)

	)

411 
	#EPIC_EIDR_CRIT0_INT
 
	`EPIC_BIT
(30)

	)

412 
	#EPIC_EIDR_CRIT1_INT
 
	`EPIC_BIT
(29)

	)

413 
	#EPIC_EIDR_P1_INT
 
	`EPIC_BIT
(1)

	)

414 
	#EPIC_EIDR_P0_INT
 
	`EPIC_BIT
(0)

	)

418 
	#EPIC_OPT_EN_MSK
 
EPIC_EIVPR_INTR_MSK


	)

419 
	#EPIC_OPT_EN_Y
 0x00000000

	)

420 
	#EPIC_OPT_EN_N
 0x80000000

	)

421 
	#EPIC_OPT_POLAR_MSK
 
EPIC_EIVPR_INTR_POLARITY


	)

422 
	#EPIC_OPT_POLAR_ACT_LOW
 0x00000000

	)

423 
	#EPIC_OPT_POLAR_ACT_HIGH
 0x00800000

	)

424 
	#EPIC_OPT_POLAR_EDG_NEG
 0x00000000

	)

425 
	#EPIC_OPT_POLAR_EDG_POS
 0x00800000

	)

426 
	#EPIC_OPT_SENSE_MSK
 
EPIC_EIVPR_INTR_SENSE


	)

427 
	#EPIC_OPT_SENSE_EDG
 0x00000000

	)

428 
	#EPIC_OPT_SENSE_LVL
 0x00400000

	)

429 
	#EPIC_OPT_PRI_MSK
 
EPIC_EIVPR_PRIORITY_MSK


	)

430 
	#EPIC_OPT_PRI_VALUE
(
p
Ë
	`EPIC_EIVPR_PRIORITY
’)

	)

431 
	#EPIC_OPT_EXPIN_MSK
 (
EPIC_EIDR_EX_PIN
 >> 16)

	)

432 
	#EPIC_OPT_EXPIN_OFF
 (0x00000000 >> 16)

	)

433 
	#EPIC_OPT_EXPIN_ON
 (0x80000000 >> 16)

	)

434 
	#EPIC_OPT_CRIT_MSK
 (
EPIC_EIDR_CRIT_INT
 >> 16)

	)

435 
	#EPIC_OPT_CRIT_OFF
 (0x00000000 >> 16)

	)

436 
	#EPIC_OPT_CRIT_ON
 (0x40000000 >> 16)

	)

440 
	#EPIC_IIVPR_INTR_MSK
 
	`EPIC_BIT
(31)

	)

441 
	#EPIC_IIVPR_INTR_ACTIVE
 
	`EPIC_BIT
(30)

	)

442 
	#EPIC_IIVPR_INTR_POLARITY
 
	`EPIC_BIT
(23)

	)

443 
	#EPIC_IIVPR_POLARITY
(
p
Ë(’Ë<< 23)

	)

444 
	#EPIC_IIVPR_PRIORITY_MSK
 (
	`EPIC_BIT
(19Ë| EPIC_BIT(18Ë| EPIC_BIT(17Ë| EPIC_BIT(16))

	)

445 
	#EPIC_IIVPR_PRIORITY
(
p
Ë((’Ë<< 16Ë& 
EPIC_IIVPR_PRIORITY_MSK
)

	)

446 
	#EPIC_IIVPR_VECTOR_MSK
 (0xffff)

	)

447 
	#EPIC_IIVPR_VECTOR
(
vec
Ë((vecË& 
EPIC_IIVPR_VECTOR_MSK
)

	)

451 
	#EPIC_IIDR_EX_PIN
 
	`EPIC_BIT
(31)

	)

452 
	#EPIC_IIDR_CRIT_INT
 
	`EPIC_BIT
(30)

	)

453 
	#EPIC_IIDR_CRIT0_INT
 
	`EPIC_BIT
(30)

	)

454 
	#EPIC_IIDR_CRIT1_INT
 
	`EPIC_BIT
(29)

	)

455 
	#EPIC_IIDR_P1_INT
 
	`EPIC_BIT
(1)

	)

456 
	#EPIC_IIDR_P0_INT
 
	`EPIC_BIT
(0)

	)

460 
	#EPIC_441_CISR0
 (
EPIC_CCSROFF
 + 0x3B00)

	)

461 
	#EPIC_441_CISR1
 (
EPIC_CCSROFF
 + 0x3B40)

	)

462 
	#EPIC_441_CISR_ADDR
(
n
Ë(
EPIC_441_CISR1
 +Ç*0x10)

	)

464 
	#EPIC_431_CISR0
 (
EPIC_CCSROFF
 + 0x1330)

	)

465 
	#EPIC_431_CISR1
 (
EPIC_CCSROFF
 + 0x1340)

	)

466 
	#EPIC_431_CISR2
 (
EPIC_CCSROFF
 + 0x1344)

	)

468 
	#EPIC_431_CISR_ADDR
(
n
Ë(
EPIC_431_CISR1
 +Ç*0x4)

	)

470 
	#EPIC_CISR0_EXT_MASK
 0xfff

	)

471 
	#EPIC_441_CISR0_EXT_SHIFT
 20

	)

475 
	#EPIC_CINT
 0x01

	)

476 
	#EPIC_CPU0_CINT_SHIFT
 30

	)

480 
	#FSL_EPIC_400
 0x400000

	)

481 
	#FSL_EPIC_431
 0x400301

	)

482 
	#FSL_EPIC_441
 0x400401

	)

486 
	#EPIC_MIVPR_INTR_MSK
 
	`EPIC_BIT
(31)

	)

487 
	#EPIC_MIVPR_INTR_ACTIVE
 
	`EPIC_BIT
(30)

	)

488 
	#EPIC_MIVPR_PRIORITY_MSK
 (
	`EPIC_BIT
(19Ë| EPIC_BIT(18Ë| EPIC_BIT(17Ë| EPIC_BIT(16))

	)

489 
	#EPIC_MIVPR_PRIORITY
(
p
Ë((’Ë<< 16Ë& 
EPIC_MIVPR_PRIORITY_MSK
)

	)

490 
	#EPIC_MIVPR_VECTOR_MSK
 (0xffff)

	)

491 
	#EPIC_MIVPR_VECTOR
(
vec
Ë((vecË& 
EPIC_MIVPR_VECTOR_MSK
)

	)

495 
	#EPIC_MSIVPR_INTR_MSK
 
	`EPIC_BIT
(31)

	)

496 
	#EPIC_MSIVPR_INTR_ACTIVE
 
	`EPIC_BIT
(30)

	)

497 
	#EPIC_MSIVPR_PRIORITY_MSK
 (
	`EPIC_BIT
(19Ë| EPIC_BIT(18Ë| EPIC_BIT(17Ë| EPIC_BIT(16))

	)

498 
	#EPIC_MSIVPR_PRIORITY
(
p
Ë((’Ë<< 16Ë& 
EPIC_MSIVPR_PRIORITY_MSK
)

	)

499 
	#EPIC_MSIVPR_VECTOR_MSK
 (0xffff)

	)

500 
	#EPIC_MSIVPR_VECTOR
(
vec
Ë((vecË& 
EPIC_MSIVPR_VECTOR_MSK
)

	)

504 
	#EPIC_MIDR_EX_PIN
 
	`EPIC_BIT
(31)

	)

505 
	#EPIC_MIDR_CRIT_INT
 
	`EPIC_BIT
(30)

	)

506 
	#EPIC_MIDR_CRIT0_INT
 
	`EPIC_BIT
(30)

	)

507 
	#EPIC_MIDR_CRIT1_INT
 
	`EPIC_BIT
(29)

	)

508 
	#EPIC_MIDR_P1_INT
 
	`EPIC_BIT
(1)

	)

509 
	#EPIC_MIDR_P0_INT
 
	`EPIC_BIT
(0)

	)

513 
	#EPIC_MSIDR_EX_PIN
 
	`EPIC_BIT
(31)

	)

514 
	#EPIC_MSIDR_CRIT_INT
 
	`EPIC_BIT
(30)

	)

515 
	#EPIC_MSIDR_CRIT0_INT
 
	`EPIC_BIT
(30)

	)

516 
	#EPIC_MSIDR_CRIT1_INT
 
	`EPIC_BIT
(29)

	)

517 
	#EPIC_MSIDR_P1_INT
 
	`EPIC_BIT
(1)

	)

518 
	#EPIC_MSIDR_P0_INT
 
	`EPIC_BIT
(0)

	)

522 
	#EPIC_IPIDR_P0
 
	`EPIC_BIT
(0)

	)

523 
	#EPIC_IPIDR_P1
 
	`EPIC_BIT
(1)

	)

527 
	#EPIC_CTPR_TASKPRI_MSK
 (
	`EPIC_BIT
(3Ë| EPIC_BIT(2Ë| EPIC_BIT(1Ë| EPIC_BIT(0))

	)

528 
	#EPIC_CTPR_TASKPRI
(
p
Ë(’Ë& 
EPIC_CTPR_TASKPRI_MSK
)

	)

532 
	#EPIC_WHOAMI_ID_MSK
 (
	`EPIC_BIT
(4Ë| EPIC_BIT(3Ë| EPIC_BIT(2Ë| EPIC_BIT(1Ë| EPIC_BIT(0))

	)

533 
	#EPIC_WHOAMI_ID
(
n
Ë(“Ë& 
EPIC_WHOAMI_ID_MSK
)

	)

536 
	#EPIC_FRR_NCPU_MASK
 0x00001f00

	)

537 
	#EPIC_FRR_NCPU_SHIFT
 8

	)

539 
	#EPIC_INTER_IN_SERVICE
 2

	)

541 
	#EPIC_IN_INTERRUPT
 20

	)

542 
	#EPIC_EX_INTERRUPT
 21

	)

543 
	#EPIC_INV_INTER_SOURCE
 22

	)

544 
	#EPIC_GT_A_INTERRUPT
 23

	)

545 
	#EPIC_MSG_INTERRUPT
 24

	)

546 
	#EPIC_IPI_INTERRUPT
 25

	)

547 
	#EPIC_VEC_HAS_NO_IDR
 26

	)

548 
	#EPIC_VEC_OPTION_NA
 27

	)

549 
	#EPIC_VEC_OPTION_INV
 28

	)

550 
	#EPIC_SMSG_INTERRUPT
 29

	)

551 
	#EPIC_GT_B_INTERRUPT
 30

	)

553 
	#EPIC_MAX_EXT_IRQS
 12

	)

554 
	#EPIC_MAX_IN_IRQS
 48

	)

555 
	#EPIC_MAX_GT_A_IRQS
 4

	)

556 
	#EPIC_MAX_GT_B_IRQS
 4

	)

557 
	#EPIC_MAX_MSG_IRQS
 4

	)

558 
	#EPIC_MAX_IPI_IRQS
 4

	)

559 
	#EPIC_MAX_SMSG_IRQS
 8

	)

561 
	#EPIC_MAX_SMSG_SHARED_IRQS
 32

	)

563 
	#EPIC_VEC_EXT_IRQ0
 0

	)

564 
	#EPIC_VEC_IN_IRQ0
 (
EPIC_VEC_EXT_IRQ0
 + 
EPIC_MAX_EXT_IRQS
)

	)

565 
	#EPIC_VEC_GT_A_IRQ0
 (
EPIC_VEC_IN_IRQ0
 + 
EPIC_MAX_IN_IRQS
)

	)

566 
	#EPIC_VEC_GT_B_IRQ0
 (
EPIC_VEC_GT_A_IRQ0
 + 
EPIC_MAX_GT_A_IRQS
)

	)

567 
	#EPIC_VEC_MSG_IRQ0
 (
EPIC_VEC_GT_B_IRQ0
 + 
EPIC_MAX_GT_B_IRQS
)

	)

568 
	#EPIC_VEC_SMSG_IRQ0
 (
EPIC_VEC_MSG_IRQ0
 + 
EPIC_MAX_MSG_IRQS
)

	)

569 
	#EPIC_VEC_CTRL_EXT
 (
EPIC_MAX_ALL_IRQS
)

	)

573 
	#EPIC_VEC_IPI_IRQ0
 (255 - 
EPIC_MAX_IPI_IRQS
)

	)

574 
	#EPIC_MAX_ALL_IRQS
 255

	)

576 
	#EPIC_PRIORITY_MIN
 0

	)

577 
	#EPIC_PRIORITY_MAX
 15

	)

578 
	#EPIC_PRIORITY_DEFAULT
 3

	)

579 
	#EPIC_INV_PRIO_ERROR
 ((
UINT32
)(-1))

	)

581 
	#EPIC_L2CACHE_INT_NUM
 0

	)

582 
	#EPIC_L2CACHE_INT_VEC
 (
EPIC_L2CACHE_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

583 
	#EPIC_ECM_INT_NUM
 1

	)

584 
	#EPIC_ECM_INT_VEC
 (
EPIC_ECM_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

585 
	#EPIC_DDR_INT_NUM
 2

	)

586 
	#EPIC_DDR_INT_VEC
 (
EPIC_DDR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

587 
	#EPIC_LBC_INT_NUM
 3

	)

588 
	#EPIC_LBC_INT_VEC
 (
EPIC_LBC_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

589 
	#EPIC_DMA0_INT_NUM
 4

	)

590 
	#EPIC_DMA0_INT_VEC
 (
EPIC_DMA0_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

591 
	#EPIC_DMA1_INT_NUM
 5

	)

592 
	#EPIC_DMA1_INT_VEC
 (
EPIC_DMA1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

593 
	#EPIC_DMA2_INT_NUM
 6

	)

594 
	#EPIC_DMA2_INT_VEC
 (
EPIC_DMA2_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

595 
	#EPIC_DMA3_INT_NUM
 7

	)

596 
	#EPIC_DMA3_INT_VEC
 (
EPIC_DMA3_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

597 
	#EPIC_PCI1_INT_NUM
 8

	)

598 
	#EPIC_PCI1_INT_VEC
 (
EPIC_PCI1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

600 
	#EPIC_PCI2_INT_NUM
 9

	)

601 
	#EPIC_PCI2_INT_VEC
 (
EPIC_PCI2_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

602 
	#EPIC_PCI_EXPRESS_INT_NUM
 10

	)

603 
	#EPIC_PCI_EXPRESS_INT_VEC
 (
EPIC_PCI_EXPRESS_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

604 
	#EPIC_RES11_INT_NUM
 11

	)

605 
	#EPIC_RES11_INT_VEC
 (
EPIC_RES11_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

606 
	#EPIC_DUART2_INT_NUM
 12

	)

607 
	#EPIC_DUART2_INT_VEC
 (
EPIC_DUART2_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

609 
	#EPIC_TSEC1TX_INT_NUM
 13

	)

610 
	#EPIC_TSEC1TX_INT_VEC
 (
EPIC_TSEC1TX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

611 
	#EPIC_TSEC1RX_INT_NUM
 14

	)

612 
	#EPIC_TSEC1RX_INT_VEC
 (
EPIC_TSEC1RX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

613 
	#EPIC_TSEC3TX_INT_NUM
 15

	)

614 
	#EPIC_TSEC3TX_INT_VEC
 (
EPIC_TSEC3TX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

615 
	#EPIC_TSEC3RX_INT_NUM
 16

	)

616 
	#EPIC_TSEC3RX_INT_VEC
 (
EPIC_TSEC3RX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

617 
	#EPIC_TSEC3ERR_INT_NUM
 17

	)

618 
	#EPIC_TSEC3ERR_INT_VEC
 (
EPIC_TSEC3ERR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

619 
	#EPIC_TSEC1ERR_INT_NUM
 18

	)

620 
	#EPIC_TSEC1ERR_INT_VEC
 (
EPIC_TSEC1ERR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

621 
	#EPIC_TSEC2TX_INT_NUM
 19

	)

622 
	#EPIC_TSEC2TX_INT_VEC
 (
EPIC_TSEC2TX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

623 
	#EPIC_TSEC2RX_INT_NUM
 20

	)

624 
	#EPIC_TSEC2RX_INT_VEC
 (
EPIC_TSEC2RX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

625 
	#EPIC_TSEC4TX_INT_NUM
 21

	)

626 
	#EPIC_TSEC4TX_INT_VEC
 (
EPIC_TSEC4TX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

627 
	#EPIC_TSEC4RX_INT_NUM
 22

	)

628 
	#EPIC_TSEC4RX_INT_VEC
 (
EPIC_TSEC4RX_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

629 
	#EPIC_TSEC4ERR_INT_NUM
 23

	)

630 
	#EPIC_TSEC4ERR_INT_VEC
 (
EPIC_TSEC4ERR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

631 
	#EPIC_TSEC2ERR_INT_NUM
 24

	)

632 
	#EPIC_TSEC2ERR_INT_VEC
 (
EPIC_TSEC2ERR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

633 
	#EPIC_RES25_INT_NUM
 25

	)

634 
	#EPIC_RES25_INT_VEC
 (
EPIC_RES25_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

635 
	#EPIC_DUART_INT_NUM
 26

	)

636 
	#EPIC_DUART_INT_VEC
 (
EPIC_DUART_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

637 
	#EPIC_I2C_INT_NUM
 27

	)

638 
	#EPIC_I2C_INT_VEC
 (
EPIC_I2C_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

639 
	#EPIC_PERFMON_INT_NUM
 28

	)

640 
	#EPIC_PERFMON_INT_VEC
 (
EPIC_PERFMON_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

641 
	#EPIC_SEC_INT_NUM
 29

	)

642 
	#EPIC_SEC_INT_VEC
 (
EPIC_SEC_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

643 
	#EPIC_RES30_INT_NUM
 30

	)

644 
	#EPIC_RES30_INT_VEC
 (
EPIC_RES30_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

645 
	#EPIC_RES31_INT_NUM
 31

	)

646 
	#EPIC_RES31_INT_VEC
 (
EPIC_RES31_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

648 
	#EPIC_SR_ERR_INT_NUM
 32

	)

649 
	#EPIC_SR_ERR_INT_VEC
 (
EPIC_SR_ERR_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

650 
	#EPIC_SR_OUT_DB1_INT_NUM
 33

	)

651 
	#EPIC_SR_OUT_DB1_INT_VEC
 (
EPIC_SR_OUT_DB1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

652 
	#EPIC_SR_IN_DB1_INT_NUM
 34

	)

653 
	#EPIC_SR_IN_DB1_INT_VEC
 (
EPIC_SR_IN_DB1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

654 
	#EPIC_RES35_INT_NUM
 35

	)

655 
	#EPIC_RES35_INT_VEC
 (
EPIC_RES35_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

656 
	#EPIC_RES36_INT_NUM
 36

	)

657 
	#EPIC_RES36_INT_VEC
 (
EPIC_RES36_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

658 
	#EPIC_SR_OUT_MU1_INT_NUM
 37

	)

659 
	#EPIC_SR_OUT_MU1_INT_VEC
 (
EPIC_SR_OUT_MU1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

660 
	#EPIC_SR_IN_MU1_INT_NUM
 38

	)

661 
	#EPIC_SR_IN_MU1_INT_VEC
 (
EPIC_SR_IN_MU1_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

662 
	#EPIC_SR_OUT_MU2_INT_NUM
 39

	)

663 
	#EPIC_SR_OUT_MU2_INT_VEC
 (
EPIC_SR_OUT_MU2_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

664 
	#EPIC_SR_IN_MU2_INT_NUM
 40

	)

665 
	#EPIC_SR_IN_MU2_INT_VEC
 (
EPIC_SR_IN_MU2_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

666 
	#EPIC_RES41_INT_NUM
 41

	)

667 
	#EPIC_RES41_INT_VEC
 (
EPIC_RES41_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

668 
	#EPIC_RES42_INT_NUM
 42

	)

669 
	#EPIC_RES42_INT_VEC
 (
EPIC_RES42_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

670 
	#EPIC_RES43_INT_NUM
 43

	)

671 
	#EPIC_RES43_INT_VEC
 (
EPIC_RES43_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

672 
	#EPIC_RES44_INT_NUM
 44

	)

673 
	#EPIC_RES44_INT_VEC
 (
EPIC_RES44_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

674 
	#EPIC_RES45_INT_NUM
 45

	)

675 
	#EPIC_RES45_INT_VEC
 (
EPIC_RES45_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

676 
	#EPIC_RES46_INT_NUM
 46

	)

677 
	#EPIC_RES46_INT_VEC
 (
EPIC_RES46_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

678 
	#EPIC_RES47_INT_NUM
 47

	)

679 
	#EPIC_RES47_INT_VEC
 (
EPIC_RES47_INT_NUM
 + 
EPIC_VEC_IN_IRQ0
)

	)

681 
	#VXB_EPICINTCTLR_ENABLE_INTS
(
ötMask
) \

682 
	`_VXB_EPICINTCTLR_ENABLE_INTS
(
ötMask
)

	)

683 
	#VXB_EPICINTCTLR_DISABLE_INTS
(
ötMask
) \

684 
	`_VXB_EPICINTCTLR_DISABLE_INTS
(
ötMask
)

	)

690 
__ölöe__
 
_VXB_EPICINTCTLR_ENABLE_INTS
 (
ötMask
)

692 
__asm__
 volatile

698 : "r" (
ötMask
)

703 
__ölöe__
 
_VXB_EPICINTCTLR_DISABLE_INTS
 (
ötMask
)

705 
__asm__
 volatile

711 : "r" (
ötMask
)

723 #unde‡
VXB_EPICINTCTLR_ACCESS_ROUTINES


725 
	#EPIC_REG_READ
(
off£t
) \

726 *(vﬁ©ûê
UINT32
 *)((UINT32)
pEpicRegBa£
 + (
off£t
 & 
REG_ADRS_MASK
))

	)

728 
	#EPIC_REG_WRITE
(
off£t
, 
vÆue
) \

729 *(vﬁ©ûê
UINT32
 *)((UINT32)
pEpicRegBa£
 + (
off£t
 & 
REG_ADRS_MASK
)Ë
vÆue


	)

731 
	#EPIC_REG_NO_OFFSET_READ
(
ªgAdrs
) \

732 *(vﬁ©ûê
UINT32
 *)(
ªgAdrs
)

	)

734 
	#EPIC_REG_NO_OFFSET_WRITE
(
ªgAdrs
, 
vÆue
) \

735 *(vﬁ©ûê
UINT32
 *)(
ªgAdrs
Ë
vÆue


	)

737 
	#VXB_SYS_EPIC_ID_GET
(
physCpuIndex
Ë
	)
physCpuIndex

739 (*
úqH™dÀr
)(
	tUINT32
, *);

741 #ifde‡
__˝lu•lus


	@include/libc/access.h

30 #i‚de‡
__INCac˚ssh__


31 
	#__INCac˚ssh__


	)

33 
	~<libc/ˇgboŸ.h
>

34 
	~<libc/°ddef.h
>

36 #ifde‡
__˝lu•lus


40 #i‚de‡
_CAG_CONFIG_ARCH_HAS_MEM_ACCESSORS


41 
__ölöe__
 
UINT32
 
	$ªadl
(* 
addr
)

43  *(vﬁ©ûê
UINT32
 *)(
addr
);

44 
	}
}

45 
__ölöe__
 
UINT16
 
	$ªadw
(* 
addr
)

47  *(vﬁ©ûê
UINT16
 *)(
addr
);

48 
	}
}

49 
__ölöe__
 
UINT8
 
	$ªadb
(* 
addr
)

51  *(vﬁ©ûê
UINT8
 *)(
addr
);

52 
	}
}

53 
__ölöe__
 
	$wrôñ
(* 
addr
, 
UINT32
 
vÆ
)

55 *(vﬁ©ûê
UINT32
 *)(
addr
Ë
vÆ
;

56 
	}
}

57 
__ölöe__
 
	$wrôew
(* 
addr
, 
UINT16
 
vÆ
)

59 *(vﬁ©ûê
UINT16
 *)(
addr
Ë
vÆ
;

60 
	}
}

61 
__ölöe__
 
	$wrôeb
(* 
addr
, 
UINT8
 
vÆ
)

63 *(vﬁ©ûê
UINT8
 *)(
addr
Ë
vÆ
;

64 
	}
}

66 
	#ªadl_noOrdî
 
ªadl


	)

67 
	#ªadw_noOrdî
 
ªadw


	)

68 
	#ªadn_noOrdî
 
ªadb


	)

69 
	#wrôñ_noOrdî
 
wrôñ


	)

70 
	#wrôew_noOrdî
 
wrôew


	)

71 
	#wrôeb_noOrdî
 
wrôeb


	)

73 
UINT32
 
ªadl
(* 
addr
);

74 
UINT16
 
ªadw
(* 
addr
);

75 
UINT8
 
ªadb
(* 
addr
);

76 
wrôñ
(* 
addr
, 
UINT32
 
vÆ
);

77 
wrôew
(* 
addr
, 
UINT16
 
vÆ
);

78 
wrôeb
(* 
addr
, 
UINT8
 
vÆ
);

80 
UINT32
 
ªadl_noOrdî
(* 
addr
);

81 
UINT16
 
ªadw_noOrdî
(* 
addr
);

82 
UINT8
 
ªadb_noOrdî
(* 
addr
);

83 
wrôñ_noOrdî
(* 
addr
, 
UINT32
 
vÆ
);

84 
wrôew_noOrdî
(* 
addr
, 
UINT16
 
vÆ
);

85 
wrôeb_noOrdî
(* 
addr
, 
UINT8
 
vÆ
);

88 #i‚de‡
_CAG_CONFIG_ARCH_HAS_IO_ACCESSORS


89 
	#öl
 
ªadl


	)

90 
	#öw
 
ªadw


	)

91 
	#öb
 
ªadb


	)

92 
	#oué
 
wrôñ


	)

93 
	#outw
 
wrôew


	)

94 
	#outb
 
wrôeb


	)

96 
UINT32
 
öl
(
UINT16
 
addr
);

97 
UINT16
 
öw
(UINT16 
addr
);

98 
UINT8
 
öb
(
UINT16
 
addr
);

100 
oué
(
UINT16
 
addr
, 
UINT32
 
vÆ
);

101 
outw
(
UINT16
 
addr
, UINT16 
vÆ
);

102 
outb
(
UINT16
 
addr
, 
UINT8
 
vÆ
);

105 #ifde‡
__˝lu•lus


	@include/libc/assert.h

30 #i‚de‡
__INCas£πh__


31 
	#__INCas£πh__


	)

33 
	~<libc/°dio.h
>

34 
	~<libc/î∫o.h
>

35 
	~<libc/°rög.h
>

37 #ifde‡
__˝lu•lus


41 
	#NDEBUG


	)

42 #ifde‡
NDEBUG


43 
	#as£π
(
x
Ë(()0)

	)

45 
	#as£π
(
x
) \

48 i‡(!(
x
)) \

50 ()
	`¥ötf
("assertion failedát file: %s,Üine: %u\n",\

51 
__FILE__
, 
__LINE__
); \

52 
	`ab‹t
(); \

54 } 0)

	)

57 #ifde‡
__˝lu•lus


	@include/libc/cagboot.h

30 #i‚de‡
__CAGBOOT_H__


31 
	#__CAGBOOT_H__


	)

33 
	~<libc/compûî.h
>

35 #ifde‡
__˝lu•lus


39 
	#__iomem


	)

41 #ifde‡ 
_ASMLANGUAGE


42 
	#CAST
(
x
)

	)

44 vﬁ©ûê
	tVCHAR
;

45 vﬁ©ûê
	tVINT32
;

46 vﬁ©ûê
	tVINT16
;

47 vﬁ©ûê
	tVINT8
;

48 vﬁ©ûê
	tVUINT32
;

49 vﬁ©ûê
	tVUINT16
;

50 vﬁ©ûê
	tVUINT8
;

51 
	#CAST
(
x
Ë(x)

	)

54 #i‚de‡
_ASMLANGUAGE


55 
	tUINT32
;

56 sig√d 
	tINT32
;

57 
	tUINT16
;

58 sig√d 
	tINT16
;

59 
	tUINT8
;

60 sig√d 
	tINT8
;

61 
	tUINT64
;

62 sig√d 
	tINT64
;

64 
	tuöt32_t
;

65 sig√d 
	töt32_t
;

66 
	tuöt16_t
;

67 sig√d 
	töt16_t
;

68 
	tuöt8_t
;

69 sig√d 
	töt8_t
;

70 
	tuöt64_t
;

71 sig√d 
	töt64_t
;

72 
	t±rdiff_t
;

74 
	tphys_addr_t
;

75 
	tphys_size_t
;

77 
	tsize_t
;

78 
	tdoubÀ_t
;

80 
	t£˘‹_t
;

84 
	tSTATUS
;

86 (*
FUNCPTR
) ();

88 
	tBOOL
;

90 (*
VOIDFUNCPTR
) ();

93 
	#_CAG_SHARED_BSS
 
	`__©åibuã__
((
	`__£˘i⁄__
(".sh¨ed.bss")));

	)

95 
	#_CAG_ASM
(
x
Ë
__asm__
 vﬁ©ûê(x)

	)

97 
	#_CAG_PACK_ALIGN
(
x
Ë
	`__©åibuã__
((
∑cked
, 
	`Æig√d
(x)))

	)

99 
	#_CAG_UNQUALIFIED_ASM
(
x
Ë
	`__asm__
 (x)

	)

101 
	#_CAG_BARRIER
(
x
Ë
__asm
 vﬁ©ûê(x ::: "mem‹y")

	)

103 
	#_CAG_DATA_ALIGN_BYTES
(
x
Ë
	`__©åibuã__
((
	`Æig√d
(x)))

	)

105 #i‚de‡
LOCAL


106 
	#LOCAL
 

	)

109 #i‚de‡
OK


110 
	#OK
 0

	)

113 #i‚de‡
ERROR


114 
	#ERROR
 -1

	)

117 #i‚de‡
FALSE


118 
	#FALSE
 0

	)

121 #i‚de‡
TRUE


122 
	#TRUE
 1

	)

127 
	#OK
 0

	)

128 
	#ROUND_UP
(
x
, 
Æign
Ë(((
size_t
Ë(xË+ (Æig¿- 1)Ë& ~◊lig¿- 1))

	)

132 
	#Såögify
(
s
Ë
	`__Såögify
(s)

	)

133 
	#__Såögify
(
s
Ë#s

	)

135 
	#__addªss_add_off£t
(
addr
, 
size
) \

136 ((*)((*)(
addr
Ë+ (
size
)))

	)

138 
	#__addªss_dñ_off£t
(
addr
, 
size
) \

139 ((*)((*)(
addr
Ë- (
size
)))

	)

141 
	#ARRAY_SIZE
(
¨øy
Ë(◊ºayË/ ◊ºay[0]))

	)

145 
	#SZ_4K
 0x00001000

	)

146 
	#SZ_8K
 0x00002000

	)

147 
	#SZ_16K
 0x00004000

	)

148 
	#SZ_32K
 0x00008000

	)

149 
	#SZ_64K
 0x00010000

	)

150 
	#SZ_128K
 0x00020000

	)

151 
	#SZ_256K
 0x00040000

	)

152 
	#SZ_512K
 0x00080000

	)

154 
	#SZ_1M
 0x00100000

	)

155 
	#SZ_2M
 0x00200000

	)

156 
	#SZ_4M
 0x00400000

	)

157 
	#SZ_8M
 0x00800000

	)

158 
	#SZ_16M
 0x01000000

	)

159 
	#SZ_32M
 0x02000000

	)

160 
	#SZ_64M
 0x04000000

	)

161 
	#SZ_128M
 0x08000000

	)

162 
	#SZ_256M
 0x10000000

	)

163 
	#SZ_512M
 0x20000000

	)

165 
	#SZ_1G
 0x40000000

	)

166 
	#SZ_2G
 0x80000000

	)

168 #ifde‡
__˝lu•lus


	@include/libc/compiler.h

30 #i‚de‡
__INCcompûîh__


31 
	#__INCcompûîh__


	)

33 #ifde‡
__˝lu•lus


37 #ifde‡
__GNUC__


44 #i‡
__GNUC__
 < 4 || \

45 (
__GNUC__
 =4 && 
__GNUC_MINOR__
 <= 6)

46 
	#__ORDER_LITTLE_ENDIAN
 0x1234

	)

47 
	#__ORDER_BIG_ENDIAN
 0x4321

	)

49 
	#__BYTE_ORDER
 
__BYTE_ORDER__


	)

50 
	#__ORDER_LITTLE_ENDIAN
 
__ORDER_LITTLE_ENDIAN__


	)

51 
	#__ORDER_BIG_ENDIAN
 
__ORDER_BIG_ENDIAN__


	)

54 
	#__ORDER_LITTLE_ENDIAN
 0x1234

	)

55 
	#__ORDER_BIG_ENDIAN
 0x4321

	)

56 #i‡
deföed
(
_CAG_CONFIG_ARCH_PENTIUM
) || \

57 
	$deföed
(
_CAG_CONFIG_ARCH_ARM
)

58 
	#__BYTE_ORDER
 
__ORDER_LITTLE_ENDIAN


	)

60 
	#__BYTE_ORDER
 
__ORDER_BIG_ENDIAN


	)

64 
	#sw≠16
(
x
)\

65 ((((
x
) & 0xff00) >> 8) | \

66 (((
x
Ë& 0x00ffË<< 8))

	)

68 
	#sw≠32
(
x
)\

69 ((((
x
) & 0xff000000) >> 24) | \

70 (((
x
) & 0x00ff0000) >> 8) | \

71 (((
x
) & 0x0000ff00) << 8) | \

72 (((
x
Ë& 0x000000ffË<< 24))

	)

74 
	#sw≠64
(
x
)\

75 ((((
x
) & 0xff00000000000000ULL) >> 56) | \

76 (((
x
) & 0x00ff000000000000ULL) >> 40) | \

77 (((
x
) & 0x0000ff0000000000ULL) >> 24) | \

78 (((
x
) & 0x000000ff00000000ULL) >> 8) | \

79 (((
x
) & 0x00000000ff000000ULL) << 8) | \

80 (((
x
) & 0x0000000000ff0000ULL) << 24) | \

81 (((
x
) & 0x000000000000ff00ULL) << 40) | \

82 (((
x
Ë& 0x00000000000000ffULLË<< 56))

	)

84 #i‡
__BYTE_ORDER
 =
__ORDER_LITTLE_ENDIAN


85 
	#˝u_to_À16
(
x
Ë(x)

	)

86 
	#˝u_to_À32
(
x
Ë(x)

	)

87 
	#˝u_to_À64
(
x
Ë(x)

	)

88 
	#À16_to_˝u
(
x
Ë(x)

	)

89 
	#À32_to_˝u
(
x
Ë(x)

	)

90 
	#À64_to_˝u
(
x
Ë(x)

	)

91 
	#˝u_to_be16
(
x
Ë
	`sw≠16
(x)

	)

92 
	#˝u_to_be32
(
x
Ë
	`sw≠32
(x)

	)

93 
	#˝u_to_be64
(
x
Ë
	`sw≠64
(x)

	)

94 
	#be16_to_˝u
(
x
Ë
	`sw≠16
(x)

	)

95 
	#be32_to_˝u
(
x
Ë
	`sw≠32
(x)

	)

96 
	#be64_to_˝u
(
x
Ë
	`sw≠64
(x)

	)

98 
	#ht⁄s
(
x
Ë
	`sw≠16
((x))

	)

99 
	#¡ohs
(
x
Ë
	`sw≠16
((x))

	)

100 
	#ht⁄l
(
x
Ë
	`sw≠32
((x))

	)

101 
	#¡ohl
(
x
Ë
	`sw≠32
((x))

	)

102 
	#ht⁄Œ
(
x
Ë
	`sw≠64
(x)

	)

103 
	#¡ohŒ
(
x
Ë
	`sw≠64
(x)

	)

105 
	#˝u_to_À16
(
x
Ë
	`sw≠16
(x)

	)

106 
	#˝u_to_À32
(
x
Ë
	`sw≠32
(x)

	)

107 
	#˝u_to_À64
(
x
Ë
	`sw≠64
(x)

	)

108 
	#À16_to_˝u
(
x
Ë
	`sw≠16
(x)

	)

109 
	#À32_to_˝u
(
x
Ë
	`sw≠32
(x)

	)

110 
	#À64_to_˝u
(
x
Ë
	`sw≠64
(x)

	)

111 
	#˝u_to_be16
(
x
Ë(x)

	)

112 
	#˝u_to_be32
(
x
Ë(x)

	)

113 
	#˝u_to_be64
(
x
Ë(x)

	)

114 
	#be16_to_˝u
(
x
Ë(x)

	)

115 
	#be32_to_˝u
(
x
Ë(x)

	)

116 
	#be64_to_˝u
(
x
Ë(x)

	)

118 
	#ht⁄s
(
x
Ë((x))

	)

119 
	#¡ohs
(
x
Ë((x))

	)

120 
	#ht⁄l
(
x
Ë((x))

	)

121 
	#¡ohl
(
x
Ë((x))

	)

122 
	#ht⁄Œ
(
x
Ë(x)

	)

123 
	#¡ohŒ
(
x
Ë(x)

	)

126 
	#_CONCATENATE
(
a
, 
b
Ë
	`__CONCATENATE
◊, b)

	)

127 
	#__CONCATENATE
(
a
, 
b
Ë®## 
	)
b

128 
	#ASM_PFX
(
«me
Ë
	`_CONCATENATE
 (
__USER_LABEL_PREFIX__
,Çame)

	)

129 
	#GCC_ASM_EXPORT
(
func__
) \

130 .
globl
 
	`_CONCATENATE
 (
__USER_LABEL_PREFIX__
, 
func__
) \

131 

	)

132 
	#GCC_ASM_IMPORT
(
«me
)

	)

134 #ifde‡
__˝lu•lus


135 
	}
}

	@include/libc/ctype.h

28 #i‚de‡
__CTYPE_H__


29 
	#__CTYPE_H__


	)

36 #i‚de‡
__GNU__


37 
	#__GNU__


	)

40 #ifde‡
__GNU__


41 
	#likñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x),1)

	)

42 
	#u∆ikñy
(
x
Ë
	`__buûtö_ex≥˘
(!!(x),0)

	)

68 
	#is•a˚
(
c
) \

69 ((
c
) == ' ' || (c) == '\t' || (c) == '\n' || \

70 (
c
Ë='\r' || (cË='\f' || c='\v')

	)

81 
	#ißscii
(
c
Ë((cË>0 && (cË<0x7f)

	)

91 
	#i•röt
(
c
Ë((cË>0x20 && (cË< 0x7f)

	)

101 
	#isgøph
(
c
Ë((cË> 0x20 && (cË< 0x7f)

	)

111 
	#is˙ål
(
c
Ë(!
	`i•röt
(c))

	)

121 
	#i¶owî
(
c
Ë((cË>'a' && (cË<'z')

	)

131 
	#isuµî
(
c
Ë((cË>'A' && (cË<'Z')

	)

141 
	#ißÕha
(
c
Ë(
	`i¶owî
(cË|| 
	`isuµî
(c))

	)

151 
	#isdigô
(
c
Ë((cË>'0' && (cË<'9')

	)

161 
	#iß um
(
c
Ë(
	`ißÕha
(cË|| 
	`isdigô
(c))

	)

172 
	#i•un˘
(
c
Ë(
	`isgøph
(cË&& !
	`iß um
(c))

	)

182 
	#isxdigô
(
c
) \

183 (((
c
) >= '0' && (c) <= '9') || \

184 ((
c
) >= 'a' && (c) <= 'f') || \

185 ((
c
Ë>'A' && (cË<'F'))

	)

195 
	#touµî
(
c
) \

196 (((
c
Ë>'a' && (cË<'z'Ë? ((cË- 'a' + 'A'Ë: (c))

	)

206 
	#tﬁowî
(
c
) \

207 (((
c
Ë>'A' && (cË<'Z'Ë? ((cË- 'A' + 'a'Ë: (c))

	)

	@include/libc/errno.h

30 #i‚de‡
__INCî∫oh


31 
	#__INCî∫oh


	)

33 #ifde‡
__˝lu•lus


37 
	#E2BIG
 1

	)

38 
	#EACCES
 2

	)

39 
	#EADDRINUSE
 3

	)

40 
	#EADDRNOTAVAIL
 4

	)

41 
	#EAFNOSUPPORT
 5

	)

42 
	#EAGAIN
 6

	)

43 
	#EALREADY
 7

	)

44 
	#EBADF
 8

	)

45 
	#EBADMSG
 9

	)

46 
	#EBUSY
 10

	)

47 
	#ECANCELED
 11

	)

48 
	#ECHILD
 12

	)

49 
	#ECONNABORTED
 13

	)

50 
	#ECONNREFUSED
 14

	)

51 
	#ECONNRESET
 15

	)

52 
	#EDEADLK
 16

	)

53 
	#EDESTADDRREQ
 17

	)

54 
	#EDOM
 18

	)

55 
	#EDQUOT
 19

	)

56 
	#EEXIST
 20

	)

57 
	#EFAULT
 21

	)

58 
	#EFBIG
 22

	)

59 
	#EHOSTUNREACH
 23

	)

60 
	#EIDRM
 24

	)

61 
	#EILSEQ
 25

	)

62 
	#EINPROGRESS
 26

	)

63 
	#EINTR
 27

	)

64 
	#EINVAL
 28

	)

65 
	#EIO
 29

	)

66 
	#EISCONN
 30

	)

67 
	#EISDIR
 31

	)

68 
	#ELOOP
 32

	)

69 
	#EMFILE
 33

	)

70 
	#EMLINK
 34

	)

71 
	#EMSGSIZE
 35

	)

72 
	#EMULTIHOP
 36

	)

73 
	#ENAMETOOLONG
 37

	)

74 
	#ENETDOWN
 38

	)

75 
	#ENETRESET
 39

	)

76 
	#ENETUNREACH
 40

	)

77 
	#ENFILE
 41

	)

78 
	#ENOBUFS
 42

	)

79 
	#ENODATA
 43

	)

80 
	#ENODEV
 44

	)

81 
	#ENOENT
 45

	)

82 
	#ENOEXEC
 46

	)

83 
	#ENOLCK
 47

	)

84 
	#ENOLINK
 48

	)

85 
	#ENOMEM
 49

	)

86 
	#ENOMSG
 50

	)

87 
	#ENOPROTOOPT
 51

	)

88 
	#ENOSPC
 52

	)

89 
	#ENOSR
 53

	)

90 
	#ENOSTR
 54

	)

91 
	#ENOSYS
 55

	)

92 
	#ENOTCONN
 56

	)

93 
	#ENOTDIR
 57

	)

94 
	#ENOTEMPTY
 58

	)

95 
	#ENOTRECOVERABLE
 59

	)

96 
	#ENOTSOCK
 60

	)

97 
	#ENOTSUP
 61

	)

98 
	#ENOTTY
 62

	)

99 
	#ENXIO
 63

	)

100 
	#EOPNOTSUPP
 64

	)

101 
	#EOVERFLOW
 65

	)

102 
	#EOWNERDEAD
 66

	)

103 
	#EPERM
 67

	)

104 
	#EPIPE
 68

	)

105 
	#EPROTO
 69

	)

106 
	#EPROTONOSUPPORT
 70

	)

107 
	#EPROTOTYPE
 71

	)

108 
	#ERANGE
 72

	)

109 
	#EROFS
 73

	)

110 
	#ESPIPE
 74

	)

111 
	#ESRCH
 75

	)

112 
	#ESTALE
 76

	)

113 
	#ETIME
 77

	)

114 
	#ETIMEDOUT
 78

	)

115 
	#ETXTBSY
 79

	)

116 
	#EWOULDBLOCK
 80

	)

117 
	#EXDEV
 81

	)

118 
	#ERRNO_MAX
 81

	)

120 
î∫oSë
();

122 
__î∫o
;

123 
	#î∫o
 
__î∫o


	)

125 #ifde‡
__˝lu•lus


	@include/libc/gpio.h

30 #i‚de‡
__INCgpioh__


31 
	#__INCgpioh__


	)

33 
	~<libc/°ddef.h
>

35 
	#GPIO_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0xF000)

	)

36 
	#GPDIR
 (
GPIO_BASE
 + 0xC00)

	)

37 
	#GPODR
 (
GPIO_BASE
 + 0xC04)

	)

38 
	#GPDAT
 (
GPIO_BASE
 + 0xC08)

	)

39 
	#GPIER
 (
GPIO_BASE
 + 0xC0C)

	)

40 
	#GPIMR
 (
GPIO_BASE
 + 0xC10)

	)

41 
	#GPICR
 (
GPIO_BASE
 + 0xC14)

	)

43 
	#GPIO_0
 0

	)

44 
	#GPIO_1
 1

	)

45 
	#GPIO_2
 2

	)

46 
	#GPIO_3
 3

	)

47 
	#GPIO_4
 4

	)

48 
	#GPIO_5
 5

	)

49 
	#GPIO_6
 6

	)

50 
	#GPIO_7
 7

	)

51 
	#GPIO_8
 8

	)

52 
	#GPIO_9
 9

	)

53 
	#GPIO_10
 10

	)

54 
	#GPIO_11
 11

	)

55 
	#GPIO_12
 12

	)

56 
	#GPIO_13
 13

	)

57 
	#GPIO_14
 14

	)

58 
	#GPIO_15
 15

	)

60 
	#GPIO_PIN_MAX
 15

	)

62 
	#GPIO_LOW
 0x00

	)

63 
	#GPIO_HIGH
 0x01

	)

65 
	#GPIO_REG_WRITE
(
ªgPå
,
vÆ
Ë(*((
VUINT32
 *)‘egPå)Ë(vÆ))

	)

66 
	#GPIO_REG_READ
(
ªgPå
,
ªs
Ë(‘esË*(
VUINT32
 *)‘egPå))

	)

68 
	#GPIO_CODE_REENTRANT


	)

70 #ifde‡
GPIO_CODE_REENTRANT


71 
	#GPIO_INTLOCK
(
key
)

	)

72 
	#GPIO_INTUNLOCK
(
key
)

	)

73 
	#GPIO_KEYDECLARE


	)

75 
	#GPIO_INTLOCK
(
key
Ë(key = 
	`ötLock
())

	)

76 
	#GPIO_INTUNLOCK
(
key
Ë(
	`ötU∆ock
(key))

	)

77 
	#GPIO_KEYDECLARE
 
ötKey


	)

82 
	#GPIO_OUT
 0x00008000

	)

83 
	#GIPO_OD
 0x00000001

	)

84 
	#GPIO_IN
 0x00000000

	)

85 
	#GPIO_INT
 0x80000000

	)

89 
	#GPIO_INT_FAIL_TRIG
 0x00010000

	)

90 
	#GPIO_INT_LEVEL_TRIG
 0x00020000

	)

92 #ifde‡
__˝lu•lus


97 #ifde‡
__˝lu•lus


	@include/libc/math.h

28 #i‚de‡
_OSKIT_C_MATH_H_


29 
	#_OSKIT_C_MATH_H_


	)

31 
	#M_E
 2.7182818284590452354

	)

32 
	#M_LOG2E
 1.4426950408889634074

	)

33 
	#M_LOG10E
 0.43429448190325182765

	)

34 
	#M_LN2
 0.69314718055994530942

	)

35 
	#M_LN10
 2.30258509299404568402

	)

36 
	#M_PI
 3.14159265358979323846

	)

37 
	#M_PI_2
 1.57079632679489661923

	)

38 
	#M_PI_4
 0.78539816339744830962

	)

39 
	#M_1_PI
 0.31830988618379067154

	)

40 
	#M_2_PI
 0.63661977236758134308

	)

41 
	#M_2_SQRTPI
 1.12837916709551257390

	)

42 
	#M_SQRT2
 1.41421356237309504880

	)

43 
	#M_SQRT1_2
 0.70710678118654752440

	)

45 
	#MAXFLOAT
 (()3.40282346638528860e+38)

	)

46 
	#HUGE_VAL
 1e500

	)

48 
signgam
;

50 
acos
(
x
);

51 
asö
(
x
);

52 
©™
(
x
);

53 
©™2
(
y
, 
x
);

54 
˚û
(
x
);

55 
cos
(
x
);

56 
cosh
(
x
);

57 
exp
(
x
);

58 
Ábs
(
x
);

59 
Êo‹
(
x
);

60 
fmod
(
x
, 
y
);

61 
‰exp
(
vÆue
, *
exp
);

62 
ldexp
(
vÆue
, 
exp
);

63 
log
(
x
);

64 
log10
(
x
);

65 
modf
(
vÆue
, *
ùå
);

66 
pow
(
x
, 
y
);

67 
sö
(
x
);

68 
söh
(
x
);

69 
sqπ
(
x
);

70 
èn
(
x
);

71 
ènh
(
x
);

73 
îf
(
x
);

74 
îfc
(
x
);

75 
gamma
(
x
);

76 
hypŸ
(
x
, 
y
);

77 
j0
(
x
);

78 
j1
(
x
);

79 
jn
(
n
, 
x
);

80 
lgamma
(
x
);

81 
y0
(
x
);

82 
y1
(
x
);

83 
yn
(
n
, 
x
);

84 
i¢™
(
x
);

86 
acosh
(
x
);

87 
asöh
(
x
);

88 
©™h
(
x
);

89 
cbπ
(
x
);

90 
expm1
(
x
);

91 
ûogb
(
x
);

92 
log1p
(
x
);

93 
logb
(
x
);

94 
√xè·î
(
x
, 
y
);

95 
ªmaödî
(
x
, 
y
);

96 
röt
(
l
);

97 
sˇlb
(
x
, 
n
);

	@include/libc/printk.h

30 
	~"°d¨g.h
"

31 
	~"˘y≥.h
"

33 #i‚de‡
_PRINTK_H


34 
	#_PRINTK_H


	)

37 
¥ötf
 (c⁄° *
fmt
, ...);

38 
°∫icmp
(c⁄° *
s1
, c⁄° *
s2
, 
Àn
);

39 
°æí
 (c⁄° * 
s
);

40 
skù_©oi
 (c⁄° **
s
);

41 sig√d 
°∫Àn
 (c⁄° * 
s
, sig√d 
cou¡
);

42 * 
numbî
 (* 
°r
, 
num
, 
ba£
, 
size
, 
¥ecisi⁄
 ,
ty≥
);

43 
v•rötf
 (*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

44 * 
°r˝y
(*
to
, c⁄° *
‰om
);

45 
•rötf
(* 
buf
,c⁄° *
fmt
,...);

47 
	#do_div
(
n
,
ba£
) ({ \

48 
_ªs
; \

49 
_ªs
 = ((Ë
n
Ë% (Ë
ba£
; \

50 
n
 = ((ËnË/ (Ë
ba£
; \

51 
_ªs
; \

52 })

	)

54 
	#ZEROPAD
 1

	)

55 
	#SIGN
 2

	)

56 
	#PLUS
 4

	)

57 
	#SPACE
 8

	)

58 
	#LEFT
 16

	)

59 
	#SPECIAL
 32

	)

60 
	#LARGE
 64

	)

61 
	#SMALL
 64

	)

63 #i‚de‡
NULL


64 
	#NULL
 ((*)0)

	)

67 
	#uöt
 

	)

70 
	#CFG_CBSIZE
 256

	)

71 
	#CFG_PBSIZE
 (
CFG_CBSIZE
 + (
CFG_PROMPT
Ë+ 16Ë

	)

72 
	#CFG_PROMPT
 "=>"

	)

	@include/libc/rand.h

28 #i‚de‡
_RAND_H__


29 
	#_RAND_H__


	)

31 
	töt32_t
;

32 #i‚de‡
NULL


33 
	#NULL
 0

	)

35 
	søndom_d©a
 {

36 
öt32_t
 *
	mÂå
;

37 
öt32_t
 *
	mΩå
;

38 
öt32_t
 *
	m°©e
;

39 
	mønd_ty≥
;

40 
	mønd_deg
;

41 
	mønd_£p
;

42 
öt32_t
 *
	míd_±r
;

46 
__øndom
 ();

47 
__øndom_r
 (
øndom_d©a
 *
__buf
, 
öt32_t
 *
__ªsu…
);

49 
ønd
();

	@include/libc/shell.h

30 #i‚de‡
__INCShñlh__


31 
	#__INCShñlh__


	)

33 #ifde‡
__˝lu•lus


37 
	sshñl_cmd
 {

38 c⁄° * 
«me
;

39 c⁄° * 
hñp
;

40 c⁄° * 
ußge
;

41 (*
h™dÀr
)(
¨gc
, * 
¨gv
[]);

44 
shñlCmdRegi°î
(c⁄° 
shñl_cmd
 * 
cmd
);

46 
u§Shñl
();

48 #ifde‡
__˝lu•lus


	@include/libc/stdarg.h

28 #i‚de‡
_STDARG_H


29 #i‚de‡
_ANSI_STDARG_H_


30 #i‚de‡
__√ed___va_li°


31 
	#_STDARG_H


	)

32 
	#_ANSI_STDARG_H_


	)

34 #unde‡
__√ed___va_li°


38 #i‚de‡
__GNUC_VA_LIST


39 
	#__GNUC_VA_LIST


	)

40 
__buûtö_va_li°
 
	t__gnuc_va_li°
;

45 #ifde‡
_STDARG_H


47 sig√d 
	ta˝i_«tive_öt
;

48 
	#va_°¨t
(
v
,
l
Ë
	`__buûtö_va_°¨t
(v,l)

	)

49 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

50 
	#va_¨g
(
v
,
l
Ë
	`__buûtö_va_¨g
(v,l)

	)

51 #i‡!
deföed
(
__STRICT_ANSI__
Ë|| 
__STDC_VERSION__
 + 0 >= 199900L

52 
	#va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

54 
	#__va_c›y
(
d
,
s
Ë
	`__buûtö_va_c›y
(d,s)

	)

63 #ifde‡
_HIDDEN_VA_LIST


64 #unde‡
_VA_LIST


67 #ifde‡
_BSD_VA_LIST


68 #unde‡
_BSD_VA_LIST


71 #i‡
deföed
(
__svr4__
Ë|| (deföed(
_SCO_DS
Ë&& !deföed(
__VA_LIST
))

76 #i‚de‡
_VA_LIST_


77 
	#_VA_LIST_


	)

78 #ifde‡
__i860__


79 #i‚de‡
_VA_LIST


80 
	#_VA_LIST
 
va_li°


	)

83 
__gnuc_va_li°
 
	tva_li°
;

84 #ifde‡
_SCO_DS


85 
	#__VA_LIST


	)

94 #i‡!
deföed
 (
_VA_LIST_
Ë|| deföed (
__BSD_NET2__
Ë|| deföed (
____386BSD____
Ë|| deföed (
__bsdi__
Ë|| deföed (
__£quít__
Ë|| deföed (
__FªeBSD__
Ë|| deföed(
WINNT
)

96 #i‚de‡
_VA_LIST_DEFINED


98 #i‚de‡
_VA_LIST


100 #i‚de‡
_VA_LIST_T_H


102 #i‚de‡
__va_li°__


103 
__gnuc_va_li°
 
	tva_li°
;

108 #i‡!(
deföed
 (
__BSD_NET2__
Ë|| deföed (
____386BSD____
Ë|| deföed (
__bsdi__
Ë|| deföed (
__£quít__
Ë|| deföed (
__FªeBSD__
))

109 
	#_VA_LIST_


	)

111 #i‚de‡
_VA_LIST


112 
	#_VA_LIST


	)

114 #i‚de‡
_VA_LIST_DEFINED


115 
	#_VA_LIST_DEFINED


	)

117 #i‚de‡
_VA_LIST_T_H


118 
	#_VA_LIST_T_H


	)

120 #i‚de‡
__va_li°__


121 
	#__va_li°__


	)

	@include/libc/stddef.h

30 #i‚de‡
__INCStddef_h__


31 
	#__INCStddef_h__


	)

33 
	~<libc/ˇgboŸ.h
>

35 #ifde‡
__˝lu∂us


39 #i‡
__STDC_VERSION__
 >= 199901L

42 
	#ª°ri˘


	)

45 #i‚de‡
NULL


46 #ifde‡
__˝lu•lus


47 
	#NULL
 0

	)

49 
	#NULL
 ((*)0)

	)

55 
	#CHAR_BIT
 8

	)

56 
	#MB_LEN_MAX
 32

	)

68 
	#SCHAR_MAX
 127

	)

69 
	#SCHAR_MIN
 (-128Ë

	)

71 
	#UCHAR_MAX
 255

	)

72 
	#CHAR_MAX
 127

	)

73 
	#CHAR_MIN
 (-128Ë

	)

75 
	#USHRT_MAX
 65535

	)

76 
	#SHRT_MAX
 32767

	)

77 
	#SHRT_MIN
 (-32768Ë

	)

79 
	#UINT_MAX
 0xffffffffU

	)

80 
	#INT_MAX
 2147483647

	)

81 
	#INT_MIN
 (-2147483647-1Ë

	)

83 
	#SSIZE_MAX
 
INT_MAX


	)

84 
	#SIZE_T_MAX
 
UINT_MAX


	)

86 
	#INT8_MIN
 (-0x7F - 1)

	)

87 
	#INT8_MAX
 0x7F

	)

88 
	#UINT8_MAX
 0xFF

	)

90 
	#INT16_MIN
 (-0x7FFF - 1)

	)

91 
	#INT16_MAX
 0x7FFF

	)

92 
	#UINT16_MAX
 0xFFFF

	)

94 
	#INT32_MIN
 (-0x7FFFFFFF - 1)

	)

95 
	#INT32_MAX
 0x7FFFFFFF

	)

96 
	#UINT32_MAX
 0xFFFFFFFFU

	)

98 
	#INT64_MIN
 (-0x7FFFFFFFFFFFFFFFLL - 1)

	)

99 
	#INT64_MAX
 0x7FFFFFFFFFFFFFFFLL

	)

100 
	#UINT64_MAX
 0xFFFFFFFFFFFFFFFFULL

	)

102 
	#INTPTR_MIN
 
INT32_MIN


	)

103 
	#INTPTR_MAX
 
INT32_MAX


	)

104 
	#UINTPTR_MAX
 
UINT32_MAX


	)

106 
	#PTRDIFF_MIN
 
INT32_MIN


	)

107 
	#PTRDIFF_MAX
 
INT32_MAX


	)

109 
	#SIG_ATOMIC_MIN
 
INT32_MIN


	)

110 
	#SIG_ATOMIC_MAX
 
INT32_MAX


	)

112 
	#SIZE_MAX
 
UINT32_MAX


	)

114 
	#ULONG_MAX
 
UINT32_MAX


	)

115 
	#LONG_MAX
 
INT32_MAX


	)

116 
	#LONG_MIN
 
INT32_MIN


	)

118 #ifde‡
__˝lu∂us


	@include/libc/stdio.h

30 #i‚de‡
__INC°dioh__


31 
	#__INC°dioh__


	)

33 
	~<libc/°ddef.h
>

35 #ifde‡
__˝lu•lus


39 
¥ötf
(c⁄° *
ª°ri˘
,...);

40 
puts
(const *);

42 #ifde‡
__˝lu•lus


	@include/libc/string.h

30 #i‚de‡
__INC°rögh


31 
	#__INC°rögh


	)

33 
	~<libc/°ddef.h
>

35 #ifde‡
__˝lu•lus


39 
	#EOS
 '\0'

	)

41 *
memc˝y
(*
ª°ri˘
, c⁄° *ª°ri˘, , 
size_t
);

42 *
memchr
(c⁄° *, , 
size_t
);

43 
memcmp
(c⁄° *, c⁄° *, 
size_t
);

44 *
mem˝y
(*
ª°ri˘
, c⁄° *ª°ri˘, 
size_t
);

45 *
memmove
(*, c⁄° *, 
size_t
);

46 *
mem£t
(*, , 
size_t
);

48 
°rcmp
(const *, const *);

49 *
°r˝y
(*
ª°ri˘
, const *restrict);

50 
size_t
 
°æí
(const *);

53 *
°≤˝y
(*
ª°ri˘
, c⁄° *ª°ri˘, 
size_t
);

54 *
°rˇt
(*
ª°ri˘
, const *restrict);

55 *
°rchr
(const *, );

56 *
°p˝y
(*
ª°ri˘
, const *restrict);

57 
°rcﬁl
(const *, const *);

58 
size_t
 
°rc•n
(const *, const *);

59 *
°rdup
(const *);

60 *
°ªº‹
();

61 
°ªº‹_r
(, *, 
size_t
);

63 *
°∫ˇt
(*
ª°ri˘
, c⁄° *ª°ri˘, 
size_t
);

64 
°∫cmp
(c⁄° *, c⁄° *, 
size_t
);

65 *
°∫˝y
(*
ª°ri˘
, c⁄° *ª°ri˘, 
size_t
);

66 *
°∫dup
(c⁄° *, 
size_t
);

67 
size_t
 
°∫Àn
(const *, size_t);

68 *
°Ωbrk
(const *, const *);

69 *
°ºchr
(const *, );

70 *
°rsig«l
();

71 
size_t
 
°r•n
(const *, const *);

72 *
°r°r
(const *, const *);

73 *
°πok
(*
ª°ri˘
, const *restrict);

74 *
°πok_r
(*
ª°ri˘
, const *restrict, **restrict);

75 
size_t
 
°rx‰m
(*
ª°ri˘
, const *restrict, size_t);

77 
bcmp
(c⁄° *, c⁄° * , 
size_t
);

78 
bövît
(*, 
size_t
);

79 
bsw≠
(*, * , 
size_t
);

80 
sw≠
(*, * , 
size_t
);

81 
usw≠
(*, * , 
size_t
);

82 
bzîo
(*, 
size_t
);

83 
bc›y
(c⁄° *, * , 
size_t
);

84 
bc›yByãs
(c⁄° *, * , 
size_t
);

85 
bc›yW‹ds
(c⁄° *, * , 
size_t
);

86 
bc›yL⁄gs
(c⁄° *, * , 
size_t
);

87 
bfûl
(*, 
size_t
 , );

88 
bfûlByãs
(*, 
size_t
 , );

89 *
ödex
(const *, );

90 *
rödex
(const *, );

92 #ifde‡
__˝lu•lus


	@include/libc/system.h

30 #i‚de‡
__INCsy°emh__


31 
	#__INCsy°emh__


	)

33 #ifde‡
__˝lu•lus


37 #i‚de‡
_ASMLANGUAGE


38 
	tuch¨_t
;

39 
	tul⁄g_t
;

40 
	#FAST
 

	)

41 
	#IMPORT
 

	)

43 
	#OFFSET
(
°ru˘uª
, 
membî
) \

44 ((Ë&(((
°ru˘uª
 *Ë0Ë-> 
membî
))

	)

46 
	#MEMBER_SIZE
(
°ru˘uª
, 
membî
) \

47 ( (((
°ru˘uª
 *Ë0Ë-> 
membî
))

	)

49 
	#NELEMENTS
(
¨øy
) \

50 ( (
¨øy
Ë/  (◊ºayË[0]))

	)

52 
	#FOREVER
 ;;)

	)

54 
	#CHAR_FROM_CONST
(
x
Ë(*)(x)

	)

55 
	#VOID_FROM_CONST
(
x
Ë(*)(x)

	)

57 #i‡!
deföed
(
__˝lu•lus
)

59 #i‚de‡
max


60 
	#max
(
x
, 
y
Ë(((xË< (y)Ë? (yË: (x))

	)

63 #i‚de‡
mö


64 
	#mö
(
x
, 
y
Ë(((xË< (y)Ë? (xË: (y))

	)

71 #ifde‡
__˝lu•lus


	@include/p1020rdb.h

35 #i‚de‡
__INCp1020rdbh


36 
	#__INCp1020rdbh


	)

38 
	~<libc/ˇgboŸ.h
>

40 #ifde‡
__˝lu•lus


44 
	#P1020RDB_PC_REVB


	)

48 
	#CCSBAR_RESET
 0xff700000

	)

49 
	#CCSR_SIZE
 0x00100000

	)

51 
	#MP_MAGIC_RBV
 0x„ed„ed

	)

52 
	#MP_MAGIC_CACHE_FLUSHED
 0xD07ED07E

	)

54 
	#M85XX_ALTCBAR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x08))

	)

55 
	#M85XX_ALTCAR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x10))

	)

56 
	#M85XX_BPTR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x20))

	)

58 
	#BPTR_EN
 0x80000000

	)

70 
	#RBV_ADRS
 (
RAM_LOW_ADRS
 - 16)

	)

78 #ifde‡ 
_ASMLANGUAGE


79 
	#OFF_RBV_STARTTYPE
 0

	)

80 
	#OFF_RBV_MAGIC1
 4

	)

81 
	#OFF_RBV_MAGIC2
 8

	)

82 
	#OFF_RBV_MAGIC3
 12

	)

84 #ifde‡
_CAG_CONFIG_SMP


85 
	sªboŸVec
 {

86 
°¨tTy≥
;

87 
VUINT32
 
magic1
;

88 
VUINT32
 
magic2
;

89 
VUINT32
 
magic3
;

94 
	#CPU1CHECK
 (
	`sysHid1Gë
(Ë& 0x1)

	)

98 
	#PPC_PVR_85XX
 0x80200000

	)

99 
	#PPC_PVR_MASK
 0xFFF00000

	)

101 
	#PPC_SVR_P2020
 0x80E00000

	)

102 
	#PPC_SVR_MASK
 0xFFF00000

	)

106 
	#FREQ_33_MHZ
 33333300

	)

107 
	#FREQ_66_MHZ
 66666600

	)

108 
	#FREQ_50_MHZ
 50000000

	)

109 
	#FREQ_100_MHZ
 100000000

	)

110 
	#FREQ_400_MHZ
 400000000

	)

111 
	#FREQ_500_MHZ
 500000000

	)

113 
	#DEFAULT_SYS_CLK_FREQ
 
FREQ_100_MHZ


	)

114 
	#DDR_CLK_FREQ
 
FREQ_33_MHZ


	)

116 
	#DEFAULT_SYSCLKFREQ
 
FREQ_500_MHZ


	)

118 
	#PLAT_RATIO_800_MHZ
 20

	)

119 
	#PLAT_RATIO_533_MHZ
 16

	)

120 
	#PLAT_RATIO_400_MHZ
 12

	)

121 
	#PLAT_RATIO_333_MHZ
 8

	)

125 
	#SYS_CLK_RATE_MIN
 1

	)

126 
	#SYS_CLK_RATE_MAX
 8000

	)

127 
	#FIT_CLK_RATE_MIN
 (
FREQ_400_MHZ
 / (1 << 24))

	)

128 
	#FIT_CLK_RATE_MAX
 (
FREQ_400_MHZ
 / (1 << 13))

	)

129 
	#AUX_CLK_RATE_MIN
 1

	)

130 
	#AUX_CLK_RATE_MAX
 50000

	)

131 
	#AUX_CLK_RATE
 20000

	)

135 
	#HPCN_RTC_FREQ
 14318000

	)

139 #unde‡
INCLUDE_DDR_ECC


143 
	#LOCAL2PCI_MEMIO
(
x
Ë(()(xË+ 
PCI_MSTR_MEM_BUS
)

	)

145 
	#ETHERNET_MAC_HANDLER


	)

147 
	#WR_ENET0
 0x00

	)

148 
	#WR_ENET1
 0xA0

	)

149 
	#WR_ENET2
 0x1E

	)

151 
	#CUST_ENET3_0
 0xA0

	)

152 
	#CUST_ENET3_1
 0xA1

	)

153 
	#CUST_ENET3_2
 0xA2

	)

154 
	#CUST_ENET3_3
 0xA3

	)

155 
	#CUST_ENET4
 0xAA

	)

156 
	#CUST_ENET5
 0xA0

	)

158 
	#MAX_MAC_ADRS
 3

	)

159 
	#MAC_ADRS_LEN
 6

	)

160 
	#NV_MAC_ADRS_OFFSET
 0x200

	)

164 
	#OPENPIC_TIMERA0_INT_VEC
 0x4C

	)

165 
	#OPENPIC_TIMERA1_INT_VEC
 0x4D

	)

166 
	#OPENPIC_TIMERA2_INT_VEC
 0x4E

	)

167 
	#OPENPIC_TIMERA3_INT_VEC
 0x4F

	)

168 
	#OPENPIC_TIMERB0_INT_VEC
 0x50

	)

169 
	#OPENPIC_TIMERB1_INT_VEC
 0x51

	)

170 
	#OPENPIC_TIMERB2_INT_VEC
 0x52

	)

171 
	#OPENPIC_TIMERB3_INT_VEC
 0x53

	)

199 
	#M85XX_LAWBAR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc08))

	)

200 
	#M85XX_LAWAR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc10))

	)

204 
	#M85XX_LAWBAR1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc28))

	)

205 
	#M85XX_LAWAR1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc30))

	)

209 
	#M85XX_LAWBAR2
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc48))

	)

210 
	#M85XX_LAWAR2
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc50))

	)

214 
	#M85XX_LAWBAR3
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc68))

	)

215 
	#M85XX_LAWAR3
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc70))

	)

219 
	#M85XX_LAWBAR4
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc88))

	)

220 
	#M85XX_LAWAR4
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xc90))

	)

224 
	#M85XX_LAWBAR5
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xˇ8))

	)

225 
	#M85XX_LAWAR5
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xcb0))

	)

229 
	#M85XX_LAWBAR6
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xcc8))

	)

230 
	#M85XX_LAWAR6
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xcd0))

	)

234 
	#M85XX_LAWBAR7
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x˚8))

	)

235 
	#M85XX_LAWAR7
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xcf0))

	)

239 
	#M85XX_LAWBAR8
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd08))

	)

240 
	#M85XX_LAWAR8
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd10))

	)

244 
	#M85XX_LAWBAR9
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd28))

	)

245 
	#M85XX_LAWAR9
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd30))

	)

250 
	#M85XX_LAWBAR10
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd48))

	)

251 
	#M85XX_LAWAR10
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd50))

	)

255 
	#M85XX_LAWBAR11
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd68))

	)

256 
	#M85XX_LAWAR11
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xd70))

	)

258 
	#LAWBAR_ADRS_SHIFT
 12

	)

259 
	#LAWAR_ENABLE
 0x80000000

	)

260 
	#LAWAR_TGTIF_PCIEX3
 0x00000000

	)

261 
	#LAWAR_TGTIF_PCIEX2
 0x00100000

	)

262 
	#LAWAR_TGTIF_PCIEX1
 0x00200000

	)

263 
	#LAWAR_TGTIF_LBC
 0x00400000

	)

264 
	#LAWAR_TGTIF_RAPIDIO
 0x00C00000

	)

265 
	#LAWAR_TGTIF_RAPIDIO2
 0x00D00000

	)

266 
	#LAWAR_TGTIF_DDRSDRAM
 0x00F00000

	)

270 
	#LAWAR_SIZE_4KB
 0x0000000B

	)

271 
	#LAWAR_SIZE_8KB
 0x0000000C

	)

272 
	#LAWAR_SIZE_16KB
 0x0000000D

	)

273 
	#LAWAR_SIZE_32KB
 0x0000000E

	)

274 
	#LAWAR_SIZE_64KB
 0x0000000F

	)

275 
	#LAWAR_SIZE_128KB
 0x00000010

	)

276 
	#LAWAR_SIZE_256KB
 0x00000011

	)

277 
	#LAWAR_SIZE_512KB
 0x00000012

	)

278 
	#LAWAR_SIZE_1MB
 0x00000013

	)

279 
	#LAWAR_SIZE_2MB
 0x00000014

	)

280 
	#LAWAR_SIZE_4MB
 0x00000015

	)

281 
	#LAWAR_SIZE_8MB
 0x00000016

	)

282 
	#LAWAR_SIZE_16MB
 0x00000017

	)

283 
	#LAWAR_SIZE_32MB
 0x00000018

	)

284 
	#LAWAR_SIZE_64MB
 0x00000019

	)

285 
	#LAWAR_SIZE_128MB
 0x0000001A

	)

286 
	#LAWAR_SIZE_256MB
 0x0000001B

	)

287 
	#LAWAR_SIZE_512MB
 0x0000001C

	)

288 
	#LAWAR_SIZE_1GB
 0x0000001D

	)

289 
	#LAWAR_SIZE_2GB
 0x0000001E

	)

341 
	#M85XX_BR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5000))

	)

342 
	#M85XX_OR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5004))

	)

343 
	#M85XX_BR1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5008))

	)

344 
	#M85XX_OR1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x500c))

	)

345 
	#M85XX_BR2
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5010))

	)

346 
	#M85XX_OR2
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5014))

	)

347 
	#M85XX_BR3
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5018))

	)

348 
	#M85XX_OR3
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x501c))

	)

349 
	#M85XX_BR4
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5020))

	)

350 
	#M85XX_OR4
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5024))

	)

351 
	#M85XX_BR5
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5028))

	)

352 
	#M85XX_OR5
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x502C))

	)

353 
	#M85XX_BR6
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5030))

	)

354 
	#M85XX_OR6
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5034))

	)

355 
	#M85XX_BR7
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5038))

	)

356 
	#M85XX_OR7
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x503C))

	)

357 
	#M85XX_MAR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5068))

	)

358 
	#M85XX_MAMR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5070))

	)

359 
	#M85XX_MBMR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5074))

	)

360 
	#M85XX_MCMR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5078))

	)

361 
	#M85XX_MRTPR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5084))

	)

362 
	#M85XX_MDR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5088))

	)

363 
	#M85XX_LSDMR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x5094))

	)

364 
	#M85XX_LBCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50D0))

	)

365 
	#M85XX_LCRR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50D4))

	)

367 
	#MRTPR_PTP_MASK
 0xff000000

	)

368 
	#MRTPR_PTP_WRITE
(
x
Ë((x << 24Ë& 
MRTPR_PTP_MASK
)

	)

369 
	#LSDMR_RFEN
 0x40000000

	)

376 
	#BPTR_BOOT_PAGE_SHIFT
 12

	)

389 
	#LSDMR_OP_MASK
 0x38000000

	)

390 
	#LSDMR_OP_SHIFT
(
x
Ë((x << 27Ë& 
LSDMR_OP_MASK
)

	)

403 
	#LSDMR_BSMA_MASK
 0x00E00000

	)

404 
	#LSDMR_BSMA_SHIFT
(
x
Ë((x << 23Ë& 
LSDMR_BSMA_MASK
)

	)

412 
	#LSDMR_RFCR_MASK
 0x00038000

	)

413 
	#LSDMR_RFCR_SHIFT
(
x
Ë((x << 15Ë& 
LSDMR_RFCR_MASK
)

	)

415 
	#M85XX_UART_THR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x4500))

	)

419 
	#M85XX_LURT
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50A0))

	)

420 
	#M85XX_LSRT
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50A4))

	)

421 
	#M85XX_LTESR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50B0))

	)

422 
	#M85XX_LTEDR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50B4))

	)

423 
	#M85XX_LTEIR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50B8))

	)

424 
	#M85XX_LTEATR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50BC))

	)

425 
	#M85XX_LTEAR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x50C0))

	)

427 
	#M85XX_DCR0
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xe0f1c))

	)

428 
	#M85XX_DCR1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xe0f20))

	)

430 
	#CPU1CHECK
 (
	`sysHid1Gë
(Ë& 0x1)

	)

434 
	#ECM_OFFSET
 0x1000

	)

435 
	#ECMBA
 (
_CAG_CONFIG_CCSBAR
 + 
ECM_OFFSET
)

	)

437 
	#EEB_ABCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0x0))

	)

438 
	#EEB_DBCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0x8))

	)

439 
	#EEB_PCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0x10))

	)

440 
	#EEB_REV1
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xBF8))

	)

441 
	#EEB_REV2
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xBFC))

	)

442 
	#EEB_EDR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xE00))

	)

443 
	#EEB_EER
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xE08))

	)

444 
	#EEB_EATR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xE0C))

	)

445 
	#EEB_ELADR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xE10))

	)

446 
	#EEB_EHADR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 
ECM_OFFSET
 + 0xE14))

	)

448 
	#EEB_PCR_CORE1_ENABLE
 0x02000000

	)

449 
	#EEB_PCR_CORE0_ENABLE
 0x01000000

	)

453 
	#DDR_OFFSET
 0x2000

	)

454 
	#DDRBA
 (
_CAG_CONFIG_CCSBAR
 | 
DDR_OFFSET
)

	)

456 
	#CS0_BNDS
 0x000

	)

457 
	#CS1_BNDS
 0x008

	)

458 
	#CS2_BNDS
 0x010

	)

459 
	#CS3_BNDS
 0x018

	)

460 
	#CS0_CONFIG
 0x080

	)

461 
	#CS1_CONFIG
 0x084

	)

462 
	#CS2_CONFIG
 0x088

	)

463 
	#CS3_CONFIG
 0x08C

	)

464 
	#CS0_CONFIG_2
 0x0c0

	)

465 
	#CS1_CONFIG_2
 0x0c4

	)

466 
	#CS2_CONFIG_2
 0x0c8

	)

467 
	#CS3_CONFIG_2
 0x0CC

	)

468 
	#TIMING_CFG_3
 0x100

	)

469 
	#TIMING_CFG_0
 0x104

	)

470 
	#TIMING_CFG_1
 0x108

	)

471 
	#TIMING_CFG_2
 0x10C

	)

472 
	#DDR_SDRAM_CFG
 0x110

	)

473 
	#DDR_SDRAM_CFG_2
 0x114

	)

474 
	#DDR_SDRAM_MODE_CFG
 0x118

	)

475 
	#DDR_SDRAM_MODE_CFG_2
 0x11c

	)

476 
	#DDR_SDRAM_MD_CNTL
 0x120

	)

477 
	#DDR_SDRAM_INTERVAL
 0x124

	)

478 
	#DDR_DATA_INIT
 0x128

	)

479 
	#DDR_SDRAM_CLK_CTRL
 0x130

	)

480 
	#DDR_INIT_ADDR
 0x148

	)

481 
	#DDR_INIT_EXT_ADDRESS
 0x14C

	)

482 
	#TIMING_CFG_4
 0x160

	)

483 
	#TIMING_CFG_5
 0x164

	)

484 
	#DDR_DDR_ZQ_CNTL
 0x170

	)

485 
	#DDR_DDR_WRLVL_CNTL
 0x174

	)

486 
	#DDR_DDRDSR_1
 0xB20

	)

487 
	#DDR_DDRDSR_2
 0xB24

	)

488 
	#DDR_DDRCDR_1
 0xB28

	)

489 
	#DDR_DDRCDR_2
 0xB2C

	)

490 
	#DDR_DDR_IP_REV1
 0xBF8

	)

491 
	#DDR_DDR_IP_REV2
 0xBFC

	)

492 
	#DATA_ERR_INJECT_HI
 0xE00

	)

493 
	#DATA_ERR_INJECT_LO
 0xE04

	)

494 
	#ECC_ERR_INJECT
 0xE08

	)

495 
	#CAPTURE_DATA_HI
 0xE20

	)

496 
	#CAPTURE_DATA_LO
 0xE24

	)

497 
	#CAPTURE_ECC
 0xE28

	)

498 
	#ERR_DETECT
 0xE40

	)

499 
	#ERR_DISABLE
 0xE44

	)

500 
	#ERR_INT_EN
 0xE48

	)

501 
	#CAPTURE_ATTRIBUTES
 0xE4c

	)

502 
	#CAPTURE_ADDRESS
 0xE50

	)

503 
	#ERR_SBE
 0xE58

	)

505 
	#DDR_IO_OVCR
 0x000E0F24

	)

509 
	#UART0_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x4500)

	)

510 
	#UART1_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x4600)

	)

511 
	#DUART_REG_ADDR_INTERVAL
 1

	)

515 
	#VSC7385_BASE
 0xf1000000

	)

516 
	#VSC7385_SIZE
 0x00020000

	)

520 
	#NAND_BUFFER_BASE
 0xf0000000

	)

521 
	#NAND_BUFFER_SIZE
 0x00080000

	)

522 
	#NAND_PAGE_SIZE
 512

	)

523 
	#NAND_BLOCK_SIZE
 (16 * 1024)

	)

524 
	#NAND_PAGE_PER_BLOCK
 32

	)

525 
	#NAND_BANK
 1

	)

529 
	#PCIEX1_REGBASE
 (
_CAG_CONFIG_CCSBAR
 + 0xa000Ë

	)

530 
	#PCIEX2_REGBASE
 (
_CAG_CONFIG_CCSBAR
 + 0x9000Ë

	)

534 
	#PCIEX2_XINT1_LVL
 4

	)

535 
	#PCIEX2_XINT2_LVL
 5

	)

536 
	#PCIEX2_XINT3_LVL
 6

	)

537 
	#PCIEX2_XINT4_LVL
 7

	)

541 
	#NUM_PCIEX2_SLOTS
 0x1

	)

543 
	#PCI_LAT_TIMER
 0x40

	)

547 
	#PCIEX2_LAW_BASE
 0x90000000

	)

548 
	#PCIEX2_LAW_SIZE
 0x10000000

	)

549 
	#PCIEX2_MEM_SIZE
 0x04000000

	)

550 
	#PCIEX2_MEMIO_SIZE
 0x04000000

	)

551 
	#PCIEX2_IO_SIZE
 0x04000000

	)

552 
	#PCIEX2_MEM_ADRS
 (
PCIEX2_LAW_BASE
)

	)

553 
	#PCIEX2_MEMIO_ADRS
 (
PCIEX2_MEM_ADRS
 + 
PCIEX2_MEM_SIZE
)

	)

554 
	#PCIEX2_IO_ADRS
 (
PCIEX2_MEMIO_ADRS
 + 
PCIEX2_MEMIO_SIZE
)

	)

556 
	#PCI_MMU_TLB_SZ
 
_MMU_TLB_SZ_256M


	)

560 
	#PCI_MSTR_MEM_BUS
 
LOCAL_MEM_LOCAL_ADRS


	)

561 
	#PCI_BRIDGE_PIMMR_BASE_ADRS
 0xc0000000

	)

567 
	#PCI_WINDOW_ENABLE_BIT
 0x80000000

	)

568 
	#PCI_SNOOP_ENABLE
 0x40000000

	)

569 
	#PCI_PREFETCHABLE
 0x20000000

	)

573 
	#PCI_OUT_ATTR_RTT_MEM
 0x00040000

	)

574 
	#PCI_OUT_ATTR_RTT_IO
 0x00080000

	)

575 
	#PCI_OUT_ATTR_WTT_MEM
 0x00004000

	)

576 
	#PCI_OUT_ATTR_WTT_IO
 0x00008000

	)

578 
	#PCI_ATTR_WS_4K
 0x0000000B

	)

579 
	#PCI_ATTR_WS_8K
 0x0000000C

	)

580 
	#PCI_ATTR_WS_16K
 0x0000000D

	)

581 
	#PCI_ATTR_WS_32K
 0x0000000E

	)

582 
	#PCI_ATTR_WS_64K
 0x0000000F

	)

583 
	#PCI_ATTR_WS_128K
 0x00000010

	)

584 
	#PCI_ATTR_WS_256K
 0x00000011

	)

585 
	#PCI_ATTR_WS_512K
 0x00000012

	)

586 
	#PCI_ATTR_WS_1M
 0x00000013

	)

587 
	#PCI_ATTR_WS_2M
 0x00000014

	)

588 
	#PCI_ATTR_WS_4M
 0x00000015

	)

589 
	#PCI_ATTR_WS_8M
 0x00000016

	)

590 
	#PCI_ATTR_WS_16M
 0x00000017

	)

591 
	#PCI_ATTR_WS_32M
 0x00000018

	)

592 
	#PCI_ATTR_WS_64M
 0x00000019

	)

593 
	#PCI_ATTR_WS_128M
 0x0000001A

	)

594 
	#PCI_ATTR_WS_256M
 0x0000001B

	)

595 
	#PCI_ATTR_WS_512M
 0x0000001C

	)

596 
	#PCI_ATTR_WS_1G
 0x0000001D

	)

597 
	#PCI_ATTR_WS_2G
 0x0000001E

	)

598 
	#PCI_ATTR_WS_4G
 0x0000001F

	)

599 
	#PCI_ATTR_WS_8G
 0x00000020

	)

600 
	#PCI_ATTR_WS_16G
 0x00000021

	)

601 
	#PCI_ATTR_WS_32G
 0x00000022

	)

602 
	#PCI_ATTR_WS_64G
 0x00000023

	)

606 
	#PCI_IN_ATTR_TGI_LM
 0x00f00000

	)

607 
	#PCI_IN_ATTR_RTT_LM_READ_NO_SNOOP
 0x00040000

	)

608 
	#PCI_IN_ATTR_RTT_LM_READ_SNOOP
 0x00050000

	)

609 
	#PCI_IN_ATTR_RTT_LM_READ_UNLOCK_L2_CACHE_LINE
 0x00070000

	)

610 
	#PCI_IN_ATTR_RTT_LM_WRITE_NO_SNOOP
 0x00004000

	)

611 
	#PCI_IN_ATTR_RTT_LM_WRITE_SNOOP
 0x00005000

	)

612 
	#PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_L2_CACHE_LINE
 0x00006000

	)

613 
	#PCI_IN_ATTR_RTT_LM_WRITE_ALLOC_LOCK_L2_CACHE_LINE
 0x00007000

	)

617 
	#USB1_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x22000)

	)

618 
	#USB2_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x23000)

	)

622 
	#EHCI_CAPLENGTH
(
ba£
Ë((ba£Ë+ 0x00100)

	)

624 
	#EHCI_BURSTSIZE
(
ba£
Ë((ba£Ë+ 0x00160)

	)

625 
	#EHCI_TXTTFILLTUNING_L
(
ba£
Ë((ba£Ë+ 0x00164)

	)

626 
	#EHCI_TXTTFILLTUNING_H
(
ba£
Ë((ba£Ë+ 0x00168)

	)

627 
	#EHCI_CONFIGFLAG
(
ba£
Ë((ba£Ë+ 0x00180)

	)

628 
	#EHCI_PORTSC
(
ba£
Ë((ba£Ë+ 0x00184)

	)

629 
	#EHCI_USBMODE
(
ba£
Ë((ba£Ë+ 0x001a8)

	)

631 
	#EHCI_SNOOP1
(
ba£
Ë((ba£Ë+ 0x00400)

	)

632 
	#EHCI_SNOOP2
(
ba£
Ë((ba£Ë+ 0x00404)

	)

633 
	#EHCI_AGE_CNT_THRESH
(
ba£
Ë((ba£Ë+ 0x00408)

	)

634 
	#EHCI_PRI_CTRL
(
ba£
Ë((ba£Ë+ 0x0040c)

	)

635 
	#EHCI_SI_CTRL
(
ba£
Ë((ba£Ë+ 0x00410)

	)

636 
	#EHCI_CONTROL
(
ba£
Ë((ba£Ë+ 0x00500)

	)

638 
	#EHCI_USBMODE_IDLE
 0x00000000

	)

639 
	#EHCI_USBMODE_DEVICE
 0x00000002

	)

640 
	#EHCI_USBMODE_HOST
 0x00000003

	)

642 
	#EHCI_PORTSC_ULPI
 0x80000000

	)

644 
	#EHCI_SNOOP_SIZE_4K
 0x0000000B

	)

645 
	#EHCI_SNOOP_SIZE_8K
 0x0000000C

	)

646 
	#EHCI_SNOOP_SIZE_16K
 0x0000000D

	)

647 
	#EHCI_SNOOP_SIZE_32K
 0x0000000E

	)

648 
	#EHCI_SNOOP_SIZE_64K
 0x0000000F

	)

649 
	#EHCI_SNOOP_SIZE_128K
 0x00000010

	)

650 
	#EHCI_SNOOP_SIZE_256K
 0x00000011

	)

651 
	#EHCI_SNOOP_SIZE_512K
 0x00000012

	)

652 
	#EHCI_SNOOP_SIZE_1M
 0x00000013

	)

653 
	#EHCI_SNOOP_SIZE_2M
 0x00000014

	)

654 
	#EHCI_SNOOP_SIZE_4M
 0x00000015

	)

655 
	#EHCI_SNOOP_SIZE_8M
 0x00000016

	)

656 
	#EHCI_SNOOP_SIZE_16M
 0x00000017

	)

657 
	#EHCI_SNOOP_SIZE_32M
 0x00000018

	)

658 
	#EHCI_SNOOP_SIZE_64M
 0x00000019

	)

659 
	#EHCI_SNOOP_SIZE_128M
 0x0000001A

	)

660 
	#EHCI_SNOOP_SIZE_256M
 0x0000001B

	)

661 
	#EHCI_SNOOP_SIZE_512M
 0x0000001C

	)

662 
	#EHCI_SNOOP_SIZE_1G
 0x0000001D

	)

663 
	#EHCI_SNOOP_SIZE_2G
 0x0000001E

	)

665 #ifde‡
INCLUDE_AMP


666 
	#EHCI_SNOOP_SIZE
 
EHCI_SNOOP_SIZE_256M


	)

668 
	#EHCI_SNOOP_SIZE
 
EHCI_SNOOP_SIZE_512M


	)

671 
	#EHCI_CONTROL_USB_EN
 0x00000004

	)

675 
	#PIC_OFFSET
 0x40000

	)

676 
	#PCIBA
 (
_CAG_CONFIG_CCSBAR
 | 
PIC_OFFSET
)

	)

680 
	#DMA1_REGBASE
 (
_CAG_CONFIG_CCSBAR
 + 0x21000)

	)

682 
	#DMA_CHAN_OFFSET
 0x80

	)

683 
	#DMA_CHAN_NUM
 4

	)

691 
	#M85XX_PORPLLSR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE0000))

	)

693 
	#M85XX_PORPLLSR_E500_1_RATIO_MASK
 0x3f000000

	)

694 
	#M85XX_PORPLLSR_E500_RATIO_MASK
 0x003f0000

	)

695 
	#M85XX_PORPLLSR_DDR_RATIO_MASK
 0x00003e00

	)

696 
	#M85XX_PORPLLSR_PLAT_RATIO_MASK
 0x0000003e

	)

697 
	#M85XX_PORPLLSR_E500_RATIO
(
ba£
Ë((*
	`M85XX_PORPLLSR
(ba£Ë& 
M85XX_PORPLLSR_E500_RATIO_MASK
Ë>> 16)

	)

698 
	#M85XX_PORPLLSR_E500_1_RATIO
(
ba£
Ë((*
	`M85XX_PORPLLSR
(ba£Ë& 
M85XX_PORPLLSR_E500_1_RATIO_MASK
Ë>> 24)

	)

699 
	#M85XX_PORPLLSR_DDR_RATIO
(
ba£
Ë((*
	`M85XX_PORPLLSR
(ba£Ë& 
M85XX_PORPLLSR_DDR_RATIO_MASK
Ë>> 9)

	)

700 
	#M85XX_PORPLLSR_PLAT_RATIO
(
ba£
Ë((*
	`M85XX_PORPLLSR
(ba£Ë& 
M85XX_PORPLLSR_PLAT_RATIO_MASK
Ë>> 1)

	)

702 
	#M85XX_DDRDLLCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE0E10))

	)

703 
	#M85XX_LBCDLLSR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE0E20))

	)

705 
	#M85XX_DEVDISR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE0070))

	)

706 
	#M85XX_DEVDISR_PCIE1
 0x20000000

	)

707 
	#M85XX_DEVDISR_LBC
 0x08000000

	)

708 
	#M85XX_DEVDISR_PCIE2
 0x04000000

	)

709 
	#M85XX_DEVDISR_PCIE3
 0x02000000

	)

710 
	#M85XX_DEVDISR_SEC
 0x01000000

	)

711 
	#M85XX_DEVDISR_PME
 0x00800000

	)

712 
	#M85XX_DEVDISR_TLU1
 0x00400000

	)

713 
	#M85XX_DEVDISR_TLU2
 0x00200000

	)

714 
	#M85XX_DEVDISR_SRIO
 0x00080000

	)

715 
	#M85XX_DEVDISR_D2
 0x00020000

	)

716 
	#M85XX_DEVDISR_D1
 0x00010000

	)

717 
	#M85XX_DEVDISR_TB0
 0x00004000

	)

718 
	#M85XX_DEVDISR_E500_CORE0
 0x00008000

	)

719 
	#M85XX_DEVDISR_E500_CORE1
 0x00002000

	)

720 
	#M85XX_DEVDISR_TB1
 0x00001000

	)

721 
	#M85XX_DEVDISR_DMA1
 0x00000400

	)

722 
	#M85XX_DEVDISR_DMA2
 0x00000200

	)

723 
	#M85XX_DEVDISR_TSEC1
 0x00000080

	)

724 
	#M85XX_DEVDISR_TSEC2
 0x00000040

	)

725 
	#M85XX_DEVDISR_TSEC3
 0x00000020

	)

726 
	#M85XX_DEVDISR_TSEC4
 0x00000010

	)

727 
	#M85XX_DEVDISR_FEC
 0x00000008

	)

728 
	#M85XX_DEVDISR_I2C
 0x00000004

	)

729 
	#M85XX_DEVDISR_DUART
 0x00000002

	)

731 
	#M85XX_POWMGTCSR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE0080))

	)

732 
	#M85XX_POWMGTCSR_CORE0_IRQ_MSK
 0x80000000

	)

733 
	#M85XX_POWMGTCSR_CORE0_CI_MSK
 0x40000000

	)

734 
	#M85XX_POWMGTCSR_CORE1_IRQ_MSK
 0x20000000

	)

735 
	#M85XX_POWMGTCSR_CORE1_CI_MSK
 0x10000000

	)

736 
	#M85XX_POWMGTCSR_CORE0_DOZ
 0x00080000

	)

737 
	#M85XX_POWMGTCSR_CORE1_DOZ
 0x00040000

	)

738 
	#M85XX_POWMGTCSR_SLP
 0x00020000

	)

739 
	#M85XX_POWMGTCSR_CORE1_DOZING
 0x00000020

	)

740 
	#M85XX_POWMGTCSR_CORE1_NAPPING
 0x00000010

	)

741 
	#M85XX_POWMGTCSR_CORE0_DOZING
 0x00000008

	)

742 
	#M85XX_POWMGTCSR_CORE0_NAPPING
 0x00000004

	)

743 
	#M85XX_POWMGTCSR_SLPING
 0x00000002

	)

747 
	#M85XX_EPICPIR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0x41090))

	)

751 
	#M85XX_AUTORSTSR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xe009c))

	)

752 
	#READY_P1
 (0x01 << 14)

	)

754 
	#M85XX_EPICPIR_HRST_CORE0
 0x00000001

	)

755 
	#M85XX_EPICPIR_HRST_CORE1
 0x00000002

	)

757 
	#M85XX_PVR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE00A0))

	)

758 
	#M85XX_SVR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE00A4))

	)

760 
	#M85XX_RSTCR
(
ba£
Ë(
	`CAST
(
VUINT32
 *)((ba£Ë+ 0xE00B0))

	)

762 
	#_PPC_BUCSR_FI
 0x200

	)

763 
	#_PPC_BUCSR_E
 0x1

	)

767 
	#EPIC_EX_IRQ_NUM
 12

	)

768 
	#EPIC_IN_IRQ_NUM
 64

	)

769 
	#EPIC_GT_IRQ_NUM
 4

	)

770 
	#EPIC_MSG_IRQ_NUM
 8

	)

771 
	#EPIC_SMSG_IRQ_NUM
 8

	)

772 
	#EPIC_IPI_IRQ_NUM
 4

	)

773 
	#EPIC_EX_REG_BASE
 0x50000

	)

774 
	#EPIC_IN_REG_BASE
 0x50200

	)

775 
	#EPIC_GT_A_REG_BASE
 0x41120

	)

776 
	#EPIC_GT_B_REG_BASE
 0x42120

	)

777 
	#EPIC_MSG_REG_BASE
 0x51600

	)

778 
	#EPIC_SMSG_REG_BASE
 0x51c00

	)

779 
	#EPIC_IPI_REG_BASE
 0x410a0

	)

780 
	#EPIC_EX_REG_INTERVAL
 0x20

	)

781 
	#EPIC_IN_REG_INTERVAL
 0x20

	)

782 
	#EPIC_GT_REG_INTERVAL
 0x40

	)

783 
	#EPIC_MSG_REG_INTERVAL
 0x20

	)

784 
	#EPIC_SMSG_REG_INTERVAL
 0x20

	)

785 
	#EPIC_IPI_REG_INTERVAL
 0x10

	)

789 
	#EPIC_DMA1_CHAN0_INT_NUM
 4

	)

790 
	#EPIC_DMA1_CHAN0_INT_VEC
 (
EPIC_DMA1_CHAN0_INT_NUM
 + \

791 
EPIC_VEC_IN_IRQ0
)

	)

792 
	#EPIC_DMA1_CHAN1_INT_NUM
 5

	)

793 
	#EPIC_DMA1_CHAN1_INT_VEC
 (
EPIC_DMA1_CHAN1_INT_NUM
 + \

794 
EPIC_VEC_IN_IRQ0
)

	)

795 
	#EPIC_DMA1_CHAN2_INT_NUM
 6

	)

796 
	#EPIC_DMA1_CHAN2_INT_VEC
 (
EPIC_DMA1_CHAN2_INT_NUM
 + \

797 
EPIC_VEC_IN_IRQ0
)

	)

798 
	#EPIC_DMA1_CHAN3_INT_NUM
 7

	)

799 
	#EPIC_DMA1_CHAN3_INT_VEC
 (
EPIC_DMA1_CHAN3_INT_NUM
 + \

800 
EPIC_VEC_IN_IRQ0
)

	)

801 
	#EPIC_USB1_INT_NUM
 12

	)

802 
	#EPIC_USB1_INT_VEC
 (
EPIC_USB1_INT_NUM
 + \

803 
EPIC_VEC_IN_IRQ0
)

	)

804 
	#EPIC_I2C_INT_NUM
 27

	)

805 
	#EPIC_I2C_INT_VEC
 (
EPIC_I2C_INT_NUM
 + \

806 
EPIC_VEC_IN_IRQ0
)

	)

807 
	#EPIC_USB2_INT_NUM
 30

	)

808 
	#EPIC_USB2_INT_VEC
 (
EPIC_USB2_INT_NUM
 + \

809 
EPIC_VEC_IN_IRQ0
)

	)

810 
	#EPIC_SPI_INT_NUM
 43

	)

811 
	#EPIC_SPI_INT_VEC
 (
EPIC_SPI_INT_NUM
 + \

812 
EPIC_VEC_IN_IRQ0
)

	)

813 
	#EPIC_SDHC_INT_NUM
 56

	)

814 
	#EPIC_SDHC_INT_VEC
 (
EPIC_SDHC_INT_NUM
 + \

815 
EPIC_VEC_IN_IRQ0
)

	)

819 
	#I2C_BUS1_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x3000)

	)

820 
	#I2C_BUS2_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x3100)

	)

824 
	#ETSEC0_GROUP0_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0xB0000)

	)

825 
	#ETSEC1_GROUP0_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0xB1000)

	)

826 
	#ETSEC2_GROUP0_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0xB2000)

	)

828 
	#ETSEC0_MDIO_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x24000)

	)

829 
	#ETSEC1_MDIO_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x25000)

	)

833 
	#SDHC_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x2E000)

	)

835 
	#SD_DATA
 0x80000000

	)

836 
	#SDHC_CD
 0x40000000

	)

837 
	#SDHC_WP
 0x20000000

	)

841 
	#VSC7385_RESET
 (*)(
VSC7385_BASE
 + 0x1c050)

	)

842 
	#VSC7385_CTRL
 (*)(
VSC7385_BASE
 + 0x1c040)

	)

843 
	#VSC7385_ADDR
 (*)(
VSC7385_BASE
 + 0x1c044)

	)

844 
	#VSC7385_DATA
 (*)(
VSC7385_BASE
 + 0x1c048)

	)

845 
	#VSC7385_REG_MAP
 (*)(
VSC7385_BASE
 + 0x1c070)

	)

849 
	#GPIO_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0xF000)

	)

851 
	#GPDIR
 (
GPIO_BASE
 + 0xC00)

	)

852 
	#GPODR
 (
GPIO_BASE
 + 0xC04)

	)

853 
	#GPDAT
 (
GPIO_BASE
 + 0xC08)

	)

854 
	#GPIER
 (
GPIO_BASE
 + 0xC0C)

	)

855 
	#GPIMR
 (
GPIO_BASE
 + 0xC10)

	)

856 
	#GPICR
 (
GPIO_BASE
 + 0xC14)

	)

858 
	#USB_PORT_EN
 0x01000000

	)

862 
	#SPI_REG_BASE
 (
_CAG_CONFIG_CCSBAR
 + 0x7000)

	)

863 
	#ESPI_SPMODE
 (
SPI_REG_BASE
 + 0)

	)

864 
	#ESPI_SPIE
 (
SPI_REG_BASE
 + 0x4)

	)

865 
	#ESPI_SPIM
 (
SPI_REG_BASE
 + 0x8)

	)

866 
	#ESPI_SPCOM
 (
SPI_REG_BASE
 + 0xc)

	)

867 
	#ESPI_SPITF
 (
SPI_REG_BASE
 + 0x10)

	)

868 
	#ESPI_SPIRF
 (
SPI_REG_BASE
 + 0x14)

	)

869 
	#ESPI_SPMODE0
 (
SPI_REG_BASE
 + 0x20)

	)

870 
	#ESPI_SPMODE1
 (
SPI_REG_BASE
 + 0x24)

	)

871 
	#ESPI_SPMODE2
 (
SPI_REG_BASE
 + 0x28)

	)

872 
	#ESPI_SPMODE3
 (
SPI_REG_BASE
 + 0x2c)

	)

874 
	#SPI_CS_CFG_INIT
 0x24171108

	)

876 
	#ESPI_COM_CS
(
n
Ë“<<30)

	)

877 
	#ESPI_COM_DO
 (1<<28)

	)

878 
	#ESPI_COM_TO
 (1<<27)

	)

879 
	#ESPI_COM_HLD
 (1<<26)

	)

880 
	#ESPI_COM_RXSKIP
(
n
Ë“<<16)

	)

881 
	#ESPI_COM_TRANLEN
(
n
Ë“)

	)

883 
	#ESPI_MODE_CI
 (1<<31)

	)

884 
	#ESPI_MODE_CP
 (1<<30)

	)

885 
	#ESPI_MODE_REV
 (1<<29)

	)

886 
	#ESPI_MODE_DIV
 (1<<28)

	)

887 
	#ESPI_MODE_PM
(
n
Ë“<<25)

	)

888 
	#ESPI_MODE_ODD
 (1<<23)

	)

889 
	#ESPI_MODE_POL
 (1<<20)

	)

890 
	#ESPI_MODE_LEN
(
n
Ë“<<16)

	)

891 
	#ESPI_MODE_CSBEF
(
n
Ë“<<12)

	)

892 
	#ESPI_MODE_CSAFT
(
n
Ë“<<8)

	)

893 
	#ESPI_MODE_CSCG
(
n
Ë“<<3)

	)

899 
	#M85XX_PMUXCR
 *((
VUINT32
 *)(
_CAG_CONFIG_CCSBAR
 + 0xE0060))

	)

903 
	#FLASH_ADRS
 
_CAG_CONFIG_FLASH_BASE_ADRS


	)

904 
	#FLASH_SIZE
 
_CAG_CONFIG_FLASH_SIZE


	)

905 
	#FLASH_WIDTH
 2

	)

906 
	#FLASH_CHIP_WIDTH
 2

	)

907 
	#FLASH_SECTOR_SIZE
 
_CAG_CONFIG_FLASH_SECTOR_SIZE


	)

908 
	#FLASH_SECTOR_MASK
 0xff„0000

	)

910 #ifde‡
__˝lu•lus


	@include/ppc/archPpc.h

30 #i‚de‡
__INC¨chPpch


31 
	#__INC¨chPpch


	)

33 #ifde‡
__˝lu•lus


37 #ifdef 
_ASMLANGUAGE


39 
	#CLRRLPI
 
˛ºwi


	)

40 
	#CMPLLPI
 
cm∂wi


	)

41 
	#CMPLLP
 
cm∂w


	)

42 
	#CMPLP
 
cmpw


	)

43 
	#CMPLPI
 
cmpwi


	)

44 
	#LDLP
 
lwz


	)

45 
	#LDLPU
 
lwzu


	)

46 
	#LDLPX
 
lwzx


	)

47 
	#SLLPI
 
¶wi


	)

48 
	#SRLPI
 
§wi


	)

49 
	#STLP
 
°w


	)

50 
	#STLPU
 
°wu


	)

51 
	#RFI
 
rfi


	)

52 
	#LDARX
 
lw¨x


	)

53 
	#STDCX
 
°wcx


	)

55 
	#DSISR
 18

	)

56 
	#DAR
 19

	)

57 
	#DEC
 22

	)

58 
	#SDR1
 25

	)

60 
	#SRR0
 26

	)

61 
	#SRR1
 27

	)

63 
	#SPRG0
 272

	)

64 
	#SPRG1
 273

	)

65 
	#SPRG2
 274

	)

66 
	#SPRG3
 275

	)

68 
	#ASR
 280

	)

70 
	#EAR
 282

	)

72 
	#TBL
 284

	)

73 
	#TBU
 285

	)

75 
	#PVR
 287

	)

79 
	#_TYPE_PHYS_ADDR
 
UINT64
 
	tPHYS_ADDR


	)

84 
	#_SIZE_OF_LONG_BITS
 2

	)

85 
	#_PPC_REG_SIZE_BITS
 2

	)

87 
	#_SIZE_OF_LONG
 (1 << 
_SIZE_OF_LONG_BITS
)

	)

89 
	#_PPC_REG_SIZE
 (1 << 
_PPC_REG_SIZE_BITS
)

	)

90 
	#_PPC_SPE_SIZE
 (1 << 3)

	)

92 
	#_PPC_WORD_SIZE
 32

	)

94 
	#_PPC_TEXT_SEG_ALIGN
 4

	)

96 
	#RFI_OPCODE
 0x4c000064

	)

98 
	#_CACHE_ALIGN_SIZE
 
_CPU_CACHE_ALIGN_SIZE


	)

100 #ifde‡
__˝lu•lus


	@include/ppc/asmPpc.h

30 #i‚de‡
__INCasmPpch


31 
	#__INCasmPpch


	)

33 #ifde‡
__˝lu•lus


39 
	#XER
 1

	)

40 
	#LR
 8

	)

41 
	#CTR
 9

	)

43 
	#_PPC_KERNEL_MTMSR
(
m§
, 
s¸
, 
œbñ
) \

44 
mtm§
 
m§


	)

46 
	#_PPC_KERNEL_MTMSR_WITH_BLR
(
m§
, 
s¸
) \

47 
mtm§
 
m§
; \

48 
bÃ


	)

50 #ifde‡
__˝lu•lus


	@include/ppc/excPpcLib.h

30 #i‚de‡
__INCexcPcLibh


31 
	#__INCexcPcLibh


	)

33 #ifde‡
__˝lu•lus


39 
	#_EXC_CODE_SIZE
 16

	)

41 
	#EXC_VEC_LOW
 0x00000

	)

42 
	#EXC_VEC_HIGH
 0x02ff‡

	)

44 
	#_PPC_EXC_VEC_BASE_LOW
 0x00000000

	)

45 
	#_PPC_EXC_VEC_BASE_HIGH
 0xfff00000

	)

47 
	#XR1
 0

	)

48 
	#XBLK
 (
XR1
+
_PPC_REG_SIZE
)

	)

49 
	#XR0
 (
XBLK
+
_PPC_REG_SIZE
)

	)

50 
	#XSRR0
 (
XR0
+
_PPC_REG_SIZE
)

	)

51 
	#XSRR1
 (
XSRR0
+
_PPC_REG_SIZE
)

	)

52 
	#XCTR
 (
XSRR1
+
_PPC_REG_SIZE
)

	)

53 
	#XXER
 (
XCTR
+
_PPC_REG_SIZE
)

	)

54 
	#XCR
 (
XXER
+
_PPC_REG_SIZE
)

	)

55 
	#XLR
 (
XCR
+
_PPC_REG_SIZE
)

	)

56 
	#XR2
 (
XLR
+
_PPC_REG_SIZE
)

	)

57 
	#XR3
 (
XR2
+
_PPC_REG_SIZE
)

	)

58 
	#XR4
 (
XR3
+
_PPC_REG_SIZE
)

	)

59 
	#XR5
 (
XR4
+
_PPC_REG_SIZE
)

	)

60 
	#XR6
 (
XR5
+
_PPC_REG_SIZE
)

	)

61 
	#XR7
 (
XR6
+
_PPC_REG_SIZE
)

	)

62 
	#XR8
 (
XR7
+
_PPC_REG_SIZE
)

	)

63 
	#XR9
 (
XR8
+
_PPC_REG_SIZE
)

	)

64 
	#XR10
 (
XR9
+
_PPC_REG_SIZE
)

	)

65 
	#XR11
 (
XR10
+
_PPC_REG_SIZE
)

	)

66 
	#XR12
 (
XR11
+
_PPC_REG_SIZE
)

	)

67 
	#XR13
 (
XR12
+
_PPC_REG_SIZE
)

	)

68 
	#XR14
 (
XR13
+
_PPC_REG_SIZE
)

	)

69 
	#XR15
 (
XR14
+
_PPC_REG_SIZE
)

	)

70 
	#XR16
 (
XR15
+
_PPC_REG_SIZE
)

	)

71 
	#XR17
 (
XR16
+
_PPC_REG_SIZE
)

	)

72 
	#XR18
 (
XR17
+
_PPC_REG_SIZE
)

	)

73 
	#XR19
 (
XR18
+
_PPC_REG_SIZE
)

	)

74 
	#XR20
 (
XR19
+
_PPC_REG_SIZE
)

	)

75 
	#XR21
 (
XR20
+
_PPC_REG_SIZE
)

	)

76 
	#XR22
 (
XR21
+
_PPC_REG_SIZE
)

	)

77 
	#XR23
 (
XR22
+
_PPC_REG_SIZE
)

	)

78 
	#XR24
 (
XR23
+
_PPC_REG_SIZE
)

	)

79 
	#XR25
 (
XR24
+
_PPC_REG_SIZE
)

	)

80 
	#XR26
 (
XR25
+
_PPC_REG_SIZE
)

	)

81 
	#XR27
 (
XR26
+
_PPC_REG_SIZE
)

	)

82 
	#XR28
 (
XR27
+
_PPC_REG_SIZE
)

	)

83 
	#XR29
 (
XR28
+
_PPC_REG_SIZE
)

	)

84 
	#XR30
 (
XR29
+
_PPC_REG_SIZE
)

	)

85 
	#XR31
 (
XR30
+
_PPC_REG_SIZE
)

	)

86 
	#XMSR
 (
XR31
+
_PPC_REG_SIZE
)

	)

87 
	#EXC_FRAME_SIZE
 0xA0

	)

102 
	#_EXC_OFF_CRTL
 0x0100

	)

103 
	#_EXC_OFF_MACH
 0x0200

	)

104 
	#_EXC_OFF_DATA
 0x0300

	)

105 
	#_EXC_OFF_INST
 0x0400

	)

106 
	#_EXC_OFF_INTR
 0x0500

	)

107 
	#_EXC_OFF_ALIGN
 0x0600

	)

108 
	#_EXC_OFF_PROG
 0x0700

	)

109 
	#_EXC_OFF_FPU
 0x0800

	)

110 
	#_EXC_OFF_SYSCALL
 0x0900

	)

111 
	#_EXC_OFF_APU
 0x0a00

	)

112 
	#_EXC_OFF_DECR
 0x0b00

	)

113 
	#_EXC_OFF_FIT
 0x0c00

	)

114 
	#_EXC_OFF_WD
 0x0d00

	)

115 
	#_EXC_OFF_DATA_MISS
 0x0e00

	)

116 
	#_EXC_OFF_INST_MISS
 0x0f00

	)

117 
	#_EXC_OFF_DBG
 0x1000

	)

118 
	#_EXC_OFF_SPE
 0x1100

	)

119 
	#_EXC_OFF_VEC_DATA
 0x1200

	)

120 
	#_EXC_OFF_VEC_RND
 0x1300

	)

121 
	#_EXC_OFF_PERF_MON
 0x1400

	)

122 
	#_EXC_OFF_L1_PARITY
 0x1500

	)

123 
	#_EXC_OFF_END
 0x1600

	)

126 
	#IVOR0_VAL
 
_EXC_OFF_CRTL


	)

127 
	#IVOR1_VAL
 
_EXC_OFF_MACH


	)

128 
	#IVOR2_VAL
 
_EXC_OFF_DATA


	)

129 
	#IVOR3_VAL
 
_EXC_OFF_INST


	)

130 
	#IVOR4_VAL
 
_EXC_OFF_INTR


	)

131 
	#IVOR5_VAL
 
_EXC_OFF_ALIGN


	)

132 
	#IVOR6_VAL
 
_EXC_OFF_PROG


	)

133 
	#IVOR7_VAL
 
_EXC_OFF_FPU


	)

134 
	#IVOR8_VAL
 
_EXC_OFF_SYSCALL


	)

135 
	#IVOR9_VAL
 
_EXC_OFF_APU


	)

136 
	#IVOR10_VAL
 
_EXC_OFF_DECR


	)

137 
	#IVOR11_VAL
 
_EXC_OFF_FIT


	)

138 
	#IVOR12_VAL
 
_EXC_OFF_WD


	)

139 
	#IVOR13_VAL
 
_EXC_OFF_DATA_MISS


	)

140 
	#IVOR14_VAL
 
_EXC_OFF_INST_MISS


	)

141 
	#IVOR15_VAL
 
_EXC_OFF_DBG


	)

143 #ifde‡
_CAG_SPE_SUPPORT


144 
	#IVOR32_VAL
 
_EXC_OFF_SPE


	)

145 
	#IVOR33_VAL
 
_EXC_OFF_VEC_DATA


	)

146 
	#IVOR34_VAL
 
_EXC_OFF_VEC_RND


	)

149 
	#IVOR35_VAL
 
_EXC_OFF_PERF_MON


	)

155 #if 
deföed
(
_EXC_OFF_DECR
)

156 
	#_EXC_OFF_SYSTIMER
 
_EXC_OFF_DECR


	)

157 
	#_EXC_NEW_OFF_SYSTIMER
 
_EXC_OFF_DECR


	)

158 #ñif 
deföed
(
_EXC_OFF_PIT
)

159 
	#_EXC_OFF_SYSTIMER
 
_EXC_OFF_PIT


	)

160 
	#_EXC_NEW_OFF_SYSTIMER
 
_EXC_NEW_OFF_PIT


	)

162 #unde‡
_EXC_OFF_SYSTIMER


163 #unde‡
_EXC_NEW_OFF_SYSTIMER


168 #ifde‡ 
_PPC_MSR_FP


169 
	#_EXC_PROG_SRR1_FPU
 0x00100000

	)

171 
	#_EXC_PROG_SRR1_ILL
 0x00080000

	)

172 
	#_EXC_PROG_SRR1_PRIV
 0x00040000

	)

173 
	#_EXC_PROG_SRR1_TRAP
 0x00020000

	)

174 
	#_EXC_PROG_SRR1_NIA
 0x00010000

	)

182 
	#SRR_CI_PC
 
CSRR0


	)

183 
	#SRR_CI_MSR
 
CSRR1


	)

186 
	#CRIT_SAVE_PC
 
SRR_CI_PC


	)

187 
	#CRIT_SAVE_MSR
 
SRR_CI_MSR


	)

189 #i‚de‡
_ASMLANGUAGE


192 
UINT32
 
	tvecTblOff£t
;

193 * 
	tcodeBa£
;

194 * 
	tve˘‹Ba£
;

195 * 
	tcodePå
;

196 * 
	tve˘‹På
;

198 
excVecSë
 (
FUNCPTR
 *, FUNCPTR);

199 
FUNCPTR
 
excVecGë
 (FUNCPTR *);

200 
excVecBa£Së
 (
FUNCPTR
 *);

201 
FUNCPTR
 * 
excVecBa£Gë
 ();

203 
IMPORT
 
sysM§Së
 (
UINT32
);

204 
IMPORT
 
UINT32
 
sysM§Gë
 ();

205 
IMPORT
 
sysSdaSë
 (* 
pRegs
);

207 
IMPORT
 
UINT32
 
sysDórGë
 ();

208 
IMPORT
 
sysDórSë
 (
UINT32
);

209 
IMPORT
 
UINT32
 
sysC§r0Gë
 ();

210 
IMPORT
 
sysC§r0Së
 (
UINT32
);

211 
IMPORT
 
UINT32
 
sysC§r1Gë
 ();

212 
IMPORT
 
sysC§r1Së
 (
UINT32
);

213 
IMPORT
 
UINT32
 
sysMc§r0Gë
 ();

214 
IMPORT
 
sysMc§r0Së
 (
UINT32
);

215 
IMPORT
 
UINT32
 
sysMc§r1Gë
 ();

216 
IMPORT
 
sysMc§r1Së
 (
UINT32
);

217 #ifde‡
_CAG_SPE_SUPPORT


218 
IMPORT
 
UINT32
 
sysS≥fs¸Gë
 ();

219 
IMPORT
 
sysS≥fs¸Së
 (
UINT32
);

221 
IMPORT
 
sysDeˇrSë
 (
UINT32
);

222 
IMPORT
 
UINT32
 
sysL1CSR0Gë
 ();

223 
IMPORT
 
sysL1CSR0Së
 (
UINT32
);

224 
IMPORT
 
UINT32
 
sysL1CSR1Gë
 ();

225 
IMPORT
 
sysL1CSR1Së
 (
UINT32
);

226 
IMPORT
 
UINT32
 
sysL1CFG0Gë
 ();

227 
IMPORT
 
UINT32
 
sysL1CFG1Gë
 ();

228 
IMPORT
 
sysIv‹1Së
 (
UINT32
);

230 
IMPORT
 
sysSº0Së
 (
UINT32
);

231 
IMPORT
 
UINT32
 
sysSº0Gë
 ();

232 
IMPORT
 
sysSº1Së
 (
UINT32
);

233 
IMPORT
 
UINT32
 
sysSº1Gë
 ();

234 
IMPORT
 
UINT32
 
sysFú°Bô
 (UINT32);

235 
IMPORT
 
UINT32
 
sysPvrGë
 ();

237 
IMPORT
 
UINT32
 
sysSvrGë
 ();

238 
IMPORT
 
sysDecSë
 (
UINT32
);

239 
IMPORT
 
UINT32
 
sysDecGë
 ();

240 
IMPORT
 
UINT32
 
sysDecRñﬂd
 (UINT32);

242 
IMPORT
 
sysHid1Së
 (
UINT32
);

243 
IMPORT
 
UINT32
 
sysHid1Gë
 ();

245 
IMPORT
 
sysC1SèãSë
 ();

246 
IMPORT
 
sysTimeBa£Së
 (
UINT32
 
tbu
, UINT32 
tbl
);

247 
IMPORT
 
sysTimeBa£Gë
 (
UINT32
 * 
pTbu
, UINT32 * 
pTbl
);

248 
IMPORT
 
sysFps¸Së
 (
UINT32
);

249 
IMPORT
 
UINT32
 
sysFps¸Gë
 ();

251 
IMPORT
 
sysDecI¡E«bÀ
 ();

252 
IMPORT
 
sysDecI¡Ack
 ();

254 
IMPORT
 
sysFôI¡E«bÀ
 ();

255 
IMPORT
 
sysFôI¡DißbÀ
 ();

256 
IMPORT
 
sysFôI¡Ack
 ();

258 
IMPORT
 
UINT32
 
sysExi§Gë
 ();

259 
IMPORT
 
sysExi§CÀ¨
 (
UINT32
);

260 
IMPORT
 
UINT32
 
sysExõrGë
 ();

261 
IMPORT
 
sysExõrSë
 (
UINT32
);

263 
IMPORT
 
sysHid0Së
 (
UINT32
);

264 
IMPORT
 
UINT32
 
sysHid0Gë
 ();

266 
IMPORT
 
UINT32
 
sysIv¥Gë
 ();

267 
IMPORT
 
sysIv¥Së
 (
UINT32
);

269 
IMPORT
 
UINT32
 
sysT¸Gë
 ();

270 
IMPORT
 
sysT¸Së
 (
UINT32
);

271 
IMPORT
 
UINT32
 
sysT§Gë
 ();

272 
IMPORT
 
sysT§Së
 (
UINT32
);

274 
IMPORT
 
UINT32
 
sysDb¸0Gë
 ();

275 
IMPORT
 
sysDb¸0Së
 (
UINT32
);

276 
IMPORT
 
UINT32
 
sysDb¸1Gë
 ();

277 
IMPORT
 
sysDb¸1Së
 (
UINT32
);

278 
IMPORT
 
UINT32
 
sysDb¸2Gë
 ();

279 
IMPORT
 
sysDb¸2Së
 (
UINT32
);

281 
IMPORT
 
UINT32
 
sysDb§Gë
 ();

282 
IMPORT
 
sysDb§CÀ¨
 (
UINT32
);

283 
IMPORT
 
UINT32
 
sysDac1Gë
 ();

284 
IMPORT
 
sysDac1Së
 (
UINT32
);

285 
IMPORT
 
UINT32
 
sysDac2Gë
 ();

286 
IMPORT
 
sysDac2Së
 (
UINT32
);

287 
IMPORT
 
UINT32
 
sysIac1Gë
 ();

288 
IMPORT
 
sysIac1Së
 (
UINT32
);

289 
IMPORT
 
UINT32
 
sysIac2Gë
 ();

290 
IMPORT
 
sysIac2Së
 (
UINT32
);

292 
IMPORT
 
UINT32
 
sysIac3Gë
 ();

293 
IMPORT
 
sysIac3Së
 (
UINT32
);

294 
IMPORT
 
UINT32
 
sysIac4Gë
 ();

295 
IMPORT
 
sysIac4Së
 (
UINT32
);

299 #ifde‡
__˝lu•lus


	@include/ppc/io.h

1 #i‚de‡
__IO_H__


2 
	#__IO_H__


	)

3 
	~<libc/ˇgboŸ.h
>

17 
__ölöe__
 
uöt8_t
 
	$ö_8
(c⁄° vﬁ©ûê*
addr
)

19 
uöt8_t
 
ªt
;

21 
__asm__
 
	`__vﬁ©ûe__
(

24 "isync" : "Ù" (
ªt
Ë: "m" (*
addr
));

25  
ªt
;

26 
	}
}

28 
__ölöe__
 
	$out_8
(vﬁ©ûê*
addr
, 
uöt8_t
 
vÆ
)

30 
__asm__
 
	`__vﬁ©ûe__
("sync;\n"

32 : "=m" (*
addr
)

33 : "r" (
vÆ
));

34 
	}
}

36 
__ölöe__
 
uöt16_t
 
	$ö_À16
(c⁄° vﬁ©ûê*
addr
)

38 
uöt16_t
 
ªt
;

40 
__asm__
 
	`__vﬁ©ûe__
("sync;Ühbrx %0,0,%1;\n"

42 "isync" : "Ù" (
ªt
) :

43 "r" (
addr
), "m" (*addr));

44  
ªt
;

45 
	}
}

47 
__ölöe__
 
uöt16_t
 
	$ö_be16
(c⁄° vﬁ©ûê*
addr
)

49 
uöt16_t
 
ªt
;

51 
__asm__
 
	`__vﬁ©ûe__
("sync;Ühz%U1%X1 %0,%1;\n"

53 "isync" : "Ù" (
ªt
Ë: "m" (*
addr
));

54  
ªt
;

55 
	}
}

58 
__ölöe__
 
	$out_À16
(vﬁ©ûê*
addr
, 
uöt16_t
 
vÆ
)

60 
__asm__
 
	`__vﬁ©ûe__
("sync; sthbrx %1,0,%2" : "=m" (*
addr
) :

61 "r" (
vÆ
), "r" (
addr
));

62 
	}
}

64 
__ölöe__
 
	$out_be16
(vﬁ©ûê*
addr
, 
uöt16_t
 
vÆ
)

66 
__asm__
 
	`__vﬁ©ûe__
("sync; sth%U0%X0 %1,%0" : "=m" (*
addr
Ë: "r" (
vÆ
));

67 
	}
}

69 
__ölöe__
 
uöt32_t
 
	$ö_À32
(c⁄° vﬁ©ûê*
addr
)

71 
uöt32_t
 
ªt
;

73 
__asm__
 
	`__vﬁ©ûe__
("sync;Üwbrx %0,0,%1;\n"

75 "isync" : "Ù" (
ªt
) :

76 "r" (
addr
), "m" (*addr));

77  
ªt
;

78 
	}
}

80 
__ölöe__
 
uöt32_t
 
	$ö_be32
(c⁄° vﬁ©ûê*
addr
)

82 
uöt32_t
 
ªt
;

84 
__asm__
 
	`__vﬁ©ûe__
("sync;Üwz%U1%X1 %0,%1;\n"

86 "isync" : "Ù" (
ªt
Ë: "m" (*
addr
));

87  
ªt
;

88 
	}
}

90 
__ölöe__
 
	$out_À32
(vﬁ©ûê*
addr
, 
uöt32_t
 
vÆ
)

92 
__asm__
 
	`__vﬁ©ûe__
("sync; stwbrx %1,0,%2" : "=m" (*
addr
) :

93 "r" (
vÆ
), "r" (
addr
));

94 
	}
}

96 
__ölöe__
 
	$out_be32
(vﬁ©ûê*
addr
, 
uöt32_t
 
vÆ
)

98 
__asm__
 
	`__vﬁ©ûe__
("sync; stw%U0%X0 %1,%0" : "=m" (*
addr
Ë: "r" (
vÆ
));

99 
	}
}

	@include/ppc/mmuE500Lib.h

30 #i‚de‡
__INCmmuE500Libh


31 
	#__INCmmuE500Libh


	)

33 
	~<µc/µc85xx.h
>

35 #ifde‡
__˝lu•lus


41 
	#_INSTRUCTION_CACHE
 0

	)

42 
	#_DATA_CACHE
 1

	)

43 
	#_BRANCH_CACHE
 2

	)

45 
	#MMU_STATE_IPROT
 0x40000000

	)

46 
	#MMU_ROM_ACCESS
 (
MMU_STATE_CACHEABLE_WRITETHROUGH
 | 
MMU_STATE_CACHEABLE
 | \

47 
MMU_STATE_MEM_COHERENCY
 | 
MMU_STATE_GUARDED
)

	)

49 
	#MMU_PAGE_SIZE
 0x1000

	)

50 
	#MMU_MIN_PAGE_SIZE_BITS
 12

	)

51 
	#MMU_PAGE_SIZE_BITS
 
MMU_MIN_PAGE_SIZE_BITS


	)

60 
	#MMU_I_ADDR_TRANS
 0

	)

61 
	#MMU_D_ADDR_TRANS
 1

	)

69 
	#MMU_INST
 0x01

	)

70 
	#MMU_DATA
 0x02

	)

78 
	#MMU_STATE_VALID
 0x80000000

	)

79 
	#MMU_STATE_VALID_NOT
 0x00000000

	)

80 
	#MMU_STATE_LOCK
 0x00800000

	)

81 
	#MMU_STATE_UNLOCK
 0x00000000

	)

82 
	#MMU_STATE_CACHEABLE_WRITETHROUGH
 0x00000010

	)

83 
	#MMU_STATE_CACHEABLE_COPYBACK
 0x00000000

	)

84 
	#MMU_STATE_CACHEABLE
 0x00000000

	)

85 
	#MMU_STATE_CACHEABLE_NOT
 0x00000008

	)

86 
	#MMU_STATE_MEM_COHERENCY
 0x00000004

	)

87 
	#MMU_STATE_MEM_COHERENCY_NOT
 0x00000000

	)

88 
	#MMU_STATE_GUARDED
 0x00000002

	)

89 
	#MMU_STATE_GUARDED_NOT
 0x00000000

	)

90 
	#MMU_STATE_ENDIAN_BIG
 0x00000000

	)

91 
	#MMU_STATE_ENDIAN_LITTLE
 0x00000001

	)

93 
	#MMU_STATE_MASK_VALID
 0x80000000

	)

94 
	#MMU_STATE_MASK_LOCK
 0x00800000

	)

95 
	#MMU_STATE_MASK_WIMG
 0x0000001F

	)

96 
	#MMU_STATE_MASK_WRITETHROUGH
 0x00000010

	)

97 
	#MMU_STATE_MASK_CACHEABLE
 0x00000018

	)

98 
	#MMU_STATE_MASK_MEM_COHERENCY
 0x00000004

	)

99 
	#MMU_STATE_MASK_GUARDED
 0x00000002

	)

100 
	#MMU_STATE_MASK_ENDIAN
 0x00000001

	)

105 
	#MMU_STATE_EXECUTE
 0x00003000

	)

106 
	#MMU_STATE_EXECUTE_NOT
 0x00000000

	)

107 
	#MMU_STATE_WRITABLE
 0x00000c00

	)

108 
	#MMU_STATE_WRITABLE_NOT
 0x00000000

	)

109 
	#MMU_STATE_MASK_EXECUTE
 0x00003000

	)

110 
	#MMU_STATE_MASK_WRITABLE
 0x00000c00

	)

111 
	#MMU_STATE_MASK_WRITABLE_EXECUTE
 0x00003c00

	)

112 
	#MMU_STATE_MASK_WIMG_WRITABLE_EXECUTE
 0x00000000

	)

113 
	#MMU_STATE_MASK_PROTECTION
 0x00003f00

	)

114 
	#MMU_STATE_PROTECTION_BIT_SHIFT
 8

	)

129 
	#_MMU_UX
 0x00002000

	)

130 
	#_MMU_SX
 0x00001000

	)

131 
	#_MMU_UW
 0x00000800

	)

132 
	#_MMU_SW
 0x00000400

	)

133 
	#_MMU_UR
 0x00000200

	)

134 
	#_MMU_SR
 0x00000100

	)

136 
	#_MMU_URWX
 (
_MMU_UR
 | 
_MMU_UW
 | 
_MMU_UX
)

	)

140 
	#MMU_STATE_SUP_R
 (
_MMU_SR
)

	)

141 
	#MMU_STATE_SUP_RW
 (
_MMU_SR
|
_MMU_SW
)

	)

142 
	#MMU_STATE_SUP_RX
 (
_MMU_SR
| 
_MMU_SX
)

	)

143 
	#MMU_STATE_SUP_RWX
 (
_MMU_SR
|
_MMU_SW
|
_MMU_SX
)

	)

145 
	#MMU_STATE_SUP_R_USR_R
 (
MMU_STATE_SUP_R
 | 
_MMU_UR
)

	)

146 
	#MMU_STATE_SUP_RW_USR_R
 (
MMU_STATE_SUP_RW
 | 
_MMU_UR
)

	)

147 
	#MMU_STATE_SUP_RX_USR_R
 (
MMU_STATE_SUP_RX
 | 
_MMU_UR
)

	)

148 
	#MMU_STATE_SUP_RWX_USR_R
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UR
)

	)

150 
	#MMU_STATE_SUP_R_USR_W
 (
MMU_STATE_SUP_R
 | 
_MMU_UW
)

	)

151 
	#MMU_STATE_SUP_RW_USR_W
 (
MMU_STATE_SUP_RW
 | 
_MMU_UW
)

	)

152 
	#MMU_STATE_SUP_RX_USR_W
 (
MMU_STATE_SUP_RX
 | 
_MMU_UW
)

	)

153 
	#MMU_STATE_SUP_RWX_USR_W
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UW
)

	)

155 
	#MMU_STATE_SUP_R_USR_RW
 (
MMU_STATE_SUP_R
 | 
_MMU_UR
 | 
_MMU_UW
)

	)

156 
	#MMU_STATE_SUP_RW_USR_RW
 (
MMU_STATE_SUP_RW
 | 
_MMU_UR
 | 
_MMU_UW
)

	)

157 
	#MMU_STATE_SUP_RX_USR_RW
 (
MMU_STATE_SUP_RX
 | 
_MMU_UR
 | 
_MMU_UW
)

	)

158 
	#MMU_STATE_SUP_RWX_USR_RW
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UR
 | 
_MMU_UW
)

	)

160 
	#MMU_STATE_SUP_R_USR_X
 (
MMU_STATE_SUP_R
 | 
_MMU_UX
)

	)

161 
	#MMU_STATE_SUP_RW_USR_X
 (
MMU_STATE_SUP_RW
 | 
_MMU_UX
)

	)

162 
	#MMU_STATE_SUP_RX_USR_X
 (
MMU_STATE_SUP_RX
 | 
_MMU_UX
)

	)

163 
	#MMU_STATE_SUP_RWX_USR_X
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UX
)

	)

165 
	#MMU_STATE_SUP_R_USR_RX
 (
MMU_STATE_SUP_R
 | 
_MMU_UR
 | 
_MMU_UX
)

	)

166 
	#MMU_STATE_SUP_RW_USR_RX
 (
MMU_STATE_SUP_RW
 | 
_MMU_UR
 | 
_MMU_UX
)

	)

167 
	#MMU_STATE_SUP_RX_USR_RX
 (
MMU_STATE_SUP_RX
 | 
_MMU_UR
 | 
_MMU_UX
)

	)

168 
	#MMU_STATE_SUP_RWX_USR_RX
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UR
 | 
_MMU_UX
)

	)

170 
	#MMU_STATE_SUP_R_USR_WX
 (
MMU_STATE_SUP_R
 | 
_MMU_UW
 | 
_MMU_UX
)

	)

171 
	#MMU_STATE_SUP_RW_USR_WX
 (
MMU_STATE_SUP_RW
 | 
_MMU_UW
 | 
_MMU_UX
)

	)

172 
	#MMU_STATE_SUP_RX_USR_WX
 (
MMU_STATE_SUP_RX
 | 
_MMU_UW
 | 
_MMU_UX
)

	)

173 
	#MMU_STATE_SUP_RWX_USR_WX
 (
MMU_STATE_SUP_RWX
 | 
_MMU_UW
 | 
_MMU_UX
)

	)

175 
	#MMU_STATE_SUP_R_USR_RWX
 (
MMU_STATE_SUP_R
 | 
_MMU_URWX
)

	)

176 
	#MMU_STATE_SUP_RW_USR_RWX
 (
MMU_STATE_SUP_RW
 | 
_MMU_URWX
)

	)

177 
	#MMU_STATE_SUP_RX_USR_RWX
 (
MMU_STATE_SUP_RX
 | 
_MMU_URWX
)

	)

178 
	#MMU_STATE_SUP_RWX_USR_RWX
 (
MMU_STATE_SUP_RWX
 | 
_MMU_URWX
)

	)

182 
	#MMU_RPN_SHIFT
 12

	)

186 
	#_MMU_TLB_TS_0
 0x00000000

	)

187 
	#_MMU_TLB_TS_1
 0x00001000

	)

189 
	#TLB_GLOBAL_BIT
 25

	)

190 
	#TLB_LOCK_BIT
 26

	)

192 
	#_MMU_TLB_SZ_4K
 0x00000100

	)

193 
	#_MMU_TLB_SZ_16K
 0x00000200

	)

194 
	#_MMU_TLB_SZ_64K
 0x00000300

	)

195 
	#_MMU_TLB_SZ_256K
 0x00000400

	)

196 
	#_MMU_TLB_SZ_1M
 0x00000500

	)

197 
	#_MMU_TLB_SZ_4M
 0x00000600

	)

198 
	#_MMU_TLB_SZ_16M
 0x00000700

	)

199 
	#_MMU_TLB_SZ_64M
 0x00000800

	)

200 
	#_MMU_TLB_SZ_256M
 0x00000900

	)

201 
	#_MMU_TLB_SZ_1G
 0x00000a00

	)

202 
	#_MMU_TLB_SZ_4G
 0x00000b00

	)

203 
	#_MMU_TLB_SZ_MASK
 0x00000f00

	)

204 
	#_MMU_TLB_SZ_SHIFT
 8

	)

206 
	#_MMU_TLB_ATTR_W
 0x00000010

	)

207 
	#_MMU_TLB_ATTR_I
 0x00000008

	)

208 
	#_MMU_TLB_ATTR_M
 0x00000004

	)

209 
	#_MMU_TLB_ATTR_G
 0x00000002

	)

210 
	#_MMU_TLB_ATTR_E
 0x00000001

	)

212 
	#_MMU_TLB_PERM_X
 0x00000020

	)

213 
	#_MMU_TLB_PERM_W
 0x00000040

	)

214 
	#_MMU_TLB_IPROT
 0x00000080

	)

215 
	#_MMU_TLB_PERM_UR
 0x00010000

	)

216 
	#_MMU_TLB_PERM_UW
 0x00020000

	)

217 
	#_MMU_TLB_PERM_UX
 0x00040000

	)

219 
	#_MMU_TLB_EXRPN_MASK
 0x0000000‡

	)

225 
	#_MMU_TLB_SZ_MULT
 4

	)

226 
	#_MMU_TLB_SZ_MULT_SHIFT
 2

	)

230 
	#_MMU_TLB_SZ_MIN_SHIFT
 12

	)

231 
	#N_TLB_ENTRIES_BITS
 8

	)

232 
	#N_TLB_ENTRIES
 256

	)

233 
	#MMUE500_NUM_STATIC_TLB_ENTIRES
 0x10

	)

235 #i‚de‡
_ASMLANGUAGE


239 
UINT32
 
effAddr
;

240 
UINT32
 
ªÆAddrExt
;

241 
UINT32
 
ªÆAddr
;

242 
UINT32
 
©å
;

243 } 
	tTLB_ENTRY_DESC
;

245 
	ue500_±e
 {

251 
UINT32
 
v
:1;

252 
UINT32
 
ùrŸ
:1;

253 
UINT32
 
rsvd1
:6;

254 
UINT32
 
tid
:8;

255 
UINT32
 
rsvd2
:3;

256 
UINT32
 
ts
:1;

257 
UINT32
 
tsize
:4;

258 
UINT32
 
rsvd3
:8;

262 
UINT32
 
ïn
:20;

263 
UINT32
 
rsvd4
:2;

264 
UINT32
 
sh¨í
:1;

265 
UINT32
 
rsvd5
:2;

266 
UINT32
 
globÆ
:1;

268 
UINT32
 
lock
:1;

270 
UINT32
 
w
:1;

271 
UINT32
 
i
:1;

272 
UINT32
 
m
:1;

273 
UINT32
 
g
:1;

274 
UINT32
 
e
:1;

278 
UINT32
 
Ωn
:20;

279 
UINT32
 
rsvd6
:2;

280 
UINT32
 
u0
:1;

281 
UINT32
 
u1
:1;

282 
UINT32
 
u2
:1;

283 
UINT32
 
u3
:1;

284 
UINT32
 
ux
:1;

285 
UINT32
 
sx
:1;

286 
UINT32
 
uw
:1;

287 
UINT32
 
sw
:1;

288 
UINT32
 
ur
:1;

289 
UINT32
 
§
:1;

293 
UINT32
 
rsvd7
:28;

294 
UINT32
 
î≤
:4;

296 } 
fõld
;

299 
UINT32
 
w‹d0
;

300 
UINT32
 
w‹d1
;

301 
UINT32
 
w‹d2
;

302 
UINT32
 
w‹d3
;

303 } 
w‹ds
;

305 } 
	tMMUE500_PTE
;

309 #ifde‡
__˝lu•lus


	@include/ppc/ppc85xx.h

30 #i‚de‡
__INCµc85xxh


31 
	#__INCµc85xxh


	)

33 #ifde‡
__˝lu•lus


38 
	#_CPU_CACHE_ALIGN_SHIFT
 5

	)

40 #unde‡
_CPU_CACHE_ALIGN_SIZE


42 
	#_CPU_CACHE_ALIGN_SIZE
 32

	)

46 
	#_PPC_PID_REG
 
PID0


	)

50 
	#_PPC_MSR_CM_U
 0x8000

	)

52 
	#_PPC_MSR_POW_U
 0x0004

	)

53 
	#_PPC_MSR_ILE_U
 0x0001

	)

57 
	#_PPC_MSR_EE
 0x8000

	)

58 
	#_PPC_MSR_PR
 0x4000

	)

59 
	#_PPC_MSR_FP
 0x2000

	)

60 
	#_PPC_MSR_ME
 0x1000

	)

61 
	#_PPC_MSR_FE0
 0x0800

	)

62 
	#_PPC_MSR_SE
 0x0400

	)

63 
	#_PPC_MSR_BE
 0x0200

	)

64 
	#_PPC_MSR_FE1
 0x0100

	)

65 
	#_PPC_MSR_IP
 0x0040

	)

66 
	#_PPC_MSR_IR
 0x0020

	)

67 
	#_PPC_MSR_DR
 0x0010

	)

68 
	#_PPC_MSR_RI
 0x0002

	)

69 
	#_PPC_MSR_LE
 0x0001

	)

71 
	#_PPC_MSR_POWERUP
 0x0040

	)

75 
	#_PPC_MSR_BIT_EE
 16

	)

76 
	#_PPC_MSR_BIT_PR
 17

	)

77 
	#_PPC_MSR_BIT_ME
 19

	)

78 
	#_PPC_MSR_BIT_LE
 31

	)

82 #ifde‡
_CAG_SPE_SUPPORT


83 #unde‡
_PPC_MSR_FP


84 
	#_PPC_MSR_SPE_U
 0x0200

	)

85 
	#_PPC_MSR_SPE
 0x02000000

	)

86 
	#MSR_SPE_BIT_SHIFT
 25

	)

87 
	#_PPC_MSR_BIT_SPE
 6

	)

93 
	#CSRR0
 58

	)

94 
	#CSRR1
 59

	)

95 
	#DEAR
 61

	)

96 
	#ESR
 62

	)

97 
	#IVPR
 63

	)

98 
	#IVOR0
 400

	)

99 
	#IVOR1
 401

	)

100 
	#IVOR2
 402

	)

101 
	#IVOR3
 403

	)

102 
	#IVOR4
 404

	)

103 
	#IVOR5
 405

	)

104 
	#IVOR6
 406

	)

105 
	#IVOR7
 407

	)

106 
	#IVOR8
 408

	)

107 
	#IVOR9
 409

	)

108 
	#IVOR10
 410

	)

109 
	#IVOR11
 411

	)

110 
	#IVOR12
 412

	)

111 
	#IVOR13
 413

	)

112 
	#IVOR14
 414

	)

113 
	#IVOR15
 415

	)

114 #ifde‡
_CAG_SPE_SUPPORT


115 
	#IVOR32
 528

	)

116 
	#IVOR33
 529

	)

117 
	#IVOR34
 530

	)

119 
	#IVOR35
 531

	)

120 
	#MCSRR0
 570

	)

121 
	#MCSRR1
 571

	)

122 
	#MCAR
 573

	)

124 
	#MCSR
 572

	)

128 
	#_PPC_PVR_ID
(
pvr
Ë((’vrË>> 16Ë& 0xFFFFË

	)

129 
	#_PPC_PVR_MAJ
(
pvr
Ë((’vrË>> 4Ë& 0xFË

	)

130 
	#_PPC_PVR_MIN
(
pvr
Ë(’vrË& 0xFË

	)

132 
	#_PPC_PVR_VER_E500V2
 0x8021

	)

133 
	#_PPC_PVR_VER_E500MC
 0x8023

	)

134 
	#_PPC_PVR_VER_E5500
 0x8024

	)

135 
	#_PPC_PVR_VER_E6500
 0x8040

	)

138 
	#_PPC_MCSR_BIT_MCP
 0

	)

139 
	#_PPC_MCSR_BIT_ICPERR
 1

	)

140 
	#_PPC_MCSR_BIT_DCP_PERR
 2

	)

141 
	#_PPC_MCSR_BIT_DCPERR
 3

	)

142 
	#_PPC_MCSR_BIT_GL_CI
 15

	)

143 
	#_PPC_MCSR_BIT_BUS_IAERR
 24

	)

144 
	#_PPC_MCSR_BIT_BUS_RAERR
 25

	)

145 
	#_PPC_MCSR_BIT_BUS_WAERR
 26

	)

146 
	#_PPC_MCSR_BIT_BUS_IBERR
 27

	)

147 
	#_PPC_MCSR_BIT_BUS_RBERR
 28

	)

148 
	#_PPC_MCSR_BIT_BUS_WBERR
 29

	)

149 
	#_PPC_MCSR_BIT_BUS_IPERR
 30

	)

150 
	#_PPC_MCSR_BIT_BUS_RPERR
 31

	)

152 #ifde‡
_CAG_SPE_SUPPORT


153 
	#SPEFSCR
 512

	)

156 
	#_PPC_SPEFSCR_SOVH
 0x80000000

	)

157 
	#_PPC_SPEFSCR_OVH
 0x40000000

	)

158 
	#_PPC_SPEFSCR_FGH
 0x20000000

	)

159 
	#_PPC_SPEFSCR_FXH
 0x10000000

	)

160 
	#_PPC_SPEFSCR_FINVH
 0x08000000

	)

161 
	#_PPC_SPEFSCR_FDBZH
 0x04000000

	)

162 
	#_PPC_SPEFSCR_FUNFH
 0x02000000

	)

163 
	#_PPC_SPEFSCR_FOVFH
 0x01000000

	)

166 
	#_PPC_SPEFSCR_FINXS
 0x00200000

	)

167 
	#_PPC_SPEFSCR_FINVS
 0x00100000

	)

168 
	#_PPC_SPEFSCR_FDBZS
 0x00080000

	)

169 
	#_PPC_SPEFSCR_FUNFS
 0x00040000

	)

170 
	#_PPC_SPEFSCR_FOVFS
 0x00020000

	)

171 
	#_PPC_SPEFSCR_MODE
 0x00010000

	)

173 
	#_PPC_SPEFSCR_SOV
 0x00008000

	)

174 
	#_PPC_SPEFSCR_OV
 0x00004000

	)

175 
	#_PPC_SPEFSCR_FG
 0x00002000

	)

176 
	#_PPC_SPEFSCR_FX
 0x00001000

	)

177 
	#_PPC_SPEFSCR_FINV
 0x00000800

	)

178 
	#_PPC_SPEFSCR_FDBZ
 0x00000400

	)

179 
	#_PPC_SPEFSCR_FUNF
 0x00000200

	)

180 
	#_PPC_SPEFSCR_FOVF
 0x00000100

	)

181 
	#_SPEFSCR_EXC_ENABLE_MASK
 (0x0000007C)

	)

182 
	#_PPC_SPEFSCR_FINXE
 0x00000040

	)

183 
	#_PPC_SPEFSCR_FINVE
 0x00000020

	)

184 
	#_PPC_SPEFSCR_FDBZE
 0x00000010

	)

185 
	#_PPC_SPEFSCR_FUNFE
 0x00000008

	)

186 
	#_PPC_SPEFSCR_FOVFE
 0x00000004

	)

187 
	#_PPC_SPEFSCR_FRMC_RND_NR
 0x00000000

	)

188 
	#_PPC_SPEFSCR_FRMC_RND_ZERO
 0x00000001

	)

189 
	#_PPC_SPEFSCR_FRMC_RND_PINF
 0x00000002

	)

190 
	#_PPC_SPEFSCR_FRMC_RND_NINF
 0x00000003

	)

195 
	#SPRG4
 276

	)

196 
	#SPRG5
 277

	)

197 
	#SPRG6
 278

	)

198 
	#SPRG7
 279

	)

200 
	#SPRG4_R
 260

	)

201 
	#SPRG4_W
 276

	)

202 
	#SPRG5_R
 261

	)

203 
	#SPRG5_W
 277

	)

204 
	#SPRG6_R
 262

	)

205 
	#SPRG6_W
 278

	)

206 
	#SPRG7_R
 263

	)

207 
	#SPRG7_W
 279

	)

208 
	#TBL_R
 268

	)

209 
	#TBL_W
 284

	)

210 
	#TBU_R
 269

	)

211 
	#TBU_W
 285

	)

212 
	#TCR
 340

	)

213 
	#TSR
 336

	)

214 
	#USPRG0
 256

	)

215 
	#DBCR0
 308

	)

216 
	#DBCR1
 309

	)

217 
	#DBCR2
 310

	)

218 
	#DBSR
 304

	)

219 
	#IAC1
 312

	)

220 
	#IAC2
 313

	)

221 
	#DAC1
 316

	)

222 
	#DAC2
 317

	)

223 
	#L1CFG0
 515

	)

224 
	#L1CFG1
 516

	)

225 
	#L1CSR0
 1010

	)

226 
	#L1CSR1
 1011

	)

228 
	#MAS0
 624

	)

229 
	#MAS1
 625

	)

230 
	#MAS2
 626

	)

231 
	#MAS3
 627

	)

232 
	#MAS4
 628

	)

233 
	#MAS6
 630

	)

234 
	#MAS7
 944

	)

236 
	#TLB0CFG
 688

	)

237 
	#TLB1CFG
 689

	)

238 
	#MMUCSR0
 1012

	)

239 
	#MMUCFG
 1015

	)

241 
	#PIR
 286

	)

242 
	#SVR
 1023

	)

247 #unde‡
_PPC_MSR_CM_U


248 #unde‡
_PPC_MSR_ILE_U


251 
	#_PPC_MSR_WE_U
 0x0004

	)

252 #unde‡
_PPC_MSR_POW_U


253 
	#_PPC_MSR_POW_U
 
_PPC_MSR_WE_U


	)

255 
	#_PPC_MSR_WE
 0x00040000

	)

257 
	#_PPC_MSR_CE_U
 0x0002

	)

258 
	#_PPC_MSR_CE
 0x00020000

	)

263 #unde‡
_PPC_MSR_IR


264 #unde‡
_PPC_MSR_DR


265 #unde‡
_PPC_MSR_SE


266 #unde‡
_PPC_MSR_BE


267 #unde‡
_PPC_MSR_IP


268 #unde‡
_PPC_MSR_RI


269 #unde‡
_PPC_MSR_LE


270 #unde‡
_PPC_MSR_BIT_LE


283 
	#_PPC_MSR_MCE
 
_PPC_MSR_ME


	)

285 
	#_PPC_MSR_DE
 0x0200

	)

286 
	#_PPC_MSR_IS
 0x0020

	)

287 
	#_PPC_MSR_DS
 0x0010

	)

289 
	#_PPC_MSR_BIT_WE
 13

	)

290 
	#_PPC_MSR_BIT_CE
 14

	)

291 
	#_PPC_MSR_BIT_DE
 22

	)

292 
	#_PPC_MSR_BIT_IS
 26

	)

293 
	#_PPC_MSR_BIT_DS
 27

	)

297 
	#ME_MASK
(
§c
, 
des
) \

298 
æwöm
 
des
, 
§c
, 0, 
_PPC_MSR_BIT_ME
+1, _PPC_MSR_BIT_ME-1

	)

300 #unde‡
INT_MASK


301 
	#INT_MASK
(
§c
, 
des
) \

302 
æwöm
 
des
, 
§c
, 0, 
_PPC_MSR_BIT_EE
+1, _PPC_MSR_BIT_EE-1; \

303 
æwöm
 
des
, des, 0, 
_PPC_MSR_BIT_CE
+1, _PPC_MSR_BIT_CE-1

	)

305 #unde‡
INT_WE_MASK


306 
	#INT_WE_MASK
(
§c
, 
des
) \

307 
æwöm
 
des
, 
§c
, 0, 
_PPC_MSR_BIT_WE
+1, _PPC_MSR_BIT_WE-1

	)

309 
	#HID0
 1008

	)

310 
	#HID1
 1009

	)

311 
	#DECAR
 54

	)

312 
	#BUCSR
 1013

	)

314 
	#_PPC_BUCSR_FI
 0x200

	)

315 
	#_PPC_BUCSR_E
 0x1

	)

317 
	#_PPC_BUCSR_STAC_EN
 0x01000000

	)

318 
	#_PPC_BUCSR_LS_EN
 0x00400000

	)

319 
	#_PPC_BUCSR_BBFI
 0x00000200

	)

320 
	#_PPC_BUCSR_BPEN
 0x00000001

	)

321 
	#_PPC_BUCSR_ENABLE
 (
_PPC_BUCSR_STAC_EN
|
_PPC_BUCSR_LS_EN
|
_PPC_BUCSR_BBFI
|
_PPC_BUCSR_BPEN
)

	)

324 #i‚de‡
_CAG_HARDWARE_FP


325 #unde‡
_PPC_MSR_FP


326 #unde‡
_PPC_MSR_FE1


327 #unde‡
_PPC_MSR_FE0


328 #unde‡
_PPC_MSR_BIT_FP


329 #unde‡
_PPC_MSR_BIT_FE0


330 #unde‡
_PPC_MSR_BIT_FE1


331 #unde‡
_EXC_PROG_SRR1_FPU


333 
	#_CAG_FP_CLASS_HW
 1

	)

334 
	#_PPC_MSR_BIT_FP
 18

	)

335 
	#_PPC_MSR_BIT_FE0
 20

	)

336 
	#_PPC_MSR_BIT_FE1
 23

	)

341 
	#_PPC_MSR_CM_OR
(
ªg
)

	)

342 
	#_PPC_MSR_MMU_RI_EXTRACT
(
§c
, 
d°
) \

343 
æwöm
 
d°
, 
§c
, 0, 
_PPC_MSR_BIT_IS
, 
_PPC_MSR_BIT_DS


	)

345 #ifdef 
_CAG_HARDWARE_FP


346 
	#_PPC_MSR_MMU_RI_FP_EXTRACT
(
§c
, 
d°
) \

347 
li
 
d°
, 
_PPC_MSR_FP
 | 
_PPC_MSR_IS
 | 
_PPC_MSR_DS
 ; \

348 
	`_PPC_MSR_CM_OR
(
d°
); \

349 
™d
 
d°
, d°, 
§c


	)

351 #ifde‡
_CAG_SPE_SUPPORT


352 
	#_PPC_MSR_MMU_RI_FP_EXTRACT
(
§c
, 
d°
) \

353 
lis
 
d°
, 
_PPC_MSR_SPE_U
 ;\

354 
‹i
 
d°
, d°, 
_PPC_MSR_IS
 | 
_PPC_MSR_DS
 ; \

355 
™d
 
d°
, d°, 
§c


	)

357 
	#_PPC_MSR_MMU_RI_FP_EXTRACT
(
§c
, 
d°
) \

358 
‹i
 
d°
, d°, 
_PPC_MSR_IS
 | 
_PPC_MSR_DS
 ; \

359 
™d
 
d°
, d°, 
§c


	)

367 
	#_PPC_ESR_PIL_U
 0x0800

	)

368 
	#_PPC_ESR_PPR_U
 0x0400

	)

369 
	#_PPC_ESR_PTR_U
 0x0200

	)

370 
	#_PPC_ESR_ST_U
 0x0080

	)

371 
	#_PPC_ESR_DLK_U
 0x0020

	)

372 
	#_PPC_ESR_ILK_U
 0x0010

	)

373 
	#_PPC_ESR_AP_U
 0x0008

	)

374 
	#_PPC_ESR_BO_U
 0x0002

	)

375 
	#_PPC_ESR_PIL
 0x08000000

	)

376 
	#_PPC_ESR_PPR
 0x04000000

	)

377 
	#_PPC_ESR_PTR
 0x02000000

	)

378 
	#_PPC_ESR_ST
 0x00800000

	)

379 
	#_PPC_ESR_DLK
 0x00200000

	)

380 
	#_PPC_ESR_ILK
 0x00100000

	)

381 
	#_PPC_ESR_AP
 0x00080000

	)

382 
	#_PPC_ESR_BO
 0x00020000

	)

383 #ifde‡
_CAG_SPE_SUPPORT


384 
	#_PPC_ESR_SPE
 0x00000080

	)

388 
	#_PPC_TCR_WP_U
 0xc000

	)

389 
	#_PPC_TCR_WRC_U
 0x3000

	)

390 
	#_PPC_TCR_WRC_MC
 0x1000

	)

391 
	#_PPC_TCR_WRC_HR
 0x2000

	)

392 
	#_PPC_TCR_WRC_CR
 0x2000

	)

393 
	#_PPC_TCR_WIE_U
 0x0800

	)

394 
	#_PPC_TCR_DIE_U
 0x0400

	)

395 
	#_PPC_TCR_FP_U
 0x0300

	)

396 
	#_PPC_TCR_FIE_U
 0x0080

	)

397 
	#_PPC_TCR_ARE_U
 0x0040

	)

398 
	#_PPC_TCR_WPEXT_U
 0x001E

	)

399 
	#_PPC_TCR_FPEXT
 0x1E000

	)

402 
	#_PPC_TSR_ENW_U
 0x8000

	)

403 
	#_PPC_TSR_WIS_U
 0x4000

	)

404 
	#_PPC_TSR_CAG_U
 0x3000

	)

405 
	#_PPC_TSR_DIS_U
 0x0800

	)

406 
	#_PPC_TSR_FIS_U
 0x0400

	)

409 
	#_PPC_TCR_DIE
 (
_PPC_TCR_DIE_U
 << 16)

	)

410 
	#_PPC_TSR_DIS
 (
_PPC_TSR_DIS_U
 << 16)

	)

413 
	#_PPC_HID0_DOZE_U
 0x0080

	)

414 
	#_PPC_HID0_NAP_U
 0x0040

	)

415 
	#_PPC_HID0_SLEEP_U
 0x0020

	)

416 
	#_PPC_HID0_DOZE
 0x00800000

	)

417 
	#_PPC_HID0_NAP
 0x00400000

	)

418 
	#_PPC_HID0_SLEEP
 0x00200000

	)

419 
	#_PPC_HID0_TBEN
 0x00004000

	)

420 
	#_PPC_HID0_EMCP
 0x80000000

	)

422 
	#_PPC_HID0_MAS7EN
 0x00000080

	)

423 
	#_PPC_HID0_DCFA
 0x00000040

	)

424 
	#_PPC_HID0_BIT_MAS7EN
 24

	)

425 
	#_PPC_HID0_BIT_DCFA
 25

	)

426 
	#_PPC_85XX_USE_DCFA


	)

430 
	#_PPC_HID1_ABE
 0x00001000

	)

431 
	#_PPC_HID1_ASTME
 0x00002000

	)

432 
	#_PPC_HID1_RXFE
 0x00020000

	)

433 
	#_PPC_HID1_MBDD
 (1<<6Ë

	)

439 
	#_PPC_L1CSR_E
 0x00000001

	)

440 
	#_PPC_L1CSR_FI
 0x00000002

	)

441 
	#_PPC_L1CSR_FLR
 0x00000100

	)

442 
	#_PPC_L1CSR_LO
 0x00000200

	)

443 
	#_PPC_L1CSR_UL
 0x00000400

	)

444 
	#_PPC_L1CSR_UL_V
(
x
Ë(x >> 10)

	)

445 
	#_PPC_L1CSR_SLC
 0x00000800

	)

446 
	#_PPC_L1CSR_SLC_V
(
x
Ë(x >> 11)

	)

447 
	#_PPC_L1CSR_PIE
 0x00008000

	)

448 
	#_PPC_L1CSR_CPE
 0x00010000

	)

450 
	#_PPC_L1CSR0_CPE
 0x00010000

	)

451 
	#_PPC_L1CSR0_CUL
 0x00000400

	)

452 
	#_PPC_L1CSR0_DCLFR
 0x00000100

	)

453 
	#_PPC_L1CSR0_DCFI
 0x00000002

	)

454 
	#_PPC_L1CSR0_DCE
 0x00000001

	)

456 
	#_PPC_L1CSR1_CPE
 0x00010000

	)

457 
	#_PPC_L1CSR1_ICUL
 0x00000400

	)

458 
	#_PPC_L1CSR1_ICLFR
 0x00000100

	)

459 
	#_PPC_L1CSR1_ICFI
 0x00000002

	)

460 
	#_PPC_L1CSR1_ICE
 0x00000001

	)

464 
	#_PPC_L1CFG_SIZE_MASK
 0x00000FFF

	)

465 
	#_PPC_L1CFG_NWAY_MASK
 0x000FF000

	)

466 
	#_PPC_L1CFG_NWAY_V
(
x
Ë(x >> 12)

	)

467 
	#_PPC_L1CFG_PA_MASK
 0x00100000

	)

468 
	#_PPC_L1CFG_PA_V
(
x
Ë(x >> 16)

	)

469 
	#_PPC_L1CFG_LA_MASK
 0x00200000

	)

470 
	#_PPC_L1CFG_LA_V
(
x
Ë(x >> 17)

	)

471 
	#_PPC_L1CFG_REPL_MASK
 0x00400000

	)

472 
	#_PPC_L1CFG_REPL_V
(
x
Ë(x >> 18)

	)

473 
	#_PPC_L1CFG_BSIZE_MASK
 0x01800000

	)

474 
	#_PPC_L1CFG_BSIZE_V
(
x
Ë(x >> 19)

	)

475 
	#_PPC_L1CFG_CARCH_MASK
 0xC0000000

	)

476 
	#_PPC_L1CFG_CARCH_V
(
x
Ë(x >> 30)

	)

480 
	#PID
 48

	)

481 
	#PID_MASK
 0x0FF

	)

482 
	#PID0
 48

	)

483 
	#PID1
 633

	)

484 
	#PID2
 634

	)

486 
	#_PPC_MMUCSR0_L2TLB1_FI
 0x00000002

	)

487 
	#_PPC_MMUCSR0_L2TLB1_FI_V
(
x
Ë(x >> 1)

	)

488 
	#_PPC_MMUCSR0_L2TLB0_FI
 0x00000004

	)

489 
	#_PPC_MMUCSR0_L2TLB0_FI_V
(
x
Ë(x >> 2)

	)

490 
	#_PPC_MMUCSR0_DL1MMU_FI
 0x00000008

	)

491 
	#_PPC_MMUCSR0_DL1MMU_FI_V
(
x
Ë(x >> 3)

	)

492 
	#_PPC_MMUCSR0_IL1MMU_FI
 0x00000010

	)

493 
	#_PPC_MMUCSR0_IL1MMU_FI_V
(
x
Ë(x >> 4)

	)

495 
	#_PPC_MAS0_NV
 0x00000000

	)

497 
	#_PPC_MAS0_ESEL_BIT_MIN
 6

	)

498 
	#_PPC_MAS0_ESEL_BIT_MAX
 15

	)

499 
	#_PPC_MAS0_ESEL_MASK
 0x03ff0000

	)

501 
	#_PPC_MAS0_ESEL_BIT
 16

	)

503 
	#_PPC_MAS0_ESEL_V
(
x
Ë(x >> 
_PPC_MAS0_ESEL_BIT
)

	)

504 
	#_PPC_MAS0_TLBSEL1
 0x10000000

	)

505 
	#_PPC_MAS0_TLBSEL1_U
 0x1000

	)

506 
	#_PPC_MAS0_TLBSEL_MASK
 0x30000000

	)

508 
	#_PPC_MAS0_TLBSEL
(
x
Ë(((xË<< 28Ë& 
_PPC_MAS0_TLBSEL_MASK
)

	)

509 
	#_PPC_MAS0_ESEL_MSK
 0x0FFF0000

	)

510 
	#_PPC_MAS0_ESEL
(
x
Ë(((xË<< 16Ë& 
_PPC_MAS0_ESEL_MSK
)

	)

512 
	#_PPC_MAS1_TSIZE
(
x
Ë(((xË<< 7Ë& 0x00000F80)

	)

514 
	#_PPC_MAS1_V_BIT
 0

	)

515 
	#_PPC_MAS1_V
 0x80000000

	)

516 
	#_PPC_MAS1_V_U
 0x8000

	)

518 
	#_PPC_MAS1_IPROT_BIT
 1

	)

519 
	#_PPC_MAS1_IPROT
 0x40000000

	)

520 
	#_PPC_MAS1_IPROT_U
 0x4000

	)

522 
	#_PPC_MAS1_TS_BIT
 19

	)

523 
	#_PPC_MAS1_TS
 0x00001000

	)

525 
	#_PPC_MAS1_TSIZE_BIT_MIN
 20

	)

526 
	#_PPC_MAS1_TSIZE_BIT_MAX
 23

	)

527 
	#_PPC_MAS2_EPN_BIT_MAX
 19

	)

529 
	#_PPC_MAS2_W_BIT
 27

	)

530 
	#_PPC_MAS2_W
 0x00000010

	)

532 
	#_PPC_MAS2_I_BIT
 28

	)

533 
	#_PPC_MAS2_I
 0x00000008

	)

535 
	#_PPC_MAS2_M_BIT
 29

	)

536 
	#_PPC_MAS2_M
 0x00000004

	)

538 
	#_PPC_MAS2_G_BIT
 30

	)

539 
	#_PPC_MAS2_G
 0x00000002

	)

541 
	#_PPC_MAS2_E_BIT
 31

	)

542 
	#_PPC_MAS2_E
 0x00000001

	)

544 
	#_PPC_MAS3_RPN_BIT_MAX
 19

	)

546 
	#_PPC_MAS3_UX_BIT
 26

	)

547 
	#_PPC_MAS3_UX
 0x00000020

	)

548 
	#_PPC_MAS3_SX
 0x00000010

	)

549 
	#_PPC_MAS3_UW
 0x00000008

	)

550 
	#_PPC_MAS3_SW
 0x00000004

	)

551 
	#_PPC_MAS3_UR
 0x00000002

	)

552 
	#_PPC_MAS3_SR
 0x00000001

	)

554 
	#_PPC_MAS6_SIND
 0x00000002

	)

556 
	#_PPC_MAS7_RPN_MASK
 0x0000000F

	)

558 
	#_PPC_TLBnCFG_NENTRY_MASK
 0xFFF

	)

559 
	#_PPC_TLBnCFG_SIZE_MASK
 0xF

	)

563 
	#PVR_VALUE
 0x80210030

	)

567 
	#MMU_ASID_MIN
 1

	)

568 
	#MMU_ASID_MAX
 255

	)

569 
	#MMU_ASID_GLOBAL
 
MMU_ASID_MIN


	)

572 
	#_DBCR0_IDM_U
 0x4000

	)

573 
	#_DBCR0_RST_U
 0x3000

	)

574 
	#_DBCR0_ICMP_U
 0x0800

	)

575 
	#_DBCR0_BRT_U
 0x0400

	)

576 
	#_DBCR0_IRPT_U
 0x0200

	)

577 
	#_DBCR0_TRAP_U
 0x0100

	)

578 
	#_DBCR0_IAC1_U
 0x0080

	)

579 
	#_DBCR0_IAC2_U
 0x0040

	)

580 
	#_DBCR0_DAC1R_U
 0x0008

	)

581 
	#_DBCR0_DAC1W_U
 0x0004

	)

582 
	#_DBCR0_DAC2R_U
 0x0002

	)

583 
	#_DBCR0_DAC2W_U
 0x0001

	)

584 
	#_DBCR0_IDM
 0x40000000

	)

585 
	#_DBCR0_RST
 0x30000000

	)

586 
	#_DBCR0_ICMP
 0x08000000

	)

587 
	#_DBCR0_BRT
 0x04000000

	)

588 
	#_DBCR0_IRPT
 0x02000000

	)

589 
	#_DBCR0_TRAP
 0x01000000

	)

590 
	#_DBCR0_IAC1
 0x00800000

	)

591 
	#_DBCR0_IAC2
 0x00400000

	)

592 
	#_DBCR0_DAC1R
 0x00080000

	)

593 
	#_DBCR0_DAC1W
 0x00040000

	)

594 
	#_DBCR0_DAC2R
 0x00020000

	)

595 
	#_DBCR0_DAC2W
 0x00010000

	)

596 
	#_DBCR0_RET
 0x00008000

	)

597 
	#_DBCR0_FT
 0x00000001

	)

600 
	#_DBCR1_IAC1US_U
 0xc000

	)

601 
	#_DBCR1_IAC1ER_U
 0x3000

	)

602 
	#_DBCR1_IAC2US_U
 0x0c00

	)

603 
	#_DBCR1_IAC2ER_U
 0x0300

	)

604 
	#_DBCR1_IAC12M_U
 0x00c0

	)

605 
	#_DBCR1_IAC12AT_U
 0x0001

	)

606 
	#_DBCR1_IAC1US
 0xc0000000

	)

607 
	#_DBCR1_IAC1ER
 0x30000000

	)

608 
	#_DBCR1_IAC2US
 0x0c000000

	)

609 
	#_DBCR1_IAC2ER
 0x03000000

	)

610 
	#_DBCR1_IAC12M
 0x00c00000

	)

613 
	#_DBCR2_DAC1US_U
 0xc000

	)

614 
	#_DBCR2_DAC1ER_U
 0x3000

	)

615 
	#_DBCR2_DAC2US_U
 0x0c00

	)

616 
	#_DBCR2_DAC2ER_U
 0x0300

	)

617 
	#_DBCR2_DAC12M_U
 0x00c0

	)

618 
	#_DBCR2_DAC1US
 0xc0000000

	)

619 
	#_DBCR2_DAC1ER
 0x30000000

	)

620 
	#_DBCR2_DAC2US
 0x0c000000

	)

621 
	#_DBCR2_DAC2ER
 0x03000000

	)

622 
	#_DBCR2_DAC12M
 0x00c00000

	)

623 
	#_DBCR2_DAC12M_INC
 0x00800000

	)

626 
	#_DBSR_IDE_U
 0x8000

	)

627 
	#_DBSR_UDE_U
 0x4000

	)

628 
	#_DBSR_MRR_U
 0x3000

	)

629 
	#_DBSR_ICMP_U
 0x0800

	)

630 
	#_DBSR_BRT_U
 0x0400

	)

631 
	#_DBSR_IRPT_U
 0x0200

	)

632 
	#_DBSR_TRAP_U
 0x0100

	)

633 
	#_DBSR_IAC1_U
 0x0080

	)

634 
	#_DBSR_IAC2_U
 0x0040

	)

635 
	#_DBSR_DAC1R_U
 0x0008

	)

636 
	#_DBSR_DAC1W_U
 0x0004

	)

637 
	#_DBSR_DAC2R_U
 0x0002

	)

638 
	#_DBSR_DAC2W_U
 0x0001

	)

639 
	#_DBSR_IDE
 0x80000000

	)

640 
	#_DBSR_UDE
 0x40000000

	)

641 
	#_DBSR_MRR
 0x30000000

	)

642 
	#_DBSR_ICMP
 0x08000000

	)

643 
	#_DBSR_BRT
 0x04000000

	)

644 
	#_DBSR_IRPT
 0x02000000

	)

645 
	#_DBSR_TRAP
 0x01000000

	)

646 
	#_DBSR_IAC1
 0x00800000

	)

647 
	#_DBSR_IAC2
 0x00400000

	)

648 
	#_DBSR_DAC1R
 0x00080000

	)

649 
	#_DBSR_DAC1W
 0x00040000

	)

650 
	#_DBSR_DAC2R
 0x00020000

	)

651 
	#_DBSR_DAC2W
 0x00010000

	)

652 
	#_DBSR_RET
 0x00008000

	)

655 
	#_DBSR_HWBP_MSK
 ( 
_DBSR_IAC1
 | 
_DBSR_IAC2
 | \

656 
_DBSR_DAC1R
 | 
_DBSR_DAC1W
 | \

657 
_DBSR_DAC2R
 | 
_DBSR_DAC2W
 )

	)

659 #ifde‡
__˝lu•lus


	@include/ppc/spePpcLib.h

30 #i‚de‡
__INC•ePpcLibh


31 
	#__INC•ePpcLibh


	)

33 
	~<libc/ˇgboŸ.h
>

35 #ifde‡
__˝lu•lus


39 
	#SPE_OFFSET
(
x
Ë(8*x)

	)

40 
	#ACC_SIZE
 2

	)

41 
	#SPE_NUM_REGS
 32

	)

42 
	#SPE_FRAME_SIZE
 0x140

	)

44 #i‚def 
_ASMLANGUAGE


48 
UINT32
 
g¥
[
SPE_NUM_REGS
];

49 
UINT32
 
acc
[
ACC_SIZE
];

50 } 
	tSPE_CONTEXT
;

52 
	#SPEREG_SET
 
SPE_CONTEXT


	)

54 
•eSave
 (
SPE_CONTEXT
 *
•ePå
);

55 
•eRe°‹e
 (
SPE_CONTEXT
 *
•ePå
);

57 
	#SPE_CONTEXT_GET
(
pTcb
Ë(
SPE_CONTEXT
 *)’Tcb->
ExtPå
)

	)

58 
	#SPE_CONTEXT_SET
(
pTcb
,
X
Ë’Tcb->
ExtPå
=()(X))

	)

64 #ifde‡
__˝lu•lus


	@include/ppc/sysAtomic.h

1 #ifde‡
__SYSATOM_H__


2 
	#__SYSATOM_H__


	)

4 
	~<libc/ˇgboŸ.h
>

5 
	#TRUE
 1

	)

6 
	#FALSE
 0

	)

9 
UINT32
 
	g©omicCÀ¨


11 
UINT32
 *
	gèrgë


16 
UINT32
 
	g©omic32Së


18 
UINT32
 *
	gèrgë
,

19 
UINT32
 
	gvÆue


23 
UINT32
 
	g©omic32Gë


25 
UINT32
 * 
	gèrgë


30 
UINT32
 
	g©omic32Add


32 
UINT32
 *
	gèrgë
,

33 
UINT32
 
	gvÆue


37 
UINT32
 
	g©omic32Sub


39 
UINT32
 *
	gèrgë
,

40 
UINT32
 
	gvÆue


44 
UINT32
 
	g©omic32And


46 
UINT32
 *
	gèrgë
,

47 
UINT32
 
	gvÆue


51 
UINT32
 
	g©omic32Or


53 
UINT32
 *
	gèrgë
,

54 
UINT32
 
	gvÆue


58 
UINT32
 
	g©omic32X‹


60 
UINT32
 *
	gèrgë
,

61 
UINT32
 
	gvÆue


65 
BOOL
 
	g©omic32Cas


67 
UINT32
 *
	gèrgë
,

68 
UINT32
 
	gldVÆue
,

69 
UINT32
 
	g√wVÆue


	@include/ppc/toolPpc.h

30 #i‚de‡
__INCtoﬁPpch


31 
	#__INCtoﬁPpch


	)

33 #ifde‡
__˝lu•lus


37 
	#_PPC_USE_SDA


	)

39 #if !
deföed
(
_DIAB_TOOL
Ë&& !deföed(
_GNU_TOOL
)

40 
	#_GNU_TOOL


	)

48 
	#_CPU_STACK_ALIGN_SIZE
 16

	)

49 
	#_CPU_STACK_ALIGN_SHIFT
 4

	)

51 
	#_CPU_ALLOC_ALIGN_SIZE
 16

	)

53 
	#FRAMEHEADERSZ
 8

	)

57 
	#FRAMEBASESZ
 ((
FRAMEHEADERSZ
 + (
_STACK_ALIGN_SIZE
 - 1)) & \

58 ~(
_STACK_ALIGN_SIZE
 - 1))

	)

60 #ifdef 
_ASMLANGUAGE


66 
	#p0
 
r3


	)

67 
	#p1
 
r4


	)

68 
	#p2
 
r5


	)

69 
	#p3
 
r6


	)

70 
	#p4
 
r7


	)

71 
	#p5
 
r8


	)

72 
	#p6
 
r9


	)

73 
	#p7
 
r10


	)

74 
	#gÃ0
 
r0


	)

76 
	#gÃ1
 
r11


	)

80 
	#gÃ2
 
r12


	)

83 
	#ªtvÆ0
 
r3


	)

84 
	#ªtvÆ1
 
r4


	)

88 
	#•
 
r1


	)

90 
	#t0
 
r14


	)

91 
	#t1
 
r15


	)

92 
	#t2
 
r16


	)

93 
	#t3
 
r17


	)

94 
	#t4
 
r18


	)

95 
	#t5
 
r19


	)

96 
	#t6
 
r20


	)

97 
	#t7
 
r21


	)

98 
	#t8
 
r22


	)

99 
	#t9
 
r23


	)

100 
	#t10
 
r24


	)

101 
	#t11
 
r25


	)

102 
	#t12
 
r26


	)

103 
	#t13
 
r27


	)

104 
	#t14
 
r28


	)

105 
	#t15
 
r29


	)

106 
	#t16
 
r30


	)

107 
	#t17
 
r31


	)

109 #ifdef 
_GNU_TOOL


113 
	#r0
 0

	)

114 
	#r1
 1

	)

115 
	#r2
 2

	)

116 
	#r3
 3

	)

117 
	#r4
 4

	)

118 
	#r5
 5

	)

119 
	#r6
 6

	)

120 
	#r7
 7

	)

121 
	#r8
 8

	)

122 
	#r9
 9

	)

123 
	#r10
 10

	)

124 
	#r11
 11

	)

125 
	#r12
 12

	)

126 
	#r13
 13

	)

127 
	#r14
 14

	)

128 
	#r15
 15

	)

129 
	#r16
 16

	)

130 
	#r17
 17

	)

131 
	#r18
 18

	)

132 
	#r19
 19

	)

133 
	#r20
 20

	)

134 
	#r21
 21

	)

135 
	#r22
 22

	)

136 
	#r23
 23

	)

137 
	#r24
 24

	)

138 
	#r25
 25

	)

139 
	#r26
 26

	)

140 
	#r27
 27

	)

141 
	#r28
 28

	)

142 
	#r29
 29

	)

143 
	#r30
 30

	)

144 
	#r31
 31

	)

146 #ifdef 
_PPC_MSR_FP


149 
	#Â0
 0

	)

150 
	#‰0
 0

	)

151 
	#f0
 0

	)

152 
	#Â1
 1

	)

153 
	#‰1
 1

	)

154 
	#f1
 1

	)

155 
	#Â2
 2

	)

156 
	#‰2
 2

	)

157 
	#f2
 2

	)

158 
	#Â3
 3

	)

159 
	#‰3
 3

	)

160 
	#f3
 3

	)

161 
	#Â4
 4

	)

162 
	#‰4
 4

	)

163 
	#f4
 4

	)

164 
	#Â5
 5

	)

165 
	#‰5
 5

	)

166 
	#f5
 5

	)

167 
	#Â6
 6

	)

168 
	#‰6
 6

	)

169 
	#f6
 6

	)

170 
	#Â7
 7

	)

171 
	#‰7
 7

	)

172 
	#f7
 7

	)

173 
	#Â8
 8

	)

174 
	#‰8
 8

	)

175 
	#f8
 8

	)

176 
	#Â9
 9

	)

177 
	#‰9
 9

	)

178 
	#f9
 9

	)

179 
	#Â10
 10

	)

180 
	#‰10
 10

	)

181 
	#f10
 10

	)

182 
	#Â11
 11

	)

183 
	#‰11
 11

	)

184 
	#f11
 11

	)

185 
	#Â12
 12

	)

186 
	#‰12
 12

	)

187 
	#f12
 12

	)

188 
	#Â13
 13

	)

189 
	#‰13
 13

	)

190 
	#f13
 13

	)

191 
	#Â14
 14

	)

192 
	#‰14
 14

	)

193 
	#f14
 14

	)

194 
	#Â15
 15

	)

195 
	#‰15
 15

	)

196 
	#f15
 15

	)

197 
	#Â16
 16

	)

198 
	#‰16
 16

	)

199 
	#f16
 16

	)

200 
	#Â17
 17

	)

201 
	#‰17
 17

	)

202 
	#f17
 17

	)

203 
	#Â18
 18

	)

204 
	#‰18
 18

	)

205 
	#f18
 18

	)

206 
	#Â19
 19

	)

207 
	#‰19
 19

	)

208 
	#f19
 19

	)

209 
	#Â20
 20

	)

210 
	#‰20
 20

	)

211 
	#f20
 20

	)

212 
	#Â21
 21

	)

213 
	#‰21
 21

	)

214 
	#f21
 21

	)

215 
	#Â22
 22

	)

216 
	#‰22
 22

	)

217 
	#f22
 22

	)

218 
	#Â23
 23

	)

219 
	#‰23
 23

	)

220 
	#f23
 23

	)

221 
	#Â24
 24

	)

222 
	#‰24
 24

	)

223 
	#f24
 24

	)

224 
	#Â25
 25

	)

225 
	#‰25
 25

	)

226 
	#f25
 25

	)

227 
	#Â26
 26

	)

228 
	#‰26
 26

	)

229 
	#f26
 26

	)

230 
	#Â27
 27

	)

231 
	#‰27
 27

	)

232 
	#f27
 27

	)

233 
	#Â28
 28

	)

234 
	#‰28
 28

	)

235 
	#f28
 28

	)

236 
	#Â29
 29

	)

237 
	#‰29
 29

	)

238 
	#f29
 29

	)

239 
	#Â30
 30

	)

240 
	#‰30
 30

	)

241 
	#f30
 30

	)

242 
	#Â31
 31

	)

243 
	#‰31
 31

	)

244 
	#f31
 31

	)

249 
	#¸0
 0

	)

250 
	#¸1
 1

	)

251 
	#¸2
 2

	)

252 
	#¸3
 3

	)

253 
	#¸4
 4

	)

254 
	#¸5
 5

	)

255 
	#¸6
 6

	)

256 
	#¸7
 7

	)

259 
	#HIADJ
(
¨g
Ë◊rg)@
ha


	)

260 
	#HI
(
¨g
Ë◊rg)@
h


	)

261 
	#LO
(
¨g
Ë◊rg)@
l


	)

263 
	#SDA21
(
¨g
Ë◊rg)@
	`sda21
(0)

	)

267 
	#FUNC
(
func
Ë
	)
func

268 
	#FUNC_LABEL
(
func
Ëfunc:

	)

270 
	#FUNC_DECL
(
ønge
, 
func
)

	)

271 
	#VAR_DECL
(
v¨
Ë
	)
v¨

272 
	#VAR
(
v¨
Ë
	`v¨
(
r0
)

	)

274 
	#GTEXT
(
sym
Ë
	`FUNC
(symË; .
ty≥
 FUNC(sym),@
fun˘i⁄


	)

275 
	#GDATA
(
sym
Ë
	`VAR_DECL
(symË; .
ty≥
 VAR_DECL(sym),@
obje˘


	)

278 
	#IMPORT
 

	)

279 
	#FUNC_EXPORT
(
func
Ë.
globl
 
	`GTEXT
(func)

	)

280 
	#DATA_EXPORT
(
v¨
Ë.
globl
 
	`GDATA
(v¨)

	)

281 
	#FUNC_IMPORT
(
func
Ë.
	`FUNC
(func)

	)

282 
	#DATA_IMPORT
(
v¨
Ë.
	`VAR_DECL
(v¨)

	)

283 
	#FUNC_BEGIN
(
func
Ë
	`FUNC_LABEL
(func)

	)

284 
	#FUNC_END
(
func
Ë.
size
 
	`FUNC
(func), . - FUNC(func)

	)

287 
	#_CAG_TEXT_SEG_START
 \

288 .
ãxt
 ; .
bÆign
 
_PPC_TEXT_SEG_ALIGN


	)

290 
	#FRAMESZ
(
ƒegs
) \

291 
	`ROUND_UP
((
FRAMEBASESZ
 + 
ƒegs
 * 
_PPC_REG_SIZE
), 
_STACK_ALIGN_SIZE
)

	)

293 
	#LOADPTR
(
ªg
,
c⁄°32
) \

294 
addis
 
ªg
,
r0
,
	`HIADJ
(
c⁄°32
); 
addi
Ñeg,ªg,
	`LO
(c⁄°32)

	)

296 
	#LOADVAR
(
ªg
,
c⁄°32
) \

297 
addis
 
ªg
,
r0
,
	`HIADJ
(
c⁄°32
); 
lwz
Ñeg,
	`LO
(c⁄°32)‘eg)

	)

299 #ifdef 
_PPC_USE_SDA


301 
	#LOADPTR_SDA
(
ªg
,
c⁄°32
) \

302 
œ
 
ªg
,
	`SDA21
(
c⁄°32
)

	)

304 
	#LOADVAR_SDA
(
ªg
,
c⁄°32
) \

305 
lwz
 
ªg
,
	`SDA21
(
c⁄°32
)

	)

307 
	#STOREVAR_SDA
(
v
,
sc
,
c⁄°32
) \

308 
°w
 
v
,
	`SDA21
(
c⁄°32
)

	)

312 
	#LOADPTR_SDA
(
ªg
,
c⁄°32
Ë
	`LOADPTR
‘eg,c⁄°32)

	)

314 
	#LOADVAR_SDA
(
ªg
,
c⁄°32
Ë
	`LOADVAR
‘eg,c⁄°32)

	)

316 
	#STOREVAR_SDA
(
v
,
ªg
,
c⁄°32
) \

317 
addis
 
ªg
,
r0
,
	`HIADJ
(
c⁄°32
); 
°w
 
v
,
	`LO
(c⁄°32)‘eg)

	)

323 
	#IMPORT
 

	)

324 
	#FUNCREF
(
func
Ë
	)
func

334 #ifdef 
_CPU_STACK_ALIGN_SIZE


335 
	#_STACK_ALIGN_SIZE
 
_CPU_STACK_ALIGN_SIZE


	)

337 #i‚de‡
_ASMLANGUAGE


338 
	#_STACK_ALIGN_SIZE
 
_µcSèckAlignSize


	)

339 
_µcSèckAlignSize
;

343 #ifdef 
_CPU_ALLOC_ALIGN_SIZE


344 
	#_ALLOC_ALIGN_SIZE
 
_CPU_ALLOC_ALIGN_SIZE


	)

346 #i‚de‡
_ASMLANGUAGE


347 
	#_ALLOC_ALIGN_SIZE
 
_µcAŒoˇti⁄Qu™tumSize


	)

348 
_µcAŒoˇti⁄Qu™tumSize
;

352 #ifde‡
__˝lu•lus


	@kernel/epic/sysInt.c

27 
	~<c⁄fig.h
>

28 
	~<p1020rdb.h
>

29 
	~<libc/ˇgboŸ.h
>

30 
	~<kî√l/sysPic.h
>

31 
	~<kî√l/sysOs.h
>

32 
	~<µc/toﬁPpc.h
>

33 
	~<libc/°ddef.h
>

34 
	~<libc/°dio.h
>

35 
	~<libc/°rög.h
>

37 (*
	túqH™dÀr
)(
	tUINT32
, *);

38 
IMPORT
 
UINT32
 * 
sysEpicI¡AckReg
;

39 
IMPORT
 
UINT16
 
sysEpicSpuriousVe˘‹
;

41 
	#IRQ_MAX_NUM
 (
EPIC_EX_IRQ_NUM
 + 
EPIC_IN_IRQ_NUM
)

	)

43 
	súqDes¸ùt‹
 {

44 
úqH™dÀr
 
h™dÀr
;

45 
UINT32
 
úqnum
;

46 
UINT32
 
Êags
;

47 
UINT32
 
cou¡
;

48 * 
pD©a
;

49 
«me
[32];

50 } 
	túqDesNode
;

52 
úqDesNode
 
úqDe£TabÀ
[
IRQ_MAX_NUM
];

54 
	$úqInô
()

56 
	`mem£t
(
úqDe£TabÀ
,0,(irqDeseTable));

57 
	}
}

59 
	$úqUƒegi°î
(
úqNum
)

61 sig√d 
ªt
=0;

63 if(
úqNum
>=
IRQ_MAX_NUM
) {

64 
ªt
=-1;

65 
	`¥ötf
("úqNum i†bey⁄dÅhêmaxÇum :%s\n",
__FUNCTION__
);

68 
	`OS_CRITICAL_ENTER
();

69 if(
úqDe£TabÀ
[
úqNum
].
h™dÀr
!=
NULL
) {

70 
úqDe£TabÀ
[
úqNum
].
h™dÀr
=(
úqH™dÀr
)
NULL
;

71 
úqDe£TabÀ
[
úqNum
].
pD©a
=
NULL
;

72 
	`mem£t
(
úqDe£TabÀ
[
úqNum
].
«me
,(irqDeseTable[irqNum].name),0);

73 
úqDe£TabÀ
[
úqNum
].
Êags
=0;

74 
úqDe£TabÀ
[
úqNum
].
úqnum
=0xffffffff;

76 
	`OS_CRITICAL_EXIT
();

78  
ªt
;

79 
	}
}

81 
	$úqRªgi°î
(
úqNum
,
úqH™dÀr
 
h™dÀr
,* 
¥iv©e_d©a
,c⁄° * 
«me
)

83 sig√d 
ªt
=0;

85 if(
«me
 =
NULL
) {

86 
ªt
 = -1;

87 
	`¥ötf
("thêöàh™dÀ∏«mêi†nŸ deföed,%s\n",
__FUNCTION__
);

88  
ªt
;

91 if(
úqNum
>=
IRQ_MAX_NUM
) {

92 
ªt
=-1;

93 
	`¥ötf
("úqNum i†bey⁄dÅhêmaxÇum :%s\n",
__FUNCTION__
);

95 
	`OS_CRITICAL_ENTER
();

96 if(
NULL
==
úqDe£TabÀ
[
úqNum
].
h™dÀr
) {

97 
úqDe£TabÀ
[
úqNum
].
h™dÀr
=handler;

98 
úqDe£TabÀ
[
úqNum
].
pD©a
=
¥iv©e_d©a
;

99 
	`°∫˝y
(
úqDe£TabÀ
[
úqNum
].
«me
,name,32);

100 
úqDe£TabÀ
[
úqNum
].
Êags
=0;

101 
úqDe£TabÀ
[
úqNum
].
úqnum
=irqNum;

103 
ªt
=-1;

105 
	`OS_CRITICAL_EXIT
();

107  
ªt
;

108 
	}
}

142 
	$OSI¡H™dÀr
 ()

144 
UINT32
 
ve˘‹
 = 
sysEpicSpuriousVe˘‹
;

145 
UINT32
 
sysEpicI¡VecCheck
 = 
sysEpicSpuriousVe˘‹
;

149 
TRUE
) {

152 
ve˘‹
 = 
	`EPIC_REG_NO_OFFSET_READ
(
sysEpicI¡AckReg
) & 0xffff;

153 i‡(
ve˘‹
 =
sysEpicI¡VecCheck
)

156 ++
úqDe£TabÀ
[
ve˘‹
].
cou¡
;

157 if(
úqDe£TabÀ
[
ve˘‹
].
h™dÀr
 !
NULL
) {

158 (
úqDe£TabÀ
[
ve˘‹
].
h™dÀr
)(ve˘‹,úqDe£TabÀ[ve˘‹].
pD©a
);

161 
	`EPIC_REG_NO_OFFSET_WRITE
((
UINT32
)
sysEpicI¡AckReg
 +

162 (
EPIC_EOI_REG
 - 
EPIC_INT_ACK_REG
), 0x0);

164 
	}
}

	@kernel/epic/sysPic.c

30 
	~<c⁄fig.h
>

31 
	~<p1020rdb.h
>

32 
	~<kî√l/sysPic.h
>

33 
	~<libc/ˇgboŸ.h
>

34 
	~<µc/toﬁPpc.h
>

38 
	#PPC_PVR_E500V2
 0x80210000

	)

39 
	#PPC_SVR_MASK
 0xFFF00000

	)

40 
	#NULL
 0

	)

44 
sysEpicI¡E«bÀ
 (
UINT32
 
ve˘‹
);

45 
sysEpicI¡DißbÀ
 (
UINT32
 
ve˘‹
);

47 
sysEpicInô
 ();

48 
STATUS
 
sysEpicI¡Sour˚Së
 (
UINT32
 
§cAddr
, 
pﬁ¨ôy
,

49 
£n£
, 
¥i‹ôy
, 
ve˘‹
);

50 
sysEpicCurTaskPrioSë
 (
¥ioNum
, 
˝u
);

51 
UINT32
 
sysEpicCpuAvaûGë
 ();

55 
LOCAL
 
UINT32
 
	gpEpicRegBa£
 = 
_CAG_CONFIG_CCSBAR
;

58 
IMPORT
 
OSTimeTick
 ();

62 
UINT32
 * 
	gsysEpicI¡AckReg
;

63 
UINT16
 
	gsysEpicSpuriousVe˘‹
=0xff;

64 
UINT32
 
	gnumInI¡s
 = 0;

86 
	$sysEpicInô
 ()

88 
UINT32
 
g¸VÆ
;

89 
UINT32
 
idrVÆ
;

90 
UINT32
 
bº1
;

91 
úq
 = 0;

92 
i
 = 0 ;

93 
BOOL
 
⁄BoŸCpu
 = (
	`EPIC_REG_READ
(
EPIC_WHO_AM_I_REG
)) == 0

94 ? 
TRUE
 : 
FALSE
;

96 
UINT32
 
exPﬁ¨
 = 
EPIC_EX_DFT_POLAR
;

97 
UINT32
 
exSí£
 = 
EPIC_EX_DFT_SENSE
;

98 
UINT32
 
öPﬁ¨
 = 
EPIC_IN_DFT_POLAR
;

100 
sysEpicI¡AckReg
 = (
UINT32
 *Ë((UINT32Ë
pEpicRegBa£
 + 
EPIC_INT_ACK_REG
);

102 
	`úqInô
();

106 i‡(
⁄BoŸCpu
) {

108 
g¸VÆ
 = 
	`EPIC_REG_READ
(
EPIC_GLOBAL_REG
);

110 
g¸VÆ
 |(
EPIC_GCR_RESET
);

112 
	`EPIC_REG_WRITE
(
EPIC_GLOBAL_REG
, 
g¸VÆ
);

116 
	`EPIC_REG_READ
(
EPIC_GLOBAL_REG
Ë& 
EPIC_GCR_RESET
) {

121 
	`EPIC_REG_WRITE
(
EPIC_SPUR_VEC_REG
, 
sysEpicSpuriousVe˘‹
);

123 
g¸VÆ
 = 
	`EPIC_REG_READ
(
EPIC_GLOBAL_REG
);

125 
g¸VÆ
 |(
EPIC_GCR_MODE_MIXED
);

127 
	`EPIC_REG_WRITE
(
EPIC_GLOBAL_REG
, 
g¸VÆ
);

130 ((
UINT16
)
	`EPIC_REG_READ
(
EPIC_INT_ACK_REG
) & 0xffff) !=

131 (
UINT16
)
sysEpicSpuriousVe˘‹
) {

133 
	`_CAG_ASM
 ("isync;sync");

136  
úq
 = 0 ; irq < 
EPIC_EX_IRQ_NUM
 ; irq++ ) {

139 i‡(
⁄BoŸCpu
) {

140 
	`sysEpicI¡DißbÀ
 (
úq
);

141 
idrVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_EX_DEST_REG
(
úq
));

142 
idrVÆ
 &= ~0x1;

143 
	`EPIC_REG_WRITE
(
	`EPIC_EX_DEST_REG
(
úq
), 
idrVÆ
);

146 i‡(
⁄BoŸCpu
)

147 
	`sysEpicI¡Sour˚Së
 (
	`EPIC_EX_VEC_REG
(
úq
),

148 
exPﬁ¨
, 
exSí£
, 0x0, 0x0);

151  
úq
 = 0; 
i
 < 
EPIC_IN_IRQ_NUM
; i++ ) {

152 i‡(
⁄BoŸCpu
) {

153 
	`sysEpicI¡DißbÀ
 (
úq
);

154 
idrVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_IN_DEST_REG
(
úq
));

155 
idrVÆ
 &= ~0x1;

156 
	`EPIC_REG_WRITE
(
	`EPIC_IN_DEST_REG
(
úq
), 
idrVÆ
);

158 i‡(
⁄BoŸCpu
)

159 
	`sysEpicI¡Sour˚Së
 (
	`EPIC_IN_VEC_REG
(
úq
), 
öPﬁ¨
, 0x0, 0x0, 0x0);

162 i‡(
⁄BoŸCpu
) {

163  
i
 = 0 ; i < 
	`sysEpicCpuAvaûGë
() ; i++ )

164 
	`sysEpicCurTaskPrioSë
 (
EPIC_PRIORITY_MIN
, 
i
);

167 
bº1
 = 
	`EPIC_REG_READ
(
EPIC_BRR1
);

169 if(
bº1
 =
FSL_EPIC_441
) {

170 
numInI¡s
 = 128;

172 
numInI¡s
 = 64;

175 #i‡
_CAG_CONFIG_AMP1
 == 1

176 
	`EPIC_REG_READ
(
	`EPIC_EX_VEC_REG
(0x2)Ë& 
EPIC_EIVPR_INTR_MSK
) {

177 
	`¥ötf
("WaitingÅhe EPIC finish init\n");

181 
	}
}

203 
	gsysEpicCurTaskPrioSë


205 
	g¥ioNum
,

206 
	g˝u


209 
INT32
 
	gﬁdPrio
;

211 i‡((
	g¥ioNum
 < 
	gEPIC_PRIORITY_MIN
Ë|| (¥ioNum > 
	gEPIC_PRIORITY_MAX
)) {

212  (()
	gEPIC_INV_PRIO_ERROR
);

215 
	gﬁdPrio
 = 
EPIC_REG_READ
(
EPIC_CTASK_PRIn_REG
(
˝u
));

216 
EPIC_REG_WRITE
(
EPIC_CTASK_PRIn_REG
(
˝u
), 
¥ioNum
);

218  (
	gﬁdPrio
);

237 
	gsysEpicI¡E«bÀ


239 
UINT32
 
	gve˘‹


242 
UINT32
 
	g§cVÆ
;

243 
UINT32
 
	gîrCode
;

244 
UINT32
 
	g§cAddr
 = 
EPIC_EX_VEC_REG
(
ve˘‹
);

246 i‡(
	gve˘‹
 >
EPIC_MAX_ALL_IRQS
)

247  (
ERROR
);

249 if(
	g§cAddr
 > 
	gEPIC_EX_INT11_VEC_REG
)

250 
	gîrCode
 = 
EPIC_IN_INTERRUPT
;

252 
	gîrCode
 = 
EPIC_EX_INTERRUPT
;

254 
	g§cVÆ
 = 
EPIC_REG_READ
(
§cAddr
);

256 
	gîrCode
) {

257 
	gEPIC_EX_INTERRUPT
:

258 
§cVÆ
 &~(
EPIC_EIVPR_INTR_MSK
);

261 
	gEPIC_IN_INTERRUPT
:

262 
§cVÆ
 &~(
EPIC_IIVPR_INTR_MSK
);

265  (
ERROR
);

268 
EPIC_REG_WRITE
(
§cAddr
, 
§cVÆ
);

270  
	gOK
;

288 
	gsysEpicI¡DißbÀ


290 
UINT32
 
	gve˘‹


293 
UINT32
 
	g§cVÆ
;

294 
UINT32
 
	gîrCode
;

295 
UINT32
 
	g§cAddr
 = 
EPIC_EX_VEC_REG
(
ve˘‹
);

297 i‡(
	gve˘‹
 >
EPIC_MAX_ALL_IRQS
)

298  (
ERROR
);

300 if(
	g§cAddr
 > 
	gEPIC_EX_INT11_VEC_REG
)

301 
	gîrCode
 = 
EPIC_IN_INTERRUPT
;

303 
	gîrCode
 = 
EPIC_EX_INTERRUPT
;

305 
	g§cVÆ
 = 
EPIC_REG_READ
(
§cAddr
);

307 
	gîrCode
) {

308 
	gEPIC_EX_INTERRUPT
:

309 
§cVÆ
 |
EPIC_EIVPR_INTR_MSK
;

312 
	gEPIC_IN_INTERRUPT
:

313 
§cVÆ
 |
EPIC_IIVPR_INTR_MSK
;

317  (
ERROR
);

320 
EPIC_REG_WRITE
(
§cAddr
, 
§cVÆ
);

322  
	gOK
;

336 
STATUS
 
	gsysEpicI¡Sour˚Së


338 
UINT32
 
	g§cAddr
,

339 
	gpﬁ¨ôy
,

340 
	g£n£
,

341 
	g¥i‹ôy
,

342 
	gve˘‹


345 
UINT32
 
	g§cVÆ
;

346 
UINT32
 
	gîrCode
;

348 if(
	g§cAddr
 > 
	gEPIC_EX_INT11_VEC_REG
)

349 
	gîrCode
 = 
EPIC_IN_INTERRUPT
;

351 
	gîrCode
 = 
EPIC_EX_INTERRUPT
;

353 
	g§cVÆ
 = 
EPIC_REG_READ
(
§cAddr
);

355 
	gîrCode
) {

356 
	gEPIC_EX_INTERRUPT
:

357 i‡(
§cVÆ
 & 
EPIC_EIVPR_INTR_ACTIVE
) {

358  (
EPIC_INTER_IN_SERVICE
);

361 
	g§cVÆ
 &~(
EPIC_EIVPR_INTR_POLARITY
 |

362 
EPIC_EIVPR_INTR_SENSE
 |

363 
EPIC_EIVPR_PRIORITY_MSK
 |

364 
EPIC_EIVPR_VECTOR_MSK
);

366 
	g§cVÆ
 |(
EPIC_EIVPR_POLARITY
 (
pﬁ¨ôy
) |

367 
EPIC_EIVPR_SENS
 (
£n£
) |

368 
EPIC_EIVPR_PRIORITY
 (
¥i‹ôy
) |

369 
EPIC_EIVPR_VECTOR
 (
ve˘‹
));

372 
	gEPIC_IN_INTERRUPT
:

373 i‡(
§cVÆ
 & 
EPIC_IIVPR_INTR_ACTIVE
) {

374  (
EPIC_INTER_IN_SERVICE
);

377 
	g§cVÆ
 &~(
EPIC_IIVPR_INTR_POLARITY
 |

378 
EPIC_IIVPR_PRIORITY_MSK
 |

379 
EPIC_IIVPR_VECTOR_MSK
);

381 
	g§cVÆ
 |(
EPIC_IIVPR_POLARITY
 (
pﬁ¨ôy
) |

382 
EPIC_IIVPR_PRIORITY
 (
¥i‹ôy
) |

383 
EPIC_IIVPR_VECTOR
 (
ve˘‹
));

387  (
ERROR
);

390 
EPIC_REG_WRITE
(
§cAddr
, 
§cVÆ
);

392  (
	gOK
);

402 
UINT32
 
	$sysEpicCpuAvaûGë
 ( )

404 
UINT32
 
˝uNum
;

405 
UINT32
 
‰r
 = 
	`EPIC_REG_READ
(
EPIC_FEATURES_REG
);

406 
˝uNum
 = ((
‰r
 & 
EPIC_FRR_NCPU_MASK
Ë>> 
EPIC_FRR_NCPU_SHIFT
) + 1;

407  (
˝uNum
);

408 
	}
}

417 
	$sysEpicC⁄fig
()

419 
UINT32
 
úq
 = 0x2;

420 
UINT32
 
idrVÆ
 = 0;

421 
UINT32
 
vecVÆ
 = 0;

422 
	`úqRªgi°î
(
úq
, 
OSTimeTick
, 
NULL
, "FPGA_EXT");

423 #i‡ 
_CAG_CONFIG_AMP0
 == 1

425 
vecVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_EX_VEC_REG
(
úq
));

426 
vecVÆ
 |= 0x20002;

427 
	`EPIC_REG_WRITE
(
	`EPIC_EX_VEC_REG
(
úq
), 
vecVÆ
);

428 
idrVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_EX_DEST_REG
(
úq
));

429 
idrVÆ
 |= 0x1;

430 
	`EPIC_REG_WRITE
(
	`EPIC_EX_DEST_REG
(
úq
), 
idrVÆ
);

431 
	`sysEpicI¡E«bÀ
 (
úq
);

434 
vecVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_EX_VEC_REG
(
úq
));

435 
vecVÆ
 |= 0x20002;

436 
	`EPIC_REG_WRITE
(
	`EPIC_EX_VEC_REG
(
úq
), 
vecVÆ
);

437 
idrVÆ
 = 
	`EPIC_REG_READ
(
	`EPIC_EX_DEST_REG
(
úq
));

438 
idrVÆ
 |= 0x2;

440 
	`EPIC_REG_WRITE
(
	`EPIC_EX_DEST_REG
(
úq
), 
idrVÆ
);

441 
	`sysEpicI¡E«bÀ
 (
úq
);

443 
	}
}

	@kernel/ports/sysCount.c

37 
	#MICRIUM_SOURCE


	)

38 
	~<kî√l/sysOs.h
>

60 c⁄° 
CPU_INT08U
 
	gCPU_C¡LódZîosTbl
[256] = {

176 
CPU_DATA
 
	$CPU_C¡LódZîos
 (
CPU_DATA
 
vÆ
)

178 
CPU_DATA
 
nbr_Àad_zîos
;

180 
nbr_Àad_zîos
 = 
	`CPU_C¡LódZîos32
((
CPU_INT32U
)
vÆ
);

182  (
nbr_Àad_zîos
);

183 
	}
}

223 #i‡(
CPU_CFG_DATA_SIZE_MAX
 >
CPU_WORD_SIZE_32
)

224 
CPU_DATA
 
	$CPU_C¡LódZîos32
 (
CPU_INT32U
 
vÆ
)

226 
CPU_DATA
 
ix
;

227 
CPU_DATA
 
nbr_Àad_zîos
;

230 i‡(
vÆ
 > 0x0000FFFFu) {

231 i‡(
vÆ
 > 0x00FFFFFFu) {

233 
ix
 = (
CPU_DATA
)(
vÆ
 >> 24u);

234 
nbr_Àad_zîos
 = (
CPU_DATA
)(
CPU_C¡LódZîosTbl
[
ix
]);

238 
ix
 = (
CPU_DATA
)(
vÆ
 >> 16u);

239 
nbr_Àad_zîos
 = (
CPU_DATA
)((CPU_DATA)
CPU_C¡LódZîosTbl
[
ix
] + 8u);

243 i‡(
vÆ
 > 0x000000FFu) {

245 
ix
 = (
CPU_DATA
)(
vÆ
 >> 8u);

246 
nbr_Àad_zîos
 = (
CPU_DATA
)((CPU_DATA)
CPU_C¡LódZîosTbl
[
ix
] + 16u);

250 
ix
 = (
CPU_DATA
)(
vÆ
 >> 0u);

251 
nbr_Àad_zîos
 = (
CPU_DATA
)((CPU_DATA)
CPU_C¡LódZîosTbl
[
ix
] + 24u);

254  (
nbr_Àad_zîos
);

255 
	}
}

	@kernel/ports/sysEntry.c

30 
	~<c⁄fig.h
>

31 
	~<kî√l/sysOs.h
>

32 
	~<kî√l/sysM≠.h
>

33 
	~<µc/µc85xx.h
>

34 
	~<libc/°dio.h
>

35 
	~<kî√l/sysPic.h
>

42 
OS_TCB
 
	gAµTaskSèπTCB
;

43 
OS_TCB
 
	gMaöTaskSèπTCB
;

44 
OS_TCB
 
	g˛ockTaskSèπTCB
;

52 
AµTaskSèπ
 (*
p_¨g
);

53 
˛ockTaskSèπ
 (*
p_¨g
);

54 
sysEpicInô
 ();

55 
maö
 ();

58 
	gboŸög_°age
 = 0;

59 
	$sysBoŸ°age
(
°age
)

61 
boŸög_°age
 = 
°age
;

62 
	`¥ötf
("b†%d\n",
boŸög_°age
);

63 
	}
}

66 
__©åibuã__
((
wók
)Ë
	$maö
()

68 
	`¥ötf
("main() : callÑts \n");

69 
	}
}

84 
	$sysOs
()

86 
	`¥ötf
("tstA-6\n");

87 
	`¥ötf
("°ack from %xÅÿ%x\n",
KERNEL_STACK_LOW
,
IRQ_STACK_HIGH
);

88 
	`mem£t
(
KERNEL_STACK_HIGH
,0xbb,
IRQ_STACK_HIGH
-
KERNEL_STACK_LOW
);

89 
	`os_g≠_fûl
();

90 
	`os_g≠_check
();

91 
OS_ERR
 
os_îr
;

92 
	`OSInô
(&
os_îr
);

93 
	`os_g≠_check
();

95 
	`¥ötf
("tst0.1\n");

96 
UINT32
 
m§
=0;

97 
__asm__
 
	`__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

98 
m§
 &~(
_PPC_MSR_EE
);

99 
m§
 &=~(
_PPC_MSR_ME
);

100 
m§
 |
_PPC_MSR_ME
;

101 
__asm__
 
	`__vﬁ©ûe__
 ("mtm§ %0"::"r" (
m§
));

102 
__asm__
 
	`__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

103 
	`¥ötf
("tst1\n");

105 
	`OSTaskCª©e
(&
˛ockTaskSèπTCB
,

107 
˛ockTaskSèπ
,

109 
CLOCK_CFG_TASK_START_PRIO
,

110 (
CPU_STK
*)
TASK_CLK_STACK_HIGH
,

111 (
STASK_SIZE
 /10u),

112 
STASK_SIZE
,

115 (
UINT8
 *)(
TASK_SPESTACK_HIGH
-4*(
TASK_SPESTACK_SIZE
+
GAP_SIZE
)),

116 (
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
),

117 &
os_îr
);

119 
	`¥ötf
("main() start\n");

120 
	`maö
();

121 
	`os_g≠_check
();

122 
	`¥ötf
("main() done\n");

124 #i‡
_CAG_CONFIG_EPIC
 == 1

125 
	`powîpcI¡DißbÀ
();

126 
	`sysEpicInô
();

127 
	`powîpcI¡E«bÀ
();

129 
	`OSSèπ
(&
os_îr
);

130 
DEF_ON
) {

132 
	}
}

141 
UINT32
 
	$©omic32Së
 (
UINT32
 * 
èrgë
, UINT32 
vÆue
)

143 
UINT32
 
ﬁdVÆue
;

144 
ﬁdVÆue
 = *(vﬁ©ûê
UINT32
 *)
èrgë
;

145 *(vﬁ©ûê
UINT32
 *)
èrgë
 = 
vÆue
;

146  (
ﬁdVÆue
);

147 
	}
}

149 
UINT32
 
	$©omic32Cas
 (
UINT32
 * 
èrgë
, UINT32 
ﬁdVÆue
, UINT32 
√wVÆue
)

151 
sw≠≥d
 = 
FALSE
;

152 i‡(*(vﬁ©ûê
UINT32
 *)
èrgë
 =
ﬁdVÆue
) {

153 *(vﬁ©ûê
UINT32
 *)
èrgë
 = 
√wVÆue
;

154 
sw≠≥d
 = 
TRUE
;

156  (
sw≠≥d
);

157 
	}
}

159 
UINT32
 
	$©omic32Gë
 (
UINT32
 * 
èrgë
)

162  *(vﬁ©ûê
UINT32
 *)
èrgë
;

163 
	}
}

181 
	$AµTaskSèπ
 (*
p_¨g
)

183 
OS_ERR
 
os_îr
;

185 
DEF_ON
) {

187 
	`OSTimeDly
((
OS_TICK
 )6000,

188 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

189 (
OS_ERR
 *)&
os_îr
);

191 
	}
}

	@kernel/ports/sysHook.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

32 
	~<kî√l/sysHook.h
>

46 
	$Aµ_OS_SëAŒHooks
 ()

48 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

50 
	`CPU_CRITICAL_ENTER
();

51 
OS_AµTaskCª©eHookPå
 = 
Aµ_OS_TaskCª©eHook
;

52 
OS_AµTaskDñHookPå
 = 
Aµ_OS_TaskDñHook
;

53 
OS_AµTaskRëu∫HookPå
 = 
Aµ_OS_TaskRëu∫Hook
;

55 
OS_AµIdÀTaskHookPå
 = 
Aµ_OS_IdÀTaskHook
;

56 
OS_AµSètTaskHookPå
 = 
Aµ_OS_SètTaskHook
;

57 
OS_AµTaskSwHookPå
 = 
Aµ_OS_TaskSwHook
;

58 
OS_AµTimeTickHookPå
 = 
Aµ_OS_TimeTickHook
;

59 
	`CPU_CRITICAL_EXIT
();

61 
	}
}

76 
	$Aµ_OS_CÃAŒHooks
 ()

78 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

80 
	`CPU_CRITICAL_ENTER
();

81 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
)0;

82 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
)0;

83 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
)0;

85 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

86 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

87 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

88 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

89 
	`CPU_CRITICAL_EXIT
();

91 
	}
}

106 
	$Aµ_OS_TaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

108 ()&
p_tcb
;

109 
	}
}

124 
	$Aµ_OS_TaskDñHook
 (
OS_TCB
 *
p_tcb
)

126 ()&
p_tcb
;

127 
	}
}

143 
	$Aµ_OS_TaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

145 ()&
p_tcb
;

146 
	}
}

162 
	$Aµ_OS_IdÀTaskHook
 ()

165 
	}
}

180 
	$Aµ_OS_InôHook
 ()

183 
	}
}

199 
	$Aµ_OS_SètTaskHook
 ()

202 
	}
}

221 
	$Aµ_OS_TaskSwHook
 ()

224 
	}
}

239 
	$Aµ_OS_TimeTickHook
 ()

242 
	}
}

	@kernel/ports/sysOsIrq.S

52 
	#_ASMLANGUAGE


	)

53 
	~<µc/toﬁPpc.h
>

54 
	~<µc/¨chPpc.h
>

55 
	~<µc/asmPpc.h
>

56 
	~<µc/excPpcLib.h
>

58 
	$FUNC_EXPORT
(
OSI¡CtxSw
)

59 
	$FUNC_IMPORT
(
OSCtxSw
)

60 
	$DATA_IMPORT
(
OSTCBCurPå
)

80 
	$FUNC_BEGIN
(
OSI¡CtxSw
)

81 
lis
 
r10
,
OSTCBCurPå
@
ha


82 
lwz
 
r7
,
OSTCBCurPå
@
	$l
(
r10
)

83 
lwz
 
r1
,0(
r7
)

84 
bl
 
OSCtxSw


85 
lwz
 
r2
,
	$XR2
(
r1
)

86 
lwz
 
r3
,
	$XR3
(
r1
)

87 
lwz
 
r4
,
	$XR4
(
r1
)

88 
lwz
 
r5
,
	$XR5
(
r1
)

89 
lwz
 
r6
,
	$XR6
(
r1
)

90 
lwz
 
r7
,
	$XR7
(
r1
)

91 
lwz
 
r8
,
	$XR8
(
r1
)

92 
lwz
 
r9
,
	$XR9
(
r1
)

93 
lwz
 
r10
,
	$XR10
(
r1
)

94 
lwz
 
r11
,
	$XR11
(
r1
)

95 
lwz
 
r12
,
	$XR12
(
r1
)

96 
lwz
 
r13
,
	$XR13
(
r1
)

97 
lwz
 
r14
,
	$XR14
(
r1
)

98 
lwz
 
r15
,
	$XR15
(
r1
)

99 
lwz
 
r16
,
	$XR16
(
r1
)

100 
lwz
 
r17
,
	$XR17
(
r1
)

101 
lwz
 
r18
,
	$XR18
(
r1
)

102 
lwz
 
r19
,
	$XR19
(
r1
)

103 
lwz
 
r20
,
	$XR20
(
r1
)

104 
lwz
 
r21
,
	$XR21
(
r1
)

105 
lwz
 
r22
,
	$XR22
(
r1
)

106 
lwz
 
r23
,
	$XR23
(
r1
)

107 
lwz
 
r24
,
	$XR24
(
r1
)

108 
lwz
 
r25
,
	$XR25
(
r1
)

109 
lwz
 
r26
,
	$XR26
(
r1
)

110 
lwz
 
r27
,
	$XR27
(
r1
)

111 
lwz
 
r28
,
	$XR28
(
r1
)

112 
lwz
 
r29
,
	$XR29
(
r1
)

113 
lwz
 
r30
,
	$XR30
(
r1
)

114 
lwz
 
r31
,
	$XR31
(
r1
)

115 
lwz
 
r0
,
	$XLR
(
r1
)

116 
mér
 
r0


117 
lwz
 
r0
,
	$XCR
(
r1
)

118 
mt¸f
 255,
r0


119 
lwz
 
r0
,
	$XXER
(
r1
)

120 
mtxî
 
r0


121 
lwz
 
r0
,
	$XCTR
(
r1
)

122 
mt˘r
 
r0


123 
lwz
 
r0
,
	$XSRR1
(
r1
)

124 
mt•r
 
SRR1
,
r0


125 
lwz
 
r0
,
	$XSRR0
(
r1
)

126 
mt•r
 
SRR0
,
r0


127 
lwz
 
r0
,
	$XMSR
(
r1
)

128 
mtm§
 
r0


129 
lwz
 
r0
,
	$XR0
(
r1
)

130 
addi
 
r1
,r1,
EXC_FRAME_SIZE


131 
SYNC


132 
rfi


133 
	`FUNC_END
(
OSI¡CtxSw
)

	@kernel/ports/sysOsSwitchALib.S

30 
	#_ASMLANGUAGE


	)

31 
	~<c⁄fig.h
>

32 
	~<µc/toﬁPpc.h
>

33 
	~<µc/¨chPpc.h
>

34 
	~<µc/asmPpc.h
>

35 
	~<µc/excPpcLib.h
>

36 
	~<µc/µc85xx.h
>

44 
	$DATA_IMPORT
(
OSRu¬ög
)

45 
	$DATA_IMPORT
(
OSPrioCur
)

46 
	$DATA_IMPORT
(
OSPrioHighRdy
)

47 
	$DATA_IMPORT
(
OSTCBCurPå
)

48 
	$DATA_IMPORT
(
OSTCBHighRdyPå
)

50 
	$FUNC_IMPORT
(
OSTaskSwHook
)

51 
	$FUNC_EXPORT
(
OSSèπHighRdy
)

52 
	$FUNC_EXPORT
(
OSCtxSw
)

115 
	$FUNC_BEGIN
(
OSSèπHighRdy
)

119 
lis
 
r10
,
OSTCBHighRdyPå
@
ha


120 
lwz
 
r10
,
OSTCBHighRdyPå
@
	$l
(
r10
)

121 
lwz
 
r1
,0(
r10
)

122 
lwz
 
r2
,
	$XR2
(
r1
)

123 
lwz
 
r3
,
	$XR3
(
r1
)

124 
lwz
 
r4
,
	$XR4
(
r1
)

125 
lwz
 
r5
,
	$XR5
(
r1
)

126 
lwz
 
r6
,
	$XR6
(
r1
)

127 
lwz
 
r7
,
	$XR7
(
r1
)

128 
lwz
 
r8
,
	$XR8
(
r1
)

129 
lwz
 
r9
,
	$XR9
(
r1
)

130 
lwz
 
r10
,
	$XR10
(
r1
)

131 
lwz
 
r11
,
	$XR11
(
r1
)

132 
lwz
 
r12
,
	$XR12
(
r1
)

133 
lwz
 
r13
,
	$XR13
(
r1
)

134 
lwz
 
r14
,
	$XR14
(
r1
)

135 
lwz
 
r15
,
	$XR15
(
r1
)

136 
lwz
 
r16
,
	$XR16
(
r1
)

137 
lwz
 
r17
,
	$XR17
(
r1
)

138 
lwz
 
r18
,
	$XR18
(
r1
)

139 
lwz
 
r19
,
	$XR19
(
r1
)

140 
lwz
 
r20
,
	$XR20
(
r1
)

141 
lwz
 
r21
,
	$XR21
(
r1
)

142 
lwz
 
r22
,
	$XR22
(
r1
)

143 
lwz
 
r23
,
	$XR23
(
r1
)

144 
lwz
 
r24
,
	$XR24
(
r1
)

145 
lwz
 
r25
,
	$XR25
(
r1
)

146 
lwz
 
r26
,
	$XR26
(
r1
)

147 
lwz
 
r27
,
	$XR27
(
r1
)

148 
lwz
 
r28
,
	$XR28
(
r1
)

149 
lwz
 
r29
,
	$XR29
(
r1
)

150 
lwz
 
r30
,
	$XR30
(
r1
)

151 
lwz
 
r31
,
	$XR31
(
r1
)

152 
lwz
 
r0
,
	$XLR
(
r1
)

153 
mér
 
r0


154 
lwz
 
r0
,
	$XCR
(
r1
)

155 
mt¸f
 255,
r0


156 
lwz
 
r0
,
	$XXER
(
r1
)

157 
mtxî
 
r0


158 
lwz
 
r0
,
	$XCTR
(
r1
)

159 
mt˘r
 
r0


160 
lwz
 
r0
,
	$XSRR1
(
r1
)

161 
mt•r
 
SRR1
,
r0


162 
lwz
 
r0
,
	$XSRR0
(
r1
)

163 
mt•r
 
SRR0
,
r0


164 
lwz
 
r0
,
	$XR0
(
r1
)

165 
addi
 
r1
,r1, 
EXC_FRAME_SIZE


166 
SYNC


167 
bl
 
os_g≠_check


168 
rfi


169 
	$FUNC_END
(
OSSèπHighRdy
)

192 
	$FUNC_BEGIN
(
OSCtxSw
)

194 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

195 
°w
 
r0
,
	$XR0
(
r1
)

196 
mÊr
 
r0


198 
°w
 
r0
,
	$XSRR0
(
r1
)

199 
mfm§
 
r0


200 
°w
 
r0
,
	$XSRR1
(
r1
)

201 
mf˘r
 
r0


202 
°w
 
r0
,
	$XCTR
(
r1
)

203 
mfxî
 
r0


204 
°w
 
r0
,
	$XXER
(
r1
)

205 
mf¸
 
r0


206 
°w
 
r0
,
	$XCR
(
r1
)

207 
°w
 
r2
,
	$XR2
(
r1
)

208 
°w
 
r3
,
	$XR3
(
r1
)

209 
°w
 
r4
,
	$XR4
(
r1
)

210 
°w
 
r5
,
	$XR5
(
r1
)

211 
°w
 
r6
,
	$XR6
(
r1
)

212 
°w
 
r7
,
	$XR7
(
r1
)

213 
°w
 
r8
,
	$XR8
(
r1
)

214 
°w
 
r9
,
	$XR9
(
r1
)

215 
°w
 
r10
,
	$XR10
(
r1
)

216 
°w
 
r11
,
	$XR11
(
r1
)

217 
°w
 
r12
,
	$XR12
(
r1
)

218 
°w
 
r14
,
	$XR14
(
r1
)

219 
°w
 
r15
,
	$XR15
(
r1
)

220 
°w
 
r16
,
	$XR16
(
r1
)

221 
°w
 
r17
,
	$XR17
(
r1
)

222 
°w
 
r18
,
	$XR18
(
r1
)

223 
°w
 
r19
,
	$XR19
(
r1
)

224 
°w
 
r20
,
	$XR20
(
r1
)

225 
°w
 
r21
,
	$XR21
(
r1
)

226 
°w
 
r22
,
	$XR22
(
r1
)

227 
°w
 
r23
,
	$XR23
(
r1
)

228 
°w
 
r24
,
	$XR24
(
r1
)

229 
°w
 
r25
,
	$XR25
(
r1
)

230 
°w
 
r26
,
	$XR26
(
r1
)

231 
°w
 
r27
,
	$XR27
(
r1
)

232 
°w
 
r28
,
	$XR28
(
r1
)

233 
°w
 
r29
,
	$XR29
(
r1
)

234 
°w
 
r30
,
	$XR30
(
r1
)

235 
°w
 
r31
,
	$XR31
(
r1
)

237 
x‹
 
r0
,r0,r0

238 
addis
 
r10
,
r0
,
OSTCBCurPå
@
ha


239 
lwz
 
r7
,
OSTCBCurPå
@
	$l
(
r10
)

240 
°w
 
r1
,0(
r7
)

242 
lis
 
r10
,
OSTCBHighRdyPå
@
ha


243 
lwz
 
r7
,
OSTCBHighRdyPå
@
	$l
(
r10
)

244 
lwz
 
r3
,4(
r7
)

245 
bl
 
•eRe°‹e


248 
x‹
 
r0
,r0,r0

249 
addis
 
r10
,
r0
,
OSTCBHighRdyPå
@
ha


250 
lwz
 
r7
,
OSTCBHighRdyPå
@
	$l
(
r10
)

252 
x‹
 
r0
,r0,r0

253 
addis
 
r10
,
r0
,
OSTCBCurPå
@
ha


254 
°w
 
r7
,
OSTCBCurPå
@
	$l
(
r10
)

256 
lis
 
r9
,
OSPrioHighRdy
@
ha


257 
lwz
 
r9
,
OSPrioHighRdy
@
	$l
(
r9
)

259 
lis
 
r10
,
OSPrioCur
@
ha


260 
°w
 
r9
,
OSPrioCur
@
	$l
(
r10
)

262 
lwz
 
r1
,0(
r7
)

263 
lwz
 
r2
,
	$XR2
(
r1
)

264 
lwz
 
r3
,
	$XR3
(
r1
)

265 
lwz
 
r4
,
	$XR4
(
r1
)

266 
lwz
 
r5
,
	$XR5
(
r1
)

267 
lwz
 
r6
,
	$XR6
(
r1
)

268 
lwz
 
r7
,
	$XR7
(
r1
)

269 
lwz
 
r8
,
	$XR8
(
r1
)

270 
lwz
 
r9
,
	$XR9
(
r1
)

271 
lwz
 
r10
,
	$XR10
(
r1
)

272 
lwz
 
r11
,
	$XR11
(
r1
)

273 
lwz
 
r12
,
	$XR12
(
r1
)

274 
lwz
 
r13
,
	$XR13
(
r1
)

275 
lwz
 
r14
,
	$XR14
(
r1
)

276 
lwz
 
r15
,
	$XR15
(
r1
)

277 
lwz
 
r16
,
	$XR16
(
r1
)

278 
lwz
 
r17
,
	$XR17
(
r1
)

279 
lwz
 
r18
,
	$XR18
(
r1
)

280 
lwz
 
r19
,
	$XR19
(
r1
)

281 
lwz
 
r20
,
	$XR20
(
r1
)

282 
lwz
 
r21
,
	$XR21
(
r1
)

283 
lwz
 
r22
,
	$XR22
(
r1
)

284 
lwz
 
r23
,
	$XR23
(
r1
)

285 
lwz
 
r24
,
	$XR24
(
r1
)

286 
lwz
 
r25
,
	$XR25
(
r1
)

287 
lwz
 
r26
,
	$XR26
(
r1
)

288 
lwz
 
r27
,
	$XR27
(
r1
)

289 
lwz
 
r28
,
	$XR28
(
r1
)

290 
lwz
 
r29
,
	$XR29
(
r1
)

291 
lwz
 
r30
,
	$XR30
(
r1
)

292 
lwz
 
r31
,
	$XR31
(
r1
)

293 
lwz
 
r0
,
	$XLR
(
r1
)

294 
mér
 
r0


295 
lwz
 
r0
,
	$XCR
(
r1
)

296 
mt¸f
 255,
r0


297 
lwz
 
r0
,
	$XXER
(
r1
)

298 
mtxî
 
r0


299 
lwz
 
r0
,
	$XCTR
(
r1
)

300 
mt˘r
 
r0


301 
lwz
 
r0
,
	$XSRR1
(
r1
)

302 
mt•r
 
SRR1
,
r0


303 
lwz
 
r0
,
	$XSRR0
(
r1
)

304 
mt•r
 
SRR0
,
r0


305 
lwz
 
r0
,
	$XR0
(
r1
)

306 
addi
 
r1
,r1,
EXC_FRAME_SIZE


307 
SYNC


308 
rfi


309 
	`FUNC_END
(
OSCtxSw
)

	@kernel/ports/sysOsSwitchLib.c

30 
	#OS_CPU_GLOBALS


	)

37 
	~<c⁄fig.h
>

38 
	~<libc/°dio.h
>

39 
	~<µc/µc85xx.h
>

40 
	~<µc/toﬁPpc.h
>

41 
	~<µc/excPpcLib.h
>

42 
	~<µc/•ePpcLib.h
>

43 
	~<kî√l/sysOs.h
>

45 #ifde‡
__˝lu•lus


49 
_SDA_BASE_
[];

50 
_SDA2_BASE_
[];

51 
CPU_INT32U
 
gëTblms
 ();

52 
UINT32
 
CpuC‹e
;

53 
	gπsdebug
 = 0x0;

55 
	#STACK_BUFFER_SIZE
 0xA0

	)

56 
	gπsRu¬ög
 = 0;

58 
powîpcI¡DißbÀ
()

60 
CPU_INT32U
 
	gm§
=0;

61 
__asm__
 
__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

62 
	gm§
 &~(
_PPC_MSR_EE
);

63 
__asm__
 
__vﬁ©ûe__
 ("mtm§ %0"::"r" (
m§
));

64 
__asm__
 
__vﬁ©ûe__
 ("isync");

67 
powîpcI¡E«bÀ
()

70 i‡(
	gπsRu¬ög
 == 0x0)

74 
CPU_INT32U
 
	gm§
=0;

75 
__asm__
 
__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

76 
	gm§
 &~(
_PPC_MSR_EE
);

77 
	gm§
 |
_PPC_MSR_EE
;

78 
__asm__
 
__vﬁ©ûe__
 ("mtm§ %0"::"r" (
m§
));

79 
__asm__
 
__vﬁ©ûe__
 ("isync");

95 
OSIdÀTaskHook
 ()

97 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

98 i‡(
	gOS_AµIdÀTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

99 (*
OS_AµIdÀTaskHookPå
)();

116 
OSInôHook
 ()

118 
	gOSTickCå
=0;

119 
	gOSTickTaskTimeMax
=0;

120 
	gOSTickLi°Dly
.
	gTCB_På
 = (*)0;

121 
	gOSTickLi°Timeout
.
	gTCB_På
=(*)0;

137 
OSSètTaskHook
 ()

139 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

140 i‡(
	gOS_AµSètTaskHookPå
 !(
OS_APP_HOOK_VOID
)0) {

141 (*
OS_AµSètTaskHookPå
)();

159 
OSTaskCª©eHook
 (
OS_TCB
 *
p_tcb
)

161 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

162 i‡(
	gOS_AµTaskCª©eHookPå
 !(
OS_APP_HOOK_TCB
)0) {

163 (*
OS_AµTaskCª©eHookPå
)(
p_tcb
);

166 ()
	gp_tcb
;

183 
OSTaskDñHook
 (
OS_TCB
 *
p_tcb
)

185 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

186 i‡(
	gOS_AµTaskDñHookPå
 !(
OS_APP_HOOK_TCB
)0) {

187 (*
OS_AµTaskDñHookPå
)(
p_tcb
);

190 ()
	gp_tcb
;

208 
OSTaskRëu∫Hook
 (
OS_TCB
 *
p_tcb
)

210 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

211 i‡(
	gOS_AµTaskRëu∫HookPå
 !(
OS_APP_HOOK_TCB
)0) {

212 (*
OS_AµTaskRëu∫HookPå
)(
p_tcb
);

215 ()
	gp_tcb
;

248 
CPU_STK
 *
OSTaskStkInô
 (
OS_TASK_PTR
 
p_èsk
,

249 *
p_¨g
,

250 
CPU_STK
 *
p_°k_ba£
,

251 
CPU_STK
 *
p_°k_limô
,

252 
CPU_STK_SIZE
 
°k_size
,

253 
OS_OPT
 
›t
)

255 
CPU_STK
 *
	gp_°k
;

256 ()
	g›t
;

259 
	gp_°k
 = (
CPU_STK
 *)((CPU_STK)
p_°k_ba£
 & ~(
CPU_CFG_STK_ALIGN_BYTES
 - 1u));

265 
CPU_INT32U
 
	gm§
=0;

267 
__asm__
 
__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

268 
	gm§
 &~(
_PPC_MSR_EE
);

269 
	gm§
 |(
_PPC_MSR_EE
);

270 
	gm§
 &=~(
_PPC_MSR_PR
);

272 
	gm§
 &~(
_PPC_MSR_ME
);

273 
	gm§
 |(
_PPC_MSR_ME
);

274 
__asm__
 
__vﬁ©ûe__
 ("mtm§ %0"::"r" (
m§
));

281 
¥ötf
("h %x\n",*
p_°k_ba£
);

282 *--
	gp_°k
 = (
CPU_INT32U
)
m§
;

283 
¥ötf
("h2 %x\n",*
p_°k_ba£
);

284 *--
	gp_°k
 = 0L;

285 *--
	gp_°k
 = 0L;

286 *--
	gp_°k
 = 0L;

287 *--
	gp_°k
 = 0L;

288 *--
	gp_°k
 = 0L;

289 *--
	gp_°k
 = 0L;

290 *--
	gp_°k
 = 0L;

291 *--
	gp_°k
 = 0L;

292 *--
	gp_°k
 = 0L;

293 *--
	gp_°k
 = 0L;

294 *--
	gp_°k
 = 0L;

295 *--
	gp_°k
 = 0L;

296 *--
	gp_°k
 = 0L;

297 *--
	gp_°k
 = 0L;

298 *--
	gp_°k
 = 0L;

299 *--
	gp_°k
 = 0L;

300 *--
	gp_°k
 = 0L;

301 *--
	gp_°k
 = 0L;

302 *--
	gp_°k
 = (
CPU_INT32U
)&
_SDA_BASE_
;

303 *--
	gp_°k
 = 0L;

304 *--
	gp_°k
 = 0L;

305 *--
	gp_°k
 = 0L;

306 *--
	gp_°k
 = 0L;

307 *--
	gp_°k
 = 0L;

308 *--
	gp_°k
 = 0L;

309 *--
	gp_°k
 = 0L;

310 *--
	gp_°k
 = 0L;

311 *--
	gp_°k
 = 0L;

312 *--
	gp_°k
 = (
CPU_STK
)
p_¨g
;

313 *--
	gp_°k
 = (
CPU_INT32U
)&
_SDA2_BASE_
;

314 *--
	gp_°k
 = (
CPU_INT32U
)
OS_TaskRëu∫
;

315 --
	gp_°k
;

316 --
	gp_°k
;

317 --
	gp_°k
;

318 *--
	gp_°k
 = (
CPU_INT32U
)
m§
;

319 *--
	gp_°k
 = (
CPU_INT32U
)
p_èsk
;

320 --
	gp_°k
;

321 --
	gp_°k
;

322 *--
	gp_°k
 = (
CPU_INT32U
)
p_°k_ba£
;

324  (
	gp_°k
);

343 
OSTaskSwHook
 ()

345 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

346 
CPU_TS
 
	gts
;

349 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

350 i‡(
	gOS_AµTaskSwHookPå
 !(
OS_APP_HOOK_VOID
)0) {

351 (*
OS_AµTaskSwHookPå
)();

355 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

356 
	gts
 = 
OS_TS_GET
();

357 i‡(
	gOSTCBCurPå
 !
OSTCBHighRdyPå
) {

358 
OSTCBCurPå
->
Cy˛esDñè
 = 
ts
 - OSTCBCurPå->
Cy˛esSèπ
;

359 
	gOSTCBCurPå
->
	gCy˛esTŸÆ
 +(
OS_CYCLES
)
OSTCBCurPå
->
Cy˛esDñè
;

362 
	gOSTCBHighRdyPå
->
	gCy˛esSèπ
 = 
ts
;

377 
OSTimeTickHook
 ()

379 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

380 i‡(
	gOS_AµTimeTickHookPå
 !(
OS_APP_HOOK_VOID
)0) {

381 (*
OS_AµTimeTickHookPå
)();

386 #ifde‡
__˝lu•lus


	@kernel/thread/sysApi.c

46 
	#MICRIUM_SOURCE


	)

47 
	~<kî√l/sysOs.h
>

48 
	~<kî√l/sysM≠.h
>

49 
	~<µc/µc85xx.h
>

50 
	~<libc/°dio.h
>

52 
sysUsDñay
(
dñay
);

53 (*
	tFUNCPTR
) ();

54 
	`excVecInô
 (
FUNCPTR
 * 
ba£Addr
);

56 
	#RTS_NUM
 10

	)

57 
	#RTS_PRIO_BASE
 0

	)

58 
	#QUEUS_NUM
 20

	)

59 
	#SEM_NUM
 20

	)

60 
	#MUT_NUM
 20

	)

61 
	#RTS_TASK_PRIO
 1

	)

62 
	#OS_VERSION_STRING
 "20170320"

	)

63 c⁄° 
vîsi⁄_°rög
[] = 
OS_VERSION_STRING
;

65 
OS_TCB
 
πs_tcbs
[
RTS_NUM
];

66 
OS_Q
 
πs_msgq
[
QUEUS_NUM
];

67 
OS_SEM
 
πs_£m
[
SEM_NUM
];

68 
OS_MUTEX
 
πs_muãx
[
MUT_NUM
];

70 
°ack_pos
=0xffffffff;

72 
	$πs_v¨_öô
()

74 
i
=0;

75 
i
=0;i<
QUEUS_NUM
;i++) {

76 
πs_msgq
[
i
].
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

78 
i
=0;i<
SEM_NUM
;i++) {

79 
πs_£m
[
i
].
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

81 
i
=0;i<
MUT_NUM
;i++) {

82 
πs_muãx
[
i
].
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

84 
	}
}

86 
	$os_gë_¥io
(
id
)

88  
id
&0xffff;

89 
	}
}

91 
	$os_gë_pos
(
id
)

93  (
id
&0xffff0000)>>16;

94 
	}
}

115 
UINT32
 
	gpos
 = 0;

116 
	$os_¸óã_èsk
(*
≤ame
, *
±ask
, *
∑rg
, 
¥io
,
tq
, *
îr
)

118 i‡(
îr
 =
NULL
)

121 if(
¥io
 >
RTS_NUM
 ||Örio <0)

123 
	`OSTaskCª©e
(&
πs_tcbs
[
pos
],

124 
≤ame
,

125 
±ask
,

126 
∑rg
,

127 
¥io
+
RTS_PRIO_BASE
,

128 (
CPU_STK
*)(
TASK_STACK_HIGH
-(–
pos
 +
RTS_PRIO_BASE
)*(
TASK_STACK_SIZE
+
GAP_SIZE
))),

129 (
TASK_STACK_SIZE
/10u),

130 
TASK_STACK_SIZE
,

132 
tq
,

133 (*)(
TASK_SPESTACK_HIGH
-((
pos
+
RTS_PRIO_BASE
)*(
TASK_SPESTACK_SIZE
+
GAP_SIZE
))),

134 (
OS_OPT_TASK_STK_CHK
|
OS_OPT_TASK_STK_CLR
|
OS_OPT_TASK_SAVE_FP
),

135 
îr
);

137 
	`¥ötf
("####POS:%x, STACK:%x ",
pos
,
TASK_STACK_HIGH
-(’os+
RTS_PRIO_BASE
)*(
TASK_STACK_SIZE
+
GAP_SIZE
)));

138 
	`¥ötf
("SPESTACK:%x\n",
TASK_SPESTACK_HIGH
-((
pos
+
RTS_PRIO_BASE
)*(
TASK_SPESTACK_SIZE
+
GAP_SIZE
)));

139 
pos
++;

140 i‡(*
îr
 !
OS_ERR_NONE
)

143 
°ack_pos
 &~(1<<
pos
);

144  (
pos
<<16)|
¥io
;

146 
	}
}

165 
	$os_dñ_èsk
(
id
,*
îr
)

167 i‡(
îr
 =
NULL
)

171 if(
id
== 0xffff) {

172 
	`OSTaskDñ
(
OSTCBCurPå
, 
îr
);

174 
pos

	`os_gë_pos
(
id
);

175 if(
pos
>
RTS_NUM
 ||Öos<0)

177 
	`OSTaskDñ
(&
πs_tcbs
[
pos
], 
îr
);

180 i‡(*
îr
 !
OS_ERR_NONE
)

185 
	}
}

204 
	$os_ªsume_èsk
(
id
,*
îr
)

206 i‡(
îr
 =
NULL
)

209 
pos
 = 
	`os_gë_pos
(
id
);

210 if(
pos
 >
RTS_NUM
 ||Öos<0)

212 
	`OSTaskResume
(&
πs_tcbs
[
pos
],
îr
);

213 i‡(*
îr
 !
OS_ERR_NONE
)

217 
	}
}

236 
	$os_su•íd_èsk
(
id
, *
îr
)

238 i‡(
îr
 =
NULL
)

241 
pos
 = 
	`os_gë_pos
(
id
);

242 if(
pos
 >
RTS_NUM
 ||Öos <0)

244 
	`OSTaskSu•íd
(&
πs_tcbs
[
pos
],
îr
);

245 i‡(*
îr
 !
OS_ERR_NONE
)

249 
	}
}

269 
	$os_èsk_£t_ts
(
id
,
time_¶i˚
, *
îr
)

271 i‡(
îr
 =
NULL
)

274 
pos
 = 
	`os_gë_pos
(
id
);

275 if(
pos
 >
RTS_NUM
 ||Öos <0)

277 
	`OSTaskTimeQu™èSë
(&
πs_tcbs
[
pos
],
time_¶i˚
,
îr
);

278 i‡(*
îr
 !
OS_ERR_NONE
)

282 
	}
}

302 
	$os_èsk_£m_po°
(
id
, 
›t
, *
îr
)

304 
pos
 = 
	`os_gë_pos
(
id
);

305 if(
pos
 >
RTS_NUM
 ||Öos <0)

307  ()
	`OSTaskSemPo°
(&
πs_tcbs
[
pos
],
›t
,
îr
);

308 
	}
}

329 
	$os_èsk_£m_≥nd
(
timeout
, 
›t
, *
îr
)

331 
	`OSTaskSemPíd
(
timeout
,
›t
,
NULL
,
îr
);

333 i‡(*
îr
 =
OS_ERR_PEND_WOULD_BLOCK
) {

335 } i‡(*
îr
 !
OS_ERR_NONE
) {

340 
	}
}

360 
	$os_èsk_£m_£t
(
id
,
˙t
, *
îr
)

362 
pos
 = 
	`os_gë_pos
(
id
);

363 if(
pos
 >
RTS_NUM
 ||Öos <0)

365  ()
	`OSTaskSemSë
(&
πs_tcbs
[
pos
],
˙t
,
îr
);

366 
	}
}

386 
	$os_dñay_èsk
(
dly
, *
îr
)

388 
	`OSTimeDly
(
dly
, 
OS_OPT_TIME_DLY
,
îr
);

389 
	}
}

404 
	$udñay
(
us
)

406 
	`sysUsDñay
(
us
);

407 
	}
}

427 
	$os_queue_¸óã
(*
q«me
,
qsize
, *
îr
)

429 i‡(
îr
 =
NULL
)

432 
i
=0; i<
QUEUS_NUM
; i++) {

433 if(
πs_msgq
[
i
].
Ty≥
 =
OS_OBJ_TYPE_NONE
) {

434 
	`OSQCª©e
(&
πs_msgq
[
i
],
q«me
,
qsize
,
îr
);

435 i‡(*
îr
 =
OS_ERR_NONE
)

436  
i
;

442 
	}
}

462 
	$os_queue_dñ
(
qnum
,
›t
, *
îr
)

464 i‡(
îr
 =
NULL
)

467 
ªt
=0 ;

468 if(
qnum
 <0 || qnum >
QUEUS_NUM
 || 
πs_msgq
[qnum].
Ty≥
 !
OS_OBJ_TYPE_Q
) {

472 
	`OSQDñ
(&
πs_msgq
[
qnum
],
›t
,
îr
);

474 if(*
îr
 !
OS_ERR_NONE
)

477  
ªt
;

478 
	}
}

500 
	$os_queue_po°
(
qnum
,*
buf
,
size
,
›t
, *
îr
)

502 i‡(
îr
 =
NULL
)

505 if(
qnum
 <0||qnum >=
QUEUS_NUM
 ||
πs_msgq
[qnum].
Ty≥
 !
OS_OBJ_TYPE_Q
) {

509 
	`OSQPo°
(&
πs_msgq
[
qnum
],
buf
,
size
,
›t
,
îr
);

510 i‡(*
îr
 !
OS_ERR_NONE
)

514 
	}
}

538 
	$os_queue_gë
(
qnum
,*
buf
,*
size
,
›t
,
timeout
, *
îr
)

540 i‡(
îr
 =
NULL
)

543 if(
qnum
 <0||qnum >=
QUEUS_NUM
 ||
πs_msgq
[qnum].
Ty≥
 !
OS_OBJ_TYPE_Q
) {

547 
buf
=
	`OSQPíd
(&
πs_msgq
[
qnum
],
timeout
,
›t
,
size
,
NULL
,
îr
);

549 i‡(*
îr
 =
OS_ERR_PEND_WOULD_BLOCK
) {

551 } if(*
îr
 !
OS_ERR_NONE
) {

556 
	}
}

576 
	$os_£m_¸óã
(*
¢ame
, 
˙t
,*
îr
)

578 i‡(
îr
 =
NULL
)

581 
i
=0; i<
SEM_NUM
; i++) {

582 if(
πs_£m
[
i
].
Ty≥
 =
OS_OBJ_TYPE_NONE
) {

583 
	`OSSemCª©e
(&
πs_£m
[
i
],
¢ame
,
˙t
,
îr
);

584 i‡(*
îr
 !
OS_ERR_NONE
)

587  
i
;

591 
	}
}

611 
	$os_£m_dñ
(
sid
,
›t
,*
îr
)

613 i‡(
îr
 =
NULL
)

616 if(
sid
>=
SEM_NUM
 || sid <0 || 
πs_£m
[sid].
Ty≥
 !
OS_OBJ_TYPE_SEM
)

619 
	`OSSemDñ
(&
πs_£m
[
sid
],
›t
,
îr
);

620 i‡(*
îr
 !
OS_ERR_NONE
)

624 
	}
}

645 
	$os_£m_≥nd
(
sid
,
timeout
,
›t
,*
îr
)

647 i‡(
îr
 =
NULL
)

650 if(
sid
>=
SEM_NUM
 || sid <0 || 
πs_£m
[sid].
Ty≥
 !
OS_OBJ_TYPE_SEM
)

652 
	`OSSemPíd
(&
πs_£m
[
sid
],
timeout
,
›t
,
NULL
,
îr
);

654 i‡(*
îr
 =
OS_ERR_PEND_WOULD_BLOCK
) {

656 } i‡(*
îr
 !
OS_ERR_NONE
) {

661 
	}
}

681 
	$os_£m_po°
(
sid
, 
›t
, *
îr
)

683 i‡(
îr
 =
NULL
)

686 if(
sid
>=
SEM_NUM
 || sid <0 || 
πs_£m
[sid].
Ty≥
 !
OS_OBJ_TYPE_SEM
)

688 
	`OSSemPo°
(&
πs_£m
[
sid
],
›t
,
îr
);

689 i‡(*
îr
 !
OS_ERR_NONE
) {

693 
	}
}

712 
	$os_muãx_¸óã
(*
m«me
,*
îr
)

714 i‡(
îr
 =
NULL
)

717 
i
=0; i<
MUT_NUM
; i++) {

718 if(
πs_muãx
[
i
].
Ty≥
 =
OS_OBJ_TYPE_NONE
) {

719 
	`OSMuãxCª©e
(&
πs_muãx
[
i
],
m«me
,
îr
);

720 i‡(*
îr
 !
OS_ERR_NONE
)

723  
i
;

727 
	}
}

747 
	$os_muãx_dñ
(
mid
, 
›t
,*
îr
)

749 i‡(
îr
 =
NULL
)

752 if(
mid
>=
MUT_NUM
 || mid <0 || 
πs_muãx
[mid].
Ty≥
 !
OS_OBJ_TYPE_MUTEX
)

754 
	`OSMuãxDñ
(&
πs_muãx
[
mid
],
›t
,
îr
);

755 i‡(*
îr
 !
OS_ERR_NONE
)

759 
	}
}

780 
	$os_muãx_≥nd
(
mid
,
timeout
,
›t
,*
îr
)

782 i‡(
îr
 =
NULL
)

785 if(
mid
>=
MUT_NUM
 || mid <0 || 
πs_muãx
[mid].
Ty≥
 !
OS_OBJ_TYPE_MUTEX
)

787 
	`OSMuãxPíd
(&
πs_muãx
[
mid
],
timeout
,
›t
,
NULL
,
îr
);

789 i‡(*
îr
 =
OS_ERR_PEND_WOULD_BLOCK
) {

791 } i‡(*
îr
 !
OS_ERR_NONE
) {

796 
	}
}

816 
	$os_muãx_po°
(
mid
,
›t
,*
îr
)

818 i‡(
îr
 =
NULL
)

821 if(
mid
>=
MUT_NUM
 || mid <0 || 
πs_muãx
[mid].
Ty≥
 !
OS_OBJ_TYPE_MUTEX
)

823 
	`OSMuãxPo°
(&
πs_muãx
[
mid
],
›t
,
îr
);

824 i‡(*
îr
 !
OS_ERR_NONE
)

828 
	}
}

835 *
	$os_vîsi⁄
()

837  
vîsi⁄_°rög
;

838 
	}
}

841 
	#OS_BLOCK_SIZE
 0x01000000

	)

842 
	$os_c›y_d©a
(
UINT32
 
‰om
, 
INT32
 
size
)

844 
UINT32
 *
to
 = 
NULL
;

846 
	`os_gë_mno
()){

850 
to
 = 
‰om
 + 2 * 
OS_BLOCK_SIZE
;

858 
to
 = 
‰om
 + 
OS_BLOCK_SIZE
;

864 if(
to
 !
NULL
){

865 
	`mem˝y
(
to
,
‰om
,
size
);

868 
	}
}

870 
	$os_c›y_°ack
()

872 
UINT32
 *
‰om
 = 
NULL
;

873 
UINT32
 *
to
 = 
NULL
;

874 
UINT32
 
size
 = 0;

876 
	`os_gë_mno
()){

881 
‰om
 = 
GAP_0
;

882 
to
 = 
GAP_0
;

884 
size
 = 
GAP_END
 - 
GAP_0
;

892 
‰om
 = 
KERNEL_STACK_LOW
;

893 
to
 = 
KERNEL_STACK_LOW
 + 
OS_BLOCK_SIZE
,

895 
size
 = 
IRQ_STACK_HIGH
- 
KERNEL_STACK_LOW
;

901 if(
‰om
 !
NULL
){

902 
	`mem˝y
(
to
,
‰om
,
size
);

905 
	}
}

907 
	$os_˛ór_°ack
()

909 
UINT32
 *
to
=
NULL
;

910 
UINT32
 
size
=0;

912 
	`os_gë_mno
()){

917 
to
 = 
GAP_0
 + 
OS_BLOCK_SIZE
;

919 
size
 = 
GAP_END
- 
GAP_0
;

927 
to
 = 
KERNEL_STACK_LOW
 + 2*
OS_BLOCK_SIZE
;

929 
size
 = 
IRQ_STACK_HIGH
- 
KERNEL_STACK_LOW
;

937 if(
to
 !=
NULL
){

939 
	`mem£t
(
to
,0,
size
);

941 
	}
}

942 
	$os_˛ór_d©a
(
UINT32
 
‰om
, 
INT32
 
size
)

944 
UINT32
 *
to
 = 
NULL
;

946 
	`os_gë_mno
()){

951 
to
 = 
‰om
 + 
OS_BLOCK_SIZE
;

959 
to
 = 
‰om
 + 2*
OS_BLOCK_SIZE
;

966 if(
to
 !
NULL
){

967 
	`mem£t
(
to
,0,
size
);

969 
	}
}

	@kernel/thread/sysCfg.c

28 
	#MICRIUM_SOURCE


	)

29 
	~<kî√l/sysOs.h
>

30 
	~<kî√l/sysM≠.h
>

32 
	#OS_CFG_IDLE_TASK_STK_LIMIT
 ((
TASK_STACK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

33 
	#OS_CFG_STAT_TASK_STK_LIMIT
 ((
TASK_STACK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

34 
	#OS_CFG_TICK_TASK_STK_LIMIT
 ((
TASK_STACK_SIZE
 * 
OS_CFG_TASK_STK_LIMIT_PCT_EMPTY
Ë/ 100u)

	)

35 
	#OS_CFG_STAT_TASK_RATE_HZ
 10u

	)

36 
	#OS_CFG_TICK_RATE_HZ
 1000u

	)

44 
CPU_STK
 
	gOSCfg_IdÀTaskStk
 [1000 ];

46 #i‡(
OS_MSG_EN
 > 0u)

47 
OS_MSG
 
	gOSCfg_MsgPoﬁ
 [
OS_CFG_MSG_POOL_SIZE
];

56 #ifde‡
_CAG_CONFIG_AMP0


57 
CPU_STK
 * c⁄° 
	gOSCfg_IdÀTaskStkBa£På
 = (CPU_STK *)
TASK_STACK_4
;

59 
CPU_STK
 * c⁄° 
	gOSCfg_IdÀTaskStkBa£På
 = (CPU_STK *)
TASK_STACK_5
;

61 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkLimô
 = (CPU_STK_SIZE)
OS_CFG_IDLE_TASK_STK_LIMIT
;

63 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_IdÀTaskStkSize
 = (CPU_STK_SIZE)
STASK_SIZE
;

64 
CPU_INT32U
 c⁄° 
	gOSCfg_IdÀTaskStkSizeRAM
 = (CPU_INT32U )(
OSCfg_IdÀTaskStk
);

66 
OS_OBJ_QTY
 c⁄° 
	gOSCfg_I¡QSize
 = (OS_OBJ_QTY )0;

67 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QSizeRAM
 = (CPU_INT32U )0;

68 
CPU_STK
 * c⁄° 
	gOSCfg_I¡QTaskStkBa£På
 = (CPU_STK *)0;

69 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkLimô
 = (CPU_STK_SIZE)0;

70 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_I¡QTaskStkSize
 = (CPU_STK_SIZE)0;

71 
CPU_INT32U
 c⁄° 
	gOSCfg_I¡QTaskStkSizeRAM
 = (CPU_INT32U )0;

73 #i‡(
OS_MSG_EN
 > 0u)

74 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)
OS_CFG_MSG_POOL_SIZE
;

75 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )(
OSCfg_MsgPoﬁ
);

76 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)&
OSCfg_MsgPoﬁ
[0];

78 
OS_MSG_SIZE
 c⁄° 
	gOSCfg_MsgPoﬁSize
 = (OS_MSG_SIZE)0;

79 
CPU_INT32U
 c⁄° 
	gOSCfg_MsgPoﬁSizeRAM
 = (CPU_INT32U )0;

80 
OS_MSG
 * c⁄° 
	gOSCfg_MsgPoﬁBa£På
 = (OS_MSG *)0;

83 
CPU_STK_SIZE
 c⁄° 
	gOSCfg_StkSizeMö
 = (CPU_STK_SIZE)
OS_CFG_STK_SIZE_MIN
;

85 
OS_RATE_HZ
 c⁄° 
	gOSCfg_TickR©e_Hz
 = (OS_RATE_HZ )
OS_CFG_TICK_RATE_HZ
;

93 
CPU_INT32U
 c⁄° 
	gOSCfg_D©aSizeRAM
 = 0u

95 #i‡(
OS_MSG_EN
 > 0u)

96 + (
OSCfg_MsgPoﬁ
)

98 + (
OSCfg_IdÀTaskStk
);

119 
	$OSCfg_Inô
 ()

121 ()&
OSCfg_D©aSizeRAM
;

123 ()&
OSCfg_IdÀTaskStkBa£På
;

124 ()&
OSCfg_IdÀTaskStkLimô
;

125 ()&
OSCfg_IdÀTaskStkSize
;

126 ()&
OSCfg_IdÀTaskStkSizeRAM
;

128 #i‡(
OS_MSG_EN
 > 0u)

129 ()&
OSCfg_MsgPoﬁSize
;

130 ()&
OSCfg_MsgPoﬁSizeRAM
;

131 ()&
OSCfg_MsgPoﬁBa£På
;

134 ()&
OSCfg_StkSizeMö
;

136 ()&
OSCfg_TickR©e_Hz
;

137 
	}
}

	@kernel/thread/sysCore.c

28 
	#MICRIUM_SOURCE


	)

29 
	~<kî√l/sysOs.h
>

30 
	~<kî√l/sysM≠.h
>

31 
	~<µc/•ePpcLib.h
>

32 
	~<µc/µc85xx.h
>

35 
πs_v¨_öô
();

36 
UINT32
 
	gsynchr⁄iz©i⁄
 = 0x0;

37 
UINT32
 
	gÂga_tick
 = 333;

54 
	$OSInô
 (
OS_ERR
 *
p_îr
)

56 
	`OSInôHook
();

58 
OSI¡Ne°ögCå
 = (
OS_NESTING_CTR
)0;

60 
OSRu¬ög
 = 
OS_STATE_OS_STOPPED
;

62 
OSSchedLockNe°ögCå
 = (
OS_NESTING_CTR
)0;

64 
OSTCBCurPå
 = (
OS_TCB
 *)0;

65 
OSTCBHighRdyPå
 = (
OS_TCB
 *)0;

67 
OSPrioCur
 = (
OS_PRIO
)0;

68 
OSPrioHighRdy
 = (
OS_PRIO
)0;

69 
OSPrioSaved
 = (
OS_PRIO
)0;

71 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

73 
OSSchedRoundRoböEn
 = 
DEF_TRUE
;

74 
OSSchedRoundRoböDÊtTimeQu™è
 = 
OSCfg_TickR©e_Hz
 / 10u;

77 #i‡
OS_CFG_APP_HOOKS_EN
 > 0u

78 
OS_AµTaskCª©eHookPå
 = (
OS_APP_HOOK_TCB
 )0;

79 
OS_AµTaskDñHookPå
 = (
OS_APP_HOOK_TCB
 )0;

80 
OS_AµTaskRëu∫HookPå
 = (
OS_APP_HOOK_TCB
 )0;

82 
OS_AµIdÀTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

83 
OS_AµSètTaskHookPå
 = (
OS_APP_HOOK_VOID
)0;

84 
OS_AµTaskSwHookPå
 = (
OS_APP_HOOK_VOID
)0;

85 
OS_AµTimeTickHookPå
 = (
OS_APP_HOOK_VOID
)0;

88 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

89 
OSTaskRegNextAvaûID
 = (
OS_REG_ID
)0;

92 
	`OS_PrioInô
();

94 
	`OS_RdyLi°Inô
();

97 #i‡(
OS_MSG_EN
) > 0u

98 
	`OS_MsgPoﬁInô
(
p_îr
);

99 i‡(*
p_îr
 !
OS_ERR_NONE
) {

104 #i‡
OS_CFG_MUTEX_EN
 > 0u

105 
	`OS_MuãxInô
(
p_îr
);

106 i‡(*
p_îr
 !
OS_ERR_NONE
) {

111 #i‡
OS_CFG_Q_EN
 > 0u

112 
	`OS_QInô
(
p_îr
);

113 i‡(*
p_îr
 !
OS_ERR_NONE
) {

118 #i‡
OS_CFG_SEM_EN
 > 0u

119 
	`OS_SemInô
(
p_îr
);

120 i‡(*
p_îr
 !
OS_ERR_NONE
) {

125 
	`OS_TaskInô
(
p_îr
);

126 i‡(*
p_îr
 !
OS_ERR_NONE
) {

130 
	`OS_IdÀTaskInô
(
p_îr
);

131 i‡(*
p_îr
 !
OS_ERR_NONE
) {

135 
	`πs_v¨_öô
();

137 
	`OSCfg_Inô
();

138 
	}
}

169 
	$OSI¡E¡î
 ()

171 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

175 i‡(
OSI¡Ne°ögCå
 >(
OS_NESTING_CTR
)250u) {

179 
OSI¡Ne°ögCå
++;

181 
	}
}

204 
	$OSI¡Exô
 ()

206 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

210 i‡(
OSI¡Ne°ögCå
 =(
OS_NESTING_CTR
)0) {

213 
OSI¡Ne°ögCå
--;

214 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

218 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

222 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

234 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

235 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

239 #i‡
OS_CFG_SCHED_STRENGTHEN_EN
 > 0u

240 i‡(
OSPrioHighRdy
 == 0x1)

241 
OSTCBHighRdyPå
->
Tc⁄sumög
 = 
	`gë_Âga
();

244 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

245 
OSTCBHighRdyPå
->
CtxSwCå
++;

247 
OSTaskCtxSwCå
++;

249 
	`OSI¡CtxSw
();

250 
	`OS_TASK_SW_SYNC
();

251 
	}
}

269 
	$OSSched
 ()

271 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

275 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

279 
	`CPU_INT_DIS
();

280 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

282 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

283 i‡(
OSTCBHighRdyPå
 =
OSTCBCurPå
) {

284 
	`CPU_INT_EN
();

288 #i‡
OS_CFG_SCHED_STRENGTHEN_EN
 > 0u

289 i‡((
synchr⁄iz©i⁄
 =0x1Ë&& (
OSPrioHighRdy
 == 0x1)) {

290 
OSTCBHighRdyPå
->
Tc⁄sumög
 = 
	`gë_Âga
();

291 
synchr⁄iz©i⁄
 = 0x2;

295 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

296 
OSTCBHighRdyPå
->
CtxSwCå
++;

298 
OSTaskCtxSwCå
++;

300 
	`OS_TASK_SW
();

301 
	`CPU_INT_EN
();

303 
	`OS_TASK_SW_SYNC
();

304 
	}
}

327 
	$OSSchedLock
 (
OS_ERR
 *
p_îr
)

330 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

331 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

332 *
p_îr
 = 
OS_ERR_SCHED_LOCK_ISR
;

337 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

338 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

342 i‡(
OSSchedLockNe°ögCå
 >(
OS_NESTING_CTR
)250u) {

343 *
p_îr
 = 
OS_ERR_LOCK_NESTING_OVF
;

347 
	`CPU_CRITICAL_ENTER
();

348 
OSSchedLockNe°ögCå
++;

349 
	`CPU_CRITICAL_EXIT
();

350 *
p_îr
 = 
OS_ERR_NONE
;

351 
	}
}

375 
	$OSSchedU∆ock
 (
OS_ERR
 *
p_îr
)

378 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

379 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

380 *
p_îr
 = 
OS_ERR_SCHED_UNLOCK_ISR
;

385 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

386 *
p_îr
 = 
OS_ERR_OS_NOT_RUNNING
;

390 i‡(
OSSchedLockNe°ögCå
 =(
OS_NESTING_CTR
)0) {

391 *
p_îr
 = 
OS_ERR_SCHED_NOT_LOCKED
;

395 
	`CPU_CRITICAL_ENTER
();

396 
OSSchedLockNe°ögCå
--;

397 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

398 
	`CPU_CRITICAL_EXIT
();

399 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

403 
	`CPU_CRITICAL_EXIT
();

404 
	`OSSched
();

405 *
p_îr
 = 
OS_ERR_NONE
;

406 
	}
}

427 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

428 
	$OSSchedRoundRoböCfg
 (
CPU_BOOLEAN
 
í
,

429 
OS_TICK
 
dÊt_time_qu™è
,

430 
OS_ERR
 *
p_îr
)

432 
	`CPU_CRITICAL_ENTER
();

433 i‡(
í
 !
DEF_ENABLED
) {

434 
OSSchedRoundRoböEn
 = 
DEF_DISABLED
;

436 
OSSchedRoundRoböEn
 = 
DEF_ENABLED
;

439 i‡(
dÊt_time_qu™è
 > (
OS_TICK
)0) {

440 
OSSchedRoundRoböDÊtTimeQu™è
 = 
dÊt_time_qu™è
;

442 
OSSchedRoundRoböDÊtTimeQu™è
 = (
OS_TICK
)(
OSCfg_TickR©e_Hz
 / (
OS_RATE_HZ
)10);

444 
	`CPU_CRITICAL_EXIT
();

445 *
p_îr
 = 
OS_ERR_NONE
;

446 
	}
}

470 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

471 
	$OSSchedRoundRoböYõld
 (
OS_ERR
 *
p_îr
)

473 
OS_RDY_LIST
 *
p_rdy_li°
;

474 
OS_TCB
 *
p_tcb
;

476 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

477 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

478 *
p_îr
 = 
OS_ERR_YIELD_ISR
;

483 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

484 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

488 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

489 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_DISABLED
;

493 
	`CPU_CRITICAL_ENTER
();

494 
p_rdy_li°
 = &
OSRdyLi°
[
OSPrioCur
];

495 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

496 
	`CPU_CRITICAL_EXIT
();

497 *
p_îr
 = 
OS_ERR_ROUND_ROBIN_1
;

501 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

502 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

503 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

504 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

506 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

509 
	`CPU_CRITICAL_EXIT
();

511 
	`OSSched
();

512 *
p_îr
 = 
OS_ERR_NONE
;

513 
	}
}

541 
	$OSSèπ
 (
OS_ERR
 *
p_îr
)

543 i‡(
OSRu¬ög
 =
OS_STATE_OS_STOPPED
) {

544 
OSPrioHighRdy
 = 
	`OS_PrioGëHighe°
();

545 
OSPrioCur
 = 
OSPrioHighRdy
;

546 
OSTCBHighRdyPå
 = 
OSRdyLi°
[
OSPrioHighRdy
].
HódPå
;

547 
OSTCBCurPå
 = 
OSTCBHighRdyPå
;

548 
OSRu¬ög
 = 
OS_STATE_OS_RUNNING
;

549 
	`OSSèπHighRdy
();

550 *
p_îr
 = 
OS_ERR_FATAL_RETURN
;

552 *
p_îr
 = 
OS_ERR_OS_RUNNING
;

554 
	}
}

578 
	$OS_IdÀTask
 (*
p_¨g
)

580 ()&
p_¨g
;

582 
DEF_ON
) {

583 
	`CPU_CRITICAL_ENTER
();

584 
OSIdÀTaskCå
++;

585 
	`CPU_CRITICAL_EXIT
();

587 
	`OSIdÀTaskHook
();

589 
	}
}

606 
	$OS_IdÀTaskInô
 (
OS_ERR
 *
p_îr
)

609 
OSIdÀTaskCå
 = (
OS_IDLE_CTR
)0;

611 
	`OSTaskCª©e
((
OS_TCB
 *)&
OSIdÀTaskTCB
,

612 (
CPU_CHAR
 *)((*)"uC/OS-III Idle Task"),

613 (
OS_TASK_PTR
)
OS_IdÀTask
,

615 (
OS_PRIO
 )(
OS_CFG_PRIO_MAX
 - 1u),

616 (
CPU_STK
 *)
TASK_IDLE_STACK_HIGH
,

617 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkLimô
,

618 (
CPU_STK_SIZE
)
OSCfg_IdÀTaskStkSize
,

619 (
OS_MSG_QTY
 )0u,

620 (
OS_TICK
 )0u,

621 (
UINT8
 *)(
TASK_SPESTACK_HIGH
-5*(
TASK_SPESTACK_SIZE
+
GAP_SIZE
)),

622 (
OS_OPT
 )(
OS_OPT_TASK_STK_CHK
 | 
OS_OPT_TASK_STK_CLR
 | 
OS_OPT_TASK_NO_TLS
),

623 (
OS_ERR
 *)
p_îr
);

624 
	}
}

656 
	$OS_Píd
 (
OS_PEND_DATA
 *
p_≥nd_d©a
,

657 
OS_PEND_OBJ
 *
p_obj
,

658 
OS_STATE
 
≥ndög_⁄
,

659 
OS_TICK
 
timeout
)

661 
OS_PEND_LIST
 *
p_≥nd_li°
;

665 
OSTCBCurPå
->
PídOn
 = 
≥ndög_⁄
;

666 
OSTCBCurPå
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

668 
	`OS_TaskBlock
(
OSTCBCurPå
,

669 
timeout
);

671 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

672 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

673 
p_≥nd_d©a
->
PídObjPå
 = 
p_obj
;

674 
	`OS_PídD©aInô
((
OS_TCB
 *)
OSTCBCurPå
,

675 (
OS_PEND_DATA
 *)
p_≥nd_d©a
,

676 (
OS_OBJ_QTY
 )1);

677 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

678 
p_≥nd_d©a
);

680 
OSTCBCurPå
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

681 
OSTCBCurPå
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

683 
	}
}

706 
	$OS_PídAb‹t
 (
OS_PEND_OBJ
 *
p_obj
,

707 
OS_TCB
 *
p_tcb
,

708 
CPU_TS
 
ts
)

710 
p_tcb
->
TaskSèã
) {

711 
OS_TASK_STATE_RDY
:

712 
OS_TASK_STATE_DLY
:

713 
OS_TASK_STATE_SUSPENDED
:

714 
OS_TASK_STATE_DLY_SUSPENDED
:

717 
OS_TASK_STATE_PEND
:

718 
OS_TASK_STATE_PEND_TIMEOUT
:

719 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

720 
	`OS_PídAb‹t1
(
p_obj
,

721 
p_tcb
,

722 
ts
);

724 #i‡(
OS_MSG_EN
 > 0u)

725 
p_tcb
->
MsgPå
 = (*)0;

726 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

729 
p_tcb
->
TS
 = 
ts
;

730 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

731 
	`OS_PídLi°Remove
(
p_tcb
);

733 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

734 
	`OS_TickLi°Remove
(
p_tcb
);

736 
	`OS_RdyLi°In£π
(
p_tcb
);

737 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

738 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

739 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

742 
OS_TASK_STATE_PEND_SUSPENDED
:

743 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

744 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

745 
	`OS_PídAb‹t1
(
p_obj
,

746 
p_tcb
,

747 
ts
);

750 #i‡(
OS_MSG_EN
 > 0u)

751 
p_tcb
->
MsgPå
 = (*)0;

752 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

755 
p_tcb
->
TS
 = 
ts
;

756 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

757 
	`OS_PídLi°Remove
(
p_tcb
);

759 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

760 
	`OS_TickLi°Remove
(
p_tcb
);

762 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

763 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_ABORT
;

764 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

770 
	}
}

820 
	$OS_PídAb‹t1
 (
OS_PEND_OBJ
 *
p_obj
,

821 
OS_TCB
 *
p_tcb
,

822 
CPU_TS
 
ts
)

824 
OS_OBJ_QTY
 
n_≥nd_li°
;

825 
OS_PEND_DATA
 *
p_≥nd_d©a
;

829 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

830 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

832 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

833 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

834 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

835 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

838 
p_≥nd_d©a
++;

839 
n_≥nd_li°
--;

841 
	}
}

885 
	$OS_PídD©aInô
 (
OS_TCB
 *
p_tcb
,

886 
OS_PEND_DATA
 *
p_≥nd_d©a_tbl
,

887 
OS_OBJ_QTY
 
tbl_size
)

889 
OS_OBJ_QTY
 
i
;

893 
p_tcb
->
PídD©aTblE¡rõs
 = 
tbl_size
;

894 
p_tcb
->
PídD©aTblPå
 = 
p_≥nd_d©a_tbl
;

896 
i
 = 0u; i < 
tbl_size
; i++) {

897 
p_≥nd_d©a_tbl
->
NextPå
 = (
OS_PEND_DATA
 *)0;

898 
p_≥nd_d©a_tbl
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

899 
p_≥nd_d©a_tbl
->
RdyObjPå
 = (
OS_PEND_OBJ
 *)0;

900 
p_≥nd_d©a_tbl
->
RdyMsgPå
 = (*)0;

901 
p_≥nd_d©a_tbl
->
RdyMsgSize
 = (
OS_MSG_SIZE
 )0;

902 
p_≥nd_d©a_tbl
->
RdyTS
 = (
CPU_TS
 )0;

903 
p_≥nd_d©a_tbl
->
TCBPå
 = 
p_tcb
;

904 
p_≥nd_d©a_tbl
++;

906 
	}
}

987 
	$OS_PídLi°Ch™gePrio
 (
OS_TCB
 *
p_tcb
)

989 
OS_OBJ_QTY
 
n_≥nd_li°
;

990 
OS_PEND_DATA
 *
p_≥nd_d©a
;

991 
OS_PEND_LIST
 *
p_≥nd_li°
;

992 
OS_PEND_OBJ
 *
p_obj
;

995 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

996 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

998 
n_≥nd_li°
 > 0u) {

999 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1000 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1001 i‡(
p_≥nd_li°
->
NbrE¡rõs
 > 1u) {

1002 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1003 
p_≥nd_d©a
);

1004 
	`OS_PídLi°In£πPrio
(
p_≥nd_li°
,

1005 
p_≥nd_d©a
);

1007 
p_≥nd_d©a
++;

1008 
n_≥nd_li°
--;

1010 
	}
}

1028 
	$OS_PídLi°Inô
 (
OS_PEND_LIST
 *
p_≥nd_li°
)

1030 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1031 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1032 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
 )0;

1033 
	}
}

1082 
	$OS_PídLi°In£πHód
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1083 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1085 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1089 
p_≥nd_li°
->
NbrE¡rõs
++;

1090 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_li°
->
HódPå
;

1091 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1092 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1093 i‡(
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1094 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1096 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1097 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1098 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1100 
	}
}

1170 
	$OS_PídLi°In£πPrio
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1171 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1173 
OS_PRIO
 
¥io
;

1174 
OS_TCB
 *
p_tcb
;

1175 
OS_TCB
 *
p_tcb_√xt
;

1176 
OS_PEND_DATA
 *
p_≥nd_d©a_¥ev
;

1177 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

1181 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

1182 
¥io
 = 
p_tcb
->
Prio
;

1183 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1184 
p_≥nd_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1185 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1186 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1187 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1188 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1190 
p_≥nd_li°
->
NbrE¡rõs
++;

1191 
p_≥nd_d©a_√xt
 = 
p_≥nd_li°
->
HódPå
;

1192 
p_≥nd_d©a_√xt
 !(
OS_PEND_DATA
 *)0) {

1193 
p_tcb_√xt
 = 
p_≥nd_d©a_√xt
->
TCBPå
;

1194 i‡(
¥io
 < 
p_tcb_√xt
->
Prio
) {

1197 
p_≥nd_d©a_√xt
 =Ö_≥nd_d©a_√xt->
NextPå
;

1200 i‡(
p_≥nd_d©a_√xt
 =(
OS_PEND_DATA
 *)0) {

1201 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1202 
p_≥nd_d©a_¥ev
 = 
p_≥nd_li°
->
TaûPå
;

1203 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1204 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1205 
p_≥nd_li°
->
TaûPå
 = 
p_≥nd_d©a
;

1207 i‡(
p_≥nd_d©a_√xt
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1208 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1209 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1210 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1211 
p_≥nd_li°
->
HódPå
 = 
p_≥nd_d©a
;

1213 
p_≥nd_d©a_¥ev
 = 
p_≥nd_d©a_√xt
->
PªvPå
;

1214 
p_≥nd_d©a
->
PªvPå
 = 
p_≥nd_d©a_¥ev
;

1215 
p_≥nd_d©a
->
NextPå
 = 
p_≥nd_d©a_√xt
;

1216 
p_≥nd_d©a_¥ev
->
NextPå
 = 
p_≥nd_d©a
;

1217 
p_≥nd_d©a_√xt
->
PªvPå
 = 
p_≥nd_d©a
;

1221 
	}
}

1273 
	$OS_PídLi°Remove
 (
OS_TCB
 *
p_tcb
)

1275 
OS_OBJ_QTY
 
n_≥nd_li°
;

1276 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1277 
OS_PEND_LIST
 *
p_≥nd_li°
;

1278 
OS_PEND_OBJ
 *
p_obj
;

1282 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1283 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1285 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1286 
p_obj
 = 
p_≥nd_d©a
->
PídObjPå
;

1287 
p_≥nd_li°
 = &
p_obj
->
PídLi°
;

1288 
	`OS_PídLi°Remove1
(
p_≥nd_li°
,

1289 
p_≥nd_d©a
);

1290 
p_≥nd_d©a
++;

1291 
n_≥nd_li°
--;

1293 
p_tcb
->
PídD©aTblE¡rõs
 = (
OS_OBJ_QTY
 )0;

1294 
p_tcb
->
PídD©aTblPå
 = (
OS_PEND_DATA
 *)0;

1295 
	}
}

1348 
	$OS_PídLi°Remove1
 (
OS_PEND_LIST
 *
p_≥nd_li°
,

1349 
OS_PEND_DATA
 *
p_≥nd_d©a
)

1351 
OS_PEND_DATA
 *
p_¥ev
;

1352 
OS_PEND_DATA
 *
p_√xt
;

1356 i‡(
p_≥nd_li°
->
NbrE¡rõs
 == 1u) {

1357 
p_≥nd_li°
->
HódPå
 = (
OS_PEND_DATA
 *)0;

1358 
p_≥nd_li°
->
TaûPå
 = (
OS_PEND_DATA
 *)0;

1360 } i‡(
p_≥nd_d©a
->
PªvPå
 =(
OS_PEND_DATA
 *)0) {

1361 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1362 
p_√xt
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1363 
p_≥nd_li°
->
HódPå
 = 
p_√xt
;

1365 } i‡(
p_≥nd_d©a
->
NextPå
 =(
OS_PEND_DATA
 *)0) {

1366 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1367 
p_¥ev
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1368 
p_≥nd_li°
->
TaûPå
 = 
p_¥ev
;

1371 
p_¥ev
 = 
p_≥nd_d©a
->
PªvPå
;

1372 
p_√xt
 = 
p_≥nd_d©a
->
NextPå
;

1373 
p_¥ev
->
NextPå
 = 
p_√xt
;

1374 
p_√xt
->
PªvPå
 = 
p_¥ev
;

1376 
p_≥nd_li°
->
NbrE¡rõs
--;

1377 
p_≥nd_d©a
->
NextPå
 = (
OS_PEND_DATA
 *)0;

1378 
p_≥nd_d©a
->
PªvPå
 = (
OS_PEND_DATA
 *)0;

1379 
	}
}

1402 
	$OS_PídObjDñ
 (
OS_PEND_OBJ
 *
p_obj
,

1403 
OS_TCB
 *
p_tcb
,

1404 
CPU_TS
 
ts
)

1406 
p_tcb
->
TaskSèã
) {

1407 
OS_TASK_STATE_RDY
:

1408 
OS_TASK_STATE_DLY
:

1409 
OS_TASK_STATE_SUSPENDED
:

1410 
OS_TASK_STATE_DLY_SUSPENDED
:

1413 
OS_TASK_STATE_PEND
:

1414 
OS_TASK_STATE_PEND_TIMEOUT
:

1415 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1416 
	`OS_PídObjDñ1
(
p_obj
,
p_tcb
,
ts
);

1419 #i‡(
OS_MSG_EN
 > 0u)

1420 
p_tcb
->
MsgPå
 = (*)0;

1421 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1424 
p_tcb
->
TS
 = 
ts
;

1425 
	`OS_PídLi°Remove
(
p_tcb
);

1426 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

1427 
	`OS_TickLi°Remove
(
p_tcb
);

1429 
	`OS_RdyLi°In£π
(
p_tcb
);

1430 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1431 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1432 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1435 
OS_TASK_STATE_PEND_SUSPENDED
:

1436 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1437 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1438 
	`OS_PídObjDñ1
(
p_obj
, 
p_tcb
,
ts
);

1440 #i‡(
OS_MSG_EN
 > 0u)

1441 
p_tcb
->
MsgPå
 = (*)0;

1442 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

1445 
p_tcb
->
TS
 = 
ts
;

1446 
	`OS_PídLi°Remove
(
p_tcb
);

1447 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

1448 
	`OS_TickLi°Remove
(
p_tcb
);

1450 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1451 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_DEL
;

1452 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1458 
	}
}

1508 
	$OS_PídObjDñ1
 (
OS_PEND_OBJ
 *
p_obj
,

1509 
OS_TCB
 *
p_tcb
,

1510 
CPU_TS
 
ts
)

1512 
OS_OBJ_QTY
 
n_≥nd_li°
;

1513 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1517 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1518 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1520 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1521 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1522 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1523 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1526 
p_≥nd_d©a
++;

1527 
n_≥nd_li°
--;

1529 
	}
}

1557 
	$OS_Po°
 (
OS_PEND_OBJ
 *
p_obj
,

1558 
OS_TCB
 *
p_tcb
,

1559 *
p_void
,

1560 
OS_MSG_SIZE
 
msg_size
,

1561 
CPU_TS
 
ts
)

1563 
p_tcb
->
TaskSèã
) {

1564 
OS_TASK_STATE_RDY
:

1565 
OS_TASK_STATE_DLY
:

1566 
OS_TASK_STATE_SUSPENDED
:

1567 
OS_TASK_STATE_DLY_SUSPENDED
:

1570 
OS_TASK_STATE_PEND
:

1571 
OS_TASK_STATE_PEND_TIMEOUT
:

1572 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1573 
	`OS_Po°1
(
p_obj
,

1574 
p_tcb
,

1575 
p_void
,

1576 
msg_size
,

1577 
ts
);

1579 #i‡(
OS_MSG_EN
 > 0u)

1580 
p_tcb
->
MsgPå
 = 
p_void
;

1581 
p_tcb
->
MsgSize
 = 
msg_size
;

1583 
p_tcb
->
TS
 = 
ts
;

1585 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1586 
	`OS_PídLi°Remove
(
p_tcb
);

1588 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

1589 
	`OS_TickLi°Remove
(
p_tcb
);

1591 
	`OS_RdyLi°In£π
(
p_tcb
);

1592 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1593 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1594 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1597 
OS_TASK_STATE_PEND_SUSPENDED
:

1598 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1599 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MULTI
) {

1600 
	`OS_Po°1
(
p_obj
,

1601 
p_tcb
,

1602 
p_void
,

1603 
msg_size
,

1604 
ts
);

1606 #i‡(
OS_MSG_EN
 > 0u)

1607 
p_tcb
->
MsgPå
 = 
p_void
;

1608 
p_tcb
->
MsgSize
 = 
msg_size
;

1610 
p_tcb
->
TS
 = 
ts
;

1612 i‡(
p_obj
 !(
OS_PEND_OBJ
 *)0) {

1613 
	`OS_PídLi°Remove
(
p_tcb
);

1615 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

1616 
	`OS_TickLi°Remove
(
p_tcb
);

1618 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1619 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_OK
;

1620 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

1626 
	}
}

1680 
	$OS_Po°1
 (
OS_PEND_OBJ
 *
p_obj
,

1681 
OS_TCB
 *
p_tcb
,

1682 *
p_void
,

1683 
OS_MSG_SIZE
 
msg_size
,

1684 
CPU_TS
 
ts
)

1686 
OS_OBJ_QTY
 
n_≥nd_li°
;

1687 
OS_PEND_DATA
 *
p_≥nd_d©a
;

1691 
p_≥nd_d©a
 = 
p_tcb
->
PídD©aTblPå
;

1692 
n_≥nd_li°
 = 
p_tcb
->
PídD©aTblE¡rõs
;

1694 
n_≥nd_li°
 > (
OS_OBJ_QTY
)0) {

1695 i‡(
p_obj
 =
p_≥nd_d©a
->
PídObjPå
) {

1696 
p_≥nd_d©a
->
RdyObjPå
 = 
p_obj
;

1697 
p_≥nd_d©a
->
RdyMsgPå
 = 
p_void
;

1698 
p_≥nd_d©a
->
RdyMsgSize
 = 
msg_size
;

1699 
p_≥nd_d©a
->
RdyTS
 = 
ts
;

1702 
p_≥nd_d©a
++;

1703 
n_≥nd_li°
--;

1705 
	}
}

1750 
	$OS_RdyLi°Inô
 ()

1752 
OS_PRIO
 
i
;

1753 
OS_RDY_LIST
 *
p_rdy_li°
;

1757 
i
 = 0u; i < 
OS_CFG_PRIO_MAX
; i++) {

1758 
p_rdy_li°
 = &
OSRdyLi°
[
i
];

1759 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

1760 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

1761 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

1763 
	}
}

1784 
	$OS_RdyLi°In£π
 (
OS_TCB
 *
p_tcb
)

1786 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

1787 i‡(
p_tcb
->
Prio
 =
OSPrioCur
) {

1788 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

1790 
	`OS_RdyLi°In£πHód
(
p_tcb
);

1793 
	}
}

1852 
	$OS_RdyLi°In£πHód
 (
OS_TCB
 *
p_tcb
)

1854 
OS_RDY_LIST
 *
p_rdy_li°
;

1855 
OS_TCB
 *
p_tcb2
;

1859 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

1860 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1861 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1862 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1863 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1864 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

1865 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

1867 
p_rdy_li°
->
NbrE¡rõs
++;

1868 
p_tcb
->
NextPå
 = 
p_rdy_li°
->
HódPå
;

1869 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1870 
p_tcb2
 = 
p_rdy_li°
->
HódPå
;

1871 
p_tcb2
->
PªvPå
 = 
p_tcb
;

1872 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

1874 
	}
}

1933 
	$OS_RdyLi°In£πTaû
 (
OS_TCB
 *
p_tcb
)

1935 
OS_RDY_LIST
 *
p_rdy_li°
;

1936 
OS_TCB
 *
p_tcb2
;

1940 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

1941 i‡(
p_rdy_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

1942 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)1;

1943 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1944 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1945 
p_rdy_li°
->
HódPå
 = 
p_tcb
;

1946 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

1948 
p_rdy_li°
->
NbrE¡rõs
++;

1949 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1950 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

1951 
p_tcb
->
PªvPå
 = 
p_tcb2
;

1952 
p_tcb2
->
NextPå
 = 
p_tcb
;

1953 
p_rdy_li°
->
TaûPå
 = 
p_tcb
;

1955 
	}
}

2010 
	$OS_RdyLi°MoveHódToTaû
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2012 
OS_TCB
 *
p_tcb1
;

2013 
OS_TCB
 *
p_tcb2
;

2014 
OS_TCB
 *
p_tcb3
;

2018 
p_rdy_li°
->
NbrE¡rõs
) {

2024 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2025 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2026 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2027 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2028 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2029 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2030 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2031 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2035 
p_tcb1
 = 
p_rdy_li°
->
HódPå
;

2036 
p_tcb2
 = 
p_rdy_li°
->
TaûPå
;

2037 
p_tcb3
 = 
p_tcb1
->
NextPå
;

2038 
p_tcb3
->
PªvPå
 = (
OS_TCB
 *)0;

2039 
p_tcb1
->
NextPå
 = (
OS_TCB
 *)0;

2040 
p_tcb1
->
PªvPå
 = 
p_tcb2
;

2041 
p_tcb2
->
NextPå
 = 
p_tcb1
;

2042 
p_rdy_li°
->
HódPå
 = 
p_tcb3
;

2043 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2046 
	}
}

2097 
	$OS_RdyLi°Remove
 (
OS_TCB
 *
p_tcb
)

2099 
OS_RDY_LIST
 *
p_rdy_li°
;

2100 
OS_TCB
 *
p_tcb1
;

2101 
OS_TCB
 *
p_tcb2
;

2105 
p_rdy_li°
 = &
OSRdyLi°
[
p_tcb
->
Prio
];

2106 
p_tcb1
 = 
p_tcb
->
PªvPå
;

2107 
p_tcb2
 = 
p_tcb
->
NextPå
;

2108 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

2109 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2110 
p_rdy_li°
->
NbrE¡rõs
 = (
OS_OBJ_QTY
)0;

2111 
p_rdy_li°
->
HódPå
 = (
OS_TCB
 *)0;

2112 
p_rdy_li°
->
TaûPå
 = (
OS_TCB
 *)0;

2113 
	`OS_PrioRemove
(
p_tcb
->
Prio
);

2115 
p_rdy_li°
->
NbrE¡rõs
--;

2116 
p_tcb2
->
PªvPå
 = (
OS_TCB
 *)0;

2117 
p_rdy_li°
->
HódPå
 = 
p_tcb2
;

2120 
p_rdy_li°
->
NbrE¡rõs
--;

2121 
p_tcb1
->
NextPå
 = 
p_tcb2
;

2122 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

2123 
p_rdy_li°
->
TaûPå
 = 
p_tcb1
;

2125 
p_tcb2
->
PªvPå
 = 
p_tcb1
;

2128 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

2129 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

2131 
	}
}

2149 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

2150 
	$OS_SchedRoundRobö
 (
OS_RDY_LIST
 *
p_rdy_li°
)

2152 
OS_TCB
 *
p_tcb
;

2154 i‡(
OSSchedRoundRoböEn
 !
DEF_TRUE
) {

2158 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2160 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

2164 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

2168 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2176 
p_tcb
->
TimeQu™èCå
--;

2179 i‡(
p_tcb
->
TimeQu™èCå
 > (
OS_TICK
)0) {

2185 #i‡
OS_CFG_SCHED_STRENGTHEN_EN
 > 0u

2186 i‡(
OSPrioCur
 == 0x1) {

2187 
UINT32
 
bÆ™˚
 = 
	`gë_Âga
(Ë- 
OSTCBCurPå
->
Tc⁄sumög
;

2188 i‡(((
bÆ™˚
 * 100Ë< (500 * 
OSTCBCurPå
->
TimeQu™è
)) && \

2189 ((500 * 
OSTCBCurPå
->
TimeQu™è
 - 
bÆ™˚
 * 100) > 200)) {

2190 
p_tcb
->
TimeQu™èCå
++;

2197 i‡(
p_rdy_li°
->
NbrE¡rõs
 < (
OS_OBJ_QTY
)2) {

2201 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

2205 
	`OS_RdyLi°MoveHódToTaû
(
p_rdy_li°
);

2206 
p_tcb
 = 
p_rdy_li°
->
HódPå
;

2207 i‡(
p_tcb
->
TimeQu™è
 =(
OS_TICK
)0) {

2208 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

2210 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

2212 
	}
}

2234 
	$OS_TaskBlock
 (
OS_TCB
 *
p_tcb
,

2235 
OS_TICK
 
timeout
)

2237 i‡(
timeout
 > (
OS_TICK
)0) {

2238 
	`OS_TickLi°In£π
(&
OSTickLi°Timeout
, 
p_tcb
, 
timeout
);

2239 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

2241 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

2243 
	`OS_RdyLi°Remove
(
p_tcb
);

2244 
	}
}

	@kernel/thread/sysMsg.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

33 #i‡
OS_MSG_EN
 > 0u

53 
	$OS_MsgPoﬁInô
 (
OS_ERR
 *
p_îr
)

55 
OS_MSG
 *
p_msg1
;

56 
OS_MSG
 *
p_msg2
;

57 
OS_MSG_QTY
 
i
;

58 
OS_MSG_QTY
 
lo›s
;

60 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

61 i‡(
OSCfg_MsgPoﬁBa£På
 =(
OS_MSG
 *)0) {

62 *
p_îr
 = 
OS_ERR_MSG_POOL_NULL_PTR
;

65 i‡(
OSCfg_MsgPoﬁSize
 =(
OS_MSG_QTY
)0) {

66 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

71 
p_msg1
 = 
OSCfg_MsgPoﬁBa£På
;

72 
p_msg2
 = 
OSCfg_MsgPoﬁBa£På
;

73 
p_msg2
++;

74 
lo›s
 = 
OSCfg_MsgPoﬁSize
 - 1u;

75 
i
 = 0u; i < 
lo›s
; i++) {

76 
p_msg1
->
NextPå
 = 
p_msg2
;

77 
p_msg1
->
MsgPå
 = (*)0;

78 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

79 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

80 
p_msg1
++;

81 
p_msg2
++;

83 
p_msg1
->
NextPå
 = (
OS_MSG
 *)0;

84 
p_msg1
->
MsgPå
 = (*)0;

85 
p_msg1
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

86 
p_msg1
->
MsgTS
 = (
CPU_TS
 )0u;

88 
OSMsgPoﬁ
.
NextPå
 = 
OSCfg_MsgPoﬁBa£På
;

89 
OSMsgPoﬁ
.
NbrFªe
 = 
OSCfg_MsgPoﬁSize
;

90 
OSMsgPoﬁ
.
NbrU£d
 = (
OS_MSG_QTY
)0;

91 *
p_îr
 = 
OS_ERR_NONE
;

92 
	}
}

110 
OS_MSG_QTY
 
	$OS_MsgQFªeAŒ
 (
OS_MSG_Q
 *
p_msg_q
)

112 
OS_MSG
 *
p_msg
;

113 
OS_MSG_QTY
 
qty
;

115 
qty
 = 
p_msg_q
->
NbrE¡rõs
;

116 i‡(
p_msg_q
->
NbrE¡rõs
 > (
OS_MSG_QTY
)0) {

117 
p_msg
 = 
p_msg_q
->
InPå
;

118 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

119 
OSMsgPoﬁ
.
NextPå
 = 
p_msg_q
->
OutPå
;

120 
OSMsgPoﬁ
.
NbrU£d
 -
p_msg_q
->
NbrE¡rõs
;

121 
OSMsgPoﬁ
.
NbrFªe
 +
p_msg_q
->
NbrE¡rõs
;

122 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

123 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

124 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

126  (
qty
);

127 
	}
}

147 
	$OS_MsgQInô
 (
OS_MSG_Q
 *
p_msg_q
,

148 
OS_MSG_QTY
 
size
)

150 
p_msg_q
->
NbrE¡rõsSize
 = (
OS_MSG_QTY
)
size
;

151 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

152 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

153 
p_msg_q
->
OutPå
 = (
OS_MSG
 *)0;

154 
	}
}

180 *
	$OS_MsgQGë
 (
OS_MSG_Q
 *
p_msg_q
,

181 
OS_MSG_SIZE
 *
p_msg_size
,

182 
CPU_TS
 *
p_ts
,

183 
OS_ERR
 *
p_îr
)

185 
OS_MSG
 *
p_msg
;

186 *
p_void
;

188 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

189 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

190 i‡(
p_ts
 !(
CPU_TS
 *)0) {

191 *
p_ts
 = (
CPU_TS
 )0;

193 *
p_îr
 = 
OS_ERR_Q_EMPTY
;

197 
p_msg
 = 
p_msg_q
->
OutPå
;

198 
p_void
 = 
p_msg
->
MsgPå
;

199 *
p_msg_size
 = 
p_msg
->
MsgSize
;

200 i‡(
p_ts
 !(
CPU_TS
 *)0) {

201 *
p_ts
 = 
p_msg
->
MsgTS
;

204 
p_msg_q
->
OutPå
 = 
p_msg
->
NextPå
;

206 i‡(
p_msg_q
->
OutPå
 =(
OS_MSG
 *)0) {

207 
p_msg_q
->
InPå
 = (
OS_MSG
 *)0;

208 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)0;

210 
p_msg_q
->
NbrE¡rõs
--;

213 
p_msg
->
NextPå
 = 
OSMsgPoﬁ
.NextPtr;

214 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
;

215 
OSMsgPoﬁ
.
NbrFªe
++;

216 
OSMsgPoﬁ
.
NbrU£d
--;

218 *
p_îr
 = 
OS_ERR_NONE
;

219  (
p_void
);

220 
	}
}

255 
	$OS_MsgQPut
 (
OS_MSG_Q
 *
p_msg_q
,

256 *
p_void
,

257 
OS_MSG_SIZE
 
msg_size
,

258 
OS_OPT
 
›t
,

259 
CPU_TS
 
ts
,

260 
OS_ERR
 *
p_îr
)

262 
OS_MSG
 *
p_msg
;

263 
OS_MSG
 *
p_msg_ö
;

265 i‡(
p_msg_q
->
NbrE¡rõs
 >p_msg_q->
NbrE¡rõsSize
) {

266 *
p_îr
 = 
OS_ERR_Q_MAX
;

270 i‡(
OSMsgPoﬁ
.
NbrFªe
 =(
OS_MSG_QTY
)0) {

271 *
p_îr
 = 
OS_ERR_MSG_POOL_EMPTY
;

275 
p_msg
 = 
OSMsgPoﬁ
.
NextPå
;

276 
OSMsgPoﬁ
.
NextPå
 = 
p_msg
->NextPtr;

277 
OSMsgPoﬁ
.
NbrFªe
--;

278 
OSMsgPoﬁ
.
NbrU£d
++;

280 i‡(
p_msg_q
->
NbrE¡rõs
 =(
OS_MSG_QTY
)0) {

281 
p_msg_q
->
InPå
 = 
p_msg
;

282 
p_msg_q
->
OutPå
 = 
p_msg
;

283 
p_msg_q
->
NbrE¡rõs
 = (
OS_MSG_QTY
)1;

284 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

286 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=
OS_OPT_POST_FIFO
) {

287 
p_msg_ö
 = 
p_msg_q
->
InPå
;

288 
p_msg_ö
->
NextPå
 = 
p_msg
;

289 
p_msg_q
->
InPå
 = 
p_msg
;

290 
p_msg
->
NextPå
 = (
OS_MSG
 *)0;

292 
p_msg
->
NextPå
 = 
p_msg_q
->
OutPå
;

293 
p_msg_q
->
OutPå
 = 
p_msg
;

295 
p_msg_q
->
NbrE¡rõs
++;

298 
p_msg
->
MsgPå
 = 
p_void
;

299 
p_msg
->
MsgSize
 = 
msg_size
;

300 
p_msg
->
MsgTS
 = 
ts
;

301 *
p_îr
 = 
OS_ERR_NONE
;

302 
	}
}

	@kernel/thread/sysMutex.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

32 
CPU_INT32U
 
gëTblms
 ();

34 #i‡
OS_CFG_MUTEX_EN
 > 0u

60 
	$OSMuãxCª©e
 (
OS_MUTEX
 *
p_muãx
,

61 
CPU_CHAR
 *
p_«me
,

62 
OS_ERR
 *
p_îr
)

64 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

65 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

66 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

71 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

72 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

73 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

78 
	`OS_CRITICAL_ENTER
();

79 #i‡
OS_OBJ_TYPE_REQ
 > 0u

80 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_MUTEX
;

82 ()&
p_«me
;

83 
p_muãx
->
MuãxGΩNextPå
 = (
OS_MUTEX
 *)0;

84 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

85 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

86 
p_muãx
->
TS
 = (
CPU_TS
 )0;

87 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

89 
OSMuãxQty
++;

91 
	`OS_CRITICAL_EXIT_NO_SCHED
();

92 *
p_îr
 = 
OS_ERR_NONE
;

93 
	}
}

130 #i‡
OS_CFG_MUTEX_DEL_EN
 > 0u

131 
OS_OBJ_QTY
 
	$OSMuãxDñ
 (
OS_MUTEX
 *
p_muãx
,

132 
OS_OPT
 
›t
,

133 
OS_ERR
 *
p_îr
)

135 
OS_OBJ_QTY
 
˙t
;

136 
OS_OBJ_QTY
 
nbr_èsks
;

137 
OS_PEND_DATA
 *
p_≥nd_d©a
;

138 
OS_PEND_LIST
 *
p_≥nd_li°
;

139 
OS_TCB
 *
p_tcb
;

140 
OS_TCB
 *
p_tcb_ow√r
;

141 
CPU_TS
 
ts
;

142 #i‡
OS_CFG_MUTEX_EN
 > 0u

143 
OS_PRIO
 
¥io_√w
;

146 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

147 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

148 *
p_îr
 = 
OS_ERR_DEL_ISR
;

149  ((
OS_OBJ_QTY
)0);

153 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

154 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

155 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

156  ((
OS_OBJ_QTY
)0);

158 
›t
) {

159 
OS_OPT_DEL_NO_PEND
:

160 
OS_OPT_DEL_ALWAYS
:

164 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

165  ((
OS_OBJ_QTY
)0);

169 
	`OS_CRITICAL_ENTER
();

170 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

171 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

172 
nbr_èsks
 = 
˙t
;

173 
›t
) {

174 
OS_OPT_DEL_NO_PEND
:

175 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

176 
OSMuãxQty
--;

177 i‡(
p_muãx
->
Ow√rTCBPå
 !(
OS_TCB
 *)0) {

178 
	`OS_MuãxGΩRemove
(
p_muãx
->
Ow√rTCBPå
,Ö_mutex);

180 
	`OS_MuãxCÃ
(
p_muãx
);

181 
	`OS_CRITICAL_EXIT
();

182 *
p_îr
 = 
OS_ERR_NONE
;

184 
	`OS_CRITICAL_EXIT
();

185 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

189 
OS_OPT_DEL_ALWAYS
:

190 
ts
 = 
	`OS_TS_GET
();

191 
˙t
 > 0u) {

192 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

193 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

194 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

195 
p_tcb
,

196 
ts
);

197 
˙t
--;

199 
OSMuãxQty
--;

201 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

202 i‡(
p_tcb_ow√r
 !(
OS_TCB
 *)0) {

203 
	`OS_MuãxGΩRemove
(
p_tcb_ow√r
, 
p_muãx
);

207 i‡((
p_tcb_ow√r
 !(
OS_TCB
 *)0) &&

208 (
p_tcb_ow√r
->
Prio
 !p_tcb_ow√r->
Ba£Prio
)) {

209 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
p_tcb_ow√r
);

210 
¥io_√w
 =Örio_√w > 
p_tcb_ow√r
->
Ba£Prio
 ?Ö_tcb_owner->BasePrio :Örio_new;

211 
	`OS_TaskCh™gePrio
(
p_tcb_ow√r
, 
¥io_√w
);

214 
	`OS_MuãxCÃ
(
p_muãx
);

215 
	`OS_CRITICAL_EXIT_NO_SCHED
();

216 
	`OSSched
();

217 *
p_îr
 = 
OS_ERR_NONE
;

221 
	`OS_CRITICAL_EXIT
();

222 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

225  (
nbr_èsks
);

226 
	}
}

275 
	$OSMuãxPíd
 (
OS_MUTEX
 *
p_muãx
,

276 
OS_TICK
 
timeout
,

277 
OS_OPT
 
›t
,

278 
CPU_TS
 *
p_ts
,

279 
OS_ERR
 *
p_îr
)

281 
OS_PEND_DATA
 
≥nd_d©a
;

282 
OS_TCB
 *
p_tcb
;

284 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

285 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

286 *
p_îr
 = 
OS_ERR_PEND_ISR
;

291 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

292 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

293 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

296 
›t
) {

297 
OS_OPT_PEND_BLOCKING
:

298 
OS_OPT_PEND_NON_BLOCKING
:

302 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

307 i‡(
p_ts
 !(
CPU_TS
 *)0) {

308 *
p_ts
 = (
CPU_TS
 )0;

311 
	`CPU_CRITICAL_ENTER
();

312 i‡(
p_muãx
->
Ow√rNe°ögCå
 =(
OS_NESTING_CTR
)0) {

313 
p_muãx
->
Ow√rTCBPå
 = 
OSTCBCurPå
;

314 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

315 i‡(
p_ts
 !(
CPU_TS
 *)0) {

316 *
p_ts
 = 
p_muãx
->
TS
;

318 
	`OS_MuãxGΩAdd
(
OSTCBCurPå
, 
p_muãx
);

319 
	`CPU_CRITICAL_EXIT
();

320 *
p_îr
 = 
OS_ERR_NONE
;

324 i‡(
OSTCBCurPå
 =
p_muãx
->
Ow√rTCBPå
) {

325 
p_muãx
->
Ow√rNe°ögCå
++;

326 i‡(
p_ts
 !(
CPU_TS
 *)0) {

327 *
p_ts
 = 
p_muãx
->
TS
;

329 
	`CPU_CRITICAL_EXIT
();

330 *
p_îr
 = 
OS_ERR_MUTEX_OWNER
;

334 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

335 
	`CPU_CRITICAL_EXIT
();

336 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

339 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

340 
	`CPU_CRITICAL_EXIT
();

341 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

346 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

347 
p_tcb
 = 
p_muãx
->
Ow√rTCBPå
;

348 i‡(
p_tcb
->
Prio
 > 
OSTCBCurPå
->Prio) {

349 
	`OS_TaskCh™gePrio
(
p_tcb
, 
OSTCBCurPå
->
Prio
);

352 
	`OS_Píd
(&
≥nd_d©a
,

353 (
OS_PEND_OBJ
 *)((*)
p_muãx
),

354 
OS_TASK_PEND_ON_MUTEX
,

355 
timeout
);

357 
	`OS_CRITICAL_EXIT_NO_SCHED
();

358 
	`OSSched
();

360 
	`CPU_CRITICAL_ENTER
();

361 
OSTCBCurPå
->
PídSètus
) {

362 
OS_STATUS_PEND_OK
:

363 i‡(
p_ts
 !(
CPU_TS
 *)0) {

364 *
p_ts
 = 
OSTCBCurPå
->
TS
;

366 *
p_îr
 = 
OS_ERR_NONE
;

369 
OS_STATUS_PEND_ABORT
:

370 i‡(
p_ts
 !(
CPU_TS
 *)0) {

371 *
p_ts
 = 
OSTCBCurPå
->
TS
;

373 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

376 
OS_STATUS_PEND_TIMEOUT
:

377 i‡(
p_ts
 !(
CPU_TS
 *)0) {

378 *
p_ts
 = (
CPU_TS
 )0;

380 *
p_îr
 = 
OS_ERR_TIMEOUT
;

383 
OS_STATUS_PEND_DEL
:

384 i‡(
p_ts
 !(
CPU_TS
 *)0) {

385 *
p_ts
 = 
OSTCBCurPå
->
TS
;

387 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

391 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

394 
	`CPU_CRITICAL_EXIT
();

395 
	}
}

429 #i‡
OS_CFG_MUTEX_PEND_ABORT_EN
 > 0u

430 
OS_OBJ_QTY
 
	$OSMuãxPídAb‹t
 (
OS_MUTEX
 *
p_muãx
,

431 
OS_OPT
 
›t
,

432 
OS_ERR
 *
p_îr
)

434 
OS_PEND_LIST
 *
p_≥nd_li°
;

435 
OS_TCB
 *
p_tcb
;

436 
OS_TCB
 *
p_tcb_ow√r
;

437 
CPU_TS
 
ts
;

438 
OS_OBJ_QTY
 
nbr_èsks
;

439 
OS_PRIO
 
¥io_√w
;

441 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

442 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

443 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

444  ((
OS_OBJ_QTY
)0u);

448 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

449 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

450 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

451  ((
OS_OBJ_QTY
)0u);

453 
›t
) {

454 
OS_OPT_PEND_ABORT_1
:

455 
OS_OPT_PEND_ABORT_ALL
:

456 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

457 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

461 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

462  ((
OS_OBJ_QTY
)0u);

466 
	`CPU_CRITICAL_ENTER
();

467 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

468 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

469 
	`CPU_CRITICAL_EXIT
();

470 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

471  ((
OS_OBJ_QTY
)0u);

474 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

475 
nbr_èsks
 = 0u;

476 
ts
 = 
	`OS_TS_GET
();

477 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

478 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

480 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

481 
p_tcb
,

482 
ts
);

484 
p_tcb_ow√r
 = 
p_muãx
->
Ow√rTCBPå
;

485 
¥io_√w
 = 
p_tcb_ow√r
->
Prio
;

486 i‡((
p_tcb_ow√r
->
Prio
 !p_tcb_ow√r->
Ba£Prio
) &&

487 (
p_tcb_ow√r
->
Prio
 =
p_tcb
->Prio)) {

488 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
p_tcb_ow√r
);

489 
¥io_√w
 =Örio_√w > 
p_tcb_ow√r
->
Ba£Prio
 ?Ö_tcb_owner->BasePrio :Örio_new;

492 if(
¥io_√w
 !
p_tcb_ow√r
->
Prio
) {

493 
	`OS_TaskCh™gePrio
(
p_tcb_ow√r
, 
¥io_√w
);

496 
nbr_èsks
++;

497 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

501 
	`OS_CRITICAL_EXIT_NO_SCHED
();

503 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

504 
	`OSSched
();

507 *
p_îr
 = 
OS_ERR_NONE
;

508  (
nbr_èsks
);

509 
	}
}

539 
	$OSMuãxPo°
 (
OS_MUTEX
 *
p_muãx
,

540 
OS_OPT
 
›t
,

541 
OS_ERR
 *
p_îr
)

543 
OS_PEND_LIST
 *
p_≥nd_li°
;

544 
OS_TCB
 *
p_tcb
;

545 
CPU_TS
 
ts
;

546 
OS_PRIO
 
¥io_√w
;

548 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

549 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

550 *
p_îr
 = 
OS_ERR_POST_ISR
;

555 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

556 i‡(
p_muãx
 =(
OS_MUTEX
 *)0) {

557 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

560 
›t
) {

561 
OS_OPT_POST_NONE
:

562 
OS_OPT_POST_NO_SCHED
:

566 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

571 
	`CPU_CRITICAL_ENTER
();

572 i‡(
OSTCBCurPå
 !
p_muãx
->
Ow√rTCBPå
) {

573 
	`CPU_CRITICAL_EXIT
();

574 *
p_îr
 = 
OS_ERR_MUTEX_NOT_OWNER
;

578 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

579 
ts
 = 
	`OS_TS_GET
();

580 
p_muãx
->
TS
 = 
ts
;

581 
p_muãx
->
Ow√rNe°ögCå
--;

582 i‡(
p_muãx
->
Ow√rNe°ögCå
 > (
OS_NESTING_CTR
)0) {

583 
	`OS_CRITICAL_EXIT
();

584 *
p_îr
 = 
OS_ERR_MUTEX_NESTING
;

588 
	`OS_MuãxGΩRemove
(
OSTCBCurPå
, 
p_muãx
);

590 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

591 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

592 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

593 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

594 
	`OS_CRITICAL_EXIT
();

595 *
p_îr
 = 
OS_ERR_NONE
;

599 i‡(
OSTCBCurPå
->
Prio
 !OSTCBCurPå->
Ba£Prio
) {

600 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
OSTCBCurPå
);

601 
¥io_√w
 =Örio_√w > 
OSTCBCurPå
->
Ba£Prio
 ? OSTCBCurPtr->BasePrio :Örio_new;

602 i‡(
¥io_√w
 > 
OSTCBCurPå
->
Prio
) {

603 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

604 
OSTCBCurPå
->
Prio
 = 
¥io_√w
;

605 
	`OS_PrioIn£π
(
¥io_√w
);

606 
	`OS_RdyLi°In£πTaû
(
OSTCBCurPå
);

607 
OSPrioCur
 = 
¥io_√w
;

611 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

612 
p_muãx
->
Ow√rTCBPå
 = 
p_tcb
;

613 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)1;

614 
	`OS_MuãxGΩAdd
(
p_tcb
, 
p_muãx
);

616 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

617 (
OS_TCB
 *)
p_tcb
,

619 (
OS_MSG_SIZE
 )0,

620 (
CPU_TS
 )
ts
);

622 
	`OS_CRITICAL_EXIT_NO_SCHED
();

624 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

625 
	`OSSched
();

628 *
p_îr
 = 
OS_ERR_NONE
;

629 
	}
}

648 
	$OS_MuãxCÃ
 (
OS_MUTEX
 *
p_muãx
)

650 #i‡
OS_OBJ_TYPE_REQ
 > 0u

651 
p_muãx
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

653 
p_muãx
->
MuãxGΩNextPå
 = (
OS_MUTEX
 *)0;

654 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

655 
p_muãx
->
Ow√rNe°ögCå
 = (
OS_NESTING_CTR
)0;

656 
p_muãx
->
TS
 = (
CPU_TS
 )0;

657 
	`OS_PídLi°Inô
(&
p_muãx
->
PídLi°
);

658 
	}
}

691 
	$OS_MuãxInô
 (
OS_ERR
 *
p_îr
)

693 
OSMuãxQty
 = (
OS_OBJ_QTY
)0;

694 *
p_îr
 = 
OS_ERR_NONE
;

695 
	}
}

716 
	$OS_MuãxGΩAdd
 (
OS_TCB
 *
p_tcb
, 
OS_MUTEX
 *
p_muãx
)

718 
p_muãx
->
MuãxGΩNextPå
 = 
p_tcb
->
MuãxGΩHódPå
;

719 
p_tcb
->
MuãxGΩHódPå
 = 
p_muãx
;

720 
	}
}

741 
	$OS_MuãxGΩRemove
 (
OS_TCB
 *
p_tcb
, 
OS_MUTEX
 *
p_muãx
)

743 
OS_MUTEX
 **
µ_muãx
;

745 
µ_muãx
 = &
p_tcb
->
MuãxGΩHódPå
;

747 *
µ_muãx
 !
p_muãx
) {

748 
µ_muãx
 = &(*µ_muãx)->
MuãxGΩNextPå
;

751 *
µ_muãx
 = (*µ_muãx)->
MuãxGΩNextPå
;

752 
	}
}

771 
OS_PRIO
 
	$OS_MuãxGΩPrioFödHighe°
 (
OS_TCB
 *
p_tcb
)

773 
OS_MUTEX
 **
µ_muãx
;

774 
OS_PRIO
 
highe°_¥io
;

775 
OS_PRIO
 
¥io
;

776 
OS_PEND_DATA
 *
p_hód
;

779 
highe°_¥io
 = 
OS_CFG_PRIO_MAX
 - 1u;

780 
µ_muãx
 = &
p_tcb
->
MuãxGΩHódPå
;

782 *
µ_muãx
 !(
OS_MUTEX
 *)0) {

783 
p_hód
 = (*
µ_muãx
)->
PídLi°
.
HódPå
;

784 i‡(
p_hód
!(
OS_PEND_DATA
 *)0) {

785 
¥io
 = 
p_hód
->
TCBPå
->
Prio
;

786 if(
¥io
 < 
highe°_¥io
) {

787 
highe°_¥io
 = 
¥io
;

790 
µ_muãx
 = &(*µ_muãx)->
MuãxGΩNextPå
;

793  (
highe°_¥io
);

794 
	}
}

814 
	$OS_MuãxGΩPo°AŒ
 (
OS_TCB
 *
p_tcb
)

816 
OS_MUTEX
 *
p_muãx
;

817 
OS_MUTEX
 *
p_muãx_√xt
;

818 
CPU_TS
 
ts
;

819 
OS_PEND_LIST
 *
p_≥nd_li°
;

820 
OS_TCB
 *
p_tcb_√w
;

823 
p_muãx
 = 
p_tcb
->
MuãxGΩHódPå
;

825 
p_muãx
 !(
OS_MUTEX
 *)0) {

827 
p_muãx_√xt
 = 
p_muãx
->
MuãxGΩNextPå
;

828 
ts
 = 
	`OS_TS_GET
();

829 
p_muãx
->
TS
 = 
ts
;

830 
	`OS_MuãxGΩRemove
(
p_tcb
, 
p_muãx
);

832 
p_≥nd_li°
 = &
p_muãx
->
PídLi°
;

833 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

834 
p_muãx
->
Ow√rNe°ögCå
 = 0u;

835 
p_muãx
->
Ow√rTCBPå
 = (
OS_TCB
 *)0;

838 
p_tcb_√w
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

839 
p_muãx
->
Ow√rTCBPå
 = 
p_tcb
;

840 
p_muãx
->
Ow√rNe°ögCå
 = 1u;

841 
	`OS_MuãxGΩAdd
(
p_tcb_√w
, 
p_muãx
);

843 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_muãx
),

844 
p_tcb_√w
,

847 
ts
);

850 
p_muãx
 = 
p_muãx_√xt
;

853 
	}
}

	@kernel/thread/sysPrio.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

33 
CPU_DATA
 
	gOSPrioTbl
[
OS_PRIO_TBL_SIZE
];

51 
	$OS_PrioInô
 ()

53 
CPU_DATA
 
i
;

57 
i
 = 0u; i < 
OS_PRIO_TBL_SIZE
; i++) {

58 
OSPrioTbl
[
i
] = (
CPU_DATA
)0;

60 
	}
}

77 
OS_PRIO
 
	$OS_PrioGëHighe°
 ()

79 
CPU_DATA
 *
p_tbl
;

80 
OS_PRIO
 
¥io
;

83 
¥io
 = (
OS_PRIO
)0;

84 
p_tbl
 = &
OSPrioTbl
[0];

85 *
p_tbl
 =(
CPU_DATA
)0) {

86 
¥io
 +
DEF_INT_CPU_NBR_BITS
;

87 
p_tbl
++;

89 
¥io
 +(
OS_PRIO
)
	`CPU_C¡LódZîos
(*
p_tbl
);

90  (
¥io
);

91 
	}
}

107 
	$OS_PrioIn£π
 (
OS_PRIO
 
¥io
)

109 
CPU_DATA
 
bô
;

110 
CPU_DATA
 
bô_nbr
;

111 
OS_PRIO
 
ix
;

114 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

115 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

116 
bô
 = 1u;

117 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

118 
OSPrioTbl
[
ix
] |
bô
;

119 
	}
}

135 
	$OS_PrioRemove
 (
OS_PRIO
 
¥io
)

137 
CPU_DATA
 
bô
;

138 
CPU_DATA
 
bô_nbr
;

139 
OS_PRIO
 
ix
;

142 
ix
 = 
¥io
 / 
DEF_INT_CPU_NBR_BITS
;

143 
bô_nbr
 = (
CPU_DATA
)
¥io
 & (
DEF_INT_CPU_NBR_BITS
 - 1u);

144 
bô
 = 1u;

145 
bô
 <<(
DEF_INT_CPU_NBR_BITS
 - 1uË- 
bô_nbr
;

146 
OSPrioTbl
[
ix
] &~
bô
;

147 
	}
}

	@kernel/thread/sysQueue.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

32 
CPU_INT32U
 
gëTblms
 ();

34 #i‡
OS_CFG_Q_EN
 > 0u

64 
	$OSQCª©e
 (
OS_Q
 *
p_q
,

65 
CPU_CHAR
 *
p_«me
,

66 
OS_MSG_QTY
 
max_qty
,

67 
OS_ERR
 *
p_îr
)

71 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

72 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

73 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

78 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

79 i‡(
p_q
 =(
OS_Q
 *)0) {

80 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

83 i‡(
max_qty
 =(
OS_MSG_QTY
)0) {

84 *
p_îr
 = 
OS_ERR_Q_SIZE
;

89 
	`OS_CRITICAL_ENTER
();

90 #i‡
OS_OBJ_TYPE_REQ
 > 0u

91 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_Q
;

93 ()&
p_«me
;

94 
	`OS_MsgQInô
(&
p_q
->
MsgQ
, 
max_qty
);

96 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

98 
OSQQty
++;

99 
	`OS_CRITICAL_EXIT_NO_SCHED
();

100 *
p_îr
 = 
OS_ERR_NONE
;

101 
	}
}

138 #i‡
OS_CFG_Q_DEL_EN
 > 0u

139 
OS_OBJ_QTY
 
	$OSQDñ
 (
OS_Q
 *
p_q
,

140 
OS_OPT
 
›t
,

141 
OS_ERR
 *
p_îr
)

143 
OS_OBJ_QTY
 
˙t
;

144 
OS_OBJ_QTY
 
nbr_èsks
;

145 
OS_PEND_DATA
 *
p_≥nd_d©a
;

146 
OS_PEND_LIST
 *
p_≥nd_li°
;

147 
OS_TCB
 *
p_tcb
;

148 
CPU_TS
 
ts
;

150 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

151 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

152 *
p_îr
 = 
OS_ERR_DEL_ISR
;

153  ((
OS_OBJ_QTY
)0);

157 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

158 i‡(
p_q
 =(
OS_Q
 *)0) {

159 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

160  ((
OS_OBJ_QTY
)0u);

162 
›t
) {

163 
OS_OPT_DEL_NO_PEND
:

164 
OS_OPT_DEL_ALWAYS
:

168 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

169  ((
OS_OBJ_QTY
)0u);

173 
	`CPU_CRITICAL_ENTER
();

174 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

175 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

176 
nbr_èsks
 = 
˙t
;

177 
›t
) {

178 
OS_OPT_DEL_NO_PEND
:

179 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

180 
OSQQty
--;

181 
	`OS_QCÃ
(
p_q
);

182 
	`CPU_CRITICAL_EXIT
();

183 *
p_îr
 = 
OS_ERR_NONE
;

185 
	`CPU_CRITICAL_EXIT
();

186 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

190 
OS_OPT_DEL_ALWAYS
:

191 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

192 
ts
 = 
	`OS_TS_GET
();

193 
˙t
 > 0u) {

194 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

195 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

196 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_q
),

197 
p_tcb
,

198 
ts
);

199 
˙t
--;

201 
OSQQty
--;

202 
	`OS_QCÃ
(
p_q
);

203 
	`OS_CRITICAL_EXIT_NO_SCHED
();

204 
	`OSSched
();

205 *
p_îr
 = 
OS_ERR_NONE
;

209 
	`CPU_CRITICAL_EXIT
();

210 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

213  (
nbr_èsks
);

214 
	}
}

242 #i‡
OS_CFG_Q_FLUSH_EN
 > 0u

243 
OS_MSG_QTY
 
	$OSQFlush
 (
OS_Q
 *
p_q
,

244 
OS_ERR
 *
p_îr
)

246 
OS_MSG_QTY
 
íåõs
;

248 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

249 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

250 *
p_îr
 = 
OS_ERR_FLUSH_ISR
;

251  ((
OS_MSG_QTY
)0);

255 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

256 i‡(
p_q
 =(
OS_Q
 *)0) {

257 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

258  ((
OS_MSG_QTY
)0);

262 
	`OS_CRITICAL_ENTER
();

263 
íåõs
 = 
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

264 
	`OS_CRITICAL_EXIT
();

265 *
p_îr
 = 
OS_ERR_NONE
;

266  ((
OS_MSG_QTY
)
íåõs
);

267 
	}
}

317 *
	$OSQPíd
 (
OS_Q
 *
p_q
,

318 
OS_TICK
 
timeout
,

319 
OS_OPT
 
›t
,

320 
OS_MSG_SIZE
 *
p_msg_size
,

321 
CPU_TS
 *
p_ts
,

322 
OS_ERR
 *
p_îr
)

324 
OS_PEND_DATA
 
≥nd_d©a
;

325 *
p_void
;

327 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

328 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

329 #i‡(
	`deföed
(
TRACE_CFG_EN
) && (TRACE_CFG_EN > 0u))

330 
	`TRACE_OS_Q_PEND_FAILED
(
p_q
);

332 *
p_îr
 = 
OS_ERR_PEND_ISR
;

337 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

338 i‡(
p_q
 =(
OS_Q
 *)0) {

339 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

342 i‡(
p_msg_size
 =(
OS_MSG_SIZE
 *)0) {

343 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

346 
›t
) {

347 
OS_OPT_PEND_BLOCKING
:

348 
OS_OPT_PEND_NON_BLOCKING
:

352 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

357 i‡(
p_ts
 !(
CPU_TS
 *)0) {

358 *
p_ts
 = (
CPU_TS
 )0;

361 
	`CPU_CRITICAL_ENTER
();

362 
p_void
 = 
	`OS_MsgQGë
(&
p_q
->
MsgQ
,

363 
p_msg_size
,

364 
p_ts
,

365 
p_îr
);

366 i‡(*
p_îr
 =
OS_ERR_NONE
) {

367 
	`CPU_CRITICAL_EXIT
();

368  (
p_void
);

371 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

372 
	`CPU_CRITICAL_EXIT
();

373 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

376 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

377 
	`CPU_CRITICAL_EXIT
();

378 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

383 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

384 
	`OS_Píd
(&
≥nd_d©a
,

385 (
OS_PEND_OBJ
 *)((*)
p_q
),

386 
OS_TASK_PEND_ON_Q
,

387 
timeout
);

388 
	`OS_CRITICAL_EXIT_NO_SCHED
();

389 
	`OSSched
();

391 
	`CPU_CRITICAL_ENTER
();

392 
OSTCBCurPå
->
PídSètus
) {

393 
OS_STATUS_PEND_OK
:

394 
p_void
 = 
OSTCBCurPå
->
MsgPå
;

395 *
p_msg_size
 = 
OSTCBCurPå
->
MsgSize
;

396 i‡(
p_ts
 !(
CPU_TS
 *)0) {

397 *
p_ts
 = 
OSTCBCurPå
->
TS
;

399 *
p_îr
 = 
OS_ERR_NONE
;

402 
OS_STATUS_PEND_ABORT
:

403 
p_void
 = (*)0;

404 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

405 i‡(
p_ts
 !(
CPU_TS
 *)0) {

406 *
p_ts
 = 
OSTCBCurPå
->
TS
;

408 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

411 
OS_STATUS_PEND_TIMEOUT
:

412 
p_void
 = (*)0;

413 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

414 i‡(
p_ts
 !(
CPU_TS
 *)0) {

415 *
p_ts
 = (
CPU_TS
 )0;

417 *
p_îr
 = 
OS_ERR_TIMEOUT
;

420 
OS_STATUS_PEND_DEL
:

421 
p_void
 = (*)0;

422 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

423 i‡(
p_ts
 !(
CPU_TS
 *)0) {

424 *
p_ts
 = 
OSTCBCurPå
->
TS
;

426 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

430 
p_void
 = (*)0;

431 *
p_msg_size
 = (
OS_MSG_SIZE
)0;

432 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

435 
	`CPU_CRITICAL_EXIT
();

436  (
p_void
);

437 
	}
}

471 #i‡
OS_CFG_Q_PEND_ABORT_EN
 > 0u

472 
OS_OBJ_QTY
 
	$OSQPídAb‹t
 (
OS_Q
 *
p_q
,

473 
OS_OPT
 
›t
,

474 
OS_ERR
 *
p_îr
)

476 
OS_PEND_LIST
 *
p_≥nd_li°
;

477 
OS_TCB
 *
p_tcb
;

478 
CPU_TS
 
ts
;

479 
OS_OBJ_QTY
 
nbr_èsks
;

481 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

482 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

483 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

484  ((
OS_OBJ_QTY
)0u);

488 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

489 i‡(
p_q
 =(
OS_Q
 *)0) {

490 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

491  ((
OS_OBJ_QTY
)0u);

493 
›t
) {

494 
OS_OPT_PEND_ABORT_1
:

495 
OS_OPT_PEND_ABORT_ALL
:

496 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

497 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

501 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

502  ((
OS_OBJ_QTY
)0u);

506 
	`CPU_CRITICAL_ENTER
();

507 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

508 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

509 
	`CPU_CRITICAL_EXIT
();

510 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

511  ((
OS_OBJ_QTY
)0u);

514 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

515 
nbr_èsks
 = 0u;

516 
ts
 = 
	`OS_TS_GET
();

517 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

518 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

519 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_q
),

520 
p_tcb
,

521 
ts
);

522 
nbr_èsks
++;

523 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

527 
	`OS_CRITICAL_EXIT_NO_SCHED
();

529 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

530 
	`OSSched
();

533 *
p_îr
 = 
OS_ERR_NONE
;

534  (
nbr_èsks
);

535 
	}
}

588 
	$OSQPo°
 (
OS_Q
 *
p_q
,

589 *
p_void
,

590 
OS_MSG_SIZE
 
msg_size
,

591 
OS_OPT
 
›t
,

592 
OS_ERR
 *
p_îr
)

594 
CPU_TS
 
ts
;

596 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

597 i‡(
p_q
 =(
OS_Q
 *)0) {

598 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

601 
›t
) {

602 
OS_OPT_POST_FIFO
:

603 
OS_OPT_POST_LIFO
:

604 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
:

605 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
:

606 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_NO_SCHED
:

607 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_NO_SCHED
:

608 
OS_OPT_POST_FIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

609 
OS_OPT_POST_LIFO
 | 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

613 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

618 
ts
 = 
	`OS_TS_GET
();

620 
	`OS_QPo°
(
p_q
,

621 
p_void
,

622 
msg_size
,

623 
›t
,

624 
ts
,

625 
p_îr
);

626 
	}
}

645 
	$OS_QCÃ
 (
OS_Q
 *
p_q
)

647 ()
	`OS_MsgQFªeAŒ
(&
p_q
->
MsgQ
);

648 #i‡
OS_OBJ_TYPE_REQ
 > 0u

649 
p_q
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

651 
	`OS_MsgQInô
(&
p_q
->
MsgQ
,

653 
	`OS_PídLi°Inô
(&
p_q
->
PídLi°
);

654 
	}
}

691 
	$OS_QInô
 (
OS_ERR
 *
p_îr
)

693 
OSQQty
 = (
OS_OBJ_QTY
)0;

694 *
p_îr
 = 
OS_ERR_NONE
;

695 
	}
}

737 
	$OS_QPo°
 (
OS_Q
 *
p_q
,

738 *
p_void
,

739 
OS_MSG_SIZE
 
msg_size
,

740 
OS_OPT
 
›t
,

741 
CPU_TS
 
ts
,

742 
OS_ERR
 *
p_îr
)

744 
OS_OBJ_QTY
 
˙t
;

745 
OS_OPT
 
po°_ty≥
;

746 
OS_PEND_LIST
 *
p_≥nd_li°
;

747 
OS_PEND_DATA
 *
p_≥nd_d©a
;

748 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

749 
OS_TCB
 *
p_tcb
;

751 
	`OS_CRITICAL_ENTER
();

752 
p_≥nd_li°
 = &
p_q
->
PídLi°
;

753 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

754 i‡((
›t
 & 
OS_OPT_POST_LIFO
Ë=(
OS_OPT
)0) {

755 
po°_ty≥
 = 
OS_OPT_POST_FIFO
;

757 
po°_ty≥
 = 
OS_OPT_POST_LIFO
;

759 
	`OS_MsgQPut
(&
p_q
->
MsgQ
,

760 
p_void
,

761 
msg_size
,

762 
po°_ty≥
,

763 
ts
,

764 
p_îr
);

765 
	`OS_CRITICAL_EXIT
();

769 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

770 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

772 
˙t
 = (
OS_OBJ_QTY
)1;

774 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

775 
˙t
 > 0u) {

776 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

777 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

778 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_q
),

779 
p_tcb
,

780 
p_void
,

781 
msg_size
,

782 
ts
);

783 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

784 
˙t
--;

786 
	`OS_CRITICAL_EXIT_NO_SCHED
();

787 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

788 
	`OSSched
();

790 *
p_îr
 = 
OS_ERR_NONE
;

791 
	}
}

	@kernel/thread/sysSem.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

32 
CPU_INT32U
 
gëTblms
 ();

33 #i‡
OS_CFG_SEM_EN
 > 0u

65 
	$OSSemCª©e
 (
OS_SEM
 *
p_£m
,

66 
CPU_CHAR
 *
p_«me
,

67 
OS_SEM_CTR
 
˙t
,

68 
OS_ERR
 *
p_îr
)

70 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

71 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

72 *
p_îr
 = 
OS_ERR_CREATE_ISR
;

77 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

78 i‡(
p_£m
 =(
OS_SEM
 *)0) {

79 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

84 
	`OS_CRITICAL_ENTER
();

85 #i‡
OS_OBJ_TYPE_REQ
 > 0u

86 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_SEM
;

88 
p_£m
->
Cå
 = 
˙t
;

89 
p_£m
->
TS
 = (
CPU_TS
)0;

90 ()&
p_«me
;

91 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

93 
OSSemQty
++;

95 
	`OS_CRITICAL_EXIT_NO_SCHED
();

96 *
p_îr
 = 
OS_ERR_NONE
;

97 
	}
}

135 #i‡
OS_CFG_SEM_DEL_EN
 > 0u

136 
OS_OBJ_QTY
 
	$OSSemDñ
 (
OS_SEM
 *
p_£m
,

137 
OS_OPT
 
›t
,

138 
OS_ERR
 *
p_îr
)

140 
OS_OBJ_QTY
 
˙t
;

141 
OS_OBJ_QTY
 
nbr_èsks
;

142 
OS_PEND_DATA
 *
p_≥nd_d©a
;

143 
OS_PEND_LIST
 *
p_≥nd_li°
;

144 
OS_TCB
 *
p_tcb
;

145 
CPU_TS
 
ts
;

147 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

148 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

149 *
p_îr
 = 
OS_ERR_DEL_ISR
;

150  ((
OS_OBJ_QTY
)0);

154 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

155 i‡(
p_£m
 =(
OS_SEM
 *)0) {

156 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

157  ((
OS_OBJ_QTY
)0);

159 
›t
) {

160 
OS_OPT_DEL_NO_PEND
:

161 
OS_OPT_DEL_ALWAYS
:

165 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

166  ((
OS_OBJ_QTY
)0);

170 
	`CPU_CRITICAL_ENTER
();

171 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

172 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

173 
nbr_èsks
 = 
˙t
;

174 
›t
) {

175 
OS_OPT_DEL_NO_PEND
:

176 i‡(
nbr_èsks
 =(
OS_OBJ_QTY
)0) {

177 
OSSemQty
--;

178 
	`OS_SemCÃ
(
p_£m
);

179 
	`CPU_CRITICAL_EXIT
();

180 *
p_îr
 = 
OS_ERR_NONE
;

182 
	`CPU_CRITICAL_EXIT
();

183 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

187 
OS_OPT_DEL_ALWAYS
:

188 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

189 
ts
 = 
	`OS_TS_GET
();

190 
˙t
 > 0u) {

191 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

192 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

193 
	`OS_PídObjDñ
((
OS_PEND_OBJ
 *)((*)
p_£m
),

194 
p_tcb
,

195 
ts
);

196 
˙t
--;

198 
OSSemQty
--;

199 
	`OS_SemCÃ
(
p_£m
);

200 
	`OS_CRITICAL_EXIT_NO_SCHED
();

201 
	`OSSched
();

202 *
p_îr
 = 
OS_ERR_NONE
;

206 
	`CPU_CRITICAL_EXIT
();

207 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

210  (
nbr_èsks
);

211 
	}
}

261 
OS_SEM_CTR
 
	$OSSemPíd
 (
OS_SEM
 *
p_£m
,

262 
OS_TICK
 
timeout
,

263 
OS_OPT
 
›t
,

264 
CPU_TS
 *
p_ts
,

265 
OS_ERR
 *
p_îr
)

267 
OS_SEM_CTR
 
˘r
;

268 
OS_PEND_DATA
 
≥nd_d©a
;

270 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

271 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

272 *
p_îr
 = 
OS_ERR_PEND_ISR
;

273  ((
OS_SEM_CTR
)0);

277 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

278 i‡(
p_£m
 =(
OS_SEM
 *)0) {

279 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

280  ((
OS_SEM_CTR
)0);

282 
›t
) {

283 
OS_OPT_PEND_BLOCKING
:

284 
OS_OPT_PEND_NON_BLOCKING
:

288 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

289  ((
OS_SEM_CTR
)0);

293 i‡(
p_ts
 !(
CPU_TS
 *)0) {

294 *
p_ts
 = (
CPU_TS
)0;

296 
	`CPU_CRITICAL_ENTER
();

297 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

298 
p_£m
->
Cå
--;

299 i‡(
p_ts
 !(
CPU_TS
 *)0) {

300 *
p_ts
 = 
p_£m
->
TS
;

302 
˘r
 = 
p_£m
->
Cå
;

303 
	`CPU_CRITICAL_EXIT
();

304 *
p_îr
 = 
OS_ERR_NONE
;

305  (
˘r
);

308 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

309 
˘r
 = 
p_£m
->
Cå
;

310 
	`CPU_CRITICAL_EXIT
();

311 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

312  (
˘r
);

314 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

315 
	`CPU_CRITICAL_EXIT
();

316 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

317  ((
OS_SEM_CTR
)0);

321 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

322 
	`OS_Píd
(&
≥nd_d©a
,

323 (
OS_PEND_OBJ
 *)((*)
p_£m
),

324 
OS_TASK_PEND_ON_SEM
,

325 
timeout
);

326 
	`OS_CRITICAL_EXIT_NO_SCHED
();

327 
	`OSSched
();

329 
	`CPU_CRITICAL_ENTER
();

330 
OSTCBCurPå
->
PídSètus
) {

331 
OS_STATUS_PEND_OK
:

332 i‡(
p_ts
 !(
CPU_TS
 *)0) {

333 *
p_ts
 = 
OSTCBCurPå
->
TS
;

335 *
p_îr
 = 
OS_ERR_NONE
;

338 
OS_STATUS_PEND_ABORT
:

339 i‡(
p_ts
 !(
CPU_TS
 *)0) {

340 *
p_ts
 = 
OSTCBCurPå
->
TS
;

342 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

345 
OS_STATUS_PEND_TIMEOUT
:

346 i‡(
p_ts
 !(
CPU_TS
 *)0) {

347 *
p_ts
 = (
CPU_TS
 )0;

349 *
p_îr
 = 
OS_ERR_TIMEOUT
;

352 
OS_STATUS_PEND_DEL
:

353 i‡(
p_ts
 !(
CPU_TS
 *)0) {

354 *
p_ts
 = 
OSTCBCurPå
->
TS
;

356 *
p_îr
 = 
OS_ERR_OBJ_DEL
;

360 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

361 
	`CPU_CRITICAL_EXIT
();

362  ((
OS_SEM_CTR
)0);

364 
˘r
 = 
p_£m
->
Cå
;

365 
	`CPU_CRITICAL_EXIT
();

366  (
˘r
);

367 
	}
}

401 #i‡
OS_CFG_SEM_PEND_ABORT_EN
 > 0u

402 
OS_OBJ_QTY
 
	$OSSemPídAb‹t
 (
OS_SEM
 *
p_£m
,

403 
OS_OPT
 
›t
,

404 
OS_ERR
 *
p_îr
)

406 
OS_PEND_LIST
 *
p_≥nd_li°
;

407 
OS_TCB
 *
p_tcb
;

408 
CPU_TS
 
ts
;

409 
OS_OBJ_QTY
 
nbr_èsks
;

411 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

412 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

413 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

414  ((
OS_OBJ_QTY
)0u);

418 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

419 i‡(
p_£m
 =(
OS_SEM
 *)0) {

420 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

421  ((
OS_OBJ_QTY
)0u);

423 
›t
) {

424 
OS_OPT_PEND_ABORT_1
:

425 
OS_OPT_PEND_ABORT_ALL
:

426 
OS_OPT_PEND_ABORT_1
 | 
OS_OPT_POST_NO_SCHED
:

427 
OS_OPT_PEND_ABORT_ALL
 | 
OS_OPT_POST_NO_SCHED
:

431 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

432  ((
OS_OBJ_QTY
)0u);

436 
	`CPU_CRITICAL_ENTER
();

437 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

438 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0u) {

439 
	`CPU_CRITICAL_EXIT
();

440 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

441  ((
OS_OBJ_QTY
)0u);

444 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

445 
nbr_èsks
 = 0u;

446 
ts
 = 
	`OS_TS_GET
();

447 
p_≥nd_li°
->
NbrE¡rõs
 > (
OS_OBJ_QTY
)0u) {

448 
p_tcb
 = 
p_≥nd_li°
->
HódPå
->
TCBPå
;

449 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)((*)
p_£m
),

450 
p_tcb
,

451 
ts
);

452 
nbr_èsks
++;

453 i‡(
›t
 !
OS_OPT_PEND_ABORT_ALL
) {

457 
	`OS_CRITICAL_EXIT_NO_SCHED
();

459 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0u) {

460 
	`OSSched
();

463 *
p_îr
 = 
OS_ERR_NONE
;

464  (
nbr_èsks
);

465 
	}
}

498 
OS_SEM_CTR
 
	$OSSemPo°
 (
OS_SEM
 *
p_£m
,

499 
OS_OPT
 
›t
,

500 
OS_ERR
 *
p_îr
)

502 
OS_SEM_CTR
 
˘r
;

503 
CPU_TS
 
ts
;

505 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

506 i‡(
p_£m
 =(
OS_SEM
 *)0) {

507 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

508  ((
OS_SEM_CTR
)0);

510 
›t
) {

511 
OS_OPT_POST_1
:

512 
OS_OPT_POST_ALL
:

513 
OS_OPT_POST_1
 | 
OS_OPT_POST_NO_SCHED
:

514 
OS_OPT_POST_ALL
 | 
OS_OPT_POST_NO_SCHED
:

518 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

519  ((
OS_SEM_CTR
)0u);

523 
ts
 = 
	`OS_TS_GET
();

525 
˘r
 = 
	`OS_SemPo°
(
p_£m
,

526 
›t
,

527 
ts
,

528 
p_îr
);

530  (
˘r
);

531 
	}
}

559 #i‡
OS_CFG_SEM_SET_EN
 > 0u

560 
	$OSSemSë
 (
OS_SEM
 *
p_£m
,

561 
OS_SEM_CTR
 
˙t
,

562 
OS_ERR
 *
p_îr
)

564 
OS_PEND_LIST
 *
p_≥nd_li°
;

566 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

567 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

568 *
p_îr
 = 
OS_ERR_SET_ISR
;

573 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

574 i‡(
p_£m
 =(
OS_SEM
 *)0) {

575 *
p_îr
 = 
OS_ERR_OBJ_PTR_NULL
;

580 *
p_îr
 = 
OS_ERR_NONE
;

581 
	`CPU_CRITICAL_ENTER
();

582 i‡(
p_£m
->
Cå
 > (
OS_SEM_CTR
)0) {

583 
p_£m
->
Cå
 = 
˙t
;

585 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

586 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

587 
p_£m
->
Cå
 = 
˙t
;

589 *
p_îr
 = 
OS_ERR_TASK_WAITING
;

592 
	`CPU_CRITICAL_EXIT
();

593 
	}
}

613 
	$OS_SemCÃ
 (
OS_SEM
 *
p_£m
)

615 #i‡
OS_OBJ_TYPE_REQ
 > 0u

616 
p_£m
->
Ty≥
 = 
OS_OBJ_TYPE_NONE
;

618 
p_£m
->
Cå
 = (
OS_SEM_CTR
)0;

619 
p_£m
->
TS
 = (
CPU_TS
 )0;

620 
	`OS_PídLi°Inô
(&
p_£m
->
PídLi°
);

621 
	}
}

656 
	$OS_SemInô
 (
OS_ERR
 *
p_îr
)

658 
OSSemQty
 = (
OS_OBJ_QTY
)0;

659 *
p_îr
 = 
OS_ERR_NONE
;

660 
	}
}

695 
OS_SEM_CTR
 
	$OS_SemPo°
 (
OS_SEM
 *
p_£m
,

696 
OS_OPT
 
›t
,

697 
CPU_TS
 
ts
,

698 
OS_ERR
 *
p_îr
)

700 
OS_OBJ_QTY
 
˙t
;

701 
OS_SEM_CTR
 
˘r
;

702 
OS_PEND_LIST
 *
p_≥nd_li°
;

703 
OS_PEND_DATA
 *
p_≥nd_d©a
;

704 
OS_PEND_DATA
 *
p_≥nd_d©a_√xt
;

705 
OS_TCB
 *
p_tcb
;

707 
	`CPU_CRITICAL_ENTER
();

708 
p_≥nd_li°
 = &
p_£m
->
PídLi°
;

709 i‡(
p_≥nd_li°
->
NbrE¡rõs
 =(
OS_OBJ_QTY
)0) {

710 (
OS_SEM_CTR
)) {

712 i‡(
p_£m
->
Cå
 =
DEF_INT_08U_MAX_VAL
) {

713 
	`CPU_CRITICAL_EXIT
();

714 *
p_îr
 = 
OS_ERR_SEM_OVF
;

715  ((
OS_SEM_CTR
)0);

720 i‡(
p_£m
->
Cå
 =
DEF_INT_16U_MAX_VAL
) {

721 
	`CPU_CRITICAL_EXIT
();

722 *
p_îr
 = 
OS_ERR_SEM_OVF
;

723  ((
OS_SEM_CTR
)0);

728 i‡(
p_£m
->
Cå
 =
DEF_INT_32U_MAX_VAL
) {

729 
	`CPU_CRITICAL_EXIT
();

730 *
p_îr
 = 
OS_ERR_SEM_OVF
;

731  ((
OS_SEM_CTR
)0);

738 
p_£m
->
Cå
++;

739 
˘r
 = 
p_£m
->
Cå
;

740 
p_£m
->
TS
 = 
ts
;

741 
	`CPU_CRITICAL_EXIT
();

742 *
p_îr
 = 
OS_ERR_NONE
;

743  (
˘r
);

746 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

747 i‡((
›t
 & 
OS_OPT_POST_ALL
Ë!(
OS_OPT
)0) {

748 
˙t
 = 
p_≥nd_li°
->
NbrE¡rõs
;

750 
˙t
 = (
OS_OBJ_QTY
)1;

752 
p_≥nd_d©a
 = 
p_≥nd_li°
->
HódPå
;

753 
˙t
 > 0u) {

754 
p_tcb
 = 
p_≥nd_d©a
->
TCBPå
;

755 
p_≥nd_d©a_√xt
 = 
p_≥nd_d©a
->
NextPå
;

756 
	`OS_Po°
((
OS_PEND_OBJ
 *)((*)
p_£m
),

757 
p_tcb
,

759 (
OS_MSG_SIZE
)0,

760 
ts
);

761 
p_≥nd_d©a
 = 
p_≥nd_d©a_√xt
;

762 
˙t
--;

764 
˘r
 = 
p_£m
->
Cå
;

765 
	`OS_CRITICAL_EXIT_NO_SCHED
();

766 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

767 
	`OSSched
();

769 *
p_îr
 = 
OS_ERR_NONE
;

770  (
˘r
);

771 
	}
}

	@kernel/thread/sysTask.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

32 
	~<libc/°dio.h
>

33 
	~<c⁄fig.h
>

35 
CPU_INT32U
 
gëTblms
 ();

36 
CPU_INT32U
 
Âga_tick
;

37 
CPU_INT32U
 
synchr⁄iz©i⁄
;

38 
CPU_INT32U
 
gë_Âga
();

39 
sysUsDñay
(
dñay
);

149 
	$OSTaskCª©e
 (
OS_TCB
 *
p_tcb
,

150 
CPU_CHAR
 *
p_«me
,

151 
OS_TASK_PTR
 
p_èsk
,

152 *
p_¨g
,

153 
OS_PRIO
 
¥io
,

154 
CPU_STK
 *
p_°k_ba£
,

155 
CPU_STK_SIZE
 
°k_limô
,

156 
CPU_STK_SIZE
 
°k_size
,

157 
OS_MSG_QTY
 
q_size
,

158 
OS_TICK
 
time_qu™è
,

159 *
p_ext
,

160 
OS_OPT
 
›t
,

161 
OS_ERR
 *
p_îr
)

163 
CPU_STK_SIZE
 
i
;

164 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

165 
OS_REG_ID
 
ªg_nbr
;

168 
CPU_STK
 *
p_•
;

169 
CPU_STK
 *
p_°k_limô
;

171 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

172 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

173 *
p_îr
 = 
OS_ERR_TASK_CREATE_ISR
;

178 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

179 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

180 *
p_îr
 = 
OS_ERR_TCB_INVALID
;

183 i‡(
p_èsk
 =(
OS_TASK_PTR
)0) {

184 *
p_îr
 = 
OS_ERR_TASK_INVALID
;

187 i‡(
p_°k_ba£
 =(
CPU_STK
 *)0) {

188 *
p_îr
 = 
OS_ERR_STK_INVALID
;

191 i‡(
°k_size
 < 
OSCfg_StkSizeMö
) {

192 *
p_îr
 = 
OS_ERR_STK_SIZE_INVALID
;

195 i‡(
°k_limô
 >
°k_size
) {

196 *
p_îr
 = 
OS_ERR_STK_LIMIT_INVALID
;

199 i‡(
¥io
 >
OS_CFG_PRIO_MAX
) {

200 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

205 i‡(
¥io
 =(
OS_CFG_PRIO_MAX
 - 1u)) {

206 i‡(
p_tcb
 !&
OSIdÀTaskTCB
) {

207 *
p_îr
 = 
OS_ERR_PRIO_INVALID
;

212 
	`OS_TaskInôTCB
(
p_tcb
);

214 *
p_îr
 = 
OS_ERR_NONE
;

216 i‡((
›t
 & 
OS_OPT_TASK_STK_CHK
Ë!(
OS_OPT
)0) {

217 i‡((
›t
 & 
OS_OPT_TASK_STK_CLR
Ë!(
OS_OPT
)0) {

218 
p_•
 = 
p_°k_ba£
;

219 
i
 = 0u; i < 
°k_size
/4; i++) {

220 *
p_•
 = (
CPU_STK
)0;

221 
p_•
--;

226 #i‡(
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO
)

227 
p_°k_limô
 = 
p_°k_ba£
 + 
°k_limô
;

229 
p_°k_limô
 = 
p_°k_ba£
 + (
°k_size
 - 1uË- 
°k_limô
;

232 
p_•
 = 
	`OSTaskStkInô
(
p_èsk
,

233 
p_¨g
,

234 
p_°k_ba£
,

235 
p_°k_limô
,

236 
°k_size
,

237 
›t
);

240 ()&
p_«me
;

242 
p_tcb
->
t_«me
 = 
p_«me
;

243 
p_tcb
->
Prio
 = 
¥io
;

245 #i‡
OS_CFG_MUTEX_EN
 > 0u

246 
p_tcb
->
Ba£Prio
 = 
¥io
;

249 
p_tcb
->
StkPå
 = 
p_•
;

250 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

251 
p_tcb
->
StkLimôPå
 = 
p_°k_limô
;

254 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

255 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

256 i‡(
time_qu™è
 =(
OS_TICK
)0) {

257 
p_tcb
->
TimeQu™èCå
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

259 
p_tcb
->
TimeQu™èCå
 = 
time_qu™è
;

262 ()&
time_qu™è
;

265 
p_tcb
->
ExtPå
 = 
p_ext
;

266 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

267 
p_tcb
->
StkBa£På
 = 
p_°k_ba£
;

268 
p_tcb
->
StkSize
 = 
°k_size
;

270 
p_tcb
->
O±
 = 
›t
;

272 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

273 
ªg_nbr
 = 0u;Ñeg_nb∏< 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_nbr++) {

274 
p_tcb
->
RegTbl
[
ªg_nbr
] = (
OS_REG
)0;

278 ()&
q_size
;

280 
	`OSTaskCª©eHook
(
p_tcb
);

283 
	`OS_CRITICAL_ENTER
();

284 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

285 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

287 
OSTaskQty
++;

289 i‡(
OSRu¬ög
 !
OS_STATE_OS_RUNNING
) {

290 
	`OS_CRITICAL_EXIT
();

294 
	`OS_CRITICAL_EXIT_NO_SCHED
();

296 
	`OSSched
();

297 
	}
}

326 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

327 
	$OSTaskDñ
 (
OS_TCB
 *
p_tcb
,

328 
OS_ERR
 *
p_îr
)

331 #i‡
OS_CFG_MUTEX_EN
 > 0u

332 
OS_TCB
 *
p_tcb_ow√r
;

333 
OS_PRIO
 
¥io_√w
;

336 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

337 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

338 *
p_îr
 = 
OS_ERR_TASK_DEL_ISR
;

343 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

344 *
p_îr
 = 
OS_ERR_TASK_DEL_IDLE
;

348 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

349 
	`CPU_CRITICAL_ENTER
();

350 
p_tcb
 = 
OSTCBCurPå
;

351 
	`CPU_CRITICAL_EXIT
();

354 
	`OS_CRITICAL_ENTER
();

355 
p_tcb
->
TaskSèã
) {

356 
OS_TASK_STATE_RDY
:

357 
	`OS_RdyLi°Remove
(
p_tcb
);

360 
OS_TASK_STATE_SUSPENDED
:

363 
OS_TASK_STATE_DLY
:

364 
OS_TASK_STATE_DLY_SUSPENDED
:

365 
	`OS_TickLi°Remove
(
p_tcb
);

368 
OS_TASK_STATE_PEND
:

369 
OS_TASK_STATE_PEND_SUSPENDED
:

370 
OS_TASK_STATE_PEND_TIMEOUT
:

371 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

372 
p_tcb
->
PídOn
) {

373 
OS_TASK_PEND_ON_NOTHING
:

374 
OS_TASK_PEND_ON_TASK_Q
:

375 
OS_TASK_PEND_ON_TASK_SEM
:

378 
OS_TASK_PEND_ON_FLAG
:

379 
OS_TASK_PEND_ON_MULTI
:

380 
OS_TASK_PEND_ON_Q
:

381 
OS_TASK_PEND_ON_SEM
:

382 
	`OS_PídLi°Remove
(
p_tcb
);

385 #i‡
OS_CFG_MUTEX_EN
 > 0u

386 
OS_TASK_PEND_ON_MUTEX
:

387 
p_tcb_ow√r
 = ((
OS_MUTEX
 *)
p_tcb
->
PídD©aTblPå
->
PídObjPå
)->
Ow√rTCBPå
;

388 
¥io_√w
 = 
p_tcb_ow√r
->
Prio
;

389 
	`OS_PídLi°Remove
(
p_tcb
);

390 i‡((
p_tcb_ow√r
->
Prio
 !p_tcb_ow√r->
Ba£Prio
) &&

391 (
p_tcb_ow√r
->
Prio
 =
p_tcb
->Prio)) {

392 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
p_tcb_ow√r
);

393 
¥io_√w
 =Örio_√w > 
p_tcb_ow√r
->
Ba£Prio
 ?Ö_tcb_owner->BasePrio :Örio_new;

395 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

397 i‡(
¥io_√w
 !
p_tcb_ow√r
->
Prio
) {

398 
	`OS_TaskCh™gePrio
(
p_tcb_ow√r
, 
¥io_√w
);

406 i‡((
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) ||

407 (
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
)) {

408 
	`OS_TickLi°Remove
(
p_tcb
);

414 
	`OS_CRITICAL_EXIT
();

415 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

419 #i‡
OS_CFG_MUTEX_EN
 > 0u

420 if(
p_tcb
->
MuãxGΩHódPå
 !(
OS_MUTEX
 *)0) {

421 
	`OS_MuãxGΩPo°AŒ
(
p_tcb
);

425 
	`OSTaskDñHook
(
p_tcb
);

427 
OSTaskQty
--;

428 
	`OS_TaskInôTCB
(
p_tcb
);

429 
p_tcb
->
TaskSèã
 = (
OS_STATE
)
OS_TASK_STATE_DEL
;

431 
	`OS_CRITICAL_EXIT_NO_SCHED
();

433 *
p_îr
 = 
OS_ERR_NONE
;

436 
	`OSSched
();

437 
	}
}

591 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

592 
OS_REG
 
	$OSTaskRegGë
 (
OS_TCB
 *
p_tcb
,

593 
OS_REG_ID
 
id
,

594 
OS_ERR
 *
p_îr
)

596 
OS_REG
 
vÆue
;

598 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

599 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

600 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

601  ((
OS_REG
)0);

605 
	`CPU_CRITICAL_ENTER
();

606 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

607 
p_tcb
 = 
OSTCBCurPå
;

609 
vÆue
 = 
p_tcb
->
RegTbl
[
id
];

610 
	`CPU_CRITICAL_EXIT
();

611 *
p_îr
 = 
OS_ERR_NONE
;

612  ((
OS_REG
)
vÆue
);

613 
	}
}

634 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

635 
OS_REG_ID
 
	$OSTaskRegGëID
 (
OS_ERR
 *
p_îr
)

637 
OS_REG_ID
 
id
;

639 
	`CPU_CRITICAL_ENTER
();

640 i‡(
OSTaskRegNextAvaûID
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

641 *
p_îr
 = 
OS_ERR_NO_MORE_ID_AVAIL
;

642 
	`CPU_CRITICAL_EXIT
();

643  ((
OS_REG_ID
)
OS_CFG_TASK_REG_TBL_SIZE
);

646 
id
 = 
OSTaskRegNextAvaûID
;

647 
OSTaskRegNextAvaûID
++;

648 
	`CPU_CRITICAL_EXIT
();

649 *
p_îr
 = 
OS_ERR_NONE
;

650  (
id
);

651 
	}
}

680 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

681 
	$OSTaskRegSë
 (
OS_TCB
 *
p_tcb
,

682 
OS_REG_ID
 
id
,

683 
OS_REG
 
vÆue
,

684 
OS_ERR
 *
p_îr
)

686 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

687 i‡(
id
 >
OS_CFG_TASK_REG_TBL_SIZE
) {

688 *
p_îr
 = 
OS_ERR_REG_ID_INVALID
;

693 
	`CPU_CRITICAL_ENTER
();

694 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

695 
p_tcb
 = 
OSTCBCurPå
;

697 
p_tcb
->
RegTbl
[
id
] = 
vÆue
;

698 
	`CPU_CRITICAL_EXIT
();

699 *
p_îr
 = 
OS_ERR_NONE
;

700 
	}
}

725 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

726 
	$OSTaskResume
 (
OS_TCB
 *
p_tcb
,

727 
OS_ERR
 *
p_îr
)

730 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

731 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

732 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

733 *
p_îr
 = 
OS_ERR_TASK_RESUME_ISR
;

739 
	`CPU_CRITICAL_ENTER
();

740 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

741 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

742 (
p_tcb
 =
OSTCBCurPå
)) {

743 
	`CPU_CRITICAL_EXIT
();

744 *
p_îr
 = 
OS_ERR_TASK_RESUME_SELF
;

748 
	`CPU_CRITICAL_EXIT
();

750 
	`OS_TaskResume
(
p_tcb
, 
p_îr
);

752 
	}
}

789 
OS_SEM_CTR
 
	$OSTaskSemPíd
 (
OS_TICK
 
timeout
,

790 
OS_OPT
 
›t
,

791 
CPU_TS
 *
p_ts
,

792 
OS_ERR
 *
p_îr
)

794 
OS_SEM_CTR
 
˘r
;

796 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

797 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

798 *
p_îr
 = 
OS_ERR_PEND_ISR
;

799  ((
OS_SEM_CTR
)0);

803 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

804 
›t
) {

805 
OS_OPT_PEND_BLOCKING
:

806 
OS_OPT_PEND_NON_BLOCKING
:

810 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

811  ((
OS_SEM_CTR
)0);

815 i‡(
p_ts
 !(
CPU_TS
 *)0) {

816 *
p_ts
 = (
CPU_TS
 )0;

819 
	`CPU_CRITICAL_ENTER
();

820 i‡(
OSTCBCurPå
->
SemCå
 > (
OS_SEM_CTR
)0) {

821 
OSTCBCurPå
->
SemCå
--;

822 
˘r
 = 
OSTCBCurPå
->
SemCå
;

823 i‡(
p_ts
 !(
CPU_TS
 *)0) {

824 *
p_ts
 = 
OSTCBCurPå
->
TS
;

826 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

827 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

828 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

829 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

832 
	`CPU_CRITICAL_EXIT
();

833 *
p_îr
 = 
OS_ERR_NONE
;

834  (
˘r
);

837 i‡((
›t
 & 
OS_OPT_PEND_NON_BLOCKING
Ë!(
OS_OPT
)0) {

838 
	`CPU_CRITICAL_EXIT
();

839 *
p_îr
 = 
OS_ERR_PEND_WOULD_BLOCK
;

840  ((
OS_SEM_CTR
)0);

842 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

843 
	`CPU_CRITICAL_EXIT
();

844 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

845  ((
OS_SEM_CTR
)0);

849 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

850 
	`OS_Píd
((
OS_PEND_DATA
 *)0,

851 (
OS_PEND_OBJ
 *)0,

852 (
OS_STATE
 )
OS_TASK_PEND_ON_TASK_SEM
,

853 (
OS_TICK
 )
timeout
);

854 
	`OS_CRITICAL_EXIT_NO_SCHED
();

855 
	`OSSched
();

857 
	`CPU_CRITICAL_ENTER
();

858 
OSTCBCurPå
->
PídSètus
) {

859 
OS_STATUS_PEND_OK
:

860 i‡(
p_ts
 !(
CPU_TS
 *)0) {

861 *
p_ts
 = 
OSTCBCurPå
->
TS
;

862 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

863 
OSTCBCurPå
->
SemPídTime
 = 
	`OS_TS_GET
(Ë- OSTCBCurPå->
TS
;

864 i‡(
OSTCBCurPå
->
SemPídTimeMax
 < OSTCBCurPå->
SemPídTime
) {

865 
OSTCBCurPå
->
SemPídTimeMax
 = OSTCBCurPå->
SemPídTime
;

869 *
p_îr
 = 
OS_ERR_NONE
;

872 
OS_STATUS_PEND_ABORT
:

873 i‡(
p_ts
 !(
CPU_TS
 *)0) {

874 *
p_ts
 = 
OSTCBCurPå
->
TS
;

876 *
p_îr
 = 
OS_ERR_PEND_ABORT
;

879 
OS_STATUS_PEND_TIMEOUT
:

880 i‡(
p_ts
 !(
CPU_TS
 *)0) {

881 *
p_ts
 = (
CPU_TS
 )0;

883 *
p_îr
 = 
OS_ERR_TIMEOUT
;

887 *
p_îr
 = 
OS_ERR_STATUS_INVALID
;

890 
˘r
 = 
OSTCBCurPå
->
SemCå
;

891 
	`CPU_CRITICAL_EXIT
();

892  (
˘r
);

893 
	}
}

924 #i‡
OS_CFG_TASK_SEM_PEND_ABORT_EN
 > 0u

925 
CPU_BOOLEAN
 
	$OSTaskSemPídAb‹t
 (
OS_TCB
 *
p_tcb
,

926 
OS_OPT
 
›t
,

927 
OS_ERR
 *
p_îr
)

929 
CPU_TS
 
ts
;

931 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

932 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

933 *
p_îr
 = 
OS_ERR_PEND_ABORT_ISR
;

934  (
DEF_FALSE
);

938 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

939 
›t
) {

940 
OS_OPT_POST_NONE
:

941 
OS_OPT_POST_NO_SCHED
:

945 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

946  (
DEF_FALSE
);

950 
	`CPU_CRITICAL_ENTER
();

951 i‡((
p_tcb
 =(
OS_TCB
 *)0) ||

952 (
p_tcb
 =
OSTCBCurPå
)) {

953 
	`CPU_CRITICAL_EXIT
();

954 *
p_îr
 = 
OS_ERR_PEND_ABORT_SELF
;

955  (
DEF_FALSE
);

958 i‡(
p_tcb
->
PídOn
 !
OS_TASK_PEND_ON_TASK_SEM
) {

959 
	`CPU_CRITICAL_EXIT
();

960 *
p_îr
 = 
OS_ERR_PEND_ABORT_NONE
;

961  (
DEF_FALSE
);

963 
	`CPU_CRITICAL_EXIT
();

965 
	`OS_CRITICAL_ENTER
();

966 
ts
 = 
	`OS_TS_GET
();

967 
	`OS_PídAb‹t
((
OS_PEND_OBJ
 *)0,

968 
p_tcb
,

969 
ts
);

970 
	`OS_CRITICAL_EXIT_NO_SCHED
();

971 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

972 
	`OSSched
();

974 *
p_îr
 = 
OS_ERR_NONE
;

975  (
DEF_TRUE
);

976 
	}
}

1003 
OS_SEM_CTR
 
	$OSTaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1004 
OS_OPT
 
›t
,

1005 
OS_ERR
 *
p_îr
)

1007 
OS_SEM_CTR
 
˘r
;

1008 
CPU_TS
 
ts
;

1010 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1011 
›t
) {

1012 
OS_OPT_POST_NONE
:

1013 
OS_OPT_POST_NO_SCHED
:

1017 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

1018  ((
OS_SEM_CTR
)0u);

1022 
ts
 = 
	`OS_TS_GET
();

1024 
˘r
 = 
	`OS_TaskSemPo°
(
p_tcb
,

1025 
›t
,

1026 
ts
,

1027 
p_îr
);

1029  (
˘r
);

1030 
	}
}

1053 
OS_SEM_CTR
 
	$OSTaskSemSë
 (
OS_TCB
 *
p_tcb
,

1054 
OS_SEM_CTR
 
˙t
,

1055 
OS_ERR
 *
p_îr
)

1057 
OS_SEM_CTR
 
˘r
;

1059 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1060 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1061 *
p_îr
 = 
OS_ERR_SET_ISR
;

1062  ((
OS_SEM_CTR
)0);

1066 
	`CPU_CRITICAL_ENTER
();

1067 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1068 
p_tcb
 = 
OSTCBCurPå
;

1070 
˘r
 = 
p_tcb
->
SemCå
;

1071 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
)
˙t
;

1072 
	`CPU_CRITICAL_EXIT
();

1073 *
p_îr
 = 
OS_ERR_NONE
;

1074  (
˘r
);

1075 
	}
}

1102 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1103 
	$OSTaskStkChk
 (
OS_TCB
 *
p_tcb
,

1104 
CPU_STK_SIZE
 *
p_‰ì
,

1105 
CPU_STK_SIZE
 *
p_u£d
,

1106 
OS_ERR
 *
p_îr
)

1108 
CPU_STK_SIZE
 
‰ì_°k
;

1109 
CPU_STK
 *
p_°k
;

1111 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1112 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1113 *
p_îr
 = 
OS_ERR_TASK_STK_CHK_ISR
;

1118 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

1119 i‡(
p_‰ì
 =(
CPU_STK_SIZE
*)0) {

1120 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1124 i‡(
p_u£d
 =(
CPU_STK_SIZE
*)0) {

1125 *
p_îr
 = 
OS_ERR_PTR_INVALID
;

1130 
	`CPU_CRITICAL_ENTER
();

1131 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1132 
p_tcb
 = 
OSTCBCurPå
;

1135 i‡(
p_tcb
->
StkPå
 =(
CPU_STK
*)0) {

1136 
	`CPU_CRITICAL_EXIT
();

1137 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1138 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1139 *
p_îr
 = 
OS_ERR_TASK_NOT_EXIST
;

1143 i‡((
p_tcb
->
O±
 & 
OS_OPT_TASK_STK_CHK
Ë=(
OS_OPT
)0) {

1144 
	`CPU_CRITICAL_EXIT
();

1145 *
p_‰ì
 = (
CPU_STK_SIZE
)0;

1146 *
p_u£d
 = (
CPU_STK_SIZE
)0;

1147 *
p_îr
 = 
OS_ERR_TASK_OPT
;

1150 
	`CPU_CRITICAL_EXIT
();

1152 
‰ì_°k
 = 0u;

1153 #i‡
CPU_CFG_STK_GROWTH
 =
CPU_STK_GROWTH_HI_TO_LO


1154 
p_°k
 = 
p_tcb
->
StkBa£På
;

1155 *
p_°k
 =(
CPU_STK
)0) {

1156 
p_°k
++;

1157 
‰ì_°k
++;

1160 
p_°k
 = 
p_tcb
->
StkBa£På
 +Ö_tcb->
StkSize
 - 1u;

1161 *
p_°k
 =(
CPU_STK
)0) {

1162 
‰ì_°k
++;

1163 
p_°k
--;

1166 *
p_‰ì
 = 
‰ì_°k
;

1167 *
p_u£d
 = (
p_tcb
->
StkSize
 - 
‰ì_°k
);

1168 *
p_îr
 = 
OS_ERR_NONE
;

1169 
	}
}

1202 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1203 
	$OSTaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1204 
OS_ERR
 *
p_îr
)

1207 #i‡(
OS_CFG_ISR_POST_DEFERRED_EN
 == 0u) && \

1208 (
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u)

1209 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1210 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_ISR
;

1215 i‡(
p_tcb
 =&
OSIdÀTaskTCB
) {

1216 *
p_îr
 = 
OS_ERR_TASK_SUSPEND_IDLE
;

1220 
	`OS_TaskSu•íd
(
p_tcb
, 
p_îr
);

1221 
	}
}

1245 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1246 
	$OSTaskTimeQu™èSë
 (
OS_TCB
 *
p_tcb
,

1247 
OS_TICK
 
time_qu™è
,

1248 
OS_ERR
 *
p_îr
)

1251 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

1252 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0) {

1253 *
p_îr
 = 
OS_ERR_SET_ISR
;

1258 
	`CPU_CRITICAL_ENTER
();

1259 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1260 
p_tcb
 = 
OSTCBCurPå
;

1263 i‡(
time_qu™è
 == 0u) {

1264 
p_tcb
->
TimeQu™è
 = 
OSSchedRoundRoböDÊtTimeQu™è
;

1266 
p_tcb
->
TimeQu™è
 = 
time_qu™è
;

1268 i‡(
p_tcb
->
TimeQu™è
 >Ö_tcb->
TimeQu™èCå
) {

1269 
p_tcb
->
TimeQu™èCå
 =Ö_tcb->
TimeQu™è
;

1271 
	`CPU_CRITICAL_EXIT
();

1272 *
p_îr
 = 
OS_ERR_NONE
;

1273 
	}
}

1309 
	$OS_TaskInô
 (
OS_ERR
 *
p_îr
)

1312 
OSTaskQty
 = (
OS_OBJ_QTY
 )0;

1313 
OSTaskCtxSwCå
 = (
OS_CTX_SW_CTR
)0;

1315 *
p_îr
 = 
OS_ERR_NONE
;

1316 
	}
}

1332 
	$OS_TaskInôTCB
 (
OS_TCB
 *
p_tcb
)

1334 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1335 
OS_REG_ID
 
ªg_id
;

1337 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1338 
CPU_TS
 
ts
;

1342 
p_tcb
->
StkPå
 = (
CPU_STK
 *)0;

1343 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

1344 
p_tcb
->
StkLimôPå
 = (
CPU_STK
 *)0;

1347 
p_tcb
->
ExtPå
 = (*)0;

1349 
p_tcb
->
NextPå
 = (
OS_TCB
 *)0;

1350 
p_tcb
->
PªvPå
 = (
OS_TCB
 *)0;

1352 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

1353 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

1354 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

1356 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

1357 
p_tcb
->
StkBa£På
 = (
CPU_STK
 *)0;

1360 
p_tcb
->
TS
 = (
CPU_TS
 )0u;

1362 #i‡(
OS_MSG_EN
 > 0u)

1363 
p_tcb
->
MsgPå
 = (*)0;

1364 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
 )0u;

1367 #i‡
OS_CFG_TASK_REG_TBL_SIZE
 > 0u

1368 
ªg_id
 = 0u;Ñeg_id < 
OS_CFG_TASK_REG_TBL_SIZE
;Ñeg_id++) {

1369 
p_tcb
->
RegTbl
[
ªg_id
] = (
OS_REG
)0u;

1373 
p_tcb
->
SemCå
 = (
OS_SEM_CTR
 )0u;

1374 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1375 
p_tcb
->
SemPídTime
 = (
CPU_TS
 )0u;

1376 
p_tcb
->
SemPídTimeMax
 = (
CPU_TS
 )0u;

1379 #i‡((
OS_CFG_DBG_EN
 > 0uË|| (
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u))

1380 
p_tcb
->
StkSize
 = (
CPU_STK_SIZE
 )0u;

1384 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1385 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
 )0u;

1388 #i‡
OS_CFG_STAT_TASK_STK_CHK_EN
 > 0u

1389 
p_tcb
->
StkFªe
 = (
CPU_STK_SIZE
 )0u;

1390 
p_tcb
->
StkU£d
 = (
CPU_STK_SIZE
 )0u;

1393 
p_tcb
->
O±
 = (
OS_OPT
 )0u;

1395 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

1396 
p_tcb
->
TickCåPªv
 = (
OS_TICK
 )0u;

1398 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

1399 
p_tcb
->
TimeQu™è
 = (
OS_TICK
 )0u;

1400 
p_tcb
->
TimeQu™èCå
 = (
OS_TICK
 )0u;

1403 #i‡
OS_CFG_TASK_PROFILE_EN
 > 0u

1404 
p_tcb
->
CPUUßge
 = (
OS_CPU_USAGE
 )0u;

1405 
p_tcb
->
CPUUßgeMax
 = (
OS_CPU_USAGE
 )0u;

1406 
p_tcb
->
CtxSwCå
 = (
OS_CTX_SW_CTR
 )0u;

1407 
p_tcb
->
Cy˛esDñè
 = (
CPU_TS
 )0u;

1408 
ts
 = 
	`OS_TS_GET
();

1409 
p_tcb
->
Cy˛esSèπ
 = 
ts
;

1410 
p_tcb
->
Cy˛esTŸÆ
 = (
OS_CYCLES
 )0u;

1413 
p_tcb
->
PídOn
 = (
OS_STATE
 )
OS_TASK_PEND_ON_NOTHING
;

1414 
p_tcb
->
PídSètus
 = (
OS_STATUS
 )
OS_STATUS_PEND_OK
;

1415 
p_tcb
->
TaskSèã
 = (
OS_STATE
 )
OS_TASK_STATE_RDY
;

1417 
p_tcb
->
Prio
 = (
OS_PRIO
 )
OS_PRIO_INIT
;

1418 #i‡
OS_CFG_MUTEX_EN
 > 0u

1419 
p_tcb
->
Ba£Prio
 = (
OS_PRIO
 )
OS_PRIO_INIT
;

1420 
p_tcb
->
MuãxGΩHódPå
 = (
OS_MUTEX
 *)0;

1423 
	}
}

1490 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1491 
	$OS_TaskResume
 (
OS_TCB
 *
p_tcb
,

1492 
OS_ERR
 *
p_îr
)

1494 
	`CPU_CRITICAL_ENTER
();

1495 *
p_îr
 = 
OS_ERR_NONE
;

1496 
p_tcb
->
TaskSèã
) {

1497 
OS_TASK_STATE_RDY
:

1498 
OS_TASK_STATE_DLY
:

1499 
OS_TASK_STATE_PEND
:

1500 
OS_TASK_STATE_PEND_TIMEOUT
:

1501 
	`CPU_CRITICAL_EXIT
();

1502 *
p_îr
 = 
OS_ERR_TASK_NOT_SUSPENDED
;

1505 
OS_TASK_STATE_SUSPENDED
:

1506 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

1507 
p_tcb
->
Su•ídCå
--;

1508 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

1509 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

1510 
	`OS_RdyLi°In£π
(
p_tcb
);

1512 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1515 
OS_TASK_STATE_DLY_SUSPENDED
:

1516 
p_tcb
->
Su•ídCå
--;

1517 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

1518 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

1520 
	`CPU_CRITICAL_EXIT
();

1523 
OS_TASK_STATE_PEND_SUSPENDED
:

1524 
p_tcb
->
Su•ídCå
--;

1525 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

1526 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND
;

1528 
	`CPU_CRITICAL_EXIT
();

1531 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1532 
p_tcb
->
Su•ídCå
--;

1533 i‡(
p_tcb
->
Su•ídCå
 =(
OS_NESTING_CTR
)0) {

1534 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT
;

1536 
	`CPU_CRITICAL_EXIT
();

1540 
	`CPU_CRITICAL_EXIT
();

1541 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

1545 
	`OSSched
();

1546 
	}
}

1565 
	$OS_TaskRëu∫
 ()

1567 
OS_ERR
 
îr
;

1568 
CPU_INT32U
 
Ã
=0;

1569 
__asm__
 
	`__vﬁ©ûe__
 ("mÊ∏%0":"Ù" (
Ã
):);

1570 
	`¥ötf
("-> LR:%x\n",
Ã
);

1572 
	`OSTaskRëu∫Hook
(
OSTCBCurPå
);

1573 
	`¥ötf
("ready scheduleÅo RTSÅask\n");

1575 i‡((
synchr⁄iz©i⁄
 =0x0Ë&& (
OSPrioHighRdy
 == 0x0)) {

1577 
Âga_tick
 = 
	`gë_Âga
();

1578 }  
Âga_tick
 % 200 > 0x1);

1579 
synchr⁄iz©i⁄
 = 0x1;

1581 
	`sysUsDñay
(50);

1583 #i‡
OS_CFG_TASK_DEL_EN
 > 0u

1584 
	`OSTaskDñ
((
OS_TCB
 *)0,

1585 (
OS_ERR
 *)&
îr
);

1588 
	`OSTimeDly
((
OS_TICK
 )
OSCfg_TickR©e_Hz
,

1589 (
OS_OPT
 )
OS_OPT_TIME_DLY
,

1590 (
OS_ERR
 *)&
îr
);

1593 
	}
}

1626 
OS_SEM_CTR
 
	$OS_TaskSemPo°
 (
OS_TCB
 *
p_tcb
,

1627 
OS_OPT
 
›t
,

1628 
CPU_TS
 
ts
,

1629 
OS_ERR
 *
p_îr
)

1631 
OS_SEM_CTR
 
˘r
;

1633 
	`OS_CRITICAL_ENTER
();

1634 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1635 
p_tcb
 = 
OSTCBCurPå
;

1637 
p_tcb
->
TS
 = 
ts
;

1638 *
p_îr
 = 
OS_ERR_NONE
;

1639 
p_tcb
->
TaskSèã
) {

1640 
OS_TASK_STATE_RDY
:

1641 
OS_TASK_STATE_DLY
:

1642 
OS_TASK_STATE_SUSPENDED
:

1643 
OS_TASK_STATE_DLY_SUSPENDED
:

1644 (
OS_SEM_CTR
)) {

1646 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

1647 
	`OS_CRITICAL_EXIT
();

1648 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1649  ((
OS_SEM_CTR
)0);

1654 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

1655 
	`OS_CRITICAL_EXIT
();

1656 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1657  ((
OS_SEM_CTR
)0);

1662 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

1663 
	`OS_CRITICAL_EXIT
();

1664 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1665  ((
OS_SEM_CTR
)0);

1672 
p_tcb
->
SemCå
++;

1673 
˘r
 = 
p_tcb
->
SemCå
;

1674 
	`OS_CRITICAL_EXIT
();

1677 
OS_TASK_STATE_PEND
:

1678 
OS_TASK_STATE_PEND_TIMEOUT
:

1679 
OS_TASK_STATE_PEND_SUSPENDED
:

1680 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1681 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_TASK_SEM
) {

1682 
	`OS_Po°
((
OS_PEND_OBJ
 *)0,

1683 (
OS_TCB
 *)
p_tcb
,

1685 (
OS_MSG_SIZE
 )0u,

1686 (
CPU_TS
 )
ts
);

1687 
˘r
 = 
p_tcb
->
SemCå
;

1688 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1689 i‡((
›t
 & 
OS_OPT_POST_NO_SCHED
Ë=(
OS_OPT
)0) {

1690 
	`OSSched
();

1693 (
OS_SEM_CTR
)) {

1695 i‡(
p_tcb
->
SemCå
 =
DEF_INT_08U_MAX_VAL
) {

1696 
	`OS_CRITICAL_EXIT
();

1697 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1698  ((
OS_SEM_CTR
)0);

1703 i‡(
p_tcb
->
SemCå
 =
DEF_INT_16U_MAX_VAL
) {

1704 
	`OS_CRITICAL_EXIT
();

1705 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1706  ((
OS_SEM_CTR
)0);

1711 i‡(
p_tcb
->
SemCå
 =
DEF_INT_32U_MAX_VAL
) {

1712 
	`OS_CRITICAL_EXIT
();

1713 *
p_îr
 = 
OS_ERR_SEM_OVF
;

1714  ((
OS_SEM_CTR
)0);

1721 
p_tcb
->
SemCå
++;

1722 
˘r
 = 
p_tcb
->
SemCå
;

1723 
	`OS_CRITICAL_EXIT
();

1728 
	`OS_CRITICAL_EXIT
();

1729 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

1730 
˘r
 = (
OS_SEM_CTR
)0;

1733  (
˘r
);

1734 
	}
}

1766 #i‡
OS_CFG_TASK_SUSPEND_EN
 > 0u

1767 
	$OS_TaskSu•íd
 (
OS_TCB
 *
p_tcb
,

1768 
OS_ERR
 *
p_îr
)

1770 
	`CPU_CRITICAL_ENTER
();

1771 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

1772 
p_tcb
 = 
OSTCBCurPå
;

1775 i‡(
p_tcb
 =
OSTCBCurPå
) {

1776 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0) {

1777 
	`CPU_CRITICAL_EXIT
();

1778 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

1783 *
p_îr
 = 
OS_ERR_NONE
;

1784 
p_tcb
->
TaskSèã
) {

1785 
OS_TASK_STATE_RDY
:

1786 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

1787 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

1788 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

1789 
	`OS_RdyLi°Remove
(
p_tcb
);

1790 
	`OS_CRITICAL_EXIT_NO_SCHED
();

1793 
OS_TASK_STATE_DLY
:

1794 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY_SUSPENDED
;

1795 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

1796 
	`CPU_CRITICAL_EXIT
();

1799 
OS_TASK_STATE_PEND
:

1800 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_SUSPENDED
;

1801 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

1802 
	`CPU_CRITICAL_EXIT
();

1805 
OS_TASK_STATE_PEND_TIMEOUT
:

1806 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
;

1807 
p_tcb
->
Su•ídCå
 = (
OS_NESTING_CTR
)1;

1808 
	`CPU_CRITICAL_EXIT
();

1811 
OS_TASK_STATE_SUSPENDED
:

1812 
OS_TASK_STATE_DLY_SUSPENDED
:

1813 
OS_TASK_STATE_PEND_SUSPENDED
:

1814 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1815 
p_tcb
->
Su•ídCå
++;

1816 
	`CPU_CRITICAL_EXIT
();

1820 
	`CPU_CRITICAL_EXIT
();

1821 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

1825 
	`OSSched
();

1826 
	}
}

1850 
	$OS_TaskCh™gePrio
(
OS_TCB
 *
p_tcb
,

1851 
OS_PRIO
 
¥io_√w
)

1853 
OS_TCB
 *
p_tcb_ow√r
;

1854 #i‡
OS_CFG_MUTEX_EN
 > 0

1855 
OS_PRIO
 
¥io_cur
;

1860 
p_tcb_ow√r
 = (
OS_TCB
 *)0;

1861 #i‡
OS_CFG_MUTEX_EN
 > 0

1862 
¥io_cur
 = 
p_tcb
->
Prio
;

1864 
p_tcb
->
TaskSèã
) {

1865 
OS_TASK_STATE_RDY
:

1866 
	`OS_RdyLi°Remove
(
p_tcb
);

1867 
p_tcb
->
Prio
 = 
¥io_√w
;

1868 
	`OS_PrioIn£π
(
p_tcb
->
Prio
);

1869 i‡(
p_tcb
 =
OSTCBCurPå
) {

1870 
	`OS_RdyLi°In£πHód
(
p_tcb
);

1872 
	`OS_RdyLi°In£πTaû
(
p_tcb
);

1876 
OS_TASK_STATE_DLY
:

1877 
OS_TASK_STATE_SUSPENDED
:

1878 
OS_TASK_STATE_DLY_SUSPENDED
:

1879 
p_tcb
->
Prio
 = 
¥io_√w
;

1882 
OS_TASK_STATE_PEND
:

1883 
OS_TASK_STATE_PEND_TIMEOUT
:

1884 
OS_TASK_STATE_PEND_SUSPENDED
:

1885 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

1886 
p_tcb
->
Prio
 = 
¥io_√w
;

1887 
p_tcb
->
PídOn
) {

1888 
OS_TASK_PEND_ON_FLAG
:

1889 
OS_TASK_PEND_ON_MULTI
:

1890 
OS_TASK_PEND_ON_Q
:

1891 
OS_TASK_PEND_ON_SEM
:

1892 
	`OS_PídLi°Ch™gePrio
(
p_tcb
);

1895 
OS_TASK_PEND_ON_MUTEX
:

1896 #i‡
OS_CFG_MUTEX_EN
 > 0

1897 
	`OS_PídLi°Ch™gePrio
(
p_tcb
);

1898 
p_tcb_ow√r
 = ((
OS_MUTEX
 *)
p_tcb
->
PídD©aTblPå
->
PídObjPå
)->
Ow√rTCBPå
;

1899 i‡(
¥io_cur
 > 
¥io_√w
) {

1900 i‡(
p_tcb_ow√r
->
Prio
 <
¥io_√w
) {

1901 
p_tcb_ow√r
 = (
OS_TCB
 *)0;

1905 i‡(
p_tcb_ow√r
->
Prio
 =
¥io_cur
) {

1906 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
p_tcb_ow√r
);

1907 
¥io_√w
 =Örio_√w > 
p_tcb_ow√r
->
Ba£Prio
 ?Ö_tcb_owner->BasePrio :Örio_new;

1908 i‡(
¥io_√w
 =
p_tcb_ow√r
->
Prio
) {

1909 
p_tcb_ow√r
 = (
OS_TCB
 *)0;

1917 
OS_TASK_PEND_ON_TASK_Q
:

1918 
OS_TASK_PEND_ON_TASK_SEM
:

1927 
p_tcb
 = 
p_tcb_ow√r
;

1928 } 
p_tcb
 !(
OS_TCB
 *)0);

1929 
	}
}

	@kernel/thread/sysTick.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

39 
CPU_TS
 
OS_TickLi°Upd©eDly
 ();

40 
CPU_TS
 
OS_TickLi°Upd©eTimeout
 ();

41 
CPU_INT32U
 
gëTblms
 ();

57 
	$OS_TickUpd©e
 ()

59 
CPU_TS
 
ts_dñè
;

60 
CPU_TS
 
ts_dñè_dly
;

61 
CPU_TS
 
ts_dñè_timeout
;

63 
OSTickCå
++;

64 
ts_dñè_dly
 = 
	`OS_TickLi°Upd©eDly
();

65 
ts_dñè_timeout
 = 
	`OS_TickLi°Upd©eTimeout
();

66 
ts_dñè
 = 
ts_dñè_dly
 + 
ts_dñè_timeout
;

68 i‡(
OSTickTaskTimeMax
 < 
ts_dñè
) {

69 
OSTickTaskTimeMax
 = 
ts_dñè
;

71 
	}
}

91 
	$OS_TickLi°In£π
 (
OS_TICK_LIST
 *
p_li°
,

92 
OS_TCB
 *
p_tcb
,

93 
OS_TICK
 
time
)

95 
OS_TCB
 *
p_tcb1
;

96 
OS_TCB
 *
p_tcb2
;

97 
OS_TICK
 
ªmaö
;

100 i‡(
p_li°
->
TCB_På
 =(
OS_TCB
 *)0) {

101 
p_tcb
->
TickRemaö
 = 
time
;

102 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

103 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

104 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

105 
p_li°
->
TCB_På
 = 
p_tcb
;

107 
p_tcb1
 = 
p_li°
->
TCB_På
;

108 
p_tcb2
 = 
p_li°
->
TCB_På
;

109 
ªmaö
 = 
time
;

110 
p_tcb2
 !(
OS_TCB
 *)0) {

111 i‡(
ªmaö
 <
p_tcb2
->
TickRemaö
) {

112 i‡(
p_tcb2
->
TickPªvPå
 =(
OS_TCB
 *)0) {

113 
p_tcb
->
TickRemaö
 = 
ªmaö
;

114 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

115 
p_tcb
->
TickNextPå
 = 
p_tcb2
;

116 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

117 
p_tcb2
->
TickRemaö
 -
ªmaö
;

118 
p_tcb2
->
TickPªvPå
 = 
p_tcb
;

119 
p_li°
->
TCB_På
 = 
p_tcb
;

121 
p_tcb1
 = 
p_tcb2
->
TickPªvPå
;

122 
p_tcb
->
TickRemaö
 = 
ªmaö
;

123 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

124 
p_tcb
->
TickNextPå
 = 
p_tcb2
;

125 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

126 
p_tcb2
->
TickRemaö
 -
ªmaö
;

127 
p_tcb2
->
TickPªvPå
 = 
p_tcb
;

128 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

132 
ªmaö
 -
p_tcb2
->
TickRemaö
;

133 
p_tcb1
 = 
p_tcb2
;

134 
p_tcb2
 =Ö_tcb2->
TickNextPå
;

137 
p_tcb
->
TickRemaö
 = 
ªmaö
;

138 
p_tcb
->
TickPªvPå
 = 
p_tcb1
;

139 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

140 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)
p_li°
;

141 
p_tcb1
->
TickNextPå
 = 
p_tcb
;

143 
	}
}

182 
	$OS_TickLi°In£πDly
 (
OS_TCB
 *
p_tcb
,

183 
OS_TICK
 
time
,

184 
OS_OPT
 
›t
,

185 
OS_ERR
 *
p_îr
)

187 
OS_TICK
 
ªmaö
;

189 i‡(
›t
 =
OS_OPT_TIME_MATCH
) {

190 
ªmaö
 = 
time
 - 
OSTickCå
;

191 i‡((
ªmaö
 > 
OS_TICK_TH_RDY
) ||

192 (
ªmaö
 =(
OS_TICK
)0u)) {

193 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

194 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

198 } i‡(
›t
 =
OS_OPT_TIME_PERIODIC
) {

199 i‡((
OSTickCå
 - 
p_tcb
->
TickCåPªv
Ë> 
time
) {

200 
ªmaö
 = 
time
;

201 
p_tcb
->
TickCåPªv
 = 
OSTickCå
 + 
time
;

203 
ªmaö
 = 
time
 - (
OSTickCå
 - 
p_tcb
->
TickCåPªv
);

204 i‡((
ªmaö
 > 
OS_TICK_TH_RDY
) ||

205 (
ªmaö
 =(
OS_TICK
)0u)) {

206 
p_tcb
->
TickCåPªv
 +
time
 +Åimê* ((
OSTickCå
 -Ö_tcb->TickCtrPrev) /Åime);

207 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

208 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

211 
p_tcb
->
TickCåPªv
 +
time
;

214 } i‡(
time
 > (
OS_TICK
)0u) {

215 
ªmaö
 = 
time
;

218 
p_tcb
->
TickRemaö
 = (
OS_TICK
)0u;

219 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

223 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_DLY
;

224 
	`OS_TickLi°In£π
(&
OSTickLi°Dly
, 
p_tcb
, 
ªmaö
);

226 *
p_îr
 = 
OS_ERR_NONE
;

227 
	}
}

246 
	$OS_TickLi°Remove
 (
OS_TCB
 *
p_tcb
)

248 
OS_TICK_LIST
 *
p_li°
;

249 
OS_TCB
 *
p_tcb1
;

250 
OS_TCB
 *
p_tcb2
;

253 
p_li°
 = (
OS_TICK_LIST
 *)
p_tcb
->
TickLi°På
;

254 
p_tcb1
 = 
p_tcb
->
TickPªvPå
;

255 
p_tcb2
 = 
p_tcb
->
TickNextPå
;

256 i‡(
p_tcb1
 =(
OS_TCB
 *)0) {

257 i‡(
p_tcb2
 =(
OS_TCB
 *)0) {

258 
p_li°
->
TCB_På
 = (
OS_TCB
 *)0;

259 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

260 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

262 
p_tcb2
->
TickPªvPå
 = (
OS_TCB
 *)0;

263 
p_tcb2
->
TickRemaö
 +
p_tcb
->TickRemain;

264 
p_li°
->
TCB_På
 = 
p_tcb2
;

265 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

266 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

267 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

270 
p_tcb1
->
TickNextPå
 = 
p_tcb2
;

271 i‡(
p_tcb2
 !(
OS_TCB
 *)0) {

272 
p_tcb2
->
TickPªvPå
 = 
p_tcb1
;

273 
p_tcb2
->
TickRemaö
 +
p_tcb
->TickRemain;

275 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

276 
p_tcb
->
TickNextPå
 = (
OS_TCB
 *)0;

277 
p_tcb
->
TickRemaö
 = (
OS_TICK
 )0u;

278 
p_tcb
->
TickLi°På
 = (
OS_TICK_LIST
 *)0;

280 
	}
}

296 
	$OS_TickLi°Re£tPók
 ()

298 
	}
}

314 
CPU_TS
 
	$OS_TickLi°Upd©eDly
 ()

316 
OS_TCB
 *
p_tcb
;

317 
OS_TICK_LIST
 *
p_li°
;

318 
CPU_TS
 
ts_°¨t
;

319 
CPU_TS
 
ts_dñè_dly
;

321 
ts_°¨t
 = 
	`OS_TS_GET
();

322 
p_li°
 = &
OSTickLi°Dly
;

323 
p_tcb
 = 
p_li°
->
TCB_På
;

324 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

325 
p_tcb
->
TickRemaö
--;

326 
p_tcb
->
TickRemaö
 == 0u) {

327 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_DLY
) {

328 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

329 
	`OS_RdyLi°In£π
(
p_tcb
);

330 } i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_DLY_SUSPENDED
) {

331 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

334 
p_li°
->
TCB_På
 = 
p_tcb
->
TickNextPå
;

335 
p_tcb
 = 
p_li°
->
TCB_På
;

336 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

339 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

343 
ts_dñè_dly
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

345  (
ts_dñè_dly
);

346 
	}
}

363 
CPU_TS
 
	$OS_TickLi°Upd©eTimeout
 ()

365 
OS_TCB
 *
p_tcb
;

366 
OS_TICK_LIST
 *
p_li°
;

367 
CPU_TS
 
ts_°¨t
;

368 
CPU_TS
 
ts_dñè_timeout
;

369 #i‡
OS_CFG_MUTEX_EN
 > 0u

370 
OS_TCB
 *
p_tcb_ow√r
;

371 
OS_PRIO
 
¥io_√w
;

374 
ts_°¨t
 = 
	`OS_TS_GET
();

375 
p_li°
 = &
OSTickLi°Timeout
;

376 
p_tcb
 = 
p_li°
->
TCB_På
;

377 i‡(
p_tcb
 !(
OS_TCB
 *)0) {

378 
p_tcb
->
TickRemaö
--;

379 
p_tcb
->
TickRemaö
 == 0u) {

381 #i‡
OS_CFG_MUTEX_EN
 > 0u

382 
p_tcb_ow√r
 = (
OS_TCB
 *)0;

383 i‡(
p_tcb
->
PídOn
 =
OS_TASK_PEND_ON_MUTEX
) {

384 
p_tcb_ow√r
 = ((
OS_MUTEX
 *)
p_tcb
->
PídD©aTblPå
->
PídObjPå
)->
Ow√rTCBPå
;

388 #i‡(
OS_MSG_EN
 > 0u)

389 
p_tcb
->
MsgPå
 = (*)0;

390 
p_tcb
->
MsgSize
 = (
OS_MSG_SIZE
)0u;

392 
p_tcb
->
TS
 = 
	`OS_TS_GET
();

393 
	`OS_PídLi°Remove
(
p_tcb
);

394 i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT
) {

395 
	`OS_RdyLi°In£π
(
p_tcb
);

396 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

397 } i‡(
p_tcb
->
TaskSèã
 =
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
) {

399 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

401 
p_tcb
->
PídSètus
 = 
OS_STATUS_PEND_TIMEOUT
;

402 
p_tcb
->
PídOn
 = 
OS_TASK_PEND_ON_NOTHING
;

404 #i‡
OS_CFG_MUTEX_EN
 > 0u

405 if(
p_tcb_ow√r
 !(
OS_TCB
 *)0) {

406 i‡((
p_tcb_ow√r
->
Prio
 !p_tcb_ow√r->
Ba£Prio
) &&

407 (
p_tcb_ow√r
->
Prio
 =
p_tcb
->Prio)) {

408 
¥io_√w
 = 
	`OS_MuãxGΩPrioFödHighe°
(
p_tcb_ow√r
);

409 
¥io_√w
 =Örio_√w > 
p_tcb_ow√r
->
Ba£Prio
 ?Ö_tcb_owner->BasePrio :Örio_new;

410 if(
¥io_√w
 !
p_tcb_ow√r
->
Prio
) {

411 
	`OS_TaskCh™gePrio
(
p_tcb_ow√r
, 
¥io_√w
);

417 
p_li°
->
TCB_På
 = 
p_tcb
->
TickNextPå
;

418 
p_tcb
 = 
p_li°
->
TCB_På
;

419 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

422 
p_tcb
->
TickPªvPå
 = (
OS_TCB
 *)0;

426 
ts_dñè_timeout
 = 
	`OS_TS_GET
(Ë- 
ts_°¨t
;

428  (
ts_dñè_timeout
);

429 
	}
}

	@kernel/thread/sysTime.c

30 
	#MICRIUM_SOURCE


	)

31 
	~<kî√l/sysOs.h
>

33 
OS_TickUpd©e
 ();

75 
	$OSTimeDly
 (
OS_TICK
 
dly
,

76 
OS_OPT
 
›t
,

77 
OS_ERR
 *
p_îr
)

79 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

80 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

81 *
p_îr
 = 
OS_ERR_TIME_DLY_ISR
;

86 i‡(
OSSchedLockNe°ögCå
 > (
OS_NESTING_CTR
)0u) {

87 *
p_îr
 = 
OS_ERR_SCHED_LOCKED
;

91 
›t
) {

92 
OS_OPT_TIME_DLY
:

93 
OS_OPT_TIME_TIMEOUT
:

94 
OS_OPT_TIME_PERIODIC
:

95 i‡(
dly
 =(
OS_TICK
)0u) {

96 *
p_îr
 = 
OS_ERR_TIME_ZERO_DLY
;

101 
OS_OPT_TIME_MATCH
:

105 *
p_îr
 = 
OS_ERR_OPT_INVALID
;

109 
	`OS_CRITICAL_ENTER
();

110 
	`OS_TickLi°In£πDly
(
OSTCBCurPå
,

111 
dly
,

112 
›t
,

113 
p_îr
);

114 i‡(*
p_îr
 !
OS_ERR_NONE
) {

115 
	`OS_CRITICAL_EXIT_NO_SCHED
();

118 
	`OS_RdyLi°Remove
(
OSTCBCurPå
);

119 
	`OS_CRITICAL_EXIT_NO_SCHED
();

120 
	`OSSched
();

121 *
p_îr
 = 
OS_ERR_NONE
;

122 
	}
}

146 #i‡
OS_CFG_TIME_DLY_RESUME_EN
 > 0u

147 
	$OSTimeDlyResume
 (
OS_TCB
 *
p_tcb
,

148 
OS_ERR
 *
p_îr
)

151 #i‡
OS_CFG_CALLED_FROM_ISR_CHK_EN
 > 0u

152 i‡(
OSI¡Ne°ögCå
 > (
OS_NESTING_CTR
)0u) {

153 *
p_îr
 = 
OS_ERR_TIME_DLY_RESUME_ISR
;

158 #i‡
OS_CFG_ARG_CHK_EN
 > 0u

159 i‡(
p_tcb
 =(
OS_TCB
 *)0) {

160 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

165 
	`CPU_CRITICAL_ENTER
();

166 i‡(
p_tcb
 =
OSTCBCurPå
) {

167 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

168 
	`CPU_CRITICAL_EXIT
();

172 
p_tcb
->
TaskSèã
) {

173 
OS_TASK_STATE_RDY
:

174 
	`CPU_CRITICAL_EXIT
();

175 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

178 
OS_TASK_STATE_DLY
:

179 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

180 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_RDY
;

181 
	`OS_TickLi°Remove
(
p_tcb
);

182 
	`OS_RdyLi°In£π
(
p_tcb
);

183 
	`OS_CRITICAL_EXIT_NO_SCHED
();

184 *
p_îr
 = 
OS_ERR_NONE
;

187 
OS_TASK_STATE_PEND
:

188 
	`CPU_CRITICAL_EXIT
();

189 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

192 
OS_TASK_STATE_PEND_TIMEOUT
:

193 
	`CPU_CRITICAL_EXIT
();

194 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

197 
OS_TASK_STATE_SUSPENDED
:

198 
	`CPU_CRITICAL_EXIT
();

199 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

202 
OS_TASK_STATE_DLY_SUSPENDED
:

203 
	`OS_CRITICAL_ENTER_CPU_EXIT
();

204 
p_tcb
->
TaskSèã
 = 
OS_TASK_STATE_SUSPENDED
;

205 
	`OS_TickLi°Remove
(
p_tcb
);

206 
	`OS_CRITICAL_EXIT_NO_SCHED
();

207 *
p_îr
 = 
OS_ERR_TASK_SUSPENDED
;

210 
OS_TASK_STATE_PEND_SUSPENDED
:

211 
	`CPU_CRITICAL_EXIT
();

212 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

215 
OS_TASK_STATE_PEND_TIMEOUT_SUSPENDED
:

216 
	`CPU_CRITICAL_EXIT
();

217 *
p_îr
 = 
OS_ERR_TASK_NOT_DLY
;

221 
	`CPU_CRITICAL_EXIT
();

222 *
p_îr
 = 
OS_ERR_STATE_INVALID
;

226 
	`OSSched
();

227 
	}
}

245 
OS_TICK
 
	$OSTimeGë
 (
OS_ERR
 *
p_îr
)

247 
OS_TICK
 
ticks
;

249 
	`CPU_CRITICAL_ENTER
();

250 
ticks
 = 
OSTickCå
;

251 
	`CPU_CRITICAL_EXIT
();

252 *
p_îr
 = 
OS_ERR_NONE
;

253  (
ticks
);

254 
	}
}

272 
	$OSTimeSë
 (
OS_TICK
 
ticks
,

273 
OS_ERR
 *
p_îr
)

275 
	`CPU_CRITICAL_ENTER
();

276 
OSTickCå
 = 
ticks
;

277 
	`CPU_CRITICAL_EXIT
();

278 *
p_îr
 = 
OS_ERR_NONE
;

279 
	}
}

295 
	$OSTimeTick
 ()

297 
	`OSTimeTickHook
();

298 
	`OS_TickUpd©e
();

300 #i‡
OS_CFG_SCHED_ROUND_ROBIN_EN
 > 0u

301 
	`OS_SchedRoundRobö
(&
OSRdyLi°
[
OSPrioCur
]);

303 
	}
}

	@kernel/timers/sysDec.c

27 
	~<c⁄fig.h
>

28 
	~<libc/°dio.h
>

29 
	~<kî√l/sysOsTimî.h
>

31 
UINT32
 
	gsysClockFªq
 = 0;

32 
UINT32
 
	gsys˛kFªquícy
 = 0;

33 
UINT32
 
	grﬁlovîPîiod
 = 0;

34 
UINT32
 
	gticksPîSec⁄d
 = 0;

35 
IMPORT
 
UINT32
 
sysClkFªqGë
();

36 
IMPORT
 
˛ockTaskSèπ
 (*
p_¨g
);

37 
IMPORT
 
OS_TaskRëu∫
 ();

38 
IMPORT
 
OSTimeTick
 ();

39 
IMPORT
 
sysEpicC⁄fig
();

41 
	$˛ockTaskSèπ
 (*
p_¨g
)

43 
	`¥ötf
("1%†%d\n",
__FUNCTION__
,
__LINE__
);

44 
	`os_g≠_check
();

45 
sysClockFªq
 = 
	`sysClkFªqGë
 ();

46 
sys˛kFªquícy
 = 
sysClockFªq
 >> 3;

47 
rﬁlovîPîiod
 = 
M85XX_MAX_COUNT_VALUE
 / 
sys˛kFªquícy
;

48 
ticksPîSec⁄d
 = 
DEFAULT_DEC_TICKS_PER_SECOND
;

49 
UINT32
 
m§
 = 0;

51 ()&
p_¨g
;

52 
__asm__
 
	`__vﬁ©ûe__
 ("mfm§ %0":"Ù" (
m§
):);

53 
m§
 &~(
_PPC_MSR_EE
);

54 
m§
 |
_PPC_MSR_EE
;

55 
__asm__
 
	`__vﬁ©ûe__
 ("mtm§ %0"::"r" (
m§
));

57 #i‡
_CAG_CONFIG_EPIC
 == 0

59 
UINT32
 
maxTimîCou¡
 = (
sys˛kFªquícy
 + 1000) / 1000;

63 
	`sysT§Së
 (
TSR_DIS
);

67 
	`sysDeˇrSë
 (
maxTimîCou¡
);

68 
	`sysDecSë
 (
maxTimîCou¡
);

72 
	`sysT¸Së
 (
	`sysT¸Gë
(Ë| 
TCR_DIE
 | 
TCR_ARE
);

76 
	`sysHid0Së
 (
	`sysHid0Gë
(Ë| 
_PPC_HID0_TBEN
);

79 
	`sysEpicC⁄fig
();

83 
	`¥öt_öô
(0);

86 
	`¥ötf
("clock init done\n");

87 
	`os_g≠_check
();

88 
	`OS_TaskRëu∫
();

90 
	`¥ötf
("timer_init\n");

92 
	}
}

94 
	$OSDecH™dÀr
()

96 
	`sysDecI¡Ack
 ();

97 
	`OSTimeTick
();

98 
	}
}

	@kernel/timers/sysTbl.c

28 
	~<libc/°dio.h
>

29 
	~<libc/ˇgboŸ.h
>

31 
UINT32
 
sysClkFªqGë
();

33 
	#CONFIG_SYS_FSL_TBCLK_DIV
 8

	)

35 
	#PPC_READ_TSC
(
t
) \

37 
UINT32
 
__tbu
; \

38 
__asm__
 
	`__vﬁ©ûe__
 ("1: mftbu %0\n" \

43 :"Ù" (((
UINT32
 *)&
t
)[0]), \

44 "Ù" (((
UINT32
 *)&
t
)[1]), \

45 "Ù" (
__tbu
)); \

46 
t
; \

47 })

	)

49 
UINT32
 
	$tbldiv
 (
UINT64
 *
a
, 
UINT32
 
d
)

51 
UINT32
 
r
 = *
a
 % 
d
;

52 *
a
 /
d
;

53  
r
;

54 
	}
}

56 
	#TBL_DIV
(
a
, 
d
Ë
	`tbldiv
(&◊), (d))

	)

61 
UINT32
 
	$gë_tb˛k
 ()

63 
UINT32
 
tb˛k_div
 = 
CONFIG_SYS_FSL_TBCLK_DIV
;

64 
UINT32
 
busClk
 = 
	`sysClkFªqGë
 ();

65  (
busClk
 + (
tb˛k_div
 >> 1)) /Åbclk_div;

66 
	}
}

68 
UINT32
 
	$gëTblus
 ()

70 
UINT32
 
us
=0;

71 
UINT64
 
dñè
=0;

72 
UINT32
 
tbFªq
 = 
	`gë_tb˛k
();

73 
	`PPC_READ_TSC
(
dñè
);

74 
	`TBL_DIV
(
dñè
, 
tbFªq
/1000000+1);

75 
us
 = (
UINT32
)
dñè
;

76  
us
;

77 
	}
}

80 
UINT32
 
	$gëTblms
 ()

82 
UINT32
 
ms
=0;

83 
UINT64
 
dñè
=0;

84 
UINT32
 
tbFªq
 = 
	`gë_tb˛k
();

85 
	`PPC_READ_TSC
(
dñè
);

86 
ms
 = ((((
UINT32
)(
dñè
)Ë* 1000Ë/ (
tbFªq
));

87  
ms
;

88 
	}
}

91 
UINT32
 
	$gëTblms
 ()

93 
UINT32
 
tbl
;

94 
UINT32
 
tbu1
, 
tbu2
;

95 
UINT32
 
ms
;

96 
tmp
;

98 
UINT32
 
tb˛k
 = 
	`gë_tb˛k
();

99 i‡(
tb˛k
 < 1000) {

105 
__asm__
 vﬁ©ûê("m·bu %0":"Ù" (
tbu1
):);

106 
__asm__
 vﬁ©ûê("m·b %0":"Ù" (
tbl
):);

107 
__asm__
 vﬁ©ûê("m·bu %0":"Ù" (
tbu2
):);

108 } 
tbu1
 !
tbu2
);

111 
tmp
 = ()(
tbu1
);

112 
tmp
 = (tmp << 32);

113 
tmp
 +()(
tbl
);

114 
ms
 = 
tmp
/(
tb˛k
/1000);

115  
ms
;

116 
	}
}

118 
UINT32
 
	$gë_Âga
()

120 
UINT16
 
time1
 = 0;

121 
UINT16
 
time1s
 = 0;

122 
UINT16
 
time1ss
 = 0;

123 
UINT16
 
time2
 = 0;

124 
UINT16
 
time2s
 = 0;

125 
UINT16
 
time2ss
 = 0;

126 
UINT16
 
time3
 = 0;

127 
UINT32
 
time
 = 0;

128 
time1s
 = *(
VUINT16
 *)0xff7000a0;

129 
time2s
 = *(
VUINT16
 *)0xff7000a2;

130 
time1ss
 = *(
VUINT16
 *)0xff7000a0;

131 
time2ss
 = *(
VUINT16
 *)0xff7000a2;

132 if(
time2s
 =
time2ss
) {

133 if–
time1s
 < 
time1ss
) {

134 
time1
 = 
time1s
;

137 
time1
 = 
time1ss
;

139 
time2
 = 
time2s
;

142 
time1
 = *(
VUINT16
 *)0xff7000a0;

143 
time2
 = 
time2ss
;

145 
time3
 = *(
VUINT16
 *)0xff7000a4;

146 
time
 = 
time1
 | (
time2
 << 16);

147  
time
;

148 
	}
}

150 
UINT32
 
	$gë_‰ì
()

152 
UINT16
 
time1
 = 0;

153 
UINT16
 
time1s
 = 0;

154 
UINT16
 
time1ss
 = 0;

155 
UINT16
 
time2s
 = 0;

156 
UINT16
 
time2ss
 = 0;

157 
UINT16
 
time2
 = 0;

158 
UINT16
 
time3
 = 0;

159 
UINT32
 
time
 = 0;

160 
time1s
 = *(
VUINT16
 *)0xff700120;

161 
time2s
 = *(
VUINT16
 *)0xff700122;

162 
time1ss
 = *(
VUINT16
 *)0xff700120;

163 
time2ss
 = *(
VUINT16
 *)0xff700122;

164 if(
time2s
 =
time2ss
) {

165 if–
time1s
 < 
time1ss
) {

166 
time1
 = 
time1s
;

169 
time1
 = 
time1ss
;

171 
time2
 = 
time2s
;

174 
time1
 = *(
VUINT16
 *)0xff700120;

175 
time2
 = 
time2ss
;

177 
time3
 = *(
VUINT16
 *)0xff700124;

178 
time
 = 
time1
 | (
time2
 << 16);

179  
time
;

180 
	}
}

	@logh.h

1 #¥agm®
⁄˚


8 
	#LOG_ERR_OS
 (0x06<<24)

	)

10 
	#LOG_ERR_LEVEL_0
 (0)

	)

11 
	#LOG_ERR_LEVEL_1
 (1<<22)

	)

12 
	#LOG_ERR_LEVEL_2
 (2<<22)

	)

13 
	#LOG_ERR_LEVEL_3
 (3<<22)

	)

16 
	#LOG_ERR_ARCH
 (0<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

17 
	#LOG_ERR_START
 (1<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

18 
	#LOG_ERR_KERNEL
 (2<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

19 
	#LOG_ERR_UTIL
 (3<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

20 
	#LOG_ERR_BUS
 (4<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

21 
	#LOG_ERR_FS
 (5<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

22 
	#LOG_ERR_LIBC
 (6<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

23 
	#LOG_ERR_DFS
 (7<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

24 
	#LOG_ERR_FPGA
 (8<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

25 
	#LOG_ERR_PCIE
 (9<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

26 
	#LOG_ERR_NOR
 (0xa<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

27 
	#LOG_ERR_SPIFLASH
 (0xb<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

28 
	#LOG_ERR_HWI
 (0xc<<16|
LOG_ERR_OS
|
LOG_ERR_LEVEL_1
)

	)

33 
	#LOG_ERR_STR
 (
LOG_ERR_LIBC
|(0x1<<12))

	)

34 
	#LOG_ERR_MEM
 (
LOG_ERR_LIBC
|(0x2<<12))

	)

36 
	#STR_NULLP_ERR
 (
LOG_ERR_STR
|0x1)

	)

40 
	#LOG_ERR_PMBUS
 (
LOG_ERR_BUS
|(0x1<<12))

	)

41 
	#LOG_ERR_CMBUS
 (
LOG_ERR_BUS
|(0x2<<12))

	)

42 
	#LOG_ERR_IPBUS
 (
LOG_ERR_BUS
|(0x3<<12))

	)

44 
	#PMBUS_NREADY_ERR1
 (
LOG_ERR_PMBUS
|0x1)

	)

45 
	#PMBUS_NREADY_ERR2
 (
LOG_ERR_PMBUS
|0x2)

	)

46 
	#PMBUS_NREADY_ERR3
 (
LOG_ERR_PMBUS
|0x3)

	)

47 
	#PMBUS_NREADY_ERR4
 (
LOG_ERR_PMBUS
|0x4)

	)

49 
	#PMBUS_CNULLP_ERR
 (
LOG_ERR_PMBUS
|0x5)

	)

50 
	#PMBUS_DATARECVFAIL_ERR1
 (
LOG_ERR_PMBUS
|0x6)

	)

51 
	#PMBUS_DATARECVFAIL_ERR2
 (
LOG_ERR_PMBUS
|0x7)

	)

52 
	#PMBUS_STATRECVFAIL_ERR1
 (
LOG_ERR_PMBUS
|0x8)

	)

53 
	#PMBUS_STATRECVFAIL_ERR2
 (
LOG_ERR_PMBUS
|0x9)

	)

54 
	#PMBUS_SENDFAIL_ERR1
 (
LOG_ERR_PMBUS
|0xa)

	)

55 
	#PMBUS_SENDFAIL_ERR2
 (
LOG_ERR_PMBUS
|0xa)

	)

57 
	#PMBUS_PARA_ERR1
 (
LOG_ERR_PMBUS
|0x5)

	)

58 
	#PMBUS_PARA_ERR2
 (
LOG_ERR_PMBUS
|0x5)

	)

59 
	#PMBUS_PARA_ERR3
 (
LOG_ERR_PMBUS
|0x5)

	)

60 
	#PMBUS_PARA_ERR4
 (
LOG_ERR_PMBUS
|0x5)

	)

61 
	#PMBUS_PARA_ERR5
 (
LOG_ERR_PMBUS
|0x5)

	)

62 
	#PMBUS_PARA_ERR6
 (
LOG_ERR_PMBUS
|0x5)

	)

63 
	#PMBUS_PARA_ERR7
 (
LOG_ERR_PMBUS
|0x5)

	)

64 
	#PMBUS_PARA_ERR8
 (
LOG_ERR_PMBUS
|0x5)

	)

66 
	#CMBUS_PARA_ERR1
 (
LOG_ERR_CMBUS
|0x1)

	)

67 
	#CMBUS_PARA_ERR2
 (
LOG_ERR_CMBUS
|0x1)

	)

68 
	#CMBUS_PARA_ERR3
 (
LOG_ERR_CMBUS
|0x1)

	)

69 
	#CMBUS_SENDNREADY_ERR
 (
LOG_ERR_CMBUS
|0x2)

	)

70 
	#CMBUS_RECVFAIL_ERR
 (
LOG_ERR_CMBUS
|0x3)

	)

72 
	#IPBUS_PARA_ERR1
 (
LOG_ERR_IPBUS
|0x1)

	)

73 
	#IPBUS_PARA_ERR2
 (
LOG_ERR_IPBUS
|0x1)

	)

74 
	#IPBUS_PARA_ERR3
 (
LOG_ERR_IPBUS
|0x1)

	)

75 
	#IPBUS_PARA_ERR4
 (
LOG_ERR_IPBUS
|0x1)

	)

76 
	#IPBUS_PARA_ERR5
 (
LOG_ERR_IPBUS
|0x1)

	)

77 
	#IPBUS_PARA_ERR6
 (
LOG_ERR_IPBUS
|0x1)

	)

80 
	#PCIE_PARA_ERR1
 (
LOG_ERR_PCIE
|0x1)

	)

81 
	#PCIE_PARA_ERR2
 (
LOG_ERR_PCIE
|0x1)

	)

82 
	#PCIE_PARA_ERR3
 (
LOG_ERR_PCIE
|0x1)

	)

83 
	#PCIE_PARA_ERR4
 (
LOG_ERR_PCIE
|0x1)

	)

84 
	#PCIE_PARA_ERR5
 (
LOG_ERR_PCIE
|0x1)

	)

85 
	#PCIE_PARA_ERR6
 (
LOG_ERR_PCIE
|0x1)

	)

86 
	#PCIE_PARA_ERR7
 (
LOG_ERR_PCIE
|0x1)

	)

87 
	#PCIE_PARA_ERR8
 (
LOG_ERR_PCIE
|0x1)

	)

88 
	#PCIE_PARA_ERR9
 (
LOG_ERR_PCIE
|0x1)

	)

90 
	#PCIE_SENDTIMEOUT_ERR
 (
LOG_ERR_PCIE
|0x2)

	)

91 
	#PCIE_SENDFAIL_ERR
 (
LOG_ERR_PCIE
|0x3)

	)

92 
	#PCIE_RECVTIMEOUT_ERR
 (
LOG_ERR_PCIE
|0x4)

	)

93 
	#PCIE_RECVFAIL_ERR
 (
LOG_ERR_PCIE
|0x5)

	)

96 
	#SF_PARA_ERR1
 (
LOG_ERR_SPIFLASH
|0x1)

	)

97 
	#SF_PARA_ERR2
 (
LOG_ERR_SPIFLASH
|0x1)

	)

98 
	#SF_PARA_ERR3
 (
LOG_ERR_SPIFLASH
|0x1)

	)

99 
	#SF_PARA_ERR4
 (
LOG_ERR_SPIFLASH
|0x1)

	)

100 
	#SF_PARA_ERR5
 (
LOG_ERR_SPIFLASH
|0x1)

	)

101 
	#SF_PARA_ERR6
 (
LOG_ERR_SPIFLASH
|0x1)

	)

102 
	#SF_PARA_ERR7
 (
LOG_ERR_SPIFLASH
|0x1)

	)

103 
	#SF_PARA_ERR8
 (
LOG_ERR_SPIFLASH
|0x1)

	)

105 
	#SF_READFAIL_ERR
 (
LOG_ERR_SPIFLASH
|0x2)

	)

106 
	#SF_WRITEFAIL_ERR
 (
LOG_ERR_SPIFLASH
|0x2)

	)

107 
	#SF_ERASEFAIL_ERR
 (
LOG_ERR_SPIFLASH
|0x3)

	)

110 
	#DFS_FULL_ERR
 (
LOG_ERR_DFS
|0x1)

	)

111 
	#DFS_GETFAIL_ERR
 (
LOG_ERR_DFS
|0x2)

	)

112 
	#DFS_PARA_ERR1
 (
LOG_ERR_DFS
|0x3)

	)

113 
	#DFS_PARA_ERR2
 (
LOG_ERR_DFS
|0x3)

	)

114 
	#DFS_PARA_ERR3
 (
LOG_ERR_DFS
|0x3)

	)

115 
	#DFS_PARA_ERR4
 (
LOG_ERR_DFS
|0x3)

	)

118 
	#NOR_LOCKFAIL_ERR
 (
LOG_ERR_NOR
|0x1)

	)

119 
	#NOR_UNLOCKFAIL_ERR
 (
LOG_ERR_NOR
|0x1)

	)

120 
	#NOR_POLL_ERR1
 (
LOG_ERR_NOR
|0x3)

	)

121 
	#NOR_POLL_ERR2
 (
LOG_ERR_NOR
|0x3)

	)

122 
	#NOR_POLL_ERR3
 (
LOG_ERR_NOR
|0x3)

	)

123 
	#NOR_POLL_ERR4
 (
LOG_ERR_NOR
|0x3)

	)

126 
	#NOR_WRITEFAIL_ERR1
 (
LOG_ERR_NOR
|0x3)

	)

127 
	#NOR_WRITEFAIL_ERR2
 (
LOG_ERR_NOR
|0x3)

	)

128 
	#NOR_WRITEFAIL_ERR3
 (
LOG_ERR_NOR
|0x3)

	)

129 
	#NOR_MEMCPY_ERR1
 (
LOG_ERR_NOR
|0x3)

	)

130 
	#NOR_MEMCPY_ERR2
 (
LOG_ERR_NOR
|0x3)

	)

131 
	#NOR_ERASEFAIL_ERR1
 (
LOG_ERR_NOR
|0x3)

	)

132 
	#NOR_ERASEFAIL_ERR2
 (
LOG_ERR_NOR
|0x3)

	)

133 
	#NOR_PARA_ERR1
 (
LOG_ERR_NOR
|0x3)

	)

136 
	#HWI_PARA_ERR1
 (
LOG_ERR_HWI
|0x1)

	)

137 
	#HWI_GETDFS_ERR
 (
LOG_ERR_HWI
|0x2)

	)

138 
	#HWI_REGDFS_ERR1
 (
LOG_ERR_HWI
|0x3)

	)

139 
	#HWI_REGDFS_ERR2
 (
LOG_ERR_HWI
|0x3)

	)

140 
	#HWI_REGDFS_ERR3
 (
LOG_ERR_HWI
|0x3)

	)

141 
	#HWI_INITFAIL_ERR1
 (
LOG_ERR_HWI
|0x1)

	)

142 
	#HWI_INITFAIL_ERR2
 (
LOG_ERR_HWI
|0x1)

	)

146 
	#LOG_ERR_SFFS
 (
LOG_ERR_FS
|(0x1<<12))

	)

149 
	#SFFS_ERASE_HDRSS_ERR1
 (
LOG_ERR_SFFS
|0x1)

150 
	#SFFS_ERASE_HDRSS_ERR2
 (
LOG_ERR_SFFS
|0x2)

151 
	#SFFS_ERASE_HDRSS_ERR3
 (
LOG_ERR_SFFS
|0x3)

152 
	#SFFS_WRITE_HDRSS_ERR1
 (
LOG_ERR_SFFS
|0x4)

153 
	#SFFS_WRITE_HDRSS_ERR2
 (
LOG_ERR_SFFS
|0x5)

154 
	#SFFS_WRITE_HDRSS_ERR3
 (
LOG_ERR_SFFS
|0x6)

155 
	#SFFS_WRITE_HDRSS_ERR4
 (
LOG_ERR_SFFS
|0x7)

156 
	#SFFS_WRITE_HDRSS_ERR5
 (
LOG_ERR_SFFS
|0x8)

158 

	)

159 
	#SFFS_NO_FREEHDRSS_ERR
 (
LOG_ERR_SFFS
|0x36)

161 

	)

162 
	#SFFS_FILE_NUM_FULL_ERR
 (
LOG_ERR_SFFS
|0x9)

163 

	)

164 
	#SFFS_PARA_ERR
 (
LOG_ERR_SFFS
|0x35)

165 
	#SFFS_PARA_ERR1
 (
LOG_ERR_SFFS
|0xa)

166 
	#SFFS_PARA_ERR2
 (
LOG_ERR_SFFS
|0xb)

167 
	#SFFS_PARA_ERR3
 (
LOG_ERR_SFFS
|0xc)

168 
	#SFFS_PARA_ERR4
 (
LOG_ERR_SFFS
|0xd)

169 
	#SFFS_PARA_ERR5
 (
LOG_ERR_SFFS
|0xe)

170 
	#SFFS_PARA_ERR6
 (
LOG_ERR_SFFS
|0x41)

171 
	#SFFS_PARA_ERR7
 (
LOG_ERR_SFFS
|0x42)

172 

	)

173 
	#SFFS_FILENAME_NOT_EXIST_ERR1
 (
LOG_ERR_SFFS
|0xf)

174 
	#SFFS_FILENAME_NOT_EXIST_ERR2
 (
LOG_ERR_SFFS
|0x10)

175 
	#SFFS_FILENAME_NOT_EXIST_ERR3
 (
LOG_ERR_SFFS
|0x11)

176 
	#SFFS_FILENAME_NOT_EXIST_ERR4
 (
LOG_ERR_SFFS
|0x12)

177 
	#SFFS_FILENAME_NOT_EXIST_ERR5
 (
LOG_ERR_SFFS
|0x13)

178 

	)

179 
	#SFFS_FD_ERR
 (
LOG_ERR_SFFS
|0x14)

180 
	#SFFS_FD_ERR2
 (
LOG_ERR_SFFS
|0x40)

182 
	#SFFS_READMODE_ERROR
 (
LOG_ERR_SFFS
|0x15)

183 
	#SFFS_WRITEMODE_ERR1
 (
LOG_ERR_SFFS
|0x16)

184 
	#SFFS_WRITEMODE_ERR2
 (
LOG_ERR_SFFS
|0x17)

185 
	#SFFS_FILE_REWRITE_ERR
 (
LOG_ERR_SFFS
|0x18)

186 
	#SFFS_UNALIGN_WRITE_ERR
 (
LOG_ERR_SFFS
|0x19)

187 
	#SFFS_DEL_ERR
 (
LOG_ERR_SFFS
|0x1a)

188 
	#SFFS_FILE_LOCKED_ERR
 (
LOG_ERR_SFFS
|0x37)

189 
	#SFFS_FILE_NOT_COMMIT_ERR
 (
LOG_ERR_SFFS
|0x1b)

190 
	#SFFS_FILE_SIZE_EXCED_ERR1
 (
LOG_ERR_SFFS
|0x1c)

191 
	#SFFS_FILE_SIZE_EXCED_ERR2
 (
LOG_ERR_SFFS
|0x1d)

193 
	#SFFS_NOT_NOT_MOUNTED
 (
LOG_ERR_SFFS
|0x38)

195 

	)

196 
	#SFFS_NO_FREE_SE1
 (
LOG_ERR_SFFS
|0x1e)

197 
	#SFFS_NO_FREE_SE2
 (
LOG_ERR_SFFS
|0x1f)

198 
	#SFFS_NO_FREE_SE3
 (
LOG_ERR_SFFS
|0x20)

199 
	#SFFS_NO_FREE_SE4
 (
LOG_ERR_SFFS
|0x21)

200 
	#SFFS_NO_FREE_SE5
 (
LOG_ERR_SFFS
|0x22)

201 
	#SFFS_NO_FREE_SE6
 (
LOG_ERR_SFFS
|0x23)

202 
	#SFFS_NO_FREE_SE7
 (
LOG_ERR_SFFS
|0x24)

203 

	)

204 
	#SFFS_READ_DATA_ERR1
 (
LOG_ERR_SFFS
|0x25)

205 
	#SFFS_READ_DATA_ERR2
 (
LOG_ERR_SFFS
|0x26)

206 
	#SFFS_READ_DATA_ERR3
 (
LOG_ERR_SFFS
|0x27)

207 
	#SFFS_READ_DATA_ERR4
 (
LOG_ERR_SFFS
|0x28)

208 

	)

209 
	#SFFS_ERASE_DATA_ERR1
 (
LOG_ERR_SFFS
|0x29)

210 
	#SFFS_ERASE_DATA_ERR2
 (
LOG_ERR_SFFS
|0x2a)

211 

	)

212 
	#SFFS_WRITE_DATA_ERR1
 (
LOG_ERR_SFFS
|0x2b)

213 
	#SFFS_WRITE_DATA_ERR2
 (
LOG_ERR_SFFS
|0x2c)

214 
	#SFFS_WRITE_DATA_ERR3
 (
LOG_ERR_SFFS
|0x2d)

215 
	#SFFS_WRITE_DATA_ERR4
 (
LOG_ERR_SFFS
|0x2e)

216 
	#SFFS_WRITE_DATA_ERR5
 (
LOG_ERR_SFFS
|0x2f)

218 

	)

219 
	#SFFS_OFFSET_ERR
 (
LOG_ERR_SFFS
|0x30)

220 

	)

221 
	#SFFS_GLOBAL_ERR
 (
LOG_ERR_SFFS
|0x31)

222 
	#SFFS_BUF_ERR
 (
LOG_ERR_SFFS
|0x39)

223 
	#SFFS_FNAME_DUPLICATE_ERR
 (
LOG_ERR_SFFS
|0x32)

224 
	#SFFS_RENAME_FAIL1
 (
LOG_ERR_SFFS
|0x33)

225 
	#SFFS_RENAME_FAIL2
 (
LOG_ERR_SFFS
|0x34)

226 

	)

	@start/sysAccess.S

30 
	#_ASMLANGUAGE


	)

31 
	~<µc/toﬁPpc.h
>

32 
	~<µc/¨chPpc.h
>

33 
	~<µc/mmuE500Lib.h
>

37 
	$FUNC_EXPORT
(
ªadb
)

38 
	$FUNC_EXPORT
(
ªadw
)

39 
	$FUNC_EXPORT
(
ªadl
)

40 
	$FUNC_EXPORT
(
wrôeb
)

41 
	$FUNC_EXPORT
(
wrôew
)

42 
	$FUNC_EXPORT
(
wrôñ
)

43 
	$FUNC_EXPORT
(
ªadb_noOrdî
)

44 
	$FUNC_EXPORT
(
ªadw_noOrdî
)

45 
	$FUNC_EXPORT
(
ªadl_noOrdî
)

46 
	$FUNC_EXPORT
(
wrôeb_noOrdî
)

47 
	$FUNC_EXPORT
(
wrôew_noOrdî
)

48 
	$FUNC_EXPORT
(
wrôñ_noOrdî
)

50 
_CAG_TEXT_SEG_START


66 
	$FUNC_BEGIN
(
ªadb
)

67 
lbzx
 
r3
, 
r0
,Ñ3

68 
eõio


69 
bÃ


70 
	$FUNC_END
(
ªadb
)

86 
	$FUNC_BEGIN
(
ªadw
)

87 
lhzx
 
r3
, 
r0
,Ñ3

88 
eõio


89 
bÃ


90 
	$FUNC_END
(
ªadw
)

106 
	$FUNC_BEGIN
(
ªadl
)

107 
lwzx
 
r3
, 
r0
,Ñ3

108 
eõio


109 
bÃ


110 
	$FUNC_END
(
ªadl
)

126 
	$FUNC_BEGIN
(
wrôeb
)

127 
°bx
 
r4
, 
r0
, 
r3


128 
eõio


129 
bÃ


130 
	$FUNC_END
(
wrôeb
)

146 
	$FUNC_BEGIN
(
wrôew
)

147 
°hx
 
r4
, 
r0
, 
r3


148 
eõio


149 
bÃ


150 
	$FUNC_END
(
wrôew
)

166 
	$FUNC_BEGIN
(
wrôñ
)

167 
°wx
 
r4
, 
r0
, 
r3


168 
eõio


169 
bÃ


170 
	$FUNC_END
(
wrôñ
)

185 
	$FUNC_BEGIN
(
ªadb_noOrdî
)

186 
lbzx
 
r3
, 
r0
,Ñ3

187 
bÃ


188 
	$FUNC_END
(
ªadb_noOrdî
)

203 
	$FUNC_BEGIN
(
ªadw_noOrdî
)

204 
lhzx
 
r3
, 
r0
,Ñ3

205 
bÃ


206 
	$FUNC_END
(
ªadw_noOrdî
)

221 
	$FUNC_BEGIN
(
ªadl_noOrdî
)

222 
lwzx
 
r3
, 
r0
,Ñ3

223 
bÃ


224 
	$FUNC_END
(
ªadl_noOrdî
)

239 
	$FUNC_BEGIN
(
wrôeb_noOrdî
)

240 
°bx
 
r4
, 
r0
, 
r3


241 
bÃ


242 
	$FUNC_END
(
wrôeb_noOrdî
)

257 
	$FUNC_BEGIN
(
wrôew_noOrdî
)

258 
°hx
 
r4
, 
r0
, 
r3


259 
bÃ


260 
	$FUNC_END
(
wrôew_noOrdî
)

275 
	$FUNC_BEGIN
(
wrôñ_noOrdî
)

276 
°wx
 
r4
, 
r0
, 
r3


277 
bÃ


278 
	`FUNC_END
(
wrôñ_noOrdî
)

	@start/sysBanner.c

30 
	~<libc/ˇgboŸ.h
>

31 
	~<libc/sy°em.h
>

32 
	~<libc/°dio.h
>

46 
	$¥ötLogo
 ()

49 *
logo
[] = {

60 
FAST
 
ix
;

62 
ix
 = 0; ix < ()
	`NELEMENTS
(
logo
); ix++)

63 
	`¥ötf
 (" %s\n", 
logo
 [
ix
]);

65 
	`¥ötf
 ("\n");

66 
	}
}

82 
	$sysB™√r
()

84 
	`¥ötLogo
 ();

85 
	}
}

	@start/sysBoard.c

30 
	~<libc/ˇgboŸ.h
>

31 
	~<c⁄fig.h
>

32 
	~<libc/°dio.h
>

33 
	~<libc/ac˚ss.h
>

34 
	~<µc/µc85xx.h
>

35 
	~<µc/toﬁPpc.h
>

36 
	~<µc/excPpcLib.h
>

37 
	~<p1020rdb.h
>

39 
IMPORT
 
sysSdaInô
();

40 
IMPORT
 
UINT32
 
sysTimeBa£LGë
();

41 
IMPORT
 
£tTimeBa£
(
UINT32
, UINT32);

42 
IMPORT
 
sysHid0Së
(
UINT32
);

43 
IMPORT
 
UINT32
 
sysHid0Gë
();

44 
IMPORT
 
sysTimeBa£Inô
 (
UINT32
 
tbHI
, UINT32 
tbLO
);

45 
IMPORT
 
bﬂrdRe£t
 ();

46 
IMPORT
 
∑nic
(c⁄° *
fmt
, ...);

48 
UINT32
 
	gc‹eFªq
;

49 
UINT32
 
	gc‹e1Fªq
;

50 
UINT32
 
	gddrFªq
;

51 
UINT32
 
	gsy°emFªq
;

52 
UINT32
 
sysClkFªqGë
();

56 
	#FREQ_33_MHZ
 33333300

	)

57 
	#FREQ_50_MHZ
 50000000

	)

58 
	#FREQ_100_MHZ
 100000000

	)

59 
	#FREQ_500_MHZ
 500000000

	)

60 
	#FREQ_400_MHZ
 400000000

	)

62 
	#SYS_CLK_FREQ
 
FREQ_100_MHZ


	)

63 
	#DEFAULT_SYSCLKFREQ
 
FREQ_500_MHZ


	)

65 
	#PLAT_RATIO_800_MHZ
 20

	)

66 
	#PLAT_RATIO_533_MHZ
 16

	)

67 
	#PLAT_RATIO_400_MHZ
 12

	)

68 
	#PLAT_RATIO_333_MHZ
 8

	)

72 
	#SYS_MODEL_P2020E
 "FªesˇÀ P2020E - Securôy Engöe"

	)

73 
	#SYS_MODEL_P2020
 "FªesˇÀ P2020"

	)

74 
	#SYS_MODEL_P2010E
 "FªesˇÀ P2010E - Securôy Engöe"

	)

75 
	#SYS_MODEL_P2010
 "FªesˇÀ P2010"

	)

76 
	#SYS_MODEL_P1020E
 "FªesˇÀ P1020E - Securôy Engöe"

	)

77 
	#SYS_MODEL_P1020
 "FªesˇÀ P1020"

	)

78 
	#SYS_MODEL_P1011E
 "FªesˇÀ P1011E - Securôy Engöe"

	)

79 
	#SYS_MODEL_P1011
 "FªesˇÀ P1011"

	)

80 
	#SYS_MODEL
 "FªesˇÀ P1020"

	)

82 
	#SYS_MODEL_E500
 "FªesˇÀ E500 : Unknow¿sy°em vîsi⁄"

	)

83 
	#SYS_MODEL_UNKNOWN
 "FªesˇÀ Unknow¿¥o˚ss‹"

	)

85 
	#SYS_PCB_REV_A
 0

	)

86 
	#SYS_PCB_REV_B
 1

	)

87 
	#SYS_PCB_REV_C
 2

	)

88 
	#SYS_PCB_REV_D
 3

	)

89 
	#SYS_PCB_REV_UNKNOWN
 4

	)

90 
	#SYS_PCB_REV_MASK
 0x10100000

	)

91 
	#SYS_CLK_SW_MASK
 0x00200000

	)

93 
LOCAL
 * 
	gphysT›
 = 
NULL
;

94 
LOCAL
 * 
	gmemT›
 = 
NULL
;

98 #i‚de‡
_CAG_CONFIG_FREQ


99 
	#MAX_VALUE_DDR_RATIO
 16

	)

100 
UINT32
 
	gddrR©ioTabÀ
[
MAX_VALUE_DDR_RATIO
] = {

105 
	#MAX_VALUE_PLAT_RATIO
 32

	)

106 
UINT32
 
	g∂©R©ioTabÀ
 [
MAX_VALUE_PLAT_RATIO
][2] = {

117 
	#MAX_VALUE_E500_RATIO
 10

	)

118 
UINT32
 
	ge500R©ioTabÀ
 [
MAX_VALUE_PLAT_RATIO
][2] = {

137 
UINT32
 
	$sysClkFªqGë
 ()

139 #i‚de‡
_CAG_CONFIG_FREQ


140 
UINT32
 
sysClkFªq
;

141 
UINT32
 
e500R©io
;

142 
UINT32
 
e5001R©io
;

143 
UINT32
 
∂©R©io
;

144 
UINT32
 
ddrR©io
;

146 
∂©R©io
 = 
	`M85XX_PORPLLSR_PLAT_RATIO
(
_CAG_CONFIG_CCSBAR
);

147 
ddrR©io
 = 
	`M85XX_PORPLLSR_DDR_RATIO
(
_CAG_CONFIG_CCSBAR
);

149 i‡–(
∂©R©io
 >
	`ARRAY_SIZE
(
∂©R©ioTabÀ
))

150 || (
∂©R©ioTabÀ
[
∂©R©io
] == 0)

152 (
DEFAULT_SYSCLKFREQ
);

154 
sy°emFªq
 = 
FREQ_66_MHZ
;

155 
ddrFªq
 = 
DDR_CLK_FREQ
;

157 
ddrFªq
 = ddrFªq * 
ddrR©ioTabÀ
[
ddrR©io
];

158 
sysClkFªq
 = ((
UINT32
)(
sy°emFªq
 * 
∂©R©ioTabÀ
[
∂©R©io
][0])) >> \

159 ((
UINT32
)
∂©R©ioTabÀ
[
∂©R©io
][1]);

161 
e500R©io
 = 
	`M85XX_PORPLLSR_E500_RATIO
(
_CAG_CONFIG_CCSBAR
);

162 
e5001R©io
 = 
	`M85XX_PORPLLSR_E500_1_RATIO
(
_CAG_CONFIG_CCSBAR
);

164 
c‹eFªq
 = ((
UINT32
)(
sysClkFªq
 * 
e500R©ioTabÀ
[
e500R©io
][0])) >> \

165 ((
UINT32
)
e500R©ioTabÀ
[
e500R©io
][1]);

166 
c‹e1Fªq
 = ((
UINT32
)(
sysClkFªq
 * 
e500R©ioTabÀ
[
e5001R©io
][0]))>> \

167 ((
UINT32
)
e500R©ioTabÀ
[
e5001R©io
][1]);

169 (
sysClkFªq
);

171  
FREQ_400_MHZ
;

173 
	}
}

196 
	gsysUsDñay


198 
	gdñay


201 
UINT32
 
	gba£löeTickCou¡
;

202 
UINT32
 
	gcurTickCou¡
;

203 
UINT32
 
	gãrmöÆTickCou¡
;

204 
	ga˘uÆRﬁlovî
 = 0;

205 
	gˇlcRﬁlovî
 = 0;

206 
UINT32
 
	gticksToWaô
;

207 
UINT32
 
	gªque°edDñay
;

208 
UINT32
 
	g⁄eUsDñay
;

212 i‡((
	gªque°edDñay
 = 
dñay
) == 0)

220 
	gba£löeTickCou¡
 = 
sysTimeBa£LGë
();

235 
	g⁄eUsDñay
 = (((
sysClkFªqGë
() >> 3) + 1000000) / 1000000);

239 
	gticksToWaô
 = 
ªque°edDñay
 * 
⁄eUsDñay
;

243 
	gãrmöÆTickCou¡
 = 
ba£löeTickCou¡
 + 
ticksToWaô
;

247 i‡(
	gãrmöÆTickCou¡
 < 
	gba£löeTickCou¡
) {

248 
	gˇlcRﬁlovî
 = 1;

259 
	gcurTickCou¡
 = 
sysTimeBa£LGë
();

263 i‡(
	gcurTickCou¡
 < 
	gba£löeTickCou¡
) {

264 
	ga˘uÆRﬁlovî
 = 1;

267 i‡(((
	gcurTickCou¡
 >
ãrmöÆTickCou¡
)

268 && (
a˘uÆRﬁlovî
 =
ˇlcRﬁlovî
)) ||

269 ((
curTickCou¡
 < 
ãrmöÆTickCou¡
)

270 && (
a˘uÆRﬁlovî
 > 
ˇlcRﬁlovî
))) {

276 } 
	gTRUE
);

292 
UINT32
 
	$sysU¨tClkR©eGë
()

294  
FREQ_400_MHZ
;

295 
	}
}

310 
	$sysMiscInô
()

314 
	`sysTimeBa£Inô
(0, 0);

315 
	`sysHid0Së
(
	`sysHid0Gë
(Ë| 
_PPC_HID0_TBEN
);

317 
	`sysUsDñay
(500000);

318 
	}
}

332 
	$c‹eLbcShow
 ()

334 
VINT32
 
tmp
, 
tmp2
;

336 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR0
(
_CAG_CONFIG_CCSBAR
);

337 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR0
(
_CAG_CONFIG_CCSBAR
);

338 
	`¥ötf
("Loˇ»bu†BR0 = 0x%x\tOR0 = 0x%x\n", 
tmp
, 
tmp2
);

340 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR1
(
_CAG_CONFIG_CCSBAR
);

341 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR1
(
_CAG_CONFIG_CCSBAR
);

342 
	`¥ötf
("Loˇ»bu†BR1 = 0x%x\tOR1 = 0x%x\n", 
tmp
, 
tmp2
);

344 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR2
(
_CAG_CONFIG_CCSBAR
);

345 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR2
(
_CAG_CONFIG_CCSBAR
);

346 
	`¥ötf
("Loˇ»bu†BR2 = 0x%x\tOR2 = 0x%x\n", 
tmp
, 
tmp2
);

348 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR3
(
_CAG_CONFIG_CCSBAR
);

349 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR3
(
_CAG_CONFIG_CCSBAR
);

350 
	`¥ötf
("Loˇ»bu†BR3 = 0x%x\tOR3 = 0x%x\n", 
tmp
, 
tmp2
);

352 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR4
(
_CAG_CONFIG_CCSBAR
);

353 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR4
(
_CAG_CONFIG_CCSBAR
);

354 
	`¥ötf
("Loˇ»bu†BR4 = 0x%x\tOR4 = 0x%x\n", 
tmp
, 
tmp2
);

356 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR5
(
_CAG_CONFIG_CCSBAR
);

357 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR5
(
_CAG_CONFIG_CCSBAR
);

358 
	`¥ötf
("Loˇ»bu†BR5 = 0x%x\tOR5 = 0x%x\n", 
tmp
, 
tmp2
);

360 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR6
(
_CAG_CONFIG_CCSBAR
);

361 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR6
(
_CAG_CONFIG_CCSBAR
);

362 
	`¥ötf
("Loˇ»bu†BR6 = 0x%x\tOR6 = 0x%x\n", 
tmp
, 
tmp2
);

364 
tmp
 = * (
VINT32
 *Ë
	`M85XX_BR7
(
_CAG_CONFIG_CCSBAR
);

365 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_OR7
(
_CAG_CONFIG_CCSBAR
);

366 
	`¥ötf
("Loˇ»bu†BR7 = 0x%x\tOR7 = 0x%x\n", 
tmp
, 
tmp2
);

368 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LBCR
(
_CAG_CONFIG_CCSBAR
);

369 
	`¥ötf
("Loˇ»bu†LBCR = 0x%x\n", 
tmp
);

371 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LCRR
(
_CAG_CONFIG_CCSBAR
);

372 
	`¥ötf
("Loˇ»bu†LCRR = 0x%x\n", 
tmp
);

373 
	}
}

375 
	$c‹eLawShow
 ()

377 
VINT32
 
tmp
,
tmp2
,
i
;

378 
i
=0;

379 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR0
(
_CAG_CONFIG_CCSBAR
);

380 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR0
(
_CAG_CONFIG_CCSBAR
);

381 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

383 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR1
(
_CAG_CONFIG_CCSBAR
);

384 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR1
(
_CAG_CONFIG_CCSBAR
);

385 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

387 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR2
(
_CAG_CONFIG_CCSBAR
);

388 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR2
(
_CAG_CONFIG_CCSBAR
);

389 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

391 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR3
(
_CAG_CONFIG_CCSBAR
);

392 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR3
(
_CAG_CONFIG_CCSBAR
);

393 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

395 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR4
(
_CAG_CONFIG_CCSBAR
);

396 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR4
(
_CAG_CONFIG_CCSBAR
);

397 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

399 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR5
(
_CAG_CONFIG_CCSBAR
);

400 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR5
(
_CAG_CONFIG_CCSBAR
);

401 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

403 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR6
(
_CAG_CONFIG_CCSBAR
);

404 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR6
(
_CAG_CONFIG_CCSBAR
);

405 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

407 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR7
(
_CAG_CONFIG_CCSBAR
);

408 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR7
(
_CAG_CONFIG_CCSBAR
);

409 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

411 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR8
(
_CAG_CONFIG_CCSBAR
);

412 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR8
(
_CAG_CONFIG_CCSBAR
);

413 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

415 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR9
(
_CAG_CONFIG_CCSBAR
);

416 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR9
(
_CAG_CONFIG_CCSBAR
);

417 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

419 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR10
(
_CAG_CONFIG_CCSBAR
);

420 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR10
(
_CAG_CONFIG_CCSBAR
);

421 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

423 
tmp
 = * (
VINT32
 *Ë
	`M85XX_LAWBAR11
(
_CAG_CONFIG_CCSBAR
);

424 
tmp2
 = * (
VINT32
 *Ë
	`M85XX_LAWAR11
(
_CAG_CONFIG_CCSBAR
);

425 
	`¥ötf
("Loˇ»Ac˚s†Wödow %d BAR = 0x%8x, AR = 0x%8x\n",
i
++,
tmp
,
tmp2
);

427 
	}
}

430 
	#xbô0
(
x
, 
n
Ë((x & (1 << (31 -Ç))Ë>> (31 -Ç)Ë

	)

431 
	#xbô32
(
x
, 
n
Ë((x & (1 << (63 -Ç))Ë>> (63 -Ç)Ë

	)

432 
	#⁄off0
(
x
, 
n
Ë
	`xbô0
(x,ÇË? "ON", "OFF"

	)

433 
	#⁄off32
(
x
, 
n
Ë
	`xbô32
(x,ÇË? "ON", "OFF"

	)

446 
	$c‹eShow
 ()

448 
VUINT32
 
tmp
, 
tmp2
;

450 
tmp
 = 
	`sysM§Gë
();

451 
	`¥ötf
("MSR - 0x%x\n", 
tmp
);

452 
	`¥ötf
(" UCLE-%x SPE-%x WE-%x CE-%x EE-%x PR-%x ME-%x\n",

453 
	`xbô32
(
tmp
,37), xbit32(tmp,38), xbit32(tmp,45), xbit32(tmp,46),

454 
	`xbô32
(
tmp
,48), xbit32(tmp,49), xbit32(tmp,51));

455 
	`¥ötf
(" UBLE-%x DE-%x IS-%x DS-%x PMM-%x\n",

456 
	`xbô32
(
tmp
,53), xbit32(tmp,54), xbit32(tmp,58), xbit32(tmp,59),

457 
	`xbô32
(
tmp
,61));

458 
tmp
 = 
	`sysHid0Gë
();

459 
tmp2
 = 
	`sysHid1Gë
();

460 
	`¥ötf
("HID0 = 0x%x, HID1 = 0x%x\n", 
tmp
, 
tmp2
);

461 
tmp
 = 
	`sysL1CSR0Gë
();

462 
	`¥ötf
("L1CSR0: cachêi†%†- 0x%x\n", 
tmp
&1?"ON":"OFF",Åmp);

463 
tmp
 = 
	`sysL1CSR1Gë
();

464 
	`¥ötf
("L1CSR1: Iˇchêi†%†- 0x%x\n", 
tmp
&1?"ON":"OFF",Åmp);

465 
tmp
 = 
	`sysL1CFG0Gë
();

466 
tmp2
 = 
	`sysL1CFG1Gë
();

467 
	`¥ötf
("L1CFG0 = 0x%x, L1CFG1 = 0x%x\n", 
tmp
, 
tmp2
);

468 
tmp
 = *(
VUINT32
 *Ë(
_CAG_CONFIG_CCSBAR
 + 0x20000);

469 
	`¥ötf
("L2CTL - 0x%x\n", 
tmp
);

470 
	`¥ötf
("Ü2 i†%s\n", 
tmp
&0x80000000?"ON":"OFF");

471 
	`¥ötf
("Ü2siz-%xÜ2blksz-%xÜ2do-%xÜ2io-%x\n",

472 (
	`xbô0
(
tmp
,2)<<1)|xbit0(tmp,3), (xbit0(tmp,4)<<1)|xbit0(tmp,5),

473 
	`xbô0
(
tmp
,9), xbit0(tmp,10));

474 
	`¥ötf
("Ü2pmextdis-%xÜ2intdis-%xÜ2sram-%x\n",

475 
	`xbô0
(
tmp
,11), xbit0(tmp,12),

476 (
	`xbô0
(
tmp
,13)<<2)|(xbit0(tmp,14)<<1)|xbit0(tmp,15));

477 
tmp
 = *(
VUINT32
 *Ë(
_CAG_CONFIG_CCSBAR
 + 0x20100);

478 
tmp2
 = *(
VUINT32
 *Ë(
_CAG_CONFIG_CCSBAR
 + 0x20108);

479 
	`¥ötf
("L2SRBAR0 - 0x%x\n", 
tmp
);

480 
	`¥ötf
("L2SRBAR1 - 0x%x\n", 
tmp2
);

482 
	`¥ötf
("C‹êCPU0 Fªq = %3d Hz\n", 
c‹eFªq
);

483 
	`¥ötf
("C‹êCPU1 Fªq = %3d Hz\n", 
c‹e1Fªq
);

484 
	`¥ötf
("DDR Fªq = %3d Hz\n", 
ddrFªq
);

485 
	`¥ötf
("CCB Fªq = %3d Hz\n", 
	`sysClkFªqGë
());

486 
	`¥ötf
("Sy°em Fªq = %3d Hz\n", 
sy°emFªq
);

488 
	}
}

501 * 
	$sysModñ
 ()

503 
UINT32
 
devi˚
;

504 * 
ªtCh¨
 = 
NULL
;

506 
devi˚
 = *
	`M85XX_SVR
(
_CAG_CONFIG_CCSBAR
);

507 
devi˚
 & 0xffff0000) {

509 
ªtCh¨
 = 
SYS_MODEL_P2020
;

512 
ªtCh¨
 = 
SYS_MODEL_P2020E
;

515 
ªtCh¨
 = 
SYS_MODEL_P2010
;

518 
ªtCh¨
 = 
SYS_MODEL_P2010E
;

521 
ªtCh¨
 = 
SYS_MODEL_P1020
;

524 
ªtCh¨
 = 
SYS_MODEL_P1020E
;

527 
ªtCh¨
 = 
SYS_MODEL_P1011
;

530 
ªtCh¨
 = 
SYS_MODEL_P1011E
;

533 
ªtCh¨
 = 
SYS_MODEL_E500
;

537 
devi˚
 = *
	`M85XX_PVR
(
_CAG_CONFIG_CCSBAR
);

539 i‡((
devi˚
 & 0xffff0000) != 0x80210000)

540 
ªtCh¨
 =
SYS_MODEL_UNKNOWN
;

542 (
ªtCh¨
);

543 
	}
}

554 
UINT32
 
	$sysPcbRev
 ()

556 
UINT32
 
pcbVî
;

558 *((
VUINT32
 *)
GPDIR
Ë&~
SYS_PCB_REV_MASK
;

560 
pcbVî
 = *((
VUINT32
 *)
GPDAT
Ë& 
SYS_PCB_REV_MASK
;

562 
pcbVî
) {

564 
pcbVî
 = 
SYS_PCB_REV_A
;

567 
pcbVî
 = 
SYS_PCB_REV_B
;

570 
pcbVî
 = 
SYS_PCB_REV_C
;

573 
pcbVî
 = 
SYS_PCB_REV_D
;

576 
pcbVî
 = 
SYS_PCB_REV_UNKNOWN
;

580  (
pcbVî
);

581 
	}
}

597 * 
	$sysPhysMemT›
 ()

600 i‡(
physT›
 =
NULL
) {

601 
physT›
 = (*)(
LOCAL_MEM_LOCAL_ADRS
 + 
LOCAL_MEM_SIZE
);

604 (
physT›
) ;

605 
	}
}

623 * 
	$sysMemT›
 ()

626 i‡(
memT›
 =
NULL
) {

627 
memT›
 = 
	`sysPhysMemT›
 (Ë- 
USER_RESERVED_MEM
;

630  
memT›
;

631 
	}
}

633 
	$bﬂrdRe£t
 ()

637 *
	`M85XX_RSTCR
(
_CAG_CONFIG_CCSBAR
) = 0x2;

638 
	`sysUsDñay
(1000);

639 
	}
}

649 
	$h™g
()

651 
	`¥ötf
("### ERROR ### Please RESETÅhe board ###\n");

652 
	`¥ötf
("Shuàdow¿hîe,%s\n",
__FUNCTION__
);

653 
	}
}

655 
	$∑nic
(c⁄° *
fmt
, ...)

657 
	`¥ötf
("Åhe cagOS isÖanic here\n");

658 #i‡
	`deföed
(
_CAG_CONFIG_HANG
)

659 
	`h™g
();

661 
	`sysUsDñay
(100000);

662 
	`bﬂrdRe£t
();

666 
	}
}

668 
	$__as£π_Áû
(c⁄° *
as£πi⁄
, c⁄° *
fûe
, 
löe
,

669 c⁄° *
fun˘i⁄
)

672 
	`∑nic
("%s:%u: %s: As£πi⁄ `%s' faûed.", 
fûe
, 
löe
, 
fun˘i⁄
,

673 
as£πi⁄
);

674 
	}
}

	@start/sysCpuALib.S

30 
	#_ASMLANGUAGE


	)

31 
	~<libc/ˇgboŸ.h
>

32 
	~<c⁄fig.h
>

33 
	~<p1020rdb.h
>

34 
	~<µc/toﬁPpc.h
>

35 
	~<µc/¨chPpc.h
>

36 
	~<µc/mmuE500Lib.h
>

37 
	~<µc/asmPpc.h
>

38 
	~<µc/excPpcLib.h
>

40 
	$FUNC_EXPORT
(
°¨t
)

41 
	$FUNC_EXPORT
(
_°¨t
)

42 
	$FUNC_EXPORT
(
sysL2CTLSë
)

43 
	$FUNC_EXPORT
(
sysL2CTLGë
)

44 
	$FUNC_EXPORT
(
sysCacheFlush
)

45 
	$FUNC_EXPORT
(
sysCacheE«bÀ
)

46 
	$FUNC_IMPORT
(
sysE¡ry
)

47 
	$FUNC_EXPORT
(
sysPCGë
)

48 
	$FUNC_EXPORT
(
sysL1C§1Së
)

49 
	$FUNC_EXPORT
(
sysTimeBa£LGë
)

50 
	$FUNC_EXPORT
(
sysCpu1Sèπ
)

51 
	$FUNC_EXPORT
(
sysCpu1St›
)

52 
	$FUNC_EXPORT
(
BOOTDEBUG
)

53 
	$FUNC_EXPORT
(
sysTlbUnm≠AŒ
)

55 
	$FUNC_IMPORT
(
sysCpu1Lo›
)

56 
	$FUNC_IMPORT
(
OSI¡E¡î
)

57 
	$FUNC_IMPORT
(
OSI¡H™dÀr
)

58 
	$FUNC_IMPORT
(
OSI¡Exô
)

60 
	$DATA_IMPORT
(
e500E¨lyM≠TlbId
)

61 
	$DATA_IMPORT
(
e500ImaTlbC¡
)

63 
	#MAS3_RPN
 0xFFFFF000

	)

64 
	#MAS3_U0
 0x00000200

	)

65 
	#MAS3_U1
 0x00000100

	)

66 
	#MAS3_U2
 0x00000080

	)

67 
	#MAS3_U3
 0x00000040

	)

68 
	#MAS3_UX
 0x00000020

	)

69 
	#MAS3_SX
 0x00000010

	)

70 
	#MAS3_UW
 0x00000008

	)

71 
	#MAS3_SW
 0x00000004

	)

72 
	#MAS3_UR
 0x00000002

	)

73 
	#MAS3_SR
 0x00000001

	)

75 
	#MAS0_TLBSEL_MSK
 0x30000000

	)

76 
	#MAS0_TLBSEL
(
x
Ë(((xË<< 28Ë& 
MAS0_TLBSEL_MSK
)

	)

77 
	#MAS0_TLBSEL
(
x
Ë(((xË<< 28Ë& 
MAS0_TLBSEL_MSK
)

	)

78 
	#MAS0_ESEL_MSK
 0x0FFF0000

	)

79 
	#MAS0_ESEL
(
x
Ë(((xË<< 16Ë& 
MAS0_ESEL_MSK
)

	)

80 
	#MAS0_NV
(
x
Ë((xË& 0x00000FFF)

	)

82 
	#MAS1_VALID
 0x80000000

	)

83 
	#MAS1_IPROT
 0x40000000

	)

84 
	#MAS1_TID
(
x
Ë(((xË<< 16Ë& 0x3FFF0000)

	)

85 
	#MAS1_TS
 0x00001000

	)

86 
	#MAS1_TSIZE
(
x
Ë(((xË<< 7Ë& 0x00000F80)

	)

87 
	#TSIZE_TO_BYTES
(
x
Ë(1ULL << ((xË+ 10))

	)

89 
	#FSL_BOOKE_MAS0
(
éb£l
,
e£l
,
nv
) \

90 (
	`MAS0_TLBSEL
(
éb£l
Ë| 
	`MAS0_ESEL
(
e£l
Ë| 
	`MAS0_NV
(
nv
))

	)

91 
	#FSL_BOOKE_MAS1
(
v
,
ùrŸ
,
tid
,
ts
,
tsize
) \

92 ((((
v
Ë<< 31Ë& 
MAS1_VALID
) |\

93 (((
ùrŸ
Ë<< 30Ë& 
MAS1_IPROT
) |\

94 (
	`MAS1_TID
(
tid
)) |\

95 (((
ts
Ë<< 12Ë& 
MAS1_TS
) |\

96 (
	`MAS1_TSIZE
(
tsize
)))

	)

97 
	#FSL_BOOKE_MAS2
(
ïn
, 
wimge
) \

98 (((
ïn
Ë& 
MAS3_RPN
Ë| (
wimge
))

	)

99 
	#FSL_BOOKE_MAS3
(
Ωn
, 
u£r
, 
≥rms
) \

100 (((
Ωn
Ë& 
MAS3_RPN
Ë| (
u£r
Ë| (
≥rms
))

	)

101 
	#FSL_BOOKE_MAS7
(
Ωn
) \

102 (((
u64
)(
Ωn
)Ë>> 32)

	)

104 .
ma¸o
 
¸óã_éb1_íåy
 
e£l
 
ts
 
tsize
 
ïn
 
wimg
 
Ωn
 
≥rm
 
phy_high
 
s¸©ch


105 
lis
 \
s¸©ch
, 
	`FSL_BOOKE_MAS0
(1, \
e£l
, 0)@
h


106 
‹i
 \
s¸©ch
, \s¸©ch, 
	`FSL_BOOKE_MAS0
(1, \
e£l
, 0)@
l


107 
mt•r
 
MAS0
, \
s¸©ch


108 
lis
 \
s¸©ch
, 
	`FSL_BOOKE_MAS1
(1, 1, 0, \
ts
, \
tsize
)@
h


109 
‹i
 \
s¸©ch
, \s¸©ch, 
	`FSL_BOOKE_MAS1
(1, 1, 0, \
ts
, \
tsize
)@
l


110 
mt•r
 
MAS1
, \
s¸©ch


111 
lis
 \
s¸©ch
, 
	`FSL_BOOKE_MAS2
(\
ïn
, \
wimg
)@
h


112 
‹i
 \
s¸©ch
, \s¸©ch, 
	`FSL_BOOKE_MAS2
(\
ïn
, \
wimg
)@
l


113 
mt•r
 
MAS2
, \
s¸©ch


114 
lis
 \
s¸©ch
, 
	`FSL_BOOKE_MAS3
(\
Ωn
, 0, \
≥rm
)@
h


115 
‹i
 \
s¸©ch
, \s¸©ch, 
	`FSL_BOOKE_MAS3
(\
Ωn
, 0, \
≥rm
)@
l


116 
mt•r
 
MAS3
, \
s¸©ch


117 
lis
 \
s¸©ch
, \
phy_high
@
h


118 
‹i
 \
s¸©ch
, \s¸©ch, \
phy_high
@
l


119 
mt•r
 
MAS7
, \
s¸©ch


120 
isync


121 
msync


122 
ébwe


123 
isync


124 .
ídm


126 
	#TLB1_ENTRY_0
 0

	)

127 
	#TLB1_ENTRY_1
 1

	)

128 
_CAG_TEXT_SEG_START


130 
	#CACHE_ALIGN_SHIFT
 5

	)

140 
	$FUNC_LABEL
(
_°¨t
)

141 
	$FUNC_BEGIN
(
°¨t
)

143 
bl
 
sysCpuInô


145 
x‹
 
p0
,Ö0,Ö0

146 
mt•r
 
TCR
, 
p0


148 
mb¨
 0

150 #i‡
	`deföed
(
_CAG_CONFIG_AMP1
)

152 
¸óã_éb1_íåy
 
TLB1_ENTRY_0
,0, 14 ,0, \

153 
_MMU_TLB_ATTR_M
, \

155 
MAS3_SX
|
MAS3_SW
|
MAS3_SR
, \

156 0,
r6


157 
¸óã_éb1_íåy
 
TLB1_ENTRY_1
,0, 14 ,0x01000000 , \

158 
_MMU_TLB_ATTR_M
, \

160 
MAS3_SX
|
MAS3_SW
|
MAS3_SR
 , \

161 0,
r6


165 
lis
 
•
, 
	$HIADJ
(
KERNEL_STACK_HIGH
)

166 
addi
 
•
, sp, 
	$LO
(
KERNEL_STACK_HIGH
)

167 
addi
 
•
, sp, -
FRAMEBASESZ


169 
li
 
r3
, 0

170 
b
 
sysE¡ry


171 
	`FUNC_END
(
°¨t
)

178 . = 
_EXC_OFF_CRTL


179 
	$FUNC_BEGIN
(
¸ôiˇl
)

180 
mt•r
 
SPRG2
,
r1


181 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


182 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


184 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

185 
°w
 
r0
,
	$XR0
(
r1
)

186 
mfm§
 
r0


187 
°w
 
r0
,
	$XMSR
(
r1
)

188 
mf•r
 
r0
,
SRR0


189 
°w
 
r0
,
	$XSRR0
(
r1
)

190 
mf•r
 
r0
,
SRR1


191 
°w
 
r0
,
	$XSRR1
(
r1
)

192 
mf˘r
 
r0


193 
°w
 
r0
,
	$XCTR
(
r1
)

194 
mfxî
 
r0


195 
°w
 
r0
,
	$XXER
(
r1
)

196 
mf¸
 
r0


197 
°w
 
r0
,
	$XCR
(
r1
)

198 
mf•r
 
r0
,
LR


199 
°w
 
r0
,
	$XLR
(
r1
)

201 
bl
 
ßveC⁄ãxt


203 
mf•r
 
r3
,
SPRG2


204 
mf•r
 
r4
,
DEAR


205 
mf•r
 
r5
,
ESR


206 
lis
 
r6
, 
_EXC_OFF_CRTL
@
h


207 
‹i
 
r6
,Ñ6, 
_EXC_OFF_CRTL
@
l


208 
bl
 
gíîÆEx˚±i⁄


209 
	`FUNC_END
(
¸ôiˇl
)

216 . =
_EXC_OFF_MACH


217 
	$FUNC_BEGIN
(
machöeCheck
)

218 
mt•r
 
SPRG2
,
r1


219 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


220 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


221 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

222 
°w
 
r0
,
	$XR0
(
r1
)

223 
mfm§
 
r0


224 
°w
 
r0
,
	$XMSR
(
r1
)

225 
mf•r
 
r0
,
MCSRR0


226 
°w
 
r0
,
	$XSRR0
(
r1
)

227 
mf•r
 
r0
,
MCSRR1


228 
°w
 
r0
,
	$XSRR1
(
r1
)

229 
mf˘r
 
r0


230 
°w
 
r0
,
	$XCTR
(
r1
)

231 
mfxî
 
r0


232 
°w
 
r0
,
	$XXER
(
r1
)

233 
mf¸
 
r0


234 
°w
 
r0
,
	$XCR
(
r1
)

235 
mf•r
 
r0
,
LR


236 
°w
 
r0
,
	$XLR
(
r1
)

238 
bl
 
ßveC⁄ãxt


240 
mf•r
 
r3
,
SPRG2


241 
mf•r
 
r4
,
MCAR


242 
mf•r
 
r5
,
MCSR


243 
lis
 
r6
, 
_EXC_OFF_MACH
@
h


244 
‹i
 
r6
,Ñ6, 
_EXC_OFF_MACH
@
l


245 
bl
 
gíîÆEx˚±i⁄


246 
	`FUNC_END
(
machöeCheck
)

253 . =
_EXC_OFF_DATA


254 
	$FUNC_BEGIN
(
dsi
)

255 
mt•r
 
SPRG2
,
r1


256 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


257 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


259 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

260 
°w
 
r0
,
	$XR0
(
r1
)

261 
mfm§
 
r0


262 
°w
 
r0
,
	$XMSR
(
r1
)

263 
mf•r
 
r0
,
SRR0


264 
°w
 
r0
,
	$XSRR0
(
r1
)

265 
mf•r
 
r0
,
SRR1


266 
°w
 
r0
,
	$XSRR1
(
r1
)

267 
mf˘r
 
r0


268 
°w
 
r0
,
	$XCTR
(
r1
)

269 
mfxî
 
r0


270 
°w
 
r0
,
	$XXER
(
r1
)

271 
mf¸
 
r0


272 
°w
 
r0
,
	$XCR
(
r1
)

273 
mf•r
 
r0
,
LR


274 
°w
 
r0
,
	$XLR
(
r1
)

276 
bl
 
ßveC⁄ãxt


278 
mf•r
 
r3
,
SPRG2


279 
mf•r
 
r4
,
DEAR


280 
mf•r
 
r5
,
ESR


281 
lis
 
r6
, 
_EXC_OFF_DATA
@
h


282 
‹i
 
r6
,Ñ6, 
_EXC_OFF_DATA
@
l


283 
bl
 
gíîÆEx˚±i⁄


284 
	`FUNC_END
(
dsi
)

290 . =
_EXC_OFF_INST


291 
	$FUNC_BEGIN
(
isi
)

292 
mt•r
 
SPRG2
,
r1


293 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


294 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


295 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

296 
°w
 
r0
,
	$XR0
(
r1
)

297 
mfm§
 
r0


298 
°w
 
r0
,
	$XMSR
(
r1
)

299 
mf•r
 
r0
,
SRR0


300 
°w
 
r0
,
	$XSRR0
(
r1
)

301 
mf•r
 
r0
,
SRR1


302 
°w
 
r0
,
	$XSRR1
(
r1
)

303 
mf˘r
 
r0


304 
°w
 
r0
,
	$XCTR
(
r1
)

305 
mfxî
 
r0


306 
°w
 
r0
,
	$XXER
(
r1
)

307 
mf¸
 
r0


308 
°w
 
r0
,
	$XCR
(
r1
)

309 
mf•r
 
r0
,
LR


310 
°w
 
r0
,
	$XLR
(
r1
)

312 
bl
 
ßveC⁄ãxt


314 
mf•r
 
r3
,
SPRG2


315 
mf•r
 
r4
,
DEAR


316 
mf•r
 
r5
,
ESR


317 
lis
 
r6
, 
_EXC_OFF_INST
@
h


318 
‹i
 
r6
,Ñ6, 
_EXC_OFF_INST
@
l


319 
bl
 
gíîÆEx˚±i⁄


320 
	`FUNC_END
(
isi
)

327 . = 
_EXC_OFF_INTR


328 
	$FUNC_BEGIN
(
extI¡
)

330 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

331 
°w
 
r0
,
	$XR0
(
r1
)

332 
mfm§
 
r0


333 
°w
 
r0
,
	$XMSR
(
r1
)

334 
mf•r
 
r0
,
SRR0


336 
°w
 
r0
,
	$XSRR0
(
r1
)

337 
mf•r
 
r0
,
SRR1


338 
°w
 
r0
,
	$XSRR1
(
r1
)

339 
mf˘r
 
r0


340 
°w
 
r0
,
	$XCTR
(
r1
)

341 
mfxî
 
r0


342 
°w
 
r0
,
	$XXER
(
r1
)

343 
mf¸
 
r0


344 
°w
 
r0
,
	$XCR
(
r1
)

345 
mf•r
 
r0
,
LR


346 
°w
 
r0
,
	$XLR
(
r1
)

348 
bl
 
ßveC⁄ãxt


350 
x‹
 
r0
,r0,r0

351 
addis
 
r10
,
r0
,
OSTCBCurPå
@
ha


352 
lwz
 
r7
, 
OSTCBCurPå
@
	$l
(
r10
)

354 
°w
 
r1
,0(
r7
)

356 
lis
 
r1
, 
IRQ_STACK_HIGH
@
h


357 
‹i
 
r1
,Ñ1, 
IRQ_STACK_HIGH
@
l


358 
bl
 
OSI¡E¡î


359 
bl
 
OSI¡H™dÀr


360 
bl
 
OSI¡Exô


362 
x‹
 
r0
,r0,r0

363 
addis
 
r10
,
r0
,
OSTCBCurPå
@
ha


364 
lwz
 
r7
,
OSTCBCurPå
@
	$l
(
r10
)

366 
bl
 
lﬂdC⁄ãxt


368 
	`FUNC_END
(
extI¡
)

375 . = 
_EXC_OFF_ALIGN


376 
	$FUNC_BEGIN
(
Æignmít
)

377 
mt•r
 
SPRG2
,
r1


378 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


379 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


380 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

381 
°w
 
r0
,
	$XR0
(
r1
)

382 
mfm§
 
r0


383 
°w
 
r0
,
	$XMSR
(
r1
)

384 
mf•r
 
r0
,
SRR0


385 
°w
 
r0
,
	$XSRR0
(
r1
)

386 
mf•r
 
r0
,
SRR1


387 
°w
 
r0
,
	$XSRR1
(
r1
)

388 
mf˘r
 
r0


389 
°w
 
r0
,
	$XCTR
(
r1
)

390 
mfxî
 
r0


391 
°w
 
r0
,
	$XXER
(
r1
)

392 
mf¸
 
r0


393 
°w
 
r0
,
	$XCR
(
r1
)

394 
mf•r
 
r0
,
LR


395 
°w
 
r0
,
	$XLR
(
r1
)

397 
bl
 
ßveC⁄ãxt


399 
mf•r
 
r3
,
SPRG2


400 
mf•r
 
r4
,
DEAR


401 
mf•r
 
r5
,
ESR


402 
lis
 
r6
, 
_EXC_OFF_ALIGN
@
h


403 
‹i
 
r6
,Ñ6, 
_EXC_OFF_ALIGN
@
l


404 
bl
 
gíîÆEx˚±i⁄


405 
	`FUNC_END
(
Æignmít
)

411 . = 
_EXC_OFF_PROG


412 
	$FUNC_BEGIN
(
¥ogømCheck
)

413 
mt•r
 
SPRG2
,
r1


414 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


415 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


416 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

417 
°w
 
r0
,
	$XR0
(
r1
)

418 
mfm§
 
r0


419 
°w
 
r0
,
	$XMSR
(
r1
)

420 
mf•r
 
r0
,
SRR0


421 
°w
 
r0
,
	$XSRR0
(
r1
)

422 
mf•r
 
r0
,
SRR1


423 
°w
 
r0
,
	$XSRR1
(
r1
)

424 
mf˘r
 
r0


425 
°w
 
r0
,
	$XCTR
(
r1
)

426 
mfxî
 
r0


427 
°w
 
r0
,
	$XXER
(
r1
)

428 
mf¸
 
r0


429 
°w
 
r0
,
	$XCR
(
r1
)

430 
mf•r
 
r0
,
LR


431 
°w
 
r0
,
	$XLR
(
r1
)

433 
bl
 
ßveC⁄ãxt


435 
mf•r
 
r3
,
SPRG2


436 
mf•r
 
r4
,
DEAR


437 
mf•r
 
r5
,
ESR


438 
lis
 
r6
, 
_EXC_OFF_PROG
@
h


439 
‹i
 
r6
,Ñ6, 
_EXC_OFF_PROG
@
l


440 
bl
 
gíîÆEx˚±i⁄


441 
	`FUNC_END
(
¥ogømCheck
)

447 . = 
_EXC_OFF_FPU


448 
	$FUNC_BEGIN
(
Âex˚±i⁄
)

449 
mt•r
 
SPRG2
,
r1


450 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


451 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


452 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

453 
°w
 
r0
,
	$XR0
(
r1
)

454 
mfm§
 
r0


455 
°w
 
r0
,
	$XMSR
(
r1
)

456 
mf•r
 
r0
,
SRR0


457 
°w
 
r0
,
	$XSRR0
(
r1
)

458 
mf•r
 
r0
,
SRR1


459 
°w
 
r0
,
	$XSRR1
(
r1
)

460 
mf˘r
 
r0


461 
°w
 
r0
,
	$XCTR
(
r1
)

462 
mfxî
 
r0


463 
°w
 
r0
,
	$XXER
(
r1
)

464 
mf¸
 
r0


465 
°w
 
r0
,
	$XCR
(
r1
)

466 
mf•r
 
r0
,
LR


467 
°w
 
r0
,
	$XLR
(
r1
)

469 
bl
 
ßveC⁄ãxt


471 
mf•r
 
r3
,
SPRG2


472 
mf•r
 
r4
,
DEAR


473 
mf•r
 
r5
,
ESR


474 
lis
 
r6
, 
_EXC_OFF_FPU
@
h


475 
‹i
 
r6
,Ñ6, 
_EXC_OFF_FPU
@
l


476 
bl
 
gíîÆEx˚±i⁄


477 
	`FUNC_END
(
Âex˚±i⁄
)

483 . = 
_EXC_OFF_DECR


484 
	$FUNC_BEGIN
(
de˚x˚±i⁄
)

485 
mt•r
 
SPRG2
,
r1


486 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


487 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


488 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

489 
°w
 
r0
,
	$XR0
(
r1
)

490 
mfm§
 
r0


491 
°w
 
r0
,
	$XMSR
(
r1
)

492 
mf•r
 
r0
,
SRR0


493 
°w
 
r0
,
	$XSRR0
(
r1
)

494 
mf•r
 
r0
,
SRR1


495 
°w
 
r0
,
	$XSRR1
(
r1
)

496 
mf˘r
 
r0


497 
°w
 
r0
,
	$XCTR
(
r1
)

498 
mfxî
 
r0


499 
°w
 
r0
,
	$XXER
(
r1
)

500 
mf¸
 
r0


501 
°w
 
r0
,
	$XCR
(
r1
)

502 
mf•r
 
r0
,
LR


503 
°w
 
r0
,
	$XLR
(
r1
)

505 
bl
 
ßveC⁄ãxt


507 
mf•r
 
r3
,
SPRG2


508 
mf•r
 
r4
,
DEAR


509 
mf•r
 
r5
,
ESR


510 
lis
 
r6
, 
_EXC_OFF_DECR
@
h


511 
‹i
 
r6
,Ñ6,
_EXC_OFF_DECR
@
l


512 
bl
 
gíîÆEx˚±i⁄


513 
	`FUNC_END
(
de˚x˚±i⁄
)

519 . = 
_EXC_OFF_DATA_MISS


520 
	$FUNC_BEGIN
(
débEx˚±i⁄
)

521 
mt•r
 
SPRG2
,
r1


522 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


523 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


524 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

525 
°w
 
r0
,
	$XR0
(
r1
)

526 
mfm§
 
r0


527 
°w
 
r0
,
	$XMSR
(
r1
)

528 
mf•r
 
r0
,
SRR0


529 
°w
 
r0
,
	$XSRR0
(
r1
)

530 
mf•r
 
r0
,
SRR1


531 
°w
 
r0
,
	$XSRR1
(
r1
)

532 
mf˘r
 
r0


533 
°w
 
r0
,
	$XCTR
(
r1
)

534 
mfxî
 
r0


535 
°w
 
r0
,
	$XXER
(
r1
)

536 
mf¸
 
r0


537 
°w
 
r0
,
	$XCR
(
r1
)

538 
mf•r
 
r0
,
LR


539 
°w
 
r0
,
	$XLR
(
r1
)

541 
bl
 
ßveC⁄ãxt


543 
mf•r
 
r3
,
SPRG2


544 
mf•r
 
r4
,
DEAR


545 
mf•r
 
r5
,
ESR


546 
lis
 
r6
, 
_EXC_OFF_DATA_MISS
@
h


547 
‹i
 
r6
,Ñ6, 
_EXC_OFF_DATA_MISS
@
l


548 
bl
 
gíîÆEx˚±i⁄


549 
	`FUNC_END
(
débEx˚±i⁄
)

555 . = 
_EXC_OFF_INST_MISS


556 
	$FUNC_BEGIN
(
ôlbEx˚±i⁄
)

557 
mt•r
 
SPRG2
,
r1


558 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


559 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


560 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

561 
°w
 
r0
,
	$XR0
(
r1
)

562 
mfm§
 
r0


563 
°w
 
r0
,
	$XMSR
(
r1
)

564 
mf•r
 
r0
,
SRR0


565 
°w
 
r0
,
	$XSRR0
(
r1
)

566 
mf•r
 
r0
,
SRR1


567 
°w
 
r0
,
	$XSRR1
(
r1
)

568 
mf˘r
 
r0


569 
°w
 
r0
,
	$XCTR
(
r1
)

570 
mfxî
 
r0


571 
°w
 
r0
,
	$XXER
(
r1
)

572 
mf¸
 
r0


573 
°w
 
r0
,
	$XCR
(
r1
)

574 
mf•r
 
r0
,
LR


575 
°w
 
r0
,
	$XLR
(
r1
)

577 
bl
 
ßveC⁄ãxt


579 
mf•r
 
r3
,
SPRG2


580 
mf•r
 
r4
,
DEAR


581 
mf•r
 
r5
,
ESR


582 
lis
 
r6
, 
_EXC_OFF_INST_MISS
@
h


583 
‹i
 
r6
,Ñ6, 
_EXC_OFF_INST_MISS
@
l


584 
bl
 
gíîÆEx˚±i⁄


585 
	`FUNC_END
(
ôlbEx˚±i⁄
)

591 . = 
_EXC_OFF_SPE


592 
	$FUNC_BEGIN
(
unS≥Ex˚±i⁄
)

593 
mt•r
 
SPRG2
,
r1


594 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


595 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


596 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

597 
°w
 
r0
,
	$XR0
(
r1
)

598 
mfm§
 
r0


599 
°w
 
r0
,
	$XMSR
(
r1
)

600 
mf•r
 
r0
,
SRR0


601 
°w
 
r0
,
	$XSRR0
(
r1
)

602 
mf•r
 
r0
,
SRR1


603 
°w
 
r0
,
	$XSRR1
(
r1
)

604 
mf˘r
 
r0


605 
°w
 
r0
,
	$XCTR
(
r1
)

606 
mfxî
 
r0


607 
°w
 
r0
,
	$XXER
(
r1
)

608 
mf¸
 
r0


609 
°w
 
r0
,
	$XCR
(
r1
)

610 
mf•r
 
r0
,
LR


611 
°w
 
r0
,
	$XLR
(
r1
)

613 
bl
 
ßveC⁄ãxt


615 
mf•r
 
r3
,
SPRG2


616 
mf•r
 
r4
,
DEAR


617 
mf•r
 
r5
,
ESR


618 
lis
 
r6
, 
_EXC_OFF_SPE
@
h


619 
‹i
 
r6
,Ñ6, 
_EXC_OFF_SPE
@
l


620 
bl
 
gíîÆEx˚±i⁄


621 
	`FUNC_END
(
unS≥Ex˚±i⁄
)

628 . = 
_EXC_OFF_VEC_DATA


629 
	$FUNC_BEGIN
(
•eD©aEx˚±i⁄
)

630 
mt•r
 
SPRG2
,
r1


631 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


632 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


633 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

634 
°w
 
r0
,
	$XR0
(
r1
)

635 
mfm§
 
r0


636 
°w
 
r0
,
	$XMSR
(
r1
)

637 
mf•r
 
r0
,
SRR0


638 
°w
 
r0
,
	$XSRR0
(
r1
)

639 
mf•r
 
r0
,
SRR1


640 
°w
 
r0
,
	$XSRR1
(
r1
)

641 
mf˘r
 
r0


642 
°w
 
r0
,
	$XCTR
(
r1
)

643 
mfxî
 
r0


644 
°w
 
r0
,
	$XXER
(
r1
)

645 
mf¸
 
r0


646 
°w
 
r0
,
	$XCR
(
r1
)

647 
mf•r
 
r0
,
LR


648 
°w
 
r0
,
	$XLR
(
r1
)

650 
bl
 
ßveC⁄ãxt


652 
mf•r
 
r3
,
SPRG2


653 
mf•r
 
r4
,
DEAR


654 
mf•r
 
r5
,
ESR


655 
lis
 
r6
, 
_EXC_OFF_VEC_DATA
@
h


656 
‹i
 
r6
,Ñ6, 
_EXC_OFF_VEC_DATA
@
l


657 
bl
 
gíîÆEx˚±i⁄


658 
	`FUNC_END
(
•eD©aEx˚±i⁄
)

665 . = 
_EXC_OFF_VEC_RND


666 
	$FUNC_BEGIN
(
•eRoundEx˚±i⁄
)

667 
mt•r
 
SPRG2
,
r1


668 
lis
 
r1
, 
EXC_STACK_HIGH
@
h


669 
‹i
 
r1
,Ñ1, 
EXC_STACK_HIGH
@
l


670 
°wu
 
r1
,-
	$EXC_FRAME_SIZE
(
r1
)

671 
°w
 
r0
,
	$XR0
(
r1
)

672 
mfm§
 
r0


673 
°w
 
r0
,
	$XMSR
(
r1
)

674 
mf•r
 
r0
,
SRR0


675 
°w
 
r0
,
	$XSRR0
(
r1
)

676 
mf•r
 
r0
,
SRR1


677 
°w
 
r0
,
	$XSRR1
(
r1
)

678 
mf˘r
 
r0


679 
°w
 
r0
,
	$XCTR
(
r1
)

680 
mfxî
 
r0


681 
°w
 
r0
,
	$XXER
(
r1
)

682 
mf¸
 
r0


683 
°w
 
r0
,
	$XCR
(
r1
)

684 
mf•r
 
r0
,
LR


685 
°w
 
r0
,
	$XLR
(
r1
)

687 
bl
 
ßveC⁄ãxt


689 
mf•r
 
r3
,
SPRG2


690 
mf•r
 
r4
,
DEAR


691 
mf•r
 
r5
,
ESR


692 
lis
 
r6
, 
_EXC_OFF_VEC_RND
@
h


693 
‹i
 
r6
,Ñ6, 
_EXC_OFF_VEC_RND
@
l


694 
bl
 
gíîÆEx˚±i⁄


695 
	$FUNC_END
(
•eRoundEx˚±i⁄
)

702 
	$FUNC_BEGIN
(
ßveC⁄ãxt
)

703 
°w
 
r2
,
	$XR2
(
r1
)

704 
°w
 
r3
,
	$XR3
(
r1
)

705 
°w
 
r4
,
	$XR4
(
r1
)

706 
°w
 
r5
,
	$XR5
(
r1
)

707 
°w
 
r6
,
	$XR6
(
r1
)

708 
°w
 
r7
,
	$XR7
(
r1
)

709 
°w
 
r8
,
	$XR8
(
r1
)

710 
°w
 
r9
,
	$XR9
(
r1
)

711 
°w
 
r10
,
	$XR10
(
r1
)

712 
°w
 
r11
,
	$XR11
(
r1
)

713 
°w
 
r12
,
	$XR12
(
r1
)

714 
°w
 
r13
,
	$XR13
(
r1
)

715 
°w
 
r14
,
	$XR14
(
r1
)

716 
°w
 
r15
,
	$XR15
(
r1
)

717 
°w
 
r16
,
	$XR16
(
r1
)

718 
°w
 
r17
,
	$XR17
(
r1
)

719 
°w
 
r18
,
	$XR18
(
r1
)

720 
°w
 
r19
,
	$XR19
(
r1
)

721 
°w
 
r20
,
	$XR20
(
r1
)

722 
°w
 
r21
,
	$XR21
(
r1
)

723 
°w
 
r22
,
	$XR22
(
r1
)

724 
°w
 
r23
,
	$XR23
(
r1
)

725 
°w
 
r24
,
	$XR24
(
r1
)

726 
°w
 
r25
,
	$XR25
(
r1
)

727 
°w
 
r26
,
	$XR26
(
r1
)

728 
°w
 
r27
,
	$XR27
(
r1
)

729 
°w
 
r28
,
	$XR28
(
r1
)

730 
°w
 
r29
,
	$XR29
(
r1
)

731 
°w
 
r30
,
	$XR30
(
r1
)

732 
°w
 
r31
,
	$XR31
(
r1
)

733 
bÃ


734 
	$FUNC_END
(
ßveC⁄ãxt
)

741 
	$FUNC_BEGIN
(
lﬂdC⁄ãxt
)

742 
lwz
 
r1
,0(
r7
)

743 
lwz
 
r2
,
	$XR2
(
r1
)

744 
lwz
 
r3
,
	$XR3
(
r1
)

745 
lwz
 
r4
,
	$XR4
(
r1
)

746 
lwz
 
r5
,
	$XR5
(
r1
)

747 
lwz
 
r6
,
	$XR6
(
r1
)

748 
lwz
 
r7
,
	$XR7
(
r1
)

749 
lwz
 
r8
,
	$XR8
(
r1
)

750 
lwz
 
r9
,
	$XR9
(
r1
)

751 
lwz
 
r10
,
	$XR10
(
r1
)

752 
lwz
 
r11
,
	$XR11
(
r1
)

753 
lwz
 
r12
,
	$XR12
(
r1
)

754 
lwz
 
r13
,
	$XR13
(
r1
)

755 
lwz
 
r14
,
	$XR14
(
r1
)

756 
lwz
 
r15
,
	$XR15
(
r1
)

757 
lwz
 
r16
,
	$XR16
(
r1
)

758 
lwz
 
r17
,
	$XR17
(
r1
)

759 
lwz
 
r18
,
	$XR18
(
r1
)

760 
lwz
 
r19
,
	$XR19
(
r1
)

761 
lwz
 
r20
,
	$XR20
(
r1
)

762 
lwz
 
r21
,
	$XR21
(
r1
)

763 
lwz
 
r22
,
	$XR22
(
r1
)

764 
lwz
 
r23
,
	$XR23
(
r1
)

765 
lwz
 
r24
,
	$XR24
(
r1
)

766 
lwz
 
r25
,
	$XR25
(
r1
)

767 
lwz
 
r26
,
	$XR26
(
r1
)

768 
lwz
 
r27
,
	$XR27
(
r1
)

769 
lwz
 
r28
,
	$XR28
(
r1
)

770 
lwz
 
r29
,
	$XR29
(
r1
)

771 
lwz
 
r30
,
	$XR30
(
r1
)

772 
lwz
 
r31
,
	$XR31
(
r1
)

773 
lwz
 
r0
, 
	$XLR
(
r1
)

774 
mér
 
r0


775 
lwz
 
r0
,
	$XCR
(
r1
)

776 
mt¸f
 255,
r0


777 
lwz
 
r0
,
	$XXER
(
r1
)

778 
mtxî
 
r0


779 
lwz
 
r0
,
	$XCTR
(
r1
)

780 
mt˘r
 
r0


781 
lwz
 
r0
,
	$XSRR0
(
r1
)

782 
mt•r
 
SRR0
,
r0


783 
lwz
 
r0
,
	$XR0
(
r1
)

784 
mt•r
 
SPRG0
,
r0


785 
lwz
 
r0
,
	$XSRR1
(
r1
)

786 
mt•r
 
SRR1
,
r0


787 
mf•r
 
r0
,
SPRG0


788 
addi
 
r1
,r1,
EXC_FRAME_SIZE


789 
SYNC


790 
rfi


791 
	$FUNC_END
(
lﬂdC⁄ãxt
)

806 
	$FUNC_BEGIN
(
sysCacheE«bÀ
)

810 
li
 
r3
, 0x0002

811 
msync


812 
isync


813 
mt•r
 
L1CSR0
, 
r3


814 
msync


815 
isync


819 
li
 
r3
, 0x0001

820 
msync


821 
isync


822 
mt•r
 
L1CSR0
, 
r3


823 
msync


824 
isync


831 
li
 
r3
, 0x0000

832 
msync


833 
isync


834 
mt•r
 
L1CSR1
, 
r3


835 
msync


836 
isync


837 
li
 
r3
, 0x0002

838 
msync


839 
isync


840 
mt•r
 
L1CSR1
, 
r3


841 
msync


842 
isync


846 
li
 
r3
, 0x0001

847 
msync


848 
isync


849 
mt•r
 
L1CSR1
, 
r3


850 
msync


851 
isync


853 
bÃ


854 
	`FUNC_END
(
sysCacheE«bÀ
)

856 .
bÆign
 32

875 
	$FUNC_BEGIN
(
sysL2CTLSë
)

876 
mb¨
 0

877 
isync


878 
°w
 
p0
, 0(
p1
)

879 
lwz
 
p0
, 0(
p1
)

880 
mb¨
 0

881 
isync


882 
bÃ


883 
	`FUNC_END
(
sysL2CTLSë
)

885 .
bÆign
 32

900 
	$FUNC_BEGIN
(
sysL2CTLGë
)

901 
mb¨
 0

902 
isync


903 
lwz
 
p1
, 0x0(
p0
)

904 
addi
 
p0
, 
p1
, 0x0

905 
mb¨
 0

906 
isync


907 
bÃ


908 
	$FUNC_END
(
sysL2CTLGë
)

920 
	$FUNC_BEGIN
(
sysCacheFlush
)

922 
§wi
 
p3
, 
p0
, (
MMU_RPN_SHIFT
 - 
CACHE_ALIGN_SHIFT
)

923 
mt•r
 
CTR
, 
p3


924 
addi
 
p6
, 
p1
,0

925 
li
 
p5
, 
MMU_PAGE_SIZE


926 
subf
 
p3
, 
p5
, 
p1


928 
b
 
ˇcheL2DißbÀLﬂdIéb


929 
ˇcheL2DißbÀLﬂdDéb
:

930 
add
 
p3
,Ö3, 
p5


931 
lbzu
 
p4
, 0(
p3
)

932 
bdnz
 
ˇcheL2DißbÀLﬂdDéb


933 
mt˘r
 
p0


934 
subf
 
p1
, 
p2
,Ö1

935 
l2DißbÀFlush
:

936 
add
 
p1
, 
p2
,Ö1

937 
lbzu
 
p3
, 0x0(
p1
)

938 
bdnz
 
l2DißbÀFlush


939 
sync


940 
isync


941 
mt˘r
 
p0


942 
addi
 
p1
, 
p6
, 0

943 
subf
 
p1
, 
p2
,Ö1

944 
l2DißbÀCÀ¨
:

945 
add
 
p1
, 
p2
,Ö1

946 
dcbf
 0, 
p1


947 
bdnz
 
l2DißbÀCÀ¨


948 
sync


949 
isync


950 
bÃ


951 
ˇcheL2DißbÀLﬂdIéb
:

952 
b
 
ˇcheL2DißbÀLﬂdDéb


953 
	$FUNC_END
(
sysCacheFlush
)

972 
	$FUNC_BEGIN
(
sysPCGë
)

973 
mÊr
 
r3


974 
bÃ


975 
	$FUNC_END
(
sysPCGë
)

992 
	$FUNC_BEGIN
(
sysTimeBa£LGë
)

993 
mf•r
 
r3
, 268

994 
b˛r
 20, 0

995 
	$FUNC_END
(
sysTimeBa£LGë
)

1012 
	$FUNC_BEGIN
(
sysL1C§1Së
)

1013 
msync


1014 
isync


1015 
mt•r
 
L1CSR1
, 
r3


1016 
msync


1017 
isync


1018 
bÃ


1019 
	$FUNC_END
(
sysL1C§1Së
)

1039 
	$FUNC_BEGIN
(
sysCpuInô
)

1043 
mfm§
 
r5


1044 
	$INT_MASK
 (
r5
, 
r6
)

1045 
	$ME_MASK
 (
r6
,Ñ6)

1046 
mtm§
 
r6


1047 
isync


1051 
x‹
 
r5
,Ñ5,Ñ5

1052 
mt•r
 
TCR
, 
r5


1053 
msync


1054 
isync


1058 
x‹
 
r5
,Ñ5,Ñ5

1059 
mt•r
 
SRR0
, 
r5


1060 
mt•r
 
SRR1
, 
r5


1061 
mt•r
 
CSRR0
, 
r5


1062 
mt•r
 
CSRR1
, 
r5


1063 
mt•r
 
MCSRR0
, 
r5


1064 
mt•r
 
MCSRR1
, 
r5


1065 
mt•r
 
ESR
, 
r5


1066 
mt•r
 
MCSR
, 
r5


1067 
mt•r
 
DEAR
, 
r5


1068 
mt•r
 
DBCR0
, 
r5


1069 
mt•r
 
DBCR1
, 
r5


1070 
mt•r
 
DBCR2
, 
r5


1071 
mt•r
 
IAC1
, 
r5


1072 
mt•r
 
IAC2
, 
r5


1073 
mt•r
 
DAC1
, 
r5


1074 
mt•r
 
DAC2
, 
r5


1075 
mt•r
 
BUCSR
, 
r5


1076 
mf•r
 
r6
, 
DBSR


1077 
mt•r
 
DBSR
, 
r6


1079 
isync


1080 
bÃ


1081 
	$FUNC_END
(
sysCpuInô
)

1084 
	$FUNC_BEGIN
(
BOOTDEBUG
)

1085 
lis
 
r5
, 
	$HI
(0xffe04503)

1086 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04503)

1087 
li
 
r6
, 0x83

1088 
°b
 
r6
, 0(
r5
)

1089 
sync


1090 
eõio


1092 
lis
 
r5
, 
	$HI
(0xffe04500)

1093 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04500)

1094 
li
 
r6
, 0xF

1095 
°b
 
r6
, 0(
r5
)

1096 
sync


1097 
eõio


1099 
lis
 
r5
, 
	$HI
(0xffe04501)

1100 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04501)

1101 
li
 
r6
, 0x1

1102 
°b
 
r6
, 0(
r5
)

1103 
sync


1104 
eõio


1106 
lis
 
r5
, 
	$HI
(0xffe04503)

1107 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04503)

1108 
li
 
r6
, 0x3

1109 
°b
 
r6
, 0(
r5
)

1110 
sync


1111 
eõio


1113 
lis
 
r5
, 
	$HI
(0xffe04500)

1114 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04500)

1115 
li
 
r6
,0x42

1116 
°b
 
r6
,0(
r5
)

1117 
sync


1119 
lis
 
r5
, 
	$HI
(0xffe04500)

1120 
‹i
 
r5
,Ñ5, 
	$LO
(0xffe04500)

1121 
li
 
r6
,0x42

1122 
°b
 
r6
,0(
r5
)

1123 
sync


1125 
bÃ


1126 
n›


1127 
n›


1128 
n›


1129 
	$FUNC_END
(
BOOTDEBUG
)

1146 
	$FUNC_BEGIN
(
sysTlbUnm≠AŒ
)

1151 
óæyTlbInv
:

1152 
¶wi
 
r5
, 
r3
, 
_PPC_MAS0_ESEL_BIT_MAX
 + 1

1153 
‹is
 
r5
,Ñ5, 
_PPC_MAS0_TLBSEL1_U


1154 
mt•r
 
MAS0
, 
r5


1155 
ébª


1159 
mf•r
 
r5
, 
MAS1


1160 
æwöm
 
r5
,Ñ5, 0, 
_PPC_MAS1_IPROT_BIT
 + 1, 31

1161 
mt•r
 
MAS1
, 
r5


1162 
ébwe


1163 
isync


1165 
addi
 
r3
,Ñ3, 1

1166 
cmpw
 
r3
, 
r4


1167 
bÀ
 
óæyTlbInv


1169 
bÃ


1170 
	`FUNC_END
(
sysTlbUnm≠AŒ
)

	@start/sysCpuLib.c

43 
	~<libc/ˇgboŸ.h
>

44 
	~<c⁄fig.h
>

45 
	~<drv_c⁄fig.h
>

46 
	~<libc/°dio.h
>

47 
	~<libc/ac˚ss.h
>

48 
	~<libc/sy°em.h
>

49 
	~<libc/°rög.h
>

50 
	~<µc/µc85xx.h
>

51 
	~<µc/mmuE500Lib.h
>

52 
	~<µc/toﬁPpc.h
>

53 
	~<µc/excPpcLib.h
>

54 
	~<libc/gpio.h
>

55 
	~"sysL2Cache.h
"

56 
	~"../drivî/devi˚/pcõ/pcõ.h
"

58 
	#CACHE_LIBRARY_MODE
 (
CACHE_COPYBACK
 | 
CACHE_SNOOP_ENABLE
)

	)

59 
	#CAM_DRAM_CACHE_MODE
 
_MMU_TLB_ATTR_M


	)

60 
	#TLB_CACHE_MODE
 (
VM_STATE_CACHEABLE
 | 
VM_STATE_MEM_COHERENCY
)

	)

66 
	mINSTRUCTION_CACHE
 = 
_INSTRUCTION_CACHE
,

67 
	mDATA_CACHE
 = 
_DATA_CACHE


68 } 
	tCACHE_TYPE
;

71 c⁄° 
TLB_ENTRY_DESC
 
	gsysSèticTlbDesc
 [] = {

78 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

79 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

80 
_MMU_TLB_ATTR_M


86 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

87 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

88 
_MMU_TLB_ATTR_M


94 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

95 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

96 
_MMU_TLB_ATTR_M


102 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

103 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

104 
_MMU_TLB_ATTR_M


111 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

112 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

113 
_MMU_TLB_ATTR_M


118 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

119 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

120 
_MMU_TLB_ATTR_M


126 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

127 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

128 
_MMU_TLB_ATTR_M


134 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

135 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

136 
_MMU_TLB_ATTR_M


141 
_CAG_CONFIG_FPGA_ADDR
, 0x0, _CAG_CONFIG_FPGA_ADDR,

142 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64K
 | 
_MMU_TLB_ATTR_I
 |

143 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


147 
_CAG_CONFIG_SRAM_ADDR
, 0x0, _CAG_CONFIG_SRAM_ADDR,

148 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

149 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


153 
FPGA_PCIE2_BAR_BASE
, 0x0, FPGA_PCIE2_BAR_BASE,

154 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

155 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


159 
FPGA_PCIE1_BAR_BASE
, 0x0, FPGA_PCIE1_BAR_BASE,

160 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

161 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


165 
_CAG_CONFIG_FLASH_BASE_ADRS
, 0x0, _CAG_CONFIG_FLASH_BASE_ADRS,

166 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
 | 
_MMU_TLB_IPROT
 |

167 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_ATTR_I
 |

168 
_MMU_TLB_ATTR_G


172 
_CAG_CONFIG_CCSBAR
, 0x0, _CAG_CONFIG_CCSBAR,

173 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

174 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_IPROT


178 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
 | 
_MMU_TLB_PERM_W
 |

179 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

180 
_MMU_TLB_ATTR_M


184 c⁄° 
TLB_ENTRY_DESC
 
	gsysSèticTlbDesc1
 [] = {

190 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

191 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

192 
_MMU_TLB_ATTR_M


197 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

198 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

199 
_MMU_TLB_ATTR_M


205 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

206 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

207 
_MMU_TLB_ATTR_M


213 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

214 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

215 
_MMU_TLB_ATTR_M


221 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

222 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

223 
_MMU_TLB_ATTR_M


227 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

228 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

229 
_MMU_TLB_ATTR_M


235 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

236 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

237 
_MMU_TLB_ATTR_M


243 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

244 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

245 
_MMU_TLB_ATTR_M


254 
_CAG_CONFIG_FPGA_ADDR
, 0x0, _CAG_CONFIG_FPGA_ADDR,

255 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64K
 | 
_MMU_TLB_ATTR_I
 |

256 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


260 
_CAG_CONFIG_SRAM_ADDR
, 0x0, _CAG_CONFIG_SRAM_ADDR,

261 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

262 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


266 
FPGA_PCIE2_BAR_BASE
, 0x0, FPGA_PCIE2_BAR_BASE,

267 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

268 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


272 
FPGA_PCIE1_BAR_BASE
, 0x0, FPGA_PCIE1_BAR_BASE,

273 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

274 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


278 
_CAG_CONFIG_FLASH_BASE_ADRS
, 0x0, _CAG_CONFIG_FLASH_BASE_ADRS,

279 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
 | 
_MMU_TLB_IPROT
 |

280 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_ATTR_I
 |

281 
_MMU_TLB_ATTR_G


285 
_CAG_CONFIG_CCSBAR
, 0x0, _CAG_CONFIG_CCSBAR,

286 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

287 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_IPROT


291 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
| 
_MMU_TLB_PERM_W
 |

292 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

293 
_MMU_TLB_ATTR_M


297 c⁄° 
TLB_ENTRY_DESC
 
	gsysSèticTlbDesc2
 [] = {

303 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

304 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

305 
_MMU_TLB_ATTR_M


310 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

311 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

312 
_MMU_TLB_ATTR_M


318 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

319 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

320 
_MMU_TLB_ATTR_M


326 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

327 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

328 
_MMU_TLB_ATTR_M


334 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

335 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

336 
_MMU_TLB_ATTR_M


341 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

342 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

343 
_MMU_TLB_ATTR_M


349 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

350 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

351 
_MMU_TLB_ATTR_M


357 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_16M
 | 
_MMU_TLB_PERM_W
 |

358 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

359 
_MMU_TLB_ATTR_M


367 
_CAG_CONFIG_FPGA_ADDR
, 0x0, _CAG_CONFIG_FPGA_ADDR,

368 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64K
 | 
_MMU_TLB_ATTR_I
 |

369 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


373 
_CAG_CONFIG_SRAM_ADDR
, 0x0, _CAG_CONFIG_SRAM_ADDR,

374 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

375 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


379 
FPGA_PCIE2_BAR_BASE
, 0x0, FPGA_PCIE2_BAR_BASE,

380 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

381 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


385 
FPGA_PCIE1_BAR_BASE
, 0x0, FPGA_PCIE1_BAR_BASE,

386 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_256M
 | 
_MMU_TLB_ATTR_I
 |

387 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_PERM_W


391 
_CAG_CONFIG_FLASH_BASE_ADRS
, 0x0, _CAG_CONFIG_FLASH_BASE_ADRS,

392 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
 | 
_MMU_TLB_IPROT
 |

393 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_PERM_X
 | 
_MMU_TLB_ATTR_I
 |

394 
_MMU_TLB_ATTR_G


398 
_CAG_CONFIG_CCSBAR
, 0x0, _CAG_CONFIG_CCSBAR,

399 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_1M
 | 
_MMU_TLB_ATTR_I
 |

400 
_MMU_TLB_ATTR_G
 | 
_MMU_TLB_PERM_W
 | 
_MMU_TLB_IPROT


404 
_MMU_TLB_TS_0
 | 
_MMU_TLB_SZ_64M
 | 
_MMU_TLB_PERM_W
 |

405 
_MMU_TLB_PERM_X
 | 
CAM_DRAM_CACHE_MODE
 |
_MMU_TLB_IPROT
|

406 
_MMU_TLB_ATTR_M


412 
	gsysSèticTlbDescNumE¡
 = ()
NELEMENTS
 (
sysSèticTlbDesc
);

415 
UINT32
 
	ge500E¨lyM≠TlbId
 = 0;

416 
UINT32
 
	ge500ImaTlbC¡
 = 2;

420 
IMPORT
 
UINT8
 
	ged©a
[];

421 
IMPORT
 
UINT8
 
	gíd
[];

422 
IMPORT
 
	g_ˇg_kî√l_d©a_°¨t
[];

426 
UINT32
 
	gµcE500ICACHE_LINE_NUM
 = (128 * 12);

427 
UINT32
 
	gµcE500DCACHE_LINE_NUM
 = (128 * 12);

428 
UINT32
 
	gµcE500DCACHE_FLUSH_NUM
;

429 
UINT32
 
	gµcE500CACHE_ALIGN_SIZE
 = 32;

430 * 
	gˇchePpcRódOrigö
;

433 
IMPORT
 
	gl2CacheLöeNum
;

434 
IMPORT
 
mmuE500TlbDy«micInvÆid©e
();

435 
IMPORT
 
mmuE500TlbSèticInvÆid©e
();

436 
IMPORT
 
mmuE500TlbSèticInô
 (
numDescs
, 
TLB_ENTRY_DESC
 *
pTlbDesc
, 
BOOL
 
ˇcheAŒow
);

438 
IMPORT
 
sysSdaInô
 ();

439 
IMPORT
 
sysCpuLibInô
 ();

441 
IMPORT
 
sysE«bÀBP
();

442 
IMPORT
 
sysDißbÀBP
();

443 
IMPORT
 
sysL2CacheInô
();

444 
IMPORT
 
excVecInô
 (
FUNCPTR
 * 
ba£Addr
);

445 
IMPORT
 
STATUS
 
ˇcheArchE«bÀ
 (
CACHE_TYPE
 
ˇche
);

447 
IMPORT
 
sysL1C§1Së
(
UINT32
);

448 
IMPORT
 
UINT32
 
sysL2CTLSë
(UINT32 
vÆue
, 
VUINT32
 *
addr
);

449 
IMPORT
 
u§Shñl
();

450 
IMPORT
 
•eExcInô
 ();

451 
IMPORT
 
sysMiscInô
();

452 
IMPORT
 
sysB™√r
();

453 
IMPORT
 
sysOs
();

454 
IMPORT
 
ns16550DevInô
();

456 
IMPORT
 
öt32_t
 
fs_öô
(öt32_à
Êash
, i¡32_à
dfsid
, i¡32_à
fs
);

457 
IMPORT
 
dfs_öô
();

458 
IMPORT
 
iic_öô
();

459 
IMPORT
 
n‹_öô
();

460 
IMPORT
 
Âga_Êash_öô
();

461 
IMPORT
 
•i_öô
();

462 
IMPORT
 
ã°_ã°
();

463 
IMPORT
 
INT32
 
fs_mou¡
(INT32 
ty≥
);

464 
IMPORT
 
	gsffs_idx
;

465 
IMPORT
 
	gsffs_idx2
;

466 
IMPORT
 
	gsffs_idx3
;

467 
IMPORT
 
	gdfd
;

468 
IMPORT
 
	gdfd2
;

469 
IMPORT
 
	gdfd3
;

471 #i‡
deföed
(
SFFS_MULTI_DEVICE
Ë&& deföed(
CONFIG_DEMO
)

472 
IMPORT
 
sffs_mu…i_demo
();

477 
LOCAL
 
sysL1CacheQuîy
();

481 
	#HID0_MCP
 0x80000000

	)

482 
	#HID1_ABE
 0x00001000

	)

483 
	#HID1_ASTME
 0x00002000

	)

484 
	#HID1_RXFE
 0x00020000

	)

500 
	$sysCpuSèπ
 ()

502 
l2CacheLöeNum
 = ((2048 + 4096Ë* 
L2_CACHE_SIZE
);

506 
	`sysL1C§1Së
(
	`sysL1CSR1Gë
() & ~0x1);

510 
ˇchePpcRódOrigö
 = (*Ë&
_ˇg_kî√l_d©a_°¨t
;

514 
	`sysHid0Së
(
_PPC_HID0_MAS7EN
|
	`sysHid0Gë
());

518 
	`sysHid0Së
(
HID0_MCP
 | 
	`sysHid0Gë
());

522 
	`sysT¸Së
 (
	`sysT¸Gë
(Ë& ~ (
_PPC_TCR_DIE
));

526 
	`sysDecSë
 (0);

527 
	`sysDeˇrSë
 (0);

531 
	`sysT§Së
 (
_PPC_TSR_DIS
);

533 
	`sysL1CacheQuîy
();

535 
µcE500DCACHE_FLUSH_NUM
 = 
µcE500DCACHE_LINE_NUM
;

537 #i‡
	`deföed
(
_CAG_CONFIG_AMP0
)

539 
	`sysL2CTLSë
(0, 
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

547 #i‡!
	`deföed
(
_CAG_CONFIG_AMP0
)

548 
	`sysTlbUnm≠AŒ
 (2, 15);

550 
	`mmuE500TlbSèticInvÆid©e
();

553 
	`mmuE500TlbSèticInô1
(2,
sysSèticTlbDescNumE¡
+1, &
sysSèticTlbDesc
[1], 
TRUE
);

556 
	`sysHid1Së
(
HID1_ABE
);

560 
	`sysL2CacheInô
();

564 
	`sysHid1Së
 (
	`sysHid1Gë
()| 
HID1_ASTME
 | 
HID1_RXFE
);

566 #ifde‡
_CAG_SPE_SUPPORT


567 
	`•eExcInô
 ();

570 
	`sysE«bÀBP
();

572 
	`sysMiscInô
();

574 
	`_CAG_ASM
("isync");

580 
	}
}

592 
	$sysRoŸ
 ()

594 #i‡
_CAG_CONFIG_SHELL
 == 1

595 
	`u§Shñl
();

598 #ifde‡
_CAG_CONFIG_KERNEL


599 
	`¥ötf
("Archánd hardware init finish\n");

600 
	`¥ötf
("enterÅhe cagOS kernel...\n");

601 
	`sysOs
();

603 
	}
}

619 
	$˛órBss
()

621 
ˇg_kî√l_bss_°¨t
[];

622 
ˇg_kî√l_bss_íd
[];

624 
	`mem£t
(
ˇg_kî√l_bss_°¨t
, 0,

625 
ˇg_kî√l_bss_íd
 - 
ˇg_kî√l_bss_°¨t
);

626 
	}
}

630 
	$sysDevi˚Inô
()

632 
	`¥ötf
("...sysDeviceInit\n");

633 #i‡
	`deföed
(
_CAG_CONFIG_AMP1
)

634 
	`sysPúSë
(1);

637 
	`dfs_öô
();

639 #ifde‡
FSL_BOARD


640 #ifde‡
CONFIG_IIC


641 
	`iic_öô
();

643 #ifde‡
CONFIG_SPI_FLASH


644 
	`¥ötf
("Spi init\n");

645 
	`•i_öô
();

649 #ifde‡
CONFIG_NOR_FLASH


650 
	`¥ötf
("Nor init\n");

651 
	`n‹_öô
();

654 #ifde‡
CONFIG_FPGA_FLASH


655 
	`Âga_Êash_öô
();

658 #i‡
	`deföed
(
_CAG_CONFIG_AMP1
)

659 #ifde‡
CONFIG_FS


660 
	`¥ötf
("fs Init\n");

661 #i‡
	`deföed
(
SFFS_NOR
)

663 
sffs_idx
 = 
	`fs_öô
(0,
dfd
,0);

664 #i‡
deföed
 
SFFS_MULTI_DEVICE


665 
sffs_idx2
 = 
	`fs_öô
(0,
dfd2
,0);

667 
sffs_idx
 = 
	`fs_öô
(0,
dfd
,0);

669 #ñi‡
	`deföed
 (
SFFS_FPGA_SPI
)

670 
sffs_idx3
 = 
	`fs_öô
(1,
dfd3
,0);

671 
	`¥ötf
("sff†%d\n",
sffs_idx3
);

676 
	}
}

691 
	gsysE¡ry


693 
	g°¨tTy≥


697 
_CAG_ASM
 ("");

698 
sysSdaInô
 ();

699 
_CAG_ASM
 ("");

701 
excVecInô
 ((
FUNCPTR
 *Ë
VEC_BASE_ADRS
);

703 
sysCpuLibInô
();

705 
sysCpuSèπ
 ();

707 
ns16550DevInô
();

709 #i‡!
deföed
(
_CAG_CONFIG_AMP0
)

710 
ˇcheArchE«bÀ
 (
INSTRUCTION_CACHE
);

711 
ˇcheArchE«bÀ
 (
DATA_CACHE
);

714 
sysB™√r
();

716 
sysDevi˚Inô
();

718 
sysRoŸ
();

732 
LOCAL
 
	$sysL1CacheQuîy
 ()

734 
UINT32
 
ãmp
;

735 
UINT32
 
Æign
;

736 
UINT32
 
ˇchesize
;

738 
ãmp
 = 
	`sysL1CFG0Gë
();

740 
ˇchesize
 = (
ãmp
 & 0xFF) << 10;

742 
Æign
 = (
ãmp
 >> 23) & 0x3;

744 
Æign
) {

746 
µcE500CACHE_ALIGN_SIZE
 = 32;

749 
µcE500CACHE_ALIGN_SIZE
 = 64;

752 
µcE500CACHE_ALIGN_SIZE
 = 32;

756 
µcE500DCACHE_LINE_NUM
 = (
ˇchesize
 / 
µcE500CACHE_ALIGN_SIZE
);

757 
µcE500ICACHE_LINE_NUM
 = (
ˇchesize
 / 
µcE500CACHE_ALIGN_SIZE
);

765 
µcE500DCACHE_LINE_NUM
 = (3 *ÖpcE500DCACHE_LINE_NUM) >> 1;

766 
µcE500ICACHE_LINE_NUM
 = (3 *ÖpcE500ICACHE_LINE_NUM) >> 1;

768 
	}
}

770 
	gmmu_°©
 = 1;

772 
	$os_gë_mmu
()

775 
	}
}

777 
	$os_gë_mno
()

779  
mmu_°©
;

780 
	}
}

782 
	$os_upd©e_mno
()

784 
mmu_°©
 = (mmu_stat +1)%3;

786 
	}
}

789 
	$os_ch™ge_mmu
()

791 
	`os_gë_mno
()) {

793 
	`mmuE500TlbSèticInvÆid©e
();

794 
	`mmuE500TlbSèticInô1
(0,
sysSèticTlbDescNumE¡
, &
sysSèticTlbDesc
[0], 
TRUE
);

797 
	`mmuE500TlbSèticInvÆid©e
();

798 
	`mmuE500TlbSèticInô1
(0,
sysSèticTlbDescNumE¡
, &
sysSèticTlbDesc1
[0], 
TRUE
);

801 
	`mmuE500TlbSèticInvÆid©e
();

802 
	`mmuE500TlbSèticInô1
(0,
sysSèticTlbDescNumE¡
, &
sysSèticTlbDesc2
[0], 
TRUE
);

811 
	`mmuE500TlbSèticInvÆid©e
();

812 
	`mmuE500TlbSèticInô1
(
sysSèticTlbDescNumE¡
,sysSèticTlbDescNumE¡, &
sysSèticTlbDesc1
[0], 
TRUE
);

815 
	`mmuE500TlbSèticInvÆid©e
();

816 
	`mmuE500TlbSèticInô1
(
sysSèticTlbDescNumE¡
,sysSèticTlbDescNumE¡, &
sysSèticTlbDesc
[0], 
TRUE
);

820 
	`powîpcI¡DißbÀ
();

821 
	`¥ötf
("fault\n");

825 
	}
}

	@start/sysGpio.c

28 
	~<c⁄fig.h
>

29 
	~<libc/gpio.h
>

31 
	tUINT32
;

32 sig√d 
	tINT32
;

33 
	tUINT16
;

34 sig√d 
	tINT16
;

35 
	tUINT8
;

36 sig√d 
	tINT8
;

37 
	tUINT64
;

38 sig√d 
	tINT64
;

40 vﬁ©ûê
	tVCHAR
;

41 vﬁ©ûê
	tVINT32
;

42 vﬁ©ûê
	tVINT16
;

43 vﬁ©ûê
	tVINT8
;

44 vﬁ©ûê
	tVUINT32
;

45 vﬁ©ûê
	tVUINT16
;

46 vﬁ©ûê
	tVUINT8
;

73 
	gsysGpioLöeC⁄fig


75 
UINT8
 
	glöeNo
,

76 
UINT32
 
	g°yÀ


79 
VUINT32
 
	ggpioDúReg
;

80 
VUINT32
 
	götMaskReg
;

81 
VUINT32
 
	götCålReg
;

82 
VUINT32
 
	ggpioO≥nDøöReg
;

84 
	gGPIO_KEYDECLARE
;

86 i‡(
	glöeNo
 > 
	gGPIO_PIN_MAX
)

89 
GPIO_REG_READ
(
GPDIR
, 
gpioDúReg
);

90 
GPIO_REG_READ
(
GPODR
, 
gpioO≥nDøöReg
);

91 
GPIO_REG_READ
(
GPICR
, 
ötCålReg
);

92 
GPIO_REG_READ
(
GPIMR
, 
ötMaskReg
);

94 i‡(
	g°yÀ
 & 
	gGPIO_OUT
) {

95 
	ggpioDúReg
 |(0x80000000 >> 
löeNo
);

97 i‡(
	g°yÀ
 & 
	gGIPO_OD
)

98 
	ggpioO≥nDøöReg
 |(0x80000000 >> 
löeNo
);

100 
	ggpioO≥nDøöReg
 &~(0x80000000 >> 
löeNo
);

102 
	ggpioDúReg
 &~(0x80000000 >> 
löeNo
);

104 i‡(
	g°yÀ
 & 
	gGPIO_INT
) {

105 i‡(
	g°yÀ
 & 
	gGPIO_INT_FAIL_TRIG
)

106 
	götCålReg
 |(0x80000000 >> 
löeNo
);

107 i‡(
	g°yÀ
 & 
	gGPIO_INT_LEVEL_TRIG
)

108 
	götCålReg
 &~(0x80000000 >> 
löeNo
);

112 
	götMaskReg
 &~(0x80000000 >> 
löeNo
);

116 
GPIO_INTLOCK
 (
GPIO_KEYDECLARE
);

120 
GPIO_REG_WRITE
(
GPDIR
, 
gpioDúReg
);

121 
GPIO_REG_WRITE
(
GPODR
, 
gpioO≥nDøöReg
);

122 
GPIO_REG_WRITE
(
GPICR
, 
ötCålReg
);

123 
GPIO_REG_WRITE
(
GPIMR
, 
ötMaskReg
);

125 
GPIO_INTUNLOCK
 (
GPIO_KEYDECLARE
);

144 
	gsysGpioLöeGë


146 
UINT32
 * 
	ggpioD©a
,

147 
UINT8
 
	glöeNo


150 i‡((
	glöeNo
 > 
	gGPIO_PIN_MAX
Ë|| (
	ggpioD©a
 =
NULL
))

153 
GPIO_REG_READ
(
GPDAT
, *
gpioD©a
);

155 *
	ggpioD©a
 = (*
gpioD©a
 >> (31 - 
löeNo
)) & 0x01;

173 
	gsysGpioLöeSë


175 
UINT8
 
	glöeNo
,

176 
UINT8
 
	gvÆue


179 
UINT32
 
	ggpioD©a
;

181 i‡(
	glöeNo
 > 
	gGPIO_PIN_MAX
)

184 
GPIO_REG_READ
(
GPDAT
, 
gpioD©a
);

186 i‡(
	gvÆue
 =
GPIO_HIGH
) {

187 
gpioD©a
 |(0x80000000 >> 
löeNo
);

188 } i‡(
	gvÆue
 =
GPIO_LOW
) {

189 
gpioD©a
 &~(0x80000000 >> 
löeNo
);

192 
GPIO_REG_WRITE
(
GPDAT
, 
gpioD©a
);

211 
	gsysGpioI¡SètusGë


213 
UINT8
 
	glöeNo
,

214 * 
	g°©us


217 vﬁ©ûê
UINT32
 
	götSètusReg
;

219 i‡(
	glöeNo
 > 
	gGPIO_PIN_MAX
)

222 i‡(
	g°©us
 == 0)

225 
GPIO_REG_READ
(
GPIER
, 
ötSètusReg
);

227 *
	g°©us
 = ((
ötSètusReg
 & (0x80000000 >> 
löeNo
)) != 0);

244 
	gsysGpioI¡SètusCÀ¨


246 
UINT8
 
	glöeNo


249 
UINT32
 
	götSètusCÃ
;

251 i‡(
	glöeNo
 > 
	gGPIO_PIN_MAX
)

254 
	götSètusCÃ
 = (0x80000000 >> 
löeNo
);

258 
GPIO_REG_WRITE
(
GPIER
, 
ötSètusCÃ
);

277 
	$sysGpioRe£t
 ()

279 
GPIO_KEYDECLARE
;

281 
	`GPIO_INTLOCK
 (
GPIO_KEYDECLARE
);

283 
	`GPIO_REG_WRITE
(
GPDIR
, 0x00);

284 
	`GPIO_REG_WRITE
(
GPODR
, 0x00);

285 
	`GPIO_REG_WRITE
(
GPDAT
, 0x00);

286 
	`GPIO_REG_WRITE
(
GPIMR
, 0x00);

287 
	`GPIO_REG_WRITE
(
GPIER
, 0xffff0000);

288 
	`GPIO_REG_WRITE
(
GPICR
, 0x00);

290 
	`GPIO_INTUNLOCK
 (
GPIO_KEYDECLARE
);

293 
	}
}

310 
	gsysGpioDúGë


312 
UINT8
 
	glöeNo
,

313 
UINT8
 * 
	ggpioDú


316 
VUINT32
 
	ggpioDúReg
;

317 
UINT32
 
	gshi·î
;

319 i‡((
	glöeNo
 > 
	gGPIO_PIN_MAX
Ë|| ( 
	ggpioDú
 =
NULL
))

322 
GPIO_REG_READ
(
GPDIR
, 
gpioDúReg
);

324 
	gshi·î
 = (0x80000000 >> 
löeNo
);

326 i‡(
	gshi·î
 & 
	ggpioDúReg
) {

327 *
	ggpioDú
 = 0x01;

329 *
	ggpioDú
 = 0x00;

	@start/sysL2Cache.c

38 
	~<libc/ˇgboŸ.h
>

39 
	~<c⁄fig.h
>

40 
	~<libc/°dio.h
>

41 
	~<libc/ac˚ss.h
>

42 
	~<libc/sy°em.h
>

43 
	~"sysL2Cache.h
"

47 
IMPORT
 
VOIDFUNCPTR
 
	g_pSysL2CacheInvFunc
;

48 
IMPORT
 
VOIDFUNCPTR
 
	g_pSysL2CacheE«bÀ
;

49 
IMPORT
 
VOIDFUNCPTR
 
	g_pSysL2CacheDißbÀ
;

50 
IMPORT
 
VOIDFUNCPTR
 
	g_pSysL2CacheFlush
;

51 
IMPORT
 
UINT32
 
sysL2CTLGë
(
VUINT32
 *);

52 
IMPORT
 
sysL2CTLSë
(
UINT32
,
VUINT32
*);

53 
IMPORT
 * 
	gˇchePpcRódOrigö
;

54 
IMPORT
 
UINT32
 
	gµcE500DCACHE_LINE_NUM
;

55 
IMPORT
 
UINT32
 
	gµcE500CACHE_ALIGN_SIZE
;

57 
LOCAL
 
sysL2CacheInvFunc
();

58 
LOCAL
 
sysL2CacheE«bÀ
();

59 
LOCAL
 
sysL2CacheDißbÀ
();

60 
LOCAL
 
sysL2CacheFlush
();

61 
IMPORT
 
sysCacheFlush
(
UINT32
,*,UINT32);

64 
	gl2CacheLöeNum
 = ((4096 + 8192Ë* 
L2_CACHE_SIZE
);

78 
	$sysL2CacheInô
()

80 vﬁ©ûê
UINT32
 
l2CéVÆ
;

81 
n
;

84 
l2CéVÆ
 = 
	`sysL2CTLGë
(
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

86 
	`sysL2CTLSë
(
l2CéVÆ
&(~
M85XX_L2CTL_L2E_MSK
),
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

88 
_pSysL2CacheInvFunc
 = (
VOIDFUNCPTR
)
sysL2CacheInvFunc
;

89 
_pSysL2CacheE«bÀ
 = 
sysL2CacheE«bÀ
;

90 
_pSysL2CacheDißbÀ
 = 
sysL2CacheDißbÀ
;

91 
_pSysL2CacheFlush
 = 
sysL2CacheFlush
;

94  
n
=0 ;Ç < 
NO_L2_EXT_WRITE_REGIONS
 ;Ç++) {

95 *
	`M85XX_L2CEWARn
(
_CAG_CONFIG_CCSBAR
,
n
) = 0;

96 *
	`M85XX_L2CEWCRn
(
_CAG_CONFIG_CCSBAR
,
n
) = 0;

99 
	}
}

113 
LOCAL
 
	$sysL2CacheInvFunc
 ()

115 vﬁ©ûê
UINT32
 
l2CéVÆ
;

118 
l2CéVÆ
 = 
	`sysL2CTLGë
(
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

120 
l2CéVÆ
 |
M85XX_L2CTL_L2I_MSK
;

122 
	`sysL2CTLSë
(
l2CéVÆ
,
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

123 
	`sysL2CTLGë
(
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
)Ë& 
M85XX_L2CTL_L2I_MSK
);

125 
	}
}

137 
LOCAL
 
	$sysL2CacheE«bÀ
 ()

139 vﬁ©ûê
UINT32
 
l2CéVÆ
;

141 
l2CéVÆ
 = 
	`sysL2CTLGë
(
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

143 
l2CéVÆ
 |
M85XX_L2CTL_L2E_MSK
 ;

145 
	`sysL2CTLSë
(
l2CéVÆ
,
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

146 
	}
}

158 
LOCAL
 
	$sysL2CacheDißbÀ
 ()

160 vﬁ©ûê
UINT32
 
l2CéVÆ
;

163 
l2CéVÆ
 = 
	`sysL2CTLGë
(
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

164 
l2CéVÆ
 &~((
UINT32
)
M85XX_L2CTL_L2E_MSK
);

166 
	`sysL2CTLSë
(
l2CéVÆ
,
	`M85XX_L2CTL
(
_CAG_CONFIG_CCSBAR
));

167 
	}
}

181 
LOCAL
 
	$sysL2CacheFlush
 ()

183 
noOfCacheLöes
;

185 
noOfCacheLöes
 = (
µcE500DCACHE_LINE_NUM
 + 
l2CacheLöeNum
 );

187 
	`sysCacheFlush
(
noOfCacheLöes
,
ˇchePpcRódOrigö
, 
µcE500CACHE_ALIGN_SIZE
);

189 
	}
}

	@start/sysL2Cache.h

34 
	#M85XX_L2CTL
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20000)))

	)

36 
	#NO_L2_EXT_WRITE_REGIONS
 4

	)

37 
	#M85XX_L2CEWARn
(
x
,
n
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20010Ë+ (¿* 0x10)))

	)

38 
	#M85XX_L2CEWCRn
(
x
,
n
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20018Ë+ (¿* 0x10)))

	)

40 
	#M85XX_L2SRBAR0
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20100)))

	)

41 
	#M85XX_L2SRBAR1
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20108)))

	)

42 
	#M85XX_L2ERRINJHI
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E00)))

	)

43 
	#M85XX_L2ERRINJLO
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E04)))

	)

44 
	#M85XX_L2ERRINJCTL
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E08)))

	)

45 
	#M85XX_L2ERRCAPTDATAHI
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E20)))

	)

46 
	#M85XX_L2ERRCAPTDATALO
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E24)))

	)

47 
	#M85XX_L2ERRCAPTECC
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E28)))

	)

48 
	#M85XX_L2ERRDET
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E40)))

	)

49 
	#M85XX_L2ERRDIS
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E44)))

	)

50 
	#M85XX_L2ERRINTEN
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E48)))

	)

51 
	#M85XX_L2ERRATTR
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E4C)))

	)

52 
	#M85XX_L2ERRADDR
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E50)))

	)

53 
	#M85XX_L2ERRCTL
(
x
Ë(
	`CAST
(
VUINT32
 *)((x + 0x20E58)))

	)

56 
	#M85XX_L2CTL_L2E_MSK
 0x80000000

	)

57 
	#M85XX_L2CTL_L2E_BIT
 31

	)

58 
	#M85XX_L2CTL_L2I_MSK
 0x40000000

	)

59 
	#M85XX_L2CTL_L2I_BIT
 30

	)

60 
	#M85XX_L2CTL_L2SIZ_MSK
 0x30000000

	)

61 
	#M85XX_L2CTL_L2SIZ_BIT
 28

	)

64 
	#L2SIZ_1024KB
 3

	)

65 
	#L2SIZ_512KB
 2

	)

66 
	#L2SIZ_256KB
 1

	)

67 
	#L2SIZ_0KB
 0

	)

69 
	#M85XX_L2CTL_L2DO_MSK
 0x00400000

	)

70 
	#M85XX_L2CTL_L2DO_BIT
 22

	)

71 
	#M85XX_L2CTL_L2IO_MSK
 0x00200000

	)

72 
	#M85XX_L2CTL_L2IO_BIT
 21

	)

73 
	#M85XX_L2CTL_L2MEXTDIS_MSK
 0x00100000

	)

74 
	#M85XX_L2CTL_L2MEXTDIS_BIT
 20

	)

75 
	#M85XX_L2CTL_L2INTDIS_MSK
 0x00080000

	)

76 
	#M85XX_L2CTL_L2INTDIS_BIT
 19

	)

77 
	#M85XX_L2CTL_L2SRAM_MSK
 0x00070000

	)

78 
	#M85XX_L2CTL_L2SRAM_BIT
 16

	)

79 
	#M85XX_L2CTL_L2LO_MSK
 0x00002000

	)

80 
	#M85XX_L2CTL_L2LO_BIT
 13

	)

81 
	#M85XX_L2CTL_L2SLC_MSK
 0x00001000

	)

82 
	#M85XX_L2CTL_L2SLC_BIT
 12

	)

83 
	#M85XX_L2CTL_L2LFR_MSK
 0x00000400

	)

84 
	#M85XX_L2CTL_L2LFR_BIT
 10

	)

85 
	#M85XX_L2CTL_L2LFRID_MSK
 0x00000300

	)

86 
	#M85XX_L2CTL_L2LFRID_BIT
 8

	)

89 
	#M85XX_L2CEWAR_ADDR_MSK
 0xFFFFFF00

	)

92 
	#M85XX_L2CEWCR_E_MSK
 0x80000000

	)

93 
	#M85XX_L2CEWCR_E_BIT
 31

	)

94 
	#M85XX_L2CEWCR_LOCK_MSK
 0x40000000

	)

95 
	#M85XX_L2CEWCR_LOCK_BIT
 30

	)

96 
	#M85XX_L2CEWCR_SIZMASK_MSK
 0x00FFFFFF

	)

97 
	#M85XX_L2CEWCR_SIZMASK_BIT
 0

	)

100 
	#M85XX_L2SRBAR_ADDR_MSK
 0xFFFFC000

	)

101 
	#M85XX_L2SRBAR_ADDR_BIT
 14

	)

	@start/sysLaw.c

13 
	~<libc/ˇgboŸ.h
>

14 
	~<c⁄fig.h
>

15 
	~<p1020rdb.h
>

16 
	~<libc/°dio.h
>

17 
	~<libc/ac˚ss.h
>

18 
	~<libc/sy°em.h
>

19 
	~<libc/°rög.h
>

20 
	~<µc/µc85xx.h
>

21 
	~<µc/mmuE500Lib.h
>

22 
	~<µc/toﬁPpc.h
>

25 
	#QORIQ_TGTID_DPAA
 0x0E

	)

26 
	#QORIQ_TGTID_PCIE1
 0x02

	)

27 
	#QORIQ_TGTID_PCIE2
 0x01

	)

28 
	#QORIQ_TGTID_PCIE3
 0x03

	)

29 
	#QORIQ_TGTID_ELBC
 0x04

	)

30 
	#QORIQ_TGTID_DDR
 0x0F

	)

31 
	#QORIQ_LAWAR_ENABLE
 0x80000000

	)

32 
	#QORIQ_LAWAR_TGTID
 0x01F00000

	)

34 
	#M85XX_LAW_CNT
 12

	)

35 
	#M85XX_LAW_SIZE
 0x20

	)

36 
	#LAWBAR_ADRS_SHIFT
 12

	)

40 
	#FLASH_BASE_PART0_P1023
 0xFC000000

	)

41 
	#FLASH_BASE_PART0_DEFAULT
 0xFF000000

	)

42 
	#FLASH_BASE_PART1
 0xFF800000

	)

43 
	#FLASH_SIZE_P1023
 0x04000000

	)

44 
	#FLASH_SIZE_DEFAULT
 0x01000000

	)

45 
	#FLASH_SIZE_PART0_P1023
 0x03000000

	)

46 
	#FLASH_SIZE_PART0_DEFAULT
 0x00600000

	)

47 
	#FLASH_SIZE_PART1
 0x00800000

	)

48 
	#ROM_SIZE
 0x00100000

	)

62 
UINT32
 
	gœwRegi°îTabÀ
 [][2] = {

65 
_CAG_CONFIG_FLASH_BASE_ADRS
>> 12,

66 (
QORIQ_TGTID_ELBC
 << 20Ë| 
LAWAR_SIZE_64MB
 | 
QORIQ_LAWAR_ENABLE


70 
_CAG_CONFIG_SRAM_ADDR
>> 12,

71 (
QORIQ_TGTID_ELBC
 << 20Ë| 
LAWAR_SIZE_1MB
 | 
QORIQ_LAWAR_ENABLE


75 
_CAG_CONFIG_FPGA_ADDR
 >> 12,

76 (
QORIQ_TGTID_ELBC
 << 20Ë| 
LAWAR_SIZE_64KB
 | 
QORIQ_LAWAR_ENABLE


87 
	gœwNum
 = 
NELEMENTS
(
œwRegi°îTabÀ
);

100 
LOCAL
 
	$c‹eLawB¨Së
 ()

102 
i
;

103 
œwIndex
;

104 
UINT32
 
tgtID
[
M85XX_LAW_CNT
][2];

105 
VUINT32
 * 
œwBARn
;

106 
VUINT32
 * 
œwARn
;

108 
œwIndex
 = 0;

109 
	`bzîo
(
tgtID
, (tgtID));

111 
i
 = 0; i < 
M85XX_LAW_CNT
; i++ ) {

112 
œwARn
 = (
VUINT32
 *)((
UINT32
)
	`M85XX_LAWAR0
(
_CAG_CONFIG_CCSBAR
Ë+ 
i
 * 
M85XX_LAW_SIZE
);

113 
œwBARn
 = (
UINT32
 *)((UINT32)
	`M85XX_LAWBAR0
(
_CAG_CONFIG_CCSBAR
Ë+ 
i
 * 
M85XX_LAW_SIZE
);

114 i‡(*
œwARn
 & 
QORIQ_LAWAR_ENABLE
)

115 
tgtID
[
i
][0] = *
œwBARn
;

116 
tgtID
[
i
][1] = *
œwARn
 & 
QORIQ_LAWAR_TGTID
;

119 
íåy
:

120 
i
 = 0; i < 
M85XX_LAW_CNT
; i++ ) {

122 i‡–
tgtID
[
i
][0] =
œwRegi°îTabÀ
[
œwIndex
][0] &&

123 (
tgtID
[
i
][1] =(
œwRegi°îTabÀ
[
œwIndex
][1] & 
QORIQ_LAWAR_TGTID
))) {

124 
œwIndex
++;

126 i‡(
œwIndex
 =
œwNum
)

130 
i
 = 0; i < 
M85XX_LAW_CNT
; i++ ) {

131 
œwARn
 = (
VUINT32
 *)((
UINT32
)
	`M85XX_LAWAR0
(
_CAG_CONFIG_CCSBAR
Ë+ 
i
 * 
M85XX_LAW_SIZE
);

132 
œwBARn
 = (
VUINT32
 *)((
UINT32
)
	`M85XX_LAWBAR0
(
_CAG_CONFIG_CCSBAR
Ë+ 
i
 * 
M85XX_LAW_SIZE
);

134 i‡(*
œwARn
 & 
QORIQ_LAWAR_ENABLE
)

137 *
œwBARn
 = 
œwRegi°îTabÀ
[
œwIndex
][0];

138 *
œwARn
 = 
œwRegi°îTabÀ
[
œwIndex
][1];

139 
œwIndex
++;

140 i‡(
œwIndex
 < 
œwNum
)

141 
íåy
;

146 
	}
}

160 
LOCAL
 
	$c‹eLbcSë
 ()

164 * (
VINT32
 *Ë
	`M85XX_BR0
(
_CAG_CONFIG_CCSBAR
) = 0xEC001001;

165 * (
VINT32
 *Ë
	`M85XX_OR0
(
_CAG_CONFIG_CCSBAR
) = 0xFC000FF7;

169 * (
VINT32
 *Ë
	`M85XX_BR1
(
_CAG_CONFIG_CCSBAR
) = 0xFF601001;

170 * (
VINT32
 *Ë
	`M85XX_OR1
(
_CAG_CONFIG_CCSBAR
) = 0xFFF00C40;

174 * (
VINT32
 *Ë
	`M85XX_BR2
(
_CAG_CONFIG_CCSBAR
) = 0xFF701001;

175 * (
VINT32
 *Ë
	`M85XX_OR2
(
_CAG_CONFIG_CCSBAR
) = 0xFFF00FF6;

178 
	}
}

194 
	$sysHwInô
 ()

196 
	`c‹eLawB¨Së
();

197 
	`c‹eLbcSë
();

198 
	}
}

	@utility/shell.c

30 
	~<libc/ˇgboŸ.h
>

31 
	~<libc/°rög.h
>

32 
	~<libc/°dio.h
>

33 
	~<libc/shñl.h
>

34 
	~<libc/as£π.h
>

35 
	~<libc/˘y≥.h
>

36 
	~<libc/°ddef.h
>

37 
	~<c⁄fig.h
>

38 
	~<drv_c⁄fig.h
>

41 
fsCmdReg
();

43 
	#ETX
 0x3

	)

44 
	#BS
 0x8

	)

48 
	#SHELL_CMD_NAME_MAX_LEN
 10

	)

52 
	#SHELL_CMD_LEN
 256

	)

54 
bﬂrdRe£t
 ();

55 
ns16550I≈utCh¨
 ();

56 
ns16550OuçutCh¨
 (
c
);

57 
°πoul
(const *, **, );

59 
	gshñlBuf„r
[
SHELL_CMD_LEN
];

62 
	#CMD_HISTORY
 3

	)

63 
	gcmdHi°‹y
[
CMD_HISTORY
][
SHELL_CMD_LEN
];

64 
	gcmdNum
=0;

65 
	gcmdTmp
=0;

66 
	gcmdEndpos
=0;

68 
	gshñlCou¡îPos
;

69 
	gshñlCou¡î
;

70 
	gshñlCmdNameMaxLí
 = 0;

72 
shñlP¨£AndExecuã
();

76 
	#MAX_SHELL_CMD
 32

	)

77 c⁄° 
shñl_cmd
 * 
	g__shñl_cmds
[
MAX_SHELL_CMD
];

81 
hñp
(
¨gc
, * 
¨gv
[]);

82 
hexdump
(
¨gc
, * 
¨gv
[]);

83 
do_ª£t
(
¨gc
, * 
¨gv
[]);

84 
shñlProm±
();

85 
shñlInô
();

87 
shñl_cmd
 
	gcmd_hñp
 = {

88 .
«me
 = "help",

89 .
	ghñp
 = "print help message",

90 .
	gußge
 = "help <cmd> -Örint command usage, ifÖaramter <cmd> isÇull\n"\

92 .
	gh™dÀr
 = 
hñp


95 
shñl_cmd
 
	gcmd_hexdump
 = {

96 .
«me
 = "dump",

97 .
	ghñp
 = "displayáddress content",

98 .
	gußge
 = "dump <addr>,<num>,<width>",

99 .
	gh™dÀr
 = 
hexdump


102 
shñl_cmd
 
	gcmd_ª£t
 = {

103 .
«me
 = "reset",

104 .
	ghñp
 = "resetÅhe board",

105 .
	gußge
 = "call do_reset",

106 .
	gh™dÀr
 = 
do_ª£t


124 
	g¨row
[3]= {0};

125 
	g¨row_pos
 = 0;

127 
	$shñlGëCh¨
()

129 
tmp
 = ()
	`ns16550I≈utCh¨
();

132 i‡(
tmp
==0x1b) {

133 
	`mem£t
(
¨row
,0,(arrow));

134 
¨row
[0]=
tmp
;

135 
¨row_pos
=1;

137 } i‡(
¨row_pos
 =1 && 
tmp
==0x5b) {

138 
¨row
[1]=
tmp
;

139 
¨row_pos
=2;

141 } i‡(
¨row_pos
 =2 && (
tmp
 == 0x41||Åmp == 0x42 ||Åmp == 0x43||tmp == 0x44)) {

142 
	`mem£t
(
¨row
,0,(arrow));

143 
tmp
=tmp-0x41+0xfa;

145 
	`mem£t
(
¨row
,0,(arrow));

146 
¨row_pos
=0;

150 
tmpc
;

151 
tmp
) {

157 i‡(
shñlCou¡îPos
 < 
shñlCou¡î
) {

158 
tmpc
=
shñlBuf„r
[
shñlCou¡îPos
];

159 ()
	`ns16550OuçutCh¨
(
tmpc
);

160 
shñlCou¡îPos
++;

165 i‡(
shñlCou¡îPos
 > 0) {

166 
shñlCou¡îPos
 --;

167 ()
	`ns16550OuçutCh¨
('\b');

173 ()
	`ns16550OuçutCh¨
('\r');

174 ()
	`ns16550OuçutCh¨
('\n');

175 
shñlCou¡îPos
=0;

177 
BS
:

178 i‡(
shñlCou¡î
 > 0) {

179 
shñlCou¡î
--;

180 
shñlCou¡îPos
=
shñlCou¡î
;

181 
shñlBuf„r
[
shñlCou¡î
] = 0;

182 ()
	`ns16550OuçutCh¨
('\b');

183 ()
	`ns16550OuçutCh¨
(' ');

184 ()
	`ns16550OuçutCh¨
('\b');

187 
ETX
:

189 
shñlCou¡î
 = 0;

190 
shñlCou¡îPos
 = 0;

191 
shñlBuf„r
[0] = '\0';

192 ()
	`ns16550OuçutCh¨
('\n');

193 ()
	`ns16550OuçutCh¨
('\r');

196 i‡(
shñlCou¡î
 >(
SHELL_CMD_LEN
 - 1))

198 
shñlBuf„r
[
shñlCou¡î
] = 
tmp
;

199 
shñlCou¡î
++;

200 
shñlCou¡îPos
=
shñlCou¡î
;

202 ()
	`ns16550OuçutCh¨
(
tmp
);

205 
	}
}

220 
	$shñlGëLöe
()

222 
	`shñlGëCh¨
() != 1)

224 
	}
}

239 
	gshñlExec


241 
	g¨gc
,

242 *
	g¨gv
[]

245 
	gi
, 
	gªt
;

247 
	gi
 = 0; i < 
	gMAX_SHELL_CMD
; i++) {

248 c⁄° 
shñl_cmd
 *
	gc
 = 
__shñl_cmds
[
i
];

249 i‡(
	gc
 && !
°rcmp
(
¨gv
[0], 
c
->
«me
)) {

250 
	gªt
 = 
c
->
h™dÀr
(
¨gc
, 
¨gv
);

251 i‡(
	gªt
) {

252 ()
¥ötf
("îr‹Éxecutög comm™d: %s\n", 
¨gv
[0]);

258 i‡(
	gi
 =
MAX_SHELL_CMD
) {

259 ()
¥ötf
("övÆid comm™d %s\n", 
¨gv
[0]);

278 
	$shñlP¨£AndExecuã
()

280 
¨gc
;

281 *
cmd
, *
t
, *
s
, *
ss
;

282 *
¨gv
[32];

284 i‡(
shñlCou¡î
 <= 0)

287 
s
 = 
shñlBuf„r
;

288 (*
s
 !'\0'Ë&& (
	`is•a˚
(*s) || (*s == ';')))

289 
s
++;

291 i‡(*
s
 == '\0')

295 
ss
 = 
s
;

296 (*
s
 != '\0') && (*s != ';')) {

297 i‡(*
s
 == '"') {

298 ++
s
;

299 (*
s
 != '\0') && (*s != '"'))

300 
s
++;

301 i‡(*
s
 == '\0') {

302 ()
	`¥ötf
("unbalanced string quote\n");

306 
s
++;

309 i‡(*
s
 != '\0')

310 *
s
++ = '\0';

312 
cmd
 = 
ss
;

313 
¨gc
 = 0;;) {

314 (*
cmd
 !'\0'Ë&& (cmd < 
s
Ë&& 
	`is•a˚
(*cmd))

315 
cmd
++;

317 i‡((*
cmd
 ='\0'Ë|| cmd >
s
)

320 
t
 = 
cmd
;

321 (*
cmd
 !'\0'Ë&& !
	`is•a˚
(*cmdË&& (cmd < 
s
)) {

322 i‡(*
cmd
 == '"') {

323 
cmd
++;

324 (*
cmd
 != '\0') && (*cmd != '"'))

325 
cmd
++;

327 i‡(*
cmd
 == '\0') {

328 ()
	`¥ötf
("unbalanced string quote\n");

333 
cmd
++;

336 i‡(
	`is•a˚
(*
cmd
))

337 *
cmd
++ = '\0';

341 i‡(*
t
 == '"') {

342 *
t
++ = ' ';

343 
t
[
	`°æí
(t) - 1] = '\0';

346 
¨gv
[
¨gc
++] = 
t
;

349 i‡(
	`shñlExec
(
¨gc
, 
¨gv
) < 0)

352 i‡(*
s
 == '\0')

356 
	}
}

371 
	$shñlProm±
()

373 ()
	`¥ötf
(
_CAG_CONFIG_SHELL_PROMPT
);

374 
	}
}

389 
	$shñlInô
()

391 
shñlCou¡î
 = 0;

392 
	`mem£t
(
shñlBuf„r
, 0, 
SHELL_CMD_LEN
);

393 
	}
}

408 
	$shñlMaöLo›
()

411 
	`shñlInô
();

412 
	`shñlProm±
();

413 
	`shñlGëLöe
();

414 ()
	`shñlP¨£AndExecuã
();

416 
	}
}

431 
	gshñlCmdRegi°î


433 c⁄° 
shñl_cmd
 * 
	gcmd


436 
	gi
, 
	gÀn
;

438 i‡(
	gcmd
) {

439 
as£π
(
cmd
->
«me
);

440 
as£π
(
cmd
->
h™dÀr
);

442 
	gÀn
 = 
°æí
(
cmd
->
«me
);

443 i‡(
	gÀn
 > 
	gMAX_SHELL_CMD
) {

444 ()
¥ötf
("warnings - cmdÇameÜengthÉxceeds maximum: %s,ÅheállowedÜength is %u\n",

445 
cmd
->
«me
, 
SHELL_CMD_NAME_MAX_LEN
);

448 i‡(
	gÀn
 > 
	gshñlCmdNameMaxLí
)

449 
	gshñlCmdNameMaxLí
 = 
Àn
;

451 
	gi
 = 0; i < 
	gMAX_SHELL_CMD
; i++) {

452 i‡(
	g__shñl_cmds
[
i
] =
NULL
) {

453 
__shñl_cmds
[
i
] = 
cmd
;

458 ()
¥ötf
("warning - shell cmd %sÇotÑegistered\n",

459 
cmd
 =
NULL
 ? "NULL" : cmd->
«me
);

475 
	$do_ª£t
(
¨gc
, * 
¨gv
[])

477 
	`¥ötf
("\n$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ \n");

478 
	`¥ötf
("-> YouálreadyÑesetÅheÅarget by youself:)\n");

479 
	`¥ötf
("-> willÉnterÅhe U-BootÉnv\n");

480 
	`¥ötf
("$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$$ \n");

481 
	`bﬂrdRe£t
();

483 
	}
}

498 
	ghexdump


500 
	g¨gc
,

501 * 
	g¨gv
[]

504 
	gi
, 
	gj
;

505 *
	g£p
, *
	gcmd
, *
	g°¨t
, *
	gíd
;

506 
size_t
 
	gbyãs
;

508 *
	gaddr
 = 
NULL
;

509 
UINT32
 
	gnum
 = 32;

510 
UINT32
 
	gwidth
 = 4;

512 i‡(
	g¨gc
 >= 2) {

513 
cmd
 = 
°πok_r
(
¨gv
[1], ", ", &
£p
);

514 i‡(!
	gcmd
)

516 
	gaddr
 = (*)(
UINT32
)
°πoul
(
cmd
, 
NULL
, 16);

517 
	gcmd
 = 
°πok_r
(
NULL
, ", ", &
£p
);

518 i‡(
	gcmd
)

519 
	gnum
 = 
°πoul
(
cmd
, 
NULL
, 10);

521 
	gnum
 = 4;

522 
	gcmd
 = 
°πok_r
(
NULL
, ", ", &
£p
);

523 i‡(
	gcmd
)

524 
	gwidth
 = 
°πoul
(
cmd
, 
NULL
, 10);

526 
	gwidth
 = 1;

529 i‡(
	gaddr
 =
NULL
) {

530 ()()
¥ötf
("TryingÅoáccess NULL\n");

534 
	gwidth
) {

538 i‡((
UINT32
)
addr
 & 0x1)

542 i‡((
UINT32
)
addr
 & 0x3)

546 ()()
¥ötf
("Accepted with: 1, 2, 4\n");

550 
	gbyãs
 = 
num
 * 
width
;

551 
	g°¨t
 = (*)((
UINT32
)
addr
 &~ 15);

552 
	gíd
 = (*)(
UINT32
)
ROUND_UP
(((UINT32)((*)
addr
 + 
byãs
 )), 16);

553 
	gíd
 = (*)
addr
 + 
byãs
;

554 
	gbyãs
 = 
ROUND_UP
((
íd
 - 
°¨t
), 16);

556 i‡(
	gwidth
 == 1) {

557 
i
 = 0; 
	gi
 < 
	gbyãs
 / 16; i++) {

558 
	gcmd
 = 
°¨t
;

559 ()
¥ötf
("0x%x: ", 
°¨t
);

560 
	gj
 = 0; j < 16; j++) {

561 i‡(
	g°¨t
 < 
	gaddr
 || sèπ >
íd
)

562 ()
¥ötf
(" ");

564 ()
¥ötf
("%02x ", *(
UINT8
 *)
°¨t
);

565 
	g°¨t
 = 
__addªss_add_off£t
(
°¨t
, 1);

568 
	gj
 = 0; j < 16; j++) {

569 i‡(
	gcmd
 < 
	gaddr
 || cmd > 
	gíd
)

570 ()
¥ötf
(" ");

571 i‡(
i•röt
(*
cmd
))

572 ()
¥ötf
("%c", *
cmd
);

574 ()
¥ötf
(".");

575 
	gcmd
++;

577 ()
¥ötf
("\n");

579 } i‡(
	gwidth
 == 2) {

580 
i
 = 0; 
	gi
 < 
	gbyãs
 / 16; i++) {

581 
	gcmd
 = 
°¨t
;

582 ()
¥ötf
("0x%x: ", 
°¨t
);

583 
	gj
 = 0; j < 8; j++) {

584 i‡(
	g°¨t
 < 
	gaddr
 || sèπ >
íd
)

585 ()
¥ötf
(" ");

587 ()
¥ötf
("%04x ", *(
UINT16
 *)
°¨t
);

588 
	g°¨t
 = 
__addªss_add_off£t
(
°¨t
, 2);

591 
	gj
 = 0; j < 16; j++) {

592 i‡(
	gcmd
 < 
	gaddr
 || cmd > 
	gíd
)

593 ()
¥ötf
(" ");

594 i‡(
i•röt
(*
cmd
))

595 ()
¥ötf
("%c", *
cmd
);

597 ()
¥ötf
(".");

598 
	gcmd
++;

600 ()
¥ötf
("\n");

603 
	gi
 = 0; i < 
	gbyãs
 / 16; i++) {

604 
	gcmd
 = 
°¨t
;

605 ()
¥ötf
("0x%x: ", 
°¨t
);

606 
	gj
 = 0; j < 4; j++) {

607 i‡(
	g°¨t
 < 
	gaddr
 || sèπ >
íd
)

608 ()
¥ötf
(" ");

610 ()
¥ötf
("%08x ", *(
UINT32
 *)
°¨t
);

611 
	g°¨t
 = 
__addªss_add_off£t
(
°¨t
, 4);

614 
	gj
 = 0; j < 16; j++) {

615 i‡(
	gcmd
 < 
	gaddr
 || cmd > 
	gíd
)

616 ()
¥ötf
(" ");

617 i‡(
i•röt
(*
cmd
))

618 ()
¥ötf
("%c", *
cmd
);

620 ()
¥ötf
(".");

621 
	gcmd
++;

623 ()
¥ötf
("\n");

627 
	gaddr
 = 
__addªss_add_off£t
(
addr
, 
num
 * 
width
);

645 
	ghñp


647 
	g¨gc
,

648 * 
	g¨gv
[]

651 
	gi
, 
	gj
, 
	gÀn
;

652 * 
	gcmd
 = 
NULL
;

654 i‡(
	g¨gc
 >= 2)

655 
cmd
 = 
¨gv
[1];

657 i‡(!
	gcmd
) {

658 
	gi
 = 0; i < 
	gMAX_SHELL_CMD
; i++) {

659 i‡(
	g__shñl_cmds
[
i
]) {

660 
	gÀn
 = ()
°æí
(
__shñl_cmds
[
i
]->
«me
);

661 
	gj
 = 
shñlCmdNameMaxLí
 - 
Àn
;

662 
	gj
-- > 0)

663 ()
ns16550OuçutCh¨
(' ');

665 ()
¥ötf
("->?%†- %s\n", 
__shñl_cmds
[
i
]->
«me
,

666 
__shñl_cmds
[
i
]->
hñp
 =
NULL
 ? "NULL" :

667 
__shñl_cmds
[
i
]->
hñp
);

671 
	gi
 = 0; i < 
	gMAX_SHELL_CMD
; i++) {

672 i‡(
	g__shñl_cmds
[
i
] && 
°rcmp
(
cmd
, 
__shñl_cmds
[i]->
«me
) == 0) {

673 i‡(
__shñl_cmds
[
i
]->
ußge
)

674 ()
¥ötf
("%s\n", 
__shñl_cmds
[
i
]->
ußge
);

678 i‡(
	gi
 >
MAX_SHELL_CMD
)

679 ()
¥ötf
("Unknow¿comm™d: %s\n", 
cmd
);

697 
shñl_cmd
 
cmd_Ÿ
;

698 
	$u§Shñl
()

700 
	`shñlCmdRegi°î
(&
cmd_hñp
);

701 
	`shñlCmdRegi°î
(&
cmd_hexdump
);

702 
	`shñlCmdRegi°î
(&
cmd_ª£t
);

704 
	`shñlCmdRegi°î
(&
cmd_ru¡ime
);

705 
	`shñlCmdRegi°î
(&
cmd_èsk
);

708 #ifde‡
CONFIG_FS


709 
	`fsCmdReg
();

711 #ifde‡
CONFIG_TEST


712 
	`shñlCmdRegi°î
(&
cmd_Ÿ
);

715 
	`shñlMaöLo›
();

716 
	}
}

	@
1
.
0
178
4037
arch/bALib.S
arch/sysAmpDemo.c
arch/sysAtomicALib.S
arch/sysCacheE500ALib.S
arch/sysCacheE500Lib.c
arch/sysCacheExt.S
arch/sysCpuE500ALib.S
arch/sysCpuE500Lib.c
arch/sysE500Tlb.S
arch/sysExcArchALib.S
arch/sysExcArchLib.c
arch/sysExcLib.c
arch/sysExcLib.h
arch/sysSpeExcLib.c
arch/sysSpeVectorALib.S
cagos.h
config.h
demo/cmbus_demo.c
demo/demo.c
demo/demo.h
demo/demo_cmd.c
demo/dfs_demo.c
demo/dma_demo.c
demo/fsf_demo.c
demo/iic_demo.c
demo/mq_demo.c
demo/mt_demo.c
demo/nor_demo.c
demo/oscheck.c
demo/pcie_demo.c
demo/pmbus_demo.c
demo/sem_demo.c
demo/sffs_demo.c
demo/spi_demo.c
demo/task_demo.c
demo/task_sem_demo.c
driver/bus/cmbus.c
driver/bus/cmbus.h
driver/bus/ipbus.c
driver/bus/ipbus.h
driver/bus/pmbus.c
driver/bus/pmbus.h
driver/device/dfs/dfs.c
driver/device/dfs/dfs.h
driver/device/dma/fsl_dma.c
driver/device/dma/fsl_dma.h
driver/device/duart/duart.c
driver/device/duart/duart.h
driver/device/fpga/fpga.c
driver/device/fpga/fpga.h
driver/device/norflash/S29GLxxxP.h
driver/device/norflash/lld.c
driver/device/norflash/lld.h
driver/device/norflash/lld_target_specific.h
driver/device/pcie/pcie.c
driver/device/pcie/pcie.h
driver/device/spiflash/sf.c
driver/device/spiflash/sf.h
driver/fs/bits.c
driver/fs/bits.h
driver/fs/fs_api.c
driver/fs/fs_api.h
driver/fs/sffs/sffs.c
driver/fs/sffs/sffs.h
driver/hw_init.c
driver/libc/stdio/ns16550.c
driver/libc/stdio/printk.c
driver/libc/stdio/vsprintf.c
driver/libc/stdlib/abort.c
driver/libc/stdlib/abs.c
driver/libc/stdlib/atof.c
driver/libc/stdlib/atoi.c
driver/libc/stdlib/atol.c
driver/libc/stdlib/heap.c
driver/libc/stdlib/qsort.c
driver/libc/stdlib/rand.c
driver/libc/stdlib/rand.h
driver/libc/stdlib/random.c
driver/libc/stdlib/random_r.c
driver/libc/stdlib/strtod.c
driver/libc/stdlib/strtol.c
driver/libc/stdlib/strtoul.c
driver/libc/string/bLib.c
driver/libc/string/memchr.c
driver/libc/string/memcmp.c
driver/libc/string/memcpy.c
driver/libc/string/memmove.c
driver/libc/string/memset.c
driver/libc/string/puts.c
driver/libc/string/strcat.c
driver/libc/string/strchr.c
driver/libc/string/strcmp.c
driver/libc/string/strcpy.c
driver/libc/string/strlcat.c
driver/libc/string/strlcpy.c
driver/libc/string/strlen.c
driver/libc/string/strncat.c
driver/libc/string/strncmp.c
driver/libc/string/strncpy.c
driver/libc/string/strpbrk.c
driver/libc/string/strspn.c
driver/libc/string/strtok.c
driver/libc/string/strtok_r.c
driver/update/device_defs.h
driver/update/spi.c
driver/update/spi.h
driver/update/update.c
driver/update/update.h
drv_config.h
include/kernel/sysApi.h
include/kernel/sysCore.h
include/kernel/sysCpu.h
include/kernel/sysDef.h
include/kernel/sysHook.h
include/kernel/sysMap.h
include/kernel/sysOs.h
include/kernel/sysOsConf.h
include/kernel/sysOsTimer.h
include/kernel/sysOsType.h
include/kernel/sysPic.h
include/libc/access.h
include/libc/assert.h
include/libc/cagboot.h
include/libc/compiler.h
include/libc/ctype.h
include/libc/errno.h
include/libc/gpio.h
include/libc/math.h
include/libc/printk.h
include/libc/rand.h
include/libc/shell.h
include/libc/stdarg.h
include/libc/stddef.h
include/libc/stdio.h
include/libc/string.h
include/libc/system.h
include/p1020rdb.h
include/ppc/archPpc.h
include/ppc/asmPpc.h
include/ppc/excPpcLib.h
include/ppc/io.h
include/ppc/mmuE500Lib.h
include/ppc/ppc85xx.h
include/ppc/spePpcLib.h
include/ppc/sysAtomic.h
include/ppc/toolPpc.h
kernel/epic/sysInt.c
kernel/epic/sysPic.c
kernel/ports/sysCount.c
kernel/ports/sysEntry.c
kernel/ports/sysHook.c
kernel/ports/sysOsIrq.S
kernel/ports/sysOsSwitchALib.S
kernel/ports/sysOsSwitchLib.c
kernel/thread/sysApi.c
kernel/thread/sysCfg.c
kernel/thread/sysCore.c
kernel/thread/sysMsg.c
kernel/thread/sysMutex.c
kernel/thread/sysPrio.c
kernel/thread/sysQueue.c
kernel/thread/sysSem.c
kernel/thread/sysTask.c
kernel/thread/sysTick.c
kernel/thread/sysTime.c
kernel/timers/sysDec.c
kernel/timers/sysTbl.c
logh.h
start/sysAccess.S
start/sysBanner.c
start/sysBoard.c
start/sysCpuALib.S
start/sysCpuLib.c
start/sysGpio.c
start/sysL2Cache.c
start/sysL2Cache.h
start/sysLaw.c
utility/shell.c
